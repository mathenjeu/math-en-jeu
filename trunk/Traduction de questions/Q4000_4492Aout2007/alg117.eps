%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 20 118 575 673
%%Creator: FreeHEP Graphics2D Driver
%%Producer: com.maplesoft.mathdoc.view.plot.paint.PlotPSGraphics2D Revision: 1.20 
%%For: 
%%Title: 
%%CreationDate: mercredi 13 juin 2007 11 h 50 EDT
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Draw a line. (x0 y0 x1 y1 line)
/L {bias n m l S unbias} def

% Polyline primitive.
/polyline  {n m 1 exch 1 exch
           {pop currentfile token pop currentfile token pop l} for
           } def

% Draw a polyline (n x0 y0 OPL x1 y1 x2 y2 ... ... xn yn)
/OPL {bias polyline S unbias} def

% Draw a closed polyline (n x0 y0 CPL x1 y1 x2 y2 ... ... xn yn)
/CPL {bias polyline s unbias} def

% Draw a filled polyline (n x0 y0 FPL x1 y1 x2 y2 ... ... xn yn)
/FPL {polyline h f*} def

% Draw an oval. (x y w h OVL)
/OVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width currentlinewidth sub 2 div
      height currentlinewidth sub 2 div neg
      scale n 0 0 1 5 -2 roll arc
      smatrix setmatrix S} def

% Draw a filled oval. (x y w h FOVL)
/FOVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width 2 div
      height 2 div neg
      scale n 0 0 m 0 0 1 5 -2 roll arc
      h smatrix setmatrix f} def

% Draw a rounded rectangle. (x y w h arcwidth archeight RREC)
/RREC {matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      s} def

% Draw a filled rounded rectangle. (x y w h arcwidth archeight FRREC)
/FRREC{matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      h f} def

% Draw a string.  (string x y STR)
/STR {q m 1 -1 scale recshow Q} def

% Define basic plot symbols.
/xys   {/siz exch def /yv exch def /xv exch def} def
/hline {xys n xv siz 2. div sub yv m siz 0 rlineto S} def
/vline {xys n xv yv siz 2. div sub m 0 siz rlineto S} def
/plus  {xys n xv yv siz 2. div sub m 0 siz rlineto
                    xv siz 2. div sub yv m siz 0 rlineto S} def
/dot   {n 2. div 0 360 arc s} def
/fdot  {n 2. div 0 360 arc h f} def
/box   {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                    siz 2 sqrt div dup rs} def
/fbox  {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                       siz 2 sqrt div dup rf} def
/tridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto s} def
/ftridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto h f} def

% Symbols defined in terms of the others.
/star     {3 copy cross plus} def
/cross    {xys q xv yv translate 45 rotate 0 0 siz plus Q} def
/diamond  {xys q xv yv translate 45 rotate 0 0 siz box Q} def
/fdiamond {xys q xv yv translate 45 rotate 0 0 siz fbox Q} def
/triup    {xys q xv yv translate 180 rotate 0 0 siz tridn Q} def
/ftriup   {xys q xv yv translate 180 rotate 0 0 siz ftridn Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Helvetica 16#00 vg&newcompositefont
/DialogInput-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
595 791 setpagesize
20 20 20 20 setmargins
0 0 setorigin
400 400 setsize
fittopage
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0.0 0.0 0.0 RG
[ 1.0 0.0 0.0 1.0 0.0 0.0 ] defaultmatrix matrix concatmatrix setmatrix
1.0 w
2 J
0 j
10.0 M
[ ] 0.0 d
1.0 1.0 1.0 RG
0.0 0.0 400.0 400.0 rf
0.0 0.0 0.0 RG
0 J
1 j
0.0 0.0 translate
0.0 0.0 translate
q
5.0 5.0 translate
0 0 390 390 rc
2 J
0 j
q
0.647059 0.647059 0.647059 RG
Q
q
0.647059 0.647059 0.647059 RG
Q
0 J
1 j
q
q
0.0 0.0 1.0 RG
4.0 3.005195 379.987091 382.994812 rc
4 4 386 FPL
4 4
383 4
383 386
4 386
newpath
0.0 0.0 m
0.0 390.0 l
390.0 390.0 l
390.0 0.0 l
h
W
Q
q
1.0 1.0 1.0 RG
4.0 3.005195 379.987091 382.994812 rc
349.0 4.0 34.0 382.0 rf
2 4 219 FPL
4 4
159 4
2 4 386 FPL
4 52
165 386
4.0 362.0 379.0 24.0 rf
2 142 4 FPL
383 4
383 171
newpath
0.0 0.0 m
0.0 390.0 l
390.0 390.0 l
390.0 0.0 l
h
W
Q
q
3.0 w
1.0 0.0 0.0 RG
1.0 0.005195 385.987091 388.994812 rc
19 67 402 OPL
75 380
83 357
91 337
99 314
107 292
115 270
122 250
131 226
138 206
146 183
154 162
162 139
170 118
178 95
185 75
193 52
202 29
209 9
217 -13
newpath
0.0 0.0 m
0.0 390.0 l
390.0 390.0 l
390.0 0.0 l
h
W
Q
q
3.0 w
1.0 0.005195 385.987091 388.994812 rc
1 349 386 OPL
349 4
1 4 219 OPL
159 4
1 165 386 OPL
4 52
1 4 362 OPL
383 362
1 142 4 OPL
383 171
newpath
0.0 0.0 m
0.0 390.0 l
390.0 390.0 l
390.0 0.0 l
h
W
Q
Q
q
2 J
0 j
q
1 349 219 OPL
349 221
1 280 219 OPL
280 221
1 211 219 OPL
211 221
1 142 219 OPL
142 221
1 73 219 OPL
73 221
1 4 219 OPL
4 221
1 4 219 OPL
383 219
Q
0.0 0.0 translate
q
[ 1.0 0.0 0.0 1.0 0.0 0.0 ] concat
q
270 248 19 21 rc
274.0 266.0 moveto
q 1 -1 scale
9 dict begin
/FontType 3 def
/FontMatrix [0.0010 0 0 0.0010 0 0]def
/FontBBox [0 -213 1628 950 ] def
	/Encoding 256 array def
			0 1 255 {Encoding exch /.notdef put}for
		Encoding 32 /space put
		Encoding 33 /exclam put
		Encoding 34 /quotedbl put
		Encoding 35 /numbersign put
		Encoding 36 /dollar put
		Encoding 37 /percent put
		Encoding 38 /ampersand put
		Encoding 39 /quoteright put
		Encoding 40 /parenleft put
		Encoding 41 /parenright put
		Encoding 42 /asterisk put
		Encoding 43 /plus put
		Encoding 44 /comma put
		Encoding 45 /hyphen put
		Encoding 46 /period put
		Encoding 47 /slash put
		Encoding 48 /zero put
		Encoding 49 /one put
		Encoding 50 /two put
		Encoding 51 /three put
		Encoding 52 /four put
		Encoding 53 /five put
		Encoding 54 /six put
		Encoding 55 /seven put
		Encoding 56 /eight put
		Encoding 57 /nine put
		Encoding 58 /colon put
		Encoding 59 /semicolon put
		Encoding 60 /less put
		Encoding 61 /equal put
		Encoding 62 /greater put
		Encoding 63 /question put
		Encoding 64 /at put
		Encoding 65 /A put
		Encoding 66 /B put
		Encoding 67 /C put
		Encoding 68 /D put
		Encoding 69 /E put
		Encoding 70 /F put
		Encoding 71 /G put
		Encoding 72 /H put
		Encoding 73 /I put
		Encoding 74 /J put
		Encoding 75 /K put
		Encoding 76 /L put
		Encoding 77 /M put
		Encoding 78 /N put
		Encoding 79 /O put
		Encoding 80 /P put
		Encoding 81 /Q put
		Encoding 82 /R put
		Encoding 83 /S put
		Encoding 84 /T put
		Encoding 85 /U put
		Encoding 86 /V put
		Encoding 87 /W put
		Encoding 88 /X put
		Encoding 89 /Y put
		Encoding 90 /Z put
		Encoding 91 /bracketleft put
		Encoding 92 /backslash put
		Encoding 93 /bracketright put
		Encoding 94 /asciicircum put
		Encoding 95 /underscore put
		Encoding 96 /quoteleft put
		Encoding 97 /a put
		Encoding 98 /b put
		Encoding 99 /c put
		Encoding 100 /d put
		Encoding 101 /e put
		Encoding 102 /f put
		Encoding 103 /g put
		Encoding 104 /h put
		Encoding 105 /i put
		Encoding 106 /j put
		Encoding 107 /k put
		Encoding 108 /l put
		Encoding 109 /m put
		Encoding 110 /n put
		Encoding 111 /o put
		Encoding 112 /p put
		Encoding 113 /q put
		Encoding 114 /r put
		Encoding 115 /s put
		Encoding 116 /t put
		Encoding 117 /u put
		Encoding 118 /v put
		Encoding 119 /w put
		Encoding 120 /x put
		Encoding 121 /y put
		Encoding 122 /z put
		Encoding 123 /braceleft put
		Encoding 124 /bar put
		Encoding 125 /braceright put
		Encoding 126 /asciitilde put
		Encoding 161 /exclamdown put
		Encoding 162 /cent put
		Encoding 163 /sterling put
		Encoding 164 /fraction put
		Encoding 165 /yen put
		Encoding 166 /florin put
		Encoding 167 /section put
		Encoding 168 /currency put
		Encoding 169 /quotesingle put
		Encoding 170 /quotedblleft put
		Encoding 171 /guillemotleft put
		Encoding 172 /guilsinglleft put
		Encoding 173 /guilsinglright put
		Encoding 174 /fi put
		Encoding 175 /fl put
		Encoding 177 /endash put
		Encoding 178 /dagger put
		Encoding 179 /daggerdbl put
		Encoding 180 /periodcentered put
		Encoding 182 /paragraph put
		Encoding 183 /bullet put
		Encoding 184 /quotesinglbase put
		Encoding 185 /quotedblbase put
		Encoding 186 /quotedblright put
		Encoding 187 /guillemotright put
		Encoding 188 /ellipsis put
		Encoding 189 /perthousand put
		Encoding 191 /questiondown put
		Encoding 193 /grave put
		Encoding 194 /acute put
		Encoding 195 /circumflex put
		Encoding 196 /tilde put
		Encoding 197 /macron put
		Encoding 198 /breve put
		Encoding 199 /dotaccent put
		Encoding 200 /dieresis put
		Encoding 202 /ring put
		Encoding 203 /cedilla put
		Encoding 205 /hungarumlaut put
		Encoding 206 /ogonek put
		Encoding 207 /caron put
		Encoding 208 /emdash put
		Encoding 225 /AE put
		Encoding 227 /ordfeminine put
		Encoding 232 /Lslash put
		Encoding 233 /Oslash put
		Encoding 234 /OE put
		Encoding 235 /ordmasculine put
		Encoding 241 /ae put
		Encoding 245 /dotlessi put
		Encoding 248 /lslash put
		Encoding 249 /oslash put
		Encoding 250 /oe put
		Encoding 251 /germandbls put
	/BuildGlyph
		{ 2 copy exch /Metrics get exch 
			2 copy known {get}{pop pop 1000.0} ifelse
			0
			0 -213 1628 950
			setcachedevice
			exch /CharProcs get exch
			2 copy known not
					{pop /.notdef}
				if
			get exec
		} bind def

	/BuildChar
		{ 1 index /Encoding get exch get
		  1 index /BuildGlyph get exec
	  } bind def
	/Metrics 150 dict def
		Metrics begin
		/.notdef 1000 def
		/space 316.40625 def
		/exclam 316.40625 def
		/quotedbl 373.53515625 def
		/numbersign 632.32421875 def
		/dollar 632.32421875 def
		/percent 668.45703125 def
		/ampersand 697.265625 def
		/quoteright 229.00390625 def
		/parenleft 325.1953125 def
		/parenright 325.1953125 def
		/asterisk 481.93359375 def
		/plus 794.921875 def
		/comma 316.40625 def
		/hyphen 578.61328125 def
		/period 316.40625 def
		/slash 524.4140625 def
		/zero 632.32421875 def
		/one 632.32421875 def
		/two 632.32421875 def
		/three 632.32421875 def
		/four 632.32421875 def
		/five 632.32421875 def
		/six 632.32421875 def
		/seven 632.32421875 def
		/eight 632.32421875 def
		/nine 632.32421875 def
		/colon 316.40625 def
		/semicolon 316.40625 def
		/less 794.921875 def
		/equal 794.921875 def
		/greater 794.921875 def
		/question 421.875 def
		/at 858.3984375 def
		/A 689.94140625 def
		/B 575.1953125 def
		/C 691.89453125 def
		/D 749.0234375 def
		/E 541.9921875 def
		/F 536.1328125 def
		/G 722.65625 def
		/H 734.86328125 def
		/I 288.0859375 def
		/J 311.03515625 def
		/K 652.83203125 def
		/L 533.203125 def
		/M 861.328125 def
		/N 738.76953125 def
		/O 776.85546875 def
		/P 552.734375 def
		/Q 776.85546875 def
		/R 632.32421875 def
		/S 538.57421875 def
		/T 632.32421875 def
		/U 692.87109375 def
		/V 653.80859375 def
		/W 855.46875 def
		/X 625.9765625 def
		/Y 623.046875 def
		/Z 604.4921875 def
		/bracketleft 325.1953125 def
		/backslash 524.4140625 def
		/bracketright 325.1953125 def
		/asciicircum 632.32421875 def
		/underscore 500.0 def
		/quoteleft 614.2578125 def
		/a 552.24609375 def
		/b 629.39453125 def
		/c 512.20703125 def
		/d 629.39453125 def
		/e 557.12890625 def
		/f 367.67578125 def
		/g 623.53515625 def
		/h 620.60546875 def
		/i 289.0625 def
		/j 304.19921875 def
		/k 584.47265625 def
		/l 289.0625 def
		/m 933.59375 def
		/n 620.60546875 def
		/o 614.2578125 def
		/p 629.39453125 def
		/q 629.39453125 def
		/r 409.1796875 def
		/s 509.765625 def
		/t 374.0234375 def
		/u 620.60546875 def
		/v 517.578125 def
		/w 770.5078125 def
		/x 613.28125 def
		/y 522.4609375 def
		/z 573.2421875 def
		/braceleft 325.1953125 def
		/bar 373.53515625 def
		/braceright 325.1953125 def
		/asciitilde 632.32421875 def
		/exclamdown 316.40625 def
		/cent 632.32421875 def
		/sterling 632.32421875 def
		/fraction 0.0 def
		/yen 632.32421875 def
		/florin 632.32421875 def
		/section 632.32421875 def
		/currency 632.8125 def
		/quotesingle 229.00390625 def
		/quotedblleft 397.4609375 def
		/guillemotleft 523.92578125 def
		/guilsinglleft 331.54296875 def
		/guilsinglright 331.54296875 def
		/fi 644.53125 def
		/fl 647.4609375 def
		/endash 578.61328125 def
		/dagger 632.32421875 def
		/daggerdbl 632.32421875 def
		/periodcentered 316.40625 def
		/paragraph 632.32421875 def
		/bullet 608.3984375 def
		/quotesinglbase 316.40625 def
		/quotedblbase 397.4609375 def
		/quotedblright 397.4609375 def
		/guillemotright 523.92578125 def
		/ellipsis 1000.0 def
		/perthousand 1012.20703125 def
		/questiondown 421.875 def
		/grave 614.2578125 def
		/acute 614.2578125 def
		/circumflex 614.2578125 def
		/tilde 614.2578125 def
		/macron 500.0 def
		/breve 614.2578125 def
		/dotaccent 614.2578125 def
		/dieresis 614.2578125 def
		/ring 614.2578125 def
		/cedilla 614.2578125 def
		/hungarumlaut 505.859375 def
		/ogonek 614.2578125 def
		/caron 614.2578125 def
		/emdash 578.61328125 def
		/AE 906.73828125 def
		/ordfeminine 469.7265625 def
		/Lslash 548.33984375 def
		/Oslash 776.85546875 def
		/OE 1000.0 def
		/ordmasculine 469.7265625 def
		/ae 851.07421875 def
		/dotlessi 289.0625 def
		/lslash 328.125 def
		/oslash 614.2578125 def
		/oe 928.22265625 def
		/germandbls 598.14453125 def
	end
	/CharProcs 150 dict def
	CharProcs begin
			%define Glyph dictionary and start filling
	/space
		{
fill
		} def

	/exclam
		{
109 0 moveto
126 96 lineto
222 96 lineto
206 0 lineto
109 0 lineto
closepath
155 192 moveto
211 578 lineto
236 722 lineto
332 722 lineto
307 578 lineto
228 192 lineto
155 192 lineto
closepath
fill
		} def

	/quotedbl
		{
159 530 moveto
189 771 lineto
285 771 lineto
231 530 lineto
159 530 lineto
closepath
327 530 moveto
357 771 lineto
454 771 lineto
399 530 lineto
327 530 lineto
closepath
fill
		} def

	/numbersign
		{
99 0 moveto
191 216 lineto
45 216 lineto
68 277 lineto
216 277 lineto
288 445 lineto
130 445 lineto
153 505 lineto
314 505 lineto
406 722 lineto
468 722 lineto
376 505 lineto
505 505 lineto
597 722 lineto
659 722 lineto
567 505 lineto
713 505 lineto
691 445 lineto
541 445 lineto
469 277 lineto
628 277 lineto
605 216 lineto
444 216 lineto
352 0 lineto
290 0 lineto
382 216 lineto
253 216 lineto
161 0 lineto
99 0 lineto
closepath
279 277 moveto
407 277 lineto
479 445 lineto
350 445 lineto
279 277 lineto
closepath
fill
		} def

	/dollar
		{
287 -60 moveto
298 0 lineto
241 0 179 13 112 40  curveto
127 123 lineto
194 89 255 72 310 72  curveto
356 331 lineto
297 371 258 407 239 438  curveto
220 469 215 506 222 549  curveto
231 597 253 637 290 669  curveto
327 700 372 718 424 722  curveto
435 783 lineto
483 783 lineto
472 722 lineto
520 722 570 711 623 689  curveto
609 611 lineto
552 638 502 653 461 656  curveto
416 399 lineto
431 388 443 380 451 375  curveto
495 345 525 317 539 293  curveto
553 269 556 238 550 202  curveto
541 151 518 107 482 71  curveto
445 34 400 11 346 0  curveto
335 -60 lineto
287 -60 lineto
closepath
359 78 moveto
419 98 454 134 463 187  curveto
467 211 465 230 457 244  curveto
449 259 429 279 399 303  curveto
359 78 lineto
closepath
373 431 moveto
412 653 lineto
351 635 316 601 307 551  curveto
303 526 305 505 314 489  curveto
323 472 343 452 373 431  curveto
closepath
fill
		} def

	/percent
		{
8 -18 moveto
710 740 lineto
785 740 lineto
84 -18 lineto
8 -18 lineto
closepath
220 361 moveto
174 361 140 377 118 410  curveto
97 443 91 487 100 542  curveto
110 597 131 641 165 674  curveto
198 706 238 722 286 722  curveto
333 722 367 706 389 674  curveto
411 641 417 597 408 542  curveto
398 486 376 442 343 409  curveto
309 377 268 361 220 361  curveto
closepath
230 409 moveto
285 409 320 454 335 542  curveto
342 583 341 614 330 638  curveto
320 662 302 674 277 674  curveto
252 674 230 662 211 638  curveto
193 614 180 582 173 542  curveto
166 502 167 469 178 445  curveto
188 421 205 409 230 409  curveto
closepath
506 0 moveto
460 0 426 16 405 49  curveto
383 81 377 125 387 180  curveto
396 236 418 279 451 312  curveto
485 345 525 361 572 361  curveto
618 361 653 345 675 312  curveto
697 280 704 236 694 181  curveto
684 125 662 80 629 48  curveto
596 16 555 0 506 0  curveto
closepath
516 48 moveto
571 48 606 92 622 181  curveto
629 221 627 253 616 277  curveto
606 301 588 313 563 313  curveto
538 313 517 301 498 277  curveto
479 253 466 221 459 180  curveto
452 140 453 108 464 84  curveto
474 60 491 48 516 48  curveto
closepath
fill
		} def

	/ampersand
		{
518 0 moveto
489 42 lineto
429 2 363 -18 292 -18  curveto
216 -18 158 3 117 47  curveto
76 91 61 147 73 214  curveto
93 326 165 401 289 441  curveto
267 500 259 549 266 588  curveto
274 631 297 667 336 696  curveto
375 725 419 740 468 740  curveto
514 740 551 726 576 699  curveto
602 671 611 637 604 594  curveto
591 522 527 459 412 406  curveto
445 320 488 240 539 165  curveto
576 208 602 269 616 348  curveto
621 384 lineto
717 384 lineto
698 277 650 185 573 107  curveto
596 70 623 34 654 0  curveto
518 0 lineto
closepath
457 98 moveto
404 182 355 277 312 384  curveto
231 354 185 305 174 238  curveto
165 187 174 143 203 107  curveto
231 72 270 54 320 54  curveto
365 54 411 69 457 98  curveto
closepath
387 467 moveto
462 498 504 540 513 593  curveto
522 643 501 668 451 668  curveto
401 668 372 643 363 592  curveto
358 559 366 517 387 467  curveto
closepath
fill
		} def

	/quoteright
		{
166 505 moveto
189 771 lineto
309 771 lineto
238 505 lineto
166 505 lineto
closepath
fill
		} def

	/parenleft
		{
275 -78 moveto
263 -144 lineto
201 -96 157 -31 130 50  curveto
103 132 98 220 114 313  curveto
131 406 167 493 222 575  curveto
278 658 345 723 423 771  curveto
412 704 lineto
355 652 311 596 280 536  curveto
249 476 226 402 211 313  curveto
195 224 192 149 202 89  curveto
212 29 236 -26 275 -78  curveto
closepath
fill
		} def

	/parenright
		{
22 -78 moveto
10 -144 lineto
89 -96 156 -31 212 50  curveto
267 132 303 220 319 313  curveto
336 406 330 493 303 575  curveto
277 658 232 723 170 771  curveto
159 704 lineto
197 652 222 596 232 536  curveto
242 476 239 402 223 313  curveto
207 224 184 149 153 89  curveto
123 29 79 -26 22 -78  curveto
closepath
fill
		} def

	/asterisk
		{
516 629 moveto
526 560 lineto
372 528 lineto
374 531 375 534 375 535  curveto
377 548 374 559 367 568  curveto
516 629 lineto
closepath
451 409 moveto
384 366 lineto
331 497 lineto
348 499 360 507 369 521  curveto
451 409 lineto
closepath
225 366 moveto
174 409 lineto
294 521 lineto
298 507 308 499 324 497  curveto
225 366 lineto
closepath
151 560 moveto
186 629 lineto
314 568 lineto
303 560 296 549 294 535  curveto
294 534 294 531 294 528  curveto
151 560 lineto
closepath
331 722 moveto
403 722 lineto
362 572 lineto
357 575 350 577 342 577  curveto
334 577 326 575 320 572  curveto
331 722 lineto
closepath
fill
		} def

	/plus
		{
361 0 moveto
405 252 lineto
152 252 lineto
165 325 lineto
418 325 lineto
462 578 lineto
534 578 lineto
490 325 lineto
743 325 lineto
730 252 lineto
477 252 lineto
433 0 lineto
361 0 lineto
closepath
fill
		} def

	/comma
		{
70 -156 moveto
76 -120 lineto
109 -111 131 -74 142 -9  curveto
144 0 lineto
97 0 lineto
118 120 lineto
239 120 lineto
221 16 lineto
202 -90 152 -148 70 -156  curveto
closepath
fill
		} def

	/hyphen
		{
116 252 moveto
129 325 lineto
562 325 lineto
550 252 lineto
116 252 lineto
closepath
fill
		} def

	/period
		{
97 0 moveto
118 120 lineto
239 120 lineto
218 0 lineto
97 0 lineto
closepath
fill
		} def

	/slash
		{
68 -144 moveto
480 722 lineto
556 722 lineto
144 -144 lineto
68 -144 lineto
closepath
fill
		} def

	/zero
		{
310 -18 moveto
235 -18 181 17 147 87  curveto
114 157 107 248 126 361  curveto
146 475 185 567 244 636  curveto
303 706 370 740 446 740  curveto
521 740 576 706 611 636  curveto
645 567 652 476 632 363  curveto
612 247 573 154 514 85  curveto
456 16 388 -18 310 -18  curveto
closepath
323 54 moveto
425 54 494 157 531 364  curveto
566 567 533 668 433 668  curveto
333 668 265 566 229 361  curveto
193 156 224 54 323 54  curveto
closepath
fill
		} def

	/one
		{
150 0 moveto
163 72 lineto
307 72 lineto
407 642 lineto
256 606 lineto
269 680 lineto
521 740 lineto
404 72 lineto
548 72 lineto
536 0 lineto
150 0 lineto
closepath
fill
		} def

	/two
		{
83 0 moveto
97 84 lineto
137 149 206 221 305 298  curveto
368 347 lineto
451 411 497 475 508 538  curveto
515 578 509 610 489 633  curveto
468 656 437 668 395 668  curveto
345 668 282 649 207 610  curveto
222 695 lineto
292 725 358 740 421 740  curveto
489 740 540 722 575 686  curveto
609 649 621 601 611 541  curveto
603 497 586 459 560 425  curveto
533 392 487 351 423 303  curveto
380 271 lineto
292 206 236 144 214 84  curveto
527 84 lineto
513 0 lineto
83 0 lineto
closepath
fill
		} def

	/three
		{
102 5 moveto
118 95 lineto
182 67 234 54 274 54  curveto
320 54 359 67 393 94  curveto
426 121 447 156 454 198  curveto
472 300 410 351 267 351  curveto
229 351 lineto
241 416 lineto
275 416 lineto
408 416 483 463 499 557  curveto
512 631 475 668 387 668  curveto
339 668 283 654 221 627  curveto
235 711 lineto
296 731 353 740 406 740  curveto
554 740 618 684 599 573  curveto
584 488 523 427 416 391  curveto
528 364 575 300 557 200  curveto
546 132 514 78 462 40  curveto
410 1 345 -18 267 -18  curveto
222 -18 167 -10 102 5  curveto
closepath
fill
		} def

	/four
		{
376 0 moveto
412 204 lineto
87 204 lineto
99 277 lineto
502 722 lineto
593 722 lineto
516 283 lineto
613 283 lineto
599 204 lineto
502 204 lineto
466 0 lineto
376 0 lineto
closepath
195 283 moveto
432 283 lineto
488 604 lineto
195 283 lineto
closepath
fill
		} def

	/five
		{
121 -2 moveto
136 83 lineto
180 63 224 54 267 54  curveto
315 54 355 68 387 96  curveto
419 124 439 162 448 211  curveto
467 320 401 374 252 374  curveto
235 374 217 373 198 371  curveto
260 722 lineto
625 722 lineto
611 638 lineto
330 638 lineto
296 448 lineto
389 448 458 426 502 384  curveto
547 341 563 282 549 207  curveto
537 136 504 81 449 41  curveto
395 1 326 -18 242 -18  curveto
205 -18 165 -13 121 -2  curveto
closepath
fill
		} def

	/six
		{
237 374 moveto
293 434 356 463 426 463  curveto
489 463 537 442 570 401  curveto
603 359 614 305 602 240  curveto
589 165 556 103 502 54  curveto
448 6 387 -18 318 -18  curveto
238 -18 181 14 147 78  curveto
114 142 107 231 127 345  curveto
149 470 192 567 255 637  curveto
319 706 398 741 492 741  curveto
535 741 587 732 648 713  curveto
633 629 lineto
570 655 516 668 473 668  curveto
350 668 271 570 237 374  curveto
closepath
502 218 moveto
511 273 506 316 487 347  curveto
468 378 437 394 393 394  curveto
353 394 315 380 281 353  curveto
247 326 227 293 220 254  curveto
209 194 215 145 236 109  curveto
258 72 291 54 337 54  curveto
378 54 414 69 444 98  curveto
474 128 493 168 502 218  curveto
closepath
fill
		} def

	/seven
		{
150 0 moveto
169 56 191 104 216 145  curveto
240 187 281 243 338 314  curveto
591 632 lineto
219 632 lineto
234 722 lineto
698 722 lineto
682 632 lineto
449 359 309 148 261 0  curveto
150 0 lineto
closepath
fill
		} def

	/eight
		{
298 393 moveto
236 442 211 497 221 556  curveto
231 611 258 655 304 689  curveto
350 724 406 741 470 741  curveto
530 741 575 726 607 697  curveto
639 668 651 631 643 584  curveto
631 514 575 451 475 393  curveto
574 340 617 271 602 187  curveto
591 126 560 77 508 39  curveto
455 0 393 -18 321 -18  curveto
250 -18 195 0 158 35  curveto
120 71 107 119 117 177  curveto
132 264 193 336 298 393  curveto
closepath
426 423 moveto
501 468 544 517 553 571  curveto
558 600 551 624 532 641  curveto
512 659 484 668 448 668  curveto
412 668 382 659 357 642  curveto
331 624 316 602 312 574  curveto
307 547 313 523 329 502  curveto
345 480 378 454 426 423  curveto
closepath
344 354 moveto
300 324 269 298 251 276  curveto
233 253 222 226 216 192  curveto
209 151 216 118 238 92  curveto
261 66 293 54 337 54  curveto
379 54 415 65 446 86  curveto
476 108 494 137 500 171  curveto
505 199 501 223 488 242  curveto
475 262 447 285 405 313  curveto
344 354 lineto
closepath
fill
		} def

	/nine
		{
114 4 moveto
128 85 lineto
186 64 236 54 279 54  curveto
339 54 390 79 433 130  curveto
475 181 505 252 521 343  curveto
461 283 400 252 338 252  curveto
277 252 230 275 195 320  curveto
161 364 149 419 160 483  curveto
173 557 207 619 260 667  curveto
314 716 375 740 443 740  curveto
522 740 578 709 612 646  curveto
646 583 654 497 635 387  curveto
613 263 568 164 500 91  curveto
432 18 351 -18 257 -18  curveto
219 -18 172 -10 114 4  curveto
closepath
260 502 moveto
250 446 255 402 274 370  curveto
293 338 325 322 368 322  curveto
409 322 446 336 479 363  curveto
513 391 533 424 540 463  curveto
551 525 546 574 524 612  curveto
503 650 470 668 425 668  curveto
383 668 347 654 317 624  curveto
288 594 269 554 260 502  curveto
closepath
fill
		} def

	/colon
		{
109 0 moveto
126 96 lineto
222 96 lineto
206 0 lineto
109 0 lineto
closepath
185 433 moveto
202 530 lineto
298 530 lineto
281 433 lineto
185 433 lineto
closepath
fill
		} def

	/semicolon
		{
82 -156 moveto
88 -120 lineto
113 -108 131 -72 142 -11  curveto
144 0 lineto
109 0 lineto
126 96 lineto
222 96 lineto
208 15 lineto
191 -83 149 -140 82 -156  curveto
closepath
185 433 moveto
202 530 lineto
298 530 lineto
281 433 lineto
185 433 lineto
closepath
fill
		} def

	/less
		{
686 0 moveto
158 289 lineto
787 578 lineto
773 497 lineto
320 289 lineto
700 81 lineto
686 0 lineto
closepath
fill
		} def

	/equal
		{
136 162 moveto
149 234 lineto
727 234 lineto
714 162 lineto
136 162 lineto
closepath
168 343 moveto
181 415 lineto
759 415 lineto
746 343 lineto
168 343 lineto
closepath
fill
		} def

	/greater
		{
108 0 moveto
737 289 lineto
209 578 lineto
195 497 lineto
575 289 lineto
122 81 lineto
108 0 lineto
closepath
fill
		} def

	/question
		{
122 0 moveto
138 96 lineto
235 96 lineto
218 0 lineto
122 0 lineto
closepath
155 192 moveto
160 219 lineto
171 281 205 339 262 394  curveto
299 430 lineto
361 488 395 536 401 574  curveto
406 603 399 626 380 643  curveto
360 659 331 668 293 668  curveto
243 668 188 656 128 632  curveto
142 713 lineto
206 732 264 741 316 741  curveto
383 741 433 726 467 696  curveto
500 666 513 626 504 575  curveto
499 547 489 522 474 501  curveto
459 481 433 455 396 425  curveto
361 396 lineto
326 368 302 344 289 324  curveto
276 305 267 279 261 246  curveto
252 192 lineto
155 192 lineto
closepath
fill
		} def

	/at
		{
537 21 moveto
474 -4 414 -18 358 -18  curveto
266 -18 196 10 146 66  curveto
96 123 79 194 94 281  curveto
113 391 171 492 266 583  curveto
317 632 375 670 440 698  curveto
506 726 569 740 631 740  curveto
722 740 793 711 844 652  curveto
895 594 913 521 898 434  curveto
884 353 847 285 788 229  curveto
729 172 664 144 594 144  curveto
540 144 516 163 523 200  curveto
525 214 532 231 542 251  curveto
572 313 lineto
567 313 lineto
488 200 415 144 348 144  curveto
285 144 260 180 273 252  curveto
281 299 301 348 334 400  curveto
366 452 402 493 442 523  curveto
488 557 536 575 586 575  curveto
596 575 608 574 624 573  curveto
640 572 652 572 662 572  curveto
729 572 lineto
613 261 lineto
609 251 606 241 604 231  curveto
601 209 611 198 636 198  curveto
679 198 722 221 764 268  curveto
806 314 832 367 842 426  curveto
855 501 840 563 797 612  curveto
754 662 693 687 614 687  curveto
511 687 412 646 318 565  curveto
224 483 168 391 149 286  curveto
136 213 151 152 193 106  curveto
235 59 296 36 375 36  curveto
426 36 477 47 528 71  curveto
537 21 lineto
closepath
595 406 moveto
630 501 lineto
602 512 577 518 555 518  curveto
509 518 467 494 428 448  curveto
389 401 364 343 352 273  curveto
344 227 353 204 380 204  curveto
400 204 429 222 468 259  curveto
507 296 549 345 595 406  curveto
closepath
fill
		} def

	/A
		{
507 276 moveto
439 587 lineto
261 276 lineto
507 276 lineto
closepath
567 0 moveto
524 200 lineto
218 200 lineto
103 0 lineto
8 0 lineto
421 722 lineto
522 722 lineto
678 0 lineto
567 0 lineto
closepath
fill
		} def

	/B
		{
93 0 moveto
219 722 lineto
407 722 lineto
479 722 532 708 566 681  curveto
600 654 612 614 603 563  curveto
588 475 527 413 422 376  curveto
534 340 581 275 565 180  curveto
555 122 527 77 483 46  curveto
438 15 379 0 306 0  curveto
93 0 lineto
closepath
208 76 moveto
229 76 lineto
304 76 353 81 377 90  curveto
423 108 450 141 458 190  curveto
466 233 453 269 419 297  curveto
386 326 340 340 283 340  curveto
254 340 lineto
208 76 lineto
closepath
265 405 moveto
298 405 lineto
353 405 397 417 431 440  curveto
466 463 486 496 494 539  curveto
506 610 457 646 347 646  curveto
307 646 lineto
265 405 lineto
closepath
fill
		} def

	/C
		{
399 -18 moveto
287 -18 206 14 156 80  curveto
107 146 92 240 113 360  curveto
135 481 182 574 256 641  curveto
330 707 424 740 537 740  curveto
602 740 676 730 759 708  curveto
742 612 lineto
649 646 576 664 522 664  curveto
444 664 378 637 326 584  curveto
274 531 239 456 222 359  curveto
206 267 216 195 253 141  curveto
289 88 347 62 427 62  curveto
495 62 572 83 658 125  curveto
642 37 lineto
565 0 483 -18 399 -18  curveto
closepath
fill
		} def

	/D
		{
93 0 moveto
219 722 lineto
459 722 lineto
531 722 588 714 629 698  curveto
670 682 704 655 729 617  curveto
770 557 781 477 764 378  curveto
743 258 695 165 620 99  curveto
545 33 450 0 334 0  curveto
93 0 lineto
closepath
209 76 moveto
340 76 lineto
434 76 505 101 553 152  curveto
604 206 638 278 653 368  curveto
668 453 659 520 626 568  curveto
607 598 580 618 547 629  curveto
514 640 463 646 393 646  curveto
308 646 lineto
209 76 lineto
closepath
fill
		} def

	/E
		{
93 0 moveto
219 722 lineto
623 722 lineto
610 646 lineto
308 646 lineto
268 414 lineto
520 414 lineto
507 338 lineto
255 338 lineto
209 76 lineto
531 76 lineto
518 0 lineto
93 0 lineto
closepath
fill
		} def

	/F
		{
93 0 moveto
219 722 lineto
623 722 lineto
610 646 lineto
308 646 lineto
266 403 lineto
519 403 lineto
506 328 lineto
253 328 lineto
195 0 lineto
93 0 lineto
closepath
fill
		} def

	/G
		{
639 19 moveto
547 -5 469 -18 404 -18  curveto
289 -18 206 14 156 80  curveto
106 145 92 239 114 361  curveto
134 481 182 574 256 640  curveto
330 707 423 740 535 740  curveto
608 740 683 729 759 708  curveto
742 613 lineto
648 647 575 664 522 664  curveto
444 664 379 637 326 584  curveto
274 531 239 456 222 360  curveto
206 264 216 190 253 137  curveto
290 85 350 58 433 58  curveto
467 58 505 64 547 76  curveto
588 312 lineto
690 312 lineto
639 19 lineto
closepath
fill
		} def

	/H
		{
93 0 moveto
219 722 lineto
322 722 lineto
268 417 lineto
612 417 lineto
666 722 lineto
768 722 lineto
642 0 lineto
539 0 lineto
599 341 lineto
255 341 lineto
195 0 lineto
93 0 lineto
closepath
fill
		} def

	/I
		{
92 0 moveto
219 722 lineto
321 722 lineto
195 0 lineto
92 0 lineto
closepath
fill
		} def

	/J
		{
-113 -134 moveto
-97 -43 lineto
-60 -56 -27 -62 2 -62  curveto
41 -62 71 -51 90 -29  curveto
109 -6 124 32 134 87  curveto
245 722 lineto
347 722 lineto
237 91 lineto
209 -65 121 -144 -27 -144  curveto
-50 -144 -78 -141 -113 -134  curveto
closepath
fill
		} def

	/K
		{
93 0 moveto
219 722 lineto
315 722 lineto
253 367 lineto
608 722 lineto
711 722 lineto
367 377 lineto
635 0 lineto
505 0 lineto
253 366 lineto
189 0 lineto
93 0 lineto
closepath
fill
		} def

	/L
		{
93 0 moveto
219 722 lineto
322 722 lineto
209 76 lineto
534 76 lineto
521 0 lineto
93 0 lineto
closepath
fill
		} def

	/M
		{
93 0 moveto
219 722 lineto
361 722 lineto
464 163 lineto
768 722 lineto
895 722 lineto
768 0 lineto
672 0 lineto
775 587 lineto
482 48 lineto
382 48 lineto
284 589 lineto
181 0 lineto
93 0 lineto
closepath
fill
		} def

	/N
		{
93 0 moveto
219 722 lineto
320 722 lineto
586 164 lineto
684 722 lineto
771 722 lineto
645 0 lineto
545 0 lineto
278 558 lineto
181 0 lineto
93 0 lineto
closepath
fill
		} def

	/O
		{
381 -18 moveto
280 -18 206 16 157 86  curveto
108 155 94 247 114 361  curveto
134 476 180 568 254 637  curveto
327 706 415 740 518 740  curveto
620 740 696 706 745 637  curveto
795 569 810 477 790 362  curveto
769 245 722 153 649 84  curveto
575 16 486 -18 381 -18  curveto
closepath
396 58 moveto
469 58 531 85 581 138  curveto
631 191 664 266 681 363  curveto
697 457 690 531 659 584  curveto
627 637 576 664 504 664  curveto
432 664 372 637 322 584  curveto
272 531 239 457 223 362  curveto
206 267 213 193 244 139  curveto
274 85 325 58 396 58  curveto
closepath
fill
		} def

	/P
		{
93 0 moveto
219 722 lineto
416 722 lineto
503 722 563 707 596 678  curveto
629 649 640 600 628 533  curveto
615 456 578 396 518 352  curveto
459 308 382 287 290 287  curveto
245 287 lineto
194 0 lineto
93 0 lineto
closepath
258 364 moveto
300 364 lineto
361 364 410 378 448 406  curveto
486 434 510 474 519 525  curveto
526 568 519 599 496 618  curveto
473 636 431 646 370 646  curveto
307 646 lineto
258 364 lineto
closepath
fill
		} def

	/Q
		{
709 -144 moveto
602 -107 514 -63 446 -13  curveto
415 -16 391 -18 375 -18  curveto
278 -18 205 17 157 87  curveto
108 157 94 249 114 361  curveto
134 476 180 568 254 637  curveto
327 706 415 740 518 740  curveto
621 740 697 706 746 637  curveto
795 568 809 475 789 359  curveto
760 193 678 78 544 15  curveto
620 -21 702 -47 788 -62  curveto
709 -144 lineto
closepath
396 58 moveto
469 58 531 85 581 138  curveto
630 191 664 266 681 363  curveto
697 457 690 531 659 584  curveto
628 637 576 664 504 664  curveto
432 664 372 637 322 584  curveto
272 531 239 457 223 362  curveto
206 267 213 193 244 139  curveto
274 85 325 58 396 58  curveto
closepath
fill
		} def

	/R
		{
93 0 moveto
219 722 lineto
438 722 lineto
507 722 558 707 589 676  curveto
621 646 632 601 621 543  curveto
605 447 544 378 440 338  curveto
622 0 lineto
496 0 lineto
344 305 lineto
248 305 lineto
194 0 lineto
93 0 lineto
closepath
261 382 moveto
294 382 lineto
423 382 497 432 514 534  curveto
527 608 480 646 372 646  curveto
307 646 lineto
261 382 lineto
closepath
fill
		} def

	/S
		{
231 -18 moveto
183 -18 123 -7 51 13  curveto
69 115 lineto
143 77 207 58 259 58  curveto
300 58 334 69 362 90  curveto
391 111 408 139 414 173  curveto
419 202 415 226 402 246  curveto
390 265 364 288 325 312  curveto
280 341 lineto
225 376 187 409 167 440  curveto
147 471 141 507 148 549  curveto
158 604 186 650 233 686  curveto
280 722 334 740 397 740  curveto
452 740 510 731 568 712  curveto
552 619 lineto
481 649 427 664 389 664  curveto
354 664 323 654 296 635  curveto
270 616 254 593 249 564  curveto
245 540 250 519 263 500  curveto
277 481 304 459 345 434  curveto
391 404 lineto
447 369 485 335 504 304  curveto
524 272 529 234 522 190  curveto
511 127 479 77 426 39  curveto
372 0 308 -18 231 -18  curveto
closepath
fill
		} def

	/T
		{
265 0 moveto
378 646 lineto
121 646 lineto
135 722 lineto
750 722 lineto
737 646 lineto
480 646 lineto
367 0 lineto
265 0 lineto
closepath
fill
		} def

	/U
		{
213 722 moveto
316 722 lineto
236 266 lineto
223 194 228 141 249 108  curveto
270 75 310 58 368 58  curveto
425 58 469 74 498 105  curveto
528 136 549 188 562 263  curveto
642 722 lineto
732 722 lineto
652 264 lineto
635 166 602 94 553 49  curveto
505 4 436 -18 348 -18  curveto
258 -18 195 5 160 51  curveto
126 98 117 170 134 267  curveto
213 722 lineto
closepath
fill
		} def

	/V
		{
290 0 moveto
144 722 lineto
246 722 lineto
366 130 lineto
686 722 lineto
775 722 lineto
387 0 lineto
290 0 lineto
closepath
fill
		} def

	/W
		{
187 0 moveto
127 722 lineto
226 722 lineto
274 151 lineto
510 722 lineto
608 722 lineto
639 159 lineto
896 722 lineto
980 722 lineto
651 0 lineto
549 0 lineto
519 557 lineto
288 0 lineto
187 0 lineto
closepath
fill
		} def

	/X
		{
7 0 moveto
311 362 lineto
146 722 lineto
267 722 lineto
393 450 lineto
623 722 lineto
720 722 lineto
428 373 lineto
599 0 lineto
478 0 lineto
345 286 lineto
104 0 lineto
7 0 lineto
closepath
fill
		} def

	/Y
		{
249 0 moveto
302 301 lineto
134 722 lineto
251 722 lineto
382 396 lineto
641 722 lineto
736 722 lineto
405 303 lineto
352 0 lineto
249 0 lineto
closepath
fill
		} def

	/Z
		{
46 0 moveto
60 82 lineto
547 646 lineto
183 646 lineto
196 722 lineto
684 722 lineto
670 646 lineto
183 82 lineto
571 82 lineto
557 0 lineto
46 0 lineto
closepath
fill
		} def

	/bracketleft
		{
70 -144 moveto
231 771 lineto
423 771 lineto
411 698 lineto
302 698 lineto
168 -72 lineto
276 -72 lineto
263 -144 lineto
70 -144 lineto
closepath
fill
		} def

	/backslash
		{
404 -144 moveto
295 722 lineto
220 722 lineto
328 -144 lineto
404 -144 lineto
closepath
fill
		} def

	/bracketright
		{
203 -144 moveto
363 771 lineto
170 771 lineto
158 698 lineto
266 698 lineto
131 -72 lineto
23 -72 lineto
10 -144 lineto
203 -144 lineto
closepath
fill
		} def

	/asciicircum
		{
414 561 moveto
166 192 lineto
85 192 lineto
442 722 lineto
615 192 lineto
534 192 lineto
414 561 lineto
closepath
fill
		} def

	/underscore
		{
29 -72 moveto
42 0 lineto
457 0 lineto
444 -72 lineto
29 -72 lineto
closepath
fill
		} def

	/quoteleft
		{
531 626 moveto
459 626 lineto
329 783 lineto
441 783 lineto
531 626 lineto
closepath
fill
		} def

	/a
		{
381 67 moveto
314 14 254 -12 201 -12  curveto
157 -12 122 1 98 29  curveto
74 56 66 91 73 133  curveto
83 191 115 235 169 266  curveto
224 297 296 313 387 313  curveto
410 313 lineto
421 377 lineto
432 438 406 469 342 469  curveto
292 469 234 454 170 422  curveto
184 502 lineto
253 528 316 542 373 542  curveto
432 542 473 528 497 501  curveto
520 475 527 433 517 377  curveto
475 137 lineto
466 82 478 54 512 54  curveto
516 54 522 55 530 56  curveto
528 3 lineto
504 -6 479 -12 453 -12  curveto
408 -12 384 14 381 67  curveto
closepath
376 119 moveto
400 256 lineto
368 257 lineto
315 257 271 247 235 227  curveto
199 207 178 181 172 148  curveto
168 125 173 106 186 90  curveto
200 74 218 66 242 66  curveto
282 66 326 84 376 119  curveto
closepath
fill
		} def

	/b
		{
95 -5 moveto
231 771 lineto
327 771 lineto
267 430 lineto
320 504 385 542 464 542  curveto
528 542 574 518 602 472  curveto
631 425 638 361 624 281  curveto
609 193 575 122 524 68  curveto
474 14 414 -12 347 -12  curveto
284 -12 236 11 202 60  curveto
179 -5 lineto
95 -5 lineto
closepath
214 126 moveto
256 82 299 60 344 60  curveto
436 60 495 130 520 271  curveto
541 395 511 458 429 458  curveto
376 458 318 428 257 370  curveto
214 126 lineto
closepath
fill
		} def

	/c
		{
301 -12 moveto
229 -12 174 14 136 67  curveto
98 120 86 187 101 268  curveto
116 354 151 421 206 469  curveto
261 517 331 542 414 542  curveto
456 542 501 536 550 524  curveto
536 444 lineto
484 460 441 468 407 468  curveto
358 468 315 449 279 412  curveto
243 375 219 326 209 265  curveto
198 205 205 157 229 120  curveto
253 83 290 65 340 65  curveto
384 65 431 76 481 99  curveto
467 16 lineto
401 -2 346 -12 301 -12  curveto
closepath
fill
		} def

	/d
		{
436 0 moveto
453 99 lineto
401 25 336 -12 257 -12  curveto
193 -12 147 11 119 57  curveto
90 104 83 167 97 248  curveto
113 336 146 407 197 461  curveto
248 515 307 542 375 542  curveto
437 542 485 517 518 469  curveto
571 771 lineto
668 771 lineto
533 0 lineto
436 0 lineto
closepath
507 403 moveto
465 447 421 469 377 469  curveto
285 469 226 399 201 258  curveto
180 134 210 72 292 72  curveto
345 72 403 101 464 159  curveto
507 403 lineto
closepath
fill
		} def

	/e
		{
487 17 moveto
419 -2 363 -12 317 -12  curveto
239 -12 179 13 139 65  curveto
99 117 86 184 101 267  curveto
115 347 148 413 200 465  curveto
253 516 313 542 381 542  curveto
445 542 490 519 517 474  curveto
544 428 550 363 536 279  curveto
530 250 lineto
196 250 lineto
188 124 238 61 348 61  curveto
388 61 439 71 501 93  curveto
487 17 lineto
closepath
213 322 moveto
447 322 lineto
464 420 436 470 362 470  curveto
288 470 238 420 213 322  curveto
closepath
fill
		} def

	/f
		{
291 458 moveto
210 0 lineto
114 0 lineto
194 458 lineto
119 458 lineto
131 530 lineto
207 530 lineto
218 593 lineto
240 720 308 783 424 783  curveto
456 783 492 777 531 767  curveto
517 690 lineto
476 704 443 710 417 710  curveto
385 710 362 703 348 688  curveto
334 673 323 645 316 604  curveto
303 530 lineto
436 530 lineto
423 458 lineto
291 458 lineto
closepath
fill
		} def

	/g
		{
67 -176 moveto
93 -92 lineto
144 -119 196 -132 250 -132  curveto
359 -132 423 -74 443 40  curveto
458 123 lineto
409 49 344 12 263 12  curveto
200 12 153 35 124 81  curveto
95 127 87 190 101 268  curveto
115 349 148 415 199 465  curveto
251 516 310 542 378 542  curveto
437 542 484 517 518 469  curveto
529 530 lineto
626 530 lineto
558 144 lineto
543 61 528 0 513 -39  curveto
497 -79 475 -112 447 -137  curveto
397 -182 328 -204 240 -204  curveto
178 -204 120 -195 67 -176  curveto
closepath
468 183 moveto
507 403 lineto
472 447 430 469 380 469  curveto
336 469 298 451 267 416  curveto
235 381 214 332 204 270  curveto
183 154 214 96 296 96  curveto
351 96 409 125 468 183  curveto
closepath
fill
		} def

	/h
		{
96 0 moveto
231 771 lineto
327 771 lineto
267 430 lineto
331 504 400 542 473 542  curveto
519 542 553 527 575 498  curveto
598 469 605 430 596 380  curveto
529 0 lineto
433 0 lineto
494 349 lineto
501 388 500 417 492 433  curveto
483 450 465 458 439 458  curveto
380 458 318 420 252 343  curveto
192 0 lineto
96 0 lineto
closepath
fill
		} def

	/i
		{
96 0 moveto
188 530 lineto
285 530 lineto
192 0 lineto
96 0 lineto
closepath
205 626 moveto
222 722 lineto
318 722 lineto
302 626 lineto
205 626 lineto
closepath
fill
		} def

	/j
		{
-106 -180 moveto
-93 -104 lineto
-51 -122 -19 -132 4 -132  curveto
38 -132 62 -123 76 -105  curveto
90 -88 102 -53 111 0  curveto
204 530 lineto
300 530 lineto
208 0 lineto
184 -136 114 -204 0 -204  curveto
-34 -204 -70 -196 -106 -180  curveto
closepath
220 626 moveto
237 722 lineto
334 722 lineto
317 626 lineto
220 626 lineto
closepath
fill
		} def

	/k
		{
96 0 moveto
231 771 lineto
327 771 lineto
240 272 lineto
509 530 lineto
613 530 lineto
355 282 lineto
564 0 lineto
441 0 lineto
239 271 lineto
192 0 lineto
96 0 lineto
closepath
fill
		} def

	/l
		{
96 0 moveto
231 771 lineto
327 771 lineto
192 0 lineto
96 0 lineto
closepath
fill
		} def

	/m
		{
96 0 moveto
188 530 lineto
285 530 lineto
267 430 lineto
327 504 394 542 467 542  curveto
538 542 580 504 593 430  curveto
652 505 717 542 790 542  curveto
837 542 871 528 892 501  curveto
913 473 919 435 910 385  curveto
843 0 lineto
746 0 lineto
811 370 lineto
822 431 803 461 755 461  curveto
705 461 647 426 580 355  curveto
518 0 lineto
421 0 lineto
486 370 lineto
496 431 477 461 428 461  curveto
380 461 322 426 254 355  curveto
192 0 lineto
96 0 lineto
closepath
fill
		} def

	/n
		{
96 0 moveto
188 530 lineto
285 530 lineto
267 430 lineto
331 504 400 542 473 542  curveto
519 542 553 527 575 498  curveto
598 469 605 430 596 380  curveto
529 0 lineto
433 0 lineto
494 349 lineto
501 388 500 417 492 433  curveto
483 450 465 458 439 458  curveto
380 458 318 420 252 343  curveto
192 0 lineto
96 0 lineto
closepath
fill
		} def

	/o
		{
301 -12 moveto
225 -12 169 12 133 63  curveto
96 113 85 180 100 265  curveto
115 350 150 417 204 467  curveto
258 517 324 542 401 542  curveto
479 542 537 517 573 467  curveto
610 417 621 350 606 266  curveto
591 179 556 111 502 62  curveto
448 12 381 -12 301 -12  curveto
closepath
315 60 moveto
417 60 480 128 504 266  curveto
528 401 489 469 389 469  curveto
289 469 227 401 203 265  curveto
179 128 216 60 315 60  curveto
closepath
fill
		} def

	/p
		{
62 -192 moveto
188 530 lineto
285 530 lineto
267 430 lineto
320 504 385 542 464 542  curveto
528 542 574 518 602 472  curveto
631 425 638 361 624 281  curveto
609 193 575 122 524 68  curveto
474 14 414 -12 347 -12  curveto
284 -12 236 11 202 60  curveto
158 -192 lineto
62 -192 lineto
closepath
214 126 moveto
256 82 299 60 344 60  curveto
436 60 495 130 520 271  curveto
541 395 511 458 429 458  curveto
376 458 318 428 257 370  curveto
214 126 lineto
closepath
fill
		} def

	/q
		{
402 -192 moveto
453 99 lineto
401 25 336 -12 257 -12  curveto
193 -12 147 11 119 57  curveto
90 104 83 167 97 248  curveto
113 336 146 407 197 461  curveto
248 515 307 542 375 542  curveto
437 542 485 517 518 469  curveto
529 530 lineto
626 530 lineto
499 -192 lineto
402 -192 lineto
closepath
507 403 moveto
465 447 421 469 377 469  curveto
285 469 226 399 201 258  curveto
180 134 210 72 292 72  curveto
345 72 403 101 464 159  curveto
507 403 lineto
closepath
fill
		} def

	/r
		{
96 0 moveto
188 530 lineto
285 530 lineto
267 430 lineto
318 504 380 542 453 542  curveto
463 542 473 541 483 539  curveto
467 449 lineto
452 455 438 458 425 458  curveto
364 458 307 421 253 349  curveto
192 0 lineto
96 0 lineto
closepath
fill
		} def

	/s
		{
234 -12 moveto
190 -12 139 -1 79 18  curveto
95 106 lineto
152 75 204 60 251 60  curveto
278 60 303 67 324 82  curveto
344 97 357 116 361 138  curveto
366 171 346 198 298 220  curveto
246 244 lineto
169 278 137 328 148 393  curveto
156 439 179 475 216 502  curveto
253 528 301 542 358 542  curveto
387 542 423 537 465 529  curveto
485 525 lineto
471 445 lineto
420 461 378 469 347 469  curveto
285 469 250 447 242 402  curveto
237 373 256 348 300 329  curveto
343 309 lineto
391 287 424 264 442 239  curveto
459 214 465 184 458 147  curveto
450 100 425 62 383 32  curveto
341 2 291 -12 234 -12  curveto
closepath
fill
		} def

	/t
		{
253 -12 moveto
204 -12 168 1 146 29  curveto
123 57 117 96 125 146  curveto
180 458 lineto
113 458 lineto
126 530 lineto
192 530 lineto
209 626 lineto
307 635 lineto
289 530 lineto
427 530 lineto
415 458 lineto
276 458 lineto
225 164 lineto
212 94 236 60 296 60  curveto
309 60 325 62 344 66  curveto
332 0 lineto
301 -8 275 -12 253 -12  curveto
closepath
fill
		} def

	/u
		{
427 0 moveto
445 99 lineto
381 25 312 -12 239 -12  curveto
193 -12 159 2 136 31  curveto
114 60 107 99 116 149  curveto
183 530 lineto
279 530 lineto
218 180 lineto
211 140 212 112 220 95  curveto
229 79 247 70 274 70  curveto
332 70 394 109 460 186  curveto
520 530 lineto
616 530 lineto
523 0 lineto
427 0 lineto
closepath
fill
		} def

	/v
		{
206 0 moveto
101 530 lineto
197 530 lineto
279 117 lineto
514 530 lineto
604 530 lineto
302 0 lineto
206 0 lineto
closepath
fill
		} def

	/w
		{
157 0 moveto
98 530 lineto
192 530 lineto
237 119 lineto
434 530 lineto
530 530 lineto
568 119 lineto
773 530 lineto
856 530 lineto
590 0 lineto
494 0 lineto
453 410 lineto
254 0 lineto
157 0 lineto
closepath
fill
		} def

	/x
		{
42 0 moveto
292 273 lineto
141 530 lineto
255 530 lineto
374 326 lineto
550 530 lineto
644 530 lineto
413 261 lineto
567 0 lineto
453 0 lineto
330 209 lineto
139 0 lineto
42 0 lineto
closepath
fill
		} def

	/y
		{
93 -192 moveto
212 0 lineto
100 530 lineto
204 530 lineto
286 130 lineto
518 530 lineto
609 530 lineto
193 -192 lineto
93 -192 lineto
closepath
fill
		} def

	/z
		{
60 0 moveto
72 72 lineto
468 458 lineto
155 458 lineto
168 530 lineto
599 530 lineto
587 458 lineto
191 72 lineto
525 72 lineto
513 0 lineto
60 0 lineto
closepath
fill
		} def

	/braceleft
		{
73 349 moveto
97 349 lineto
146 349 176 375 185 428  curveto
189 450 190 473 189 496  curveto
188 539 lineto
186 567 188 594 193 621  curveto
200 664 222 699 258 726  curveto
293 752 339 767 394 771  curveto
381 698 lineto
367 698 lineto
345 698 326 692 309 681  curveto
292 669 283 655 280 638  curveto
278 630 278 614 278 591  curveto
277 542 lineto
277 520 275 494 269 465  curveto
259 404 226 353 171 313  curveto
212 272 227 221 216 160  curveto
211 131 205 105 197 84  curveto
180 34 lineto
172 11 167 -4 166 -12  curveto
163 -29 168 -43 181 -54  curveto
193 -66 211 -72 232 -72  curveto
246 -72 lineto
234 -144 lineto
179 -141 139 -126 113 -99  curveto
87 -72 77 -37 85 5  curveto
90 32 98 59 109 87  curveto
125 129 lineto
134 153 141 176 145 199  curveto
154 251 134 277 84 277  curveto
60 277 lineto
73 349 lineto
closepath
fill
		} def

	/bar
		{
125 -144 moveto
285 771 lineto
357 771 lineto
197 -144 lineto
125 -144 lineto
closepath
fill
		} def

	/braceright
		{
374 349 moveto
351 349 lineto
301 349 281 375 290 428  curveto
294 450 300 473 309 496  curveto
326 539 lineto
337 567 345 594 350 621  curveto
357 664 348 699 321 726  curveto
295 752 255 767 201 771  curveto
189 698 lineto
202 698 lineto
224 698 242 692 254 681  curveto
267 669 272 655 269 638  curveto
267 630 263 614 254 591  curveto
237 542 lineto
230 520 224 494 218 465  curveto
208 404 223 353 264 313  curveto
209 272 176 221 165 160  curveto
160 131 157 105 157 84  curveto
157 34 lineto
157 11 156 -4 155 -12  curveto
152 -29 142 -43 125 -54  curveto
108 -66 89 -72 67 -72  curveto
54 -72 lineto
41 -144 lineto
96 -141 142 -126 177 -99  curveto
213 -72 234 -37 242 5  curveto
247 32 248 59 247 87  curveto
245 129 lineto
244 153 246 176 250 199  curveto
259 251 288 277 338 277  curveto
362 277 lineto
374 349 lineto
closepath
fill
		} def

	/asciitilde
		{
89 216 moveto
97 263 116 302 147 332  curveto
177 362 212 377 252 377  curveto
278 377 311 365 351 342  curveto
398 315 lineto
455 281 lineto
468 274 482 271 497 271  curveto
537 271 561 301 572 361  curveto
644 361 lineto
618 252 565 198 484 198  curveto
456 198 419 211 373 237  curveto
323 266 lineto
271 296 lineto
260 302 249 305 237 305  curveto
197 305 171 275 161 216  curveto
89 216 lineto
closepath
fill
		} def

	/exclamdown
		{
298 530 moveto
281 433 lineto
185 433 lineto
202 530 lineto
298 530 lineto
closepath
253 337 moveto
197 -48 lineto
172 -192 lineto
76 -192 lineto
101 -48 lineto
181 337 lineto
253 337 lineto
closepath
fill
		} def

	/cent
		{
323 0 moveto
338 84 lineto
273 90 224 119 192 170  curveto
159 222 150 285 163 360  curveto
176 437 207 499 254 546  curveto
301 594 361 622 434 632  curveto
450 722 lineto
498 722 lineto
482 632 lineto
525 630 570 622 617 609  curveto
603 528 lineto
549 548 504 559 470 562  curveto
398 152 lineto
443 152 491 163 543 186  curveto
530 112 lineto
478 93 430 84 386 84  curveto
372 0 lineto
323 0 lineto
closepath
351 158 moveto
421 558 lineto
381 554 348 535 323 502  curveto
297 468 279 420 268 357  curveto
258 303 260 260 274 227  curveto
288 193 314 170 351 158  curveto
closepath
fill
		} def

	/sterling
		{
120 0 moveto
135 84 lineto
171 95 200 113 221 139  curveto
243 164 257 198 264 238  curveto
284 349 lineto
196 349 lineto
209 421 lineto
296 421 lineto
315 526 lineto
327 596 353 649 392 685  curveto
432 722 482 740 544 740  curveto
578 740 614 735 652 726  curveto
638 644 lineto
601 660 563 668 526 668  curveto
496 668 472 659 453 640  curveto
435 621 423 593 416 556  curveto
393 421 lineto
498 421 lineto
486 349 lineto
380 349 lineto
369 287 lineto
360 236 347 196 331 167  curveto
314 139 287 111 249 84  curveto
547 84 lineto
533 0 lineto
120 0 lineto
closepath
fill
		} def

	/fraction
		{
-304 -18 moveto
359 740 lineto
425 740 lineto
-238 -18 lineto
-304 -18 lineto
closepath
fill
		} def

	/yen
		{
265 0 moveto
294 168 lineto
150 168 lineto
160 229 lineto
305 229 lineto
317 301 lineto
173 301 lineto
183 361 lineto
328 361 lineto
165 722 lineto
279 722 lineto
405 441 lineto
644 722 lineto
731 722 lineto
424 361 lineto
569 361 lineto
558 301 lineto
414 301 lineto
401 229 lineto
545 229 lineto
535 168 lineto
390 168 lineto
361 0 lineto
265 0 lineto
closepath
fill
		} def

	/florin
		{
90 -144 moveto
275 349 lineto
178 349 lineto
191 421 lineto
302 421 lineto
321 473 lineto
354 562 395 629 443 673  curveto
491 718 547 740 610 740  curveto
646 740 682 736 719 726  curveto
691 650 lineto
659 662 628 668 597 668  curveto
562 668 531 656 504 631  curveto
477 605 454 568 436 517  curveto
400 421 lineto
545 421 lineto
532 349 lineto
373 349 lineto
188 -144 lineto
90 -144 lineto
closepath
fill
		} def

	/section
		{
85 -126 moveto
101 -39 lineto
173 -73 237 -90 291 -90  curveto
334 -90 370 -82 399 -66  curveto
428 -50 445 -28 449 -2  curveto
453 19 449 36 437 49  curveto
426 62 398 78 355 98  curveto
275 135 lineto
231 155 200 179 181 206  curveto
163 233 156 264 162 299  curveto
171 348 203 397 259 445  curveto
219 475 202 515 211 562  curveto
220 616 249 659 296 691  curveto
344 724 402 740 471 740  curveto
520 740 575 733 636 717  curveto
622 639 lineto
560 658 505 668 458 668  curveto
416 668 380 660 351 643  curveto
322 626 306 605 301 578  curveto
298 560 302 544 314 530  curveto
325 515 344 502 371 491  curveto
433 464 lineto
495 437 537 410 559 385  curveto
580 359 587 326 580 285  curveto
572 239 539 189 481 135  curveto
529 104 548 60 538 4  curveto
529 -46 501 -87 452 -117  curveto
403 -147 342 -163 268 -163  curveto
218 -163 157 -151 85 -126  curveto
closepath
439 166 moveto
469 198 486 230 492 261  curveto
496 284 491 303 478 319  curveto
466 334 440 350 403 367  curveto
302 413 lineto
273 383 256 353 250 322  curveto
247 300 252 280 268 261  curveto
283 243 308 226 342 210  curveto
439 166 lineto
closepath
fill
		} def

	/currency
		{
218 188 moveto
106 93 lineto
71 135 lineto
183 230 lineto
160 269 153 313 162 361  curveto
170 409 193 452 229 491  curveto
150 587 lineto
200 629 lineto
279 534 lineto
324 563 370 578 417 578  curveto
463 578 504 563 539 534  curveto
651 629 lineto
687 587 lineto
575 491 lineto
597 452 604 409 595 361  curveto
587 313 565 269 529 230  curveto
608 135 lineto
557 93 lineto
479 188 lineto
433 159 387 144 341 144  curveto
294 144 254 159 218 188  curveto
closepath
351 216 moveto
393 216 430 230 463 258  curveto
496 285 516 320 523 361  curveto
530 402 522 436 499 464  curveto
476 491 445 505 404 505  curveto
363 505 327 491 294 464  curveto
261 436 241 402 234 361  curveto
227 321 235 287 258 259  curveto
280 230 312 216 351 216  curveto
closepath
fill
		} def

	/quotesingle
		{
166 505 moveto
189 771 lineto
309 771 lineto
238 505 lineto
166 505 lineto
closepath
fill
		} def

	/quotedblleft
		{
465 771 moveto
459 734 lineto
447 728 436 717 428 701  curveto
419 685 413 664 408 637  curveto
406 626 lineto
452 626 lineto
433 518 lineto
325 518 lineto
339 599 lineto
348 648 363 687 384 715  curveto
405 744 432 762 465 771  curveto
closepath
285 771 moveto
278 734 lineto
266 728 256 717 247 701  curveto
238 685 232 664 227 637  curveto
225 626 lineto
272 626 lineto
253 518 lineto
144 518 lineto
159 599 lineto
167 648 182 687 203 715  curveto
224 744 251 762 285 771  curveto
closepath
fill
		} def

	/guillemotleft
		{
565 445 moveto
389 265 lineto
502 84 lineto
448 48 lineto
293 265 lineto
524 481 lineto
565 445 lineto
closepath
372 445 moveto
196 265 lineto
309 84 lineto
255 48 lineto
100 265 lineto
331 481 lineto
372 445 lineto
closepath
fill
		} def

	/guilsinglleft
		{
372 445 moveto
196 265 lineto
309 84 lineto
255 48 lineto
100 265 lineto
331 481 lineto
372 445 lineto
closepath
fill
		} def

	/guilsinglright
		{
114 445 moveto
227 265 lineto
50 84 lineto
92 48 lineto
323 265 lineto
168 481 lineto
114 445 lineto
closepath
fill
		} def

	/fi
		{
114 0 moveto
194 458 lineto
119 458 lineto
131 530 lineto
207 530 lineto
218 593 lineto
240 720 308 783 424 783  curveto
456 783 492 777 531 767  curveto
517 690 lineto
476 704 443 710 417 710  curveto
385 710 362 703 348 688  curveto
334 673 323 645 316 604  curveto
303 530 lineto
640 530 lineto
547 0 lineto
451 0 lineto
531 458 lineto
291 458 lineto
210 0 lineto
114 0 lineto
closepath
561 626 moveto
578 722 lineto
674 722 lineto
657 626 lineto
561 626 lineto
closepath
fill
		} def

	/fl
		{
117 0 moveto
197 458 lineto
119 458 lineto
131 530 lineto
209 530 lineto
219 584 lineto
242 716 321 783 454 783  curveto
485 783 527 779 581 771  curveto
686 771 lineto
551 0 lineto
454 0 lineto
575 688 lineto
515 703 470 710 437 710  curveto
402 710 375 702 357 687  curveto
338 671 326 644 320 606  curveto
306 530 lineto
438 530 lineto
426 458 lineto
294 458 lineto
213 0 lineto
117 0 lineto
closepath
fill
		} def

	/endash
		{
116 252 moveto
129 325 lineto
562 325 lineto
550 252 lineto
116 252 lineto
closepath
fill
		} def

	/dagger
		{
242 -144 moveto
351 409 lineto
180 397 lineto
193 469 lineto
359 458 lineto
394 722 lineto
490 722 lineto
432 458 lineto
603 469 lineto
590 397 lineto
423 409 lineto
338 -144 lineto
242 -144 lineto
closepath
fill
		} def

	/daggerdbl
		{
242 -144 moveto
300 120 lineto
130 108 lineto
142 180 lineto
309 168 lineto
351 409 lineto
180 397 lineto
193 469 lineto
359 458 lineto
394 722 lineto
490 722 lineto
432 458 lineto
603 469 lineto
590 397 lineto
423 409 lineto
381 168 lineto
552 180 lineto
539 108 lineto
373 120 lineto
338 -144 lineto
242 -144 lineto
closepath
fill
		} def

	/periodcentered
		{
139 239 moveto
160 360 lineto
281 360 lineto
260 239 lineto
139 239 lineto
closepath
fill
		} def

	/paragraph
		{
284 -144 moveto
373 361 lineto
309 365 263 385 233 421  curveto
203 457 193 504 204 563  curveto
214 621 236 662 272 686  curveto
307 710 362 722 436 722  curveto
629 722 lineto
477 -144 lineto
417 -144 lineto
558 662 lineto
486 662 lineto
345 -144 lineto
284 -144 lineto
closepath
fill
		} def

	/bullet
		{
319 108 moveto
261 108 215 129 180 172  curveto
146 215 134 266 144 325  curveto
154 385 184 436 234 478  curveto
284 520 339 542 399 542  curveto
459 542 506 520 541 478  curveto
576 435 588 384 577 323  curveto
567 263 536 212 486 171  curveto
436 129 380 108 319 108  curveto
closepath
fill
		} def

	/quotesinglbase
		{
72 -144 moveto
78 -108 lineto
95 -103 108 -93 119 -76  curveto
130 -60 137 -38 142 -9  curveto
144 0 lineto
97 0 lineto
118 120 lineto
239 120 lineto
221 16 lineto
212 -33 195 -71 170 -97  curveto
145 -124 113 -140 72 -144  curveto
closepath
fill
		} def

	/quotedblbase
		{
41 -144 moveto
47 -108 lineto
59 -102 70 -91 78 -74  curveto
87 -58 94 -37 98 -11  curveto
100 0 lineto
54 0 lineto
73 108 lineto
181 108 lineto
167 27 lineto
158 -21 143 -60 122 -89  curveto
101 -118 74 -136 41 -144  curveto
closepath
221 -144 moveto
228 -108 lineto
240 -102 251 -91 259 -74  curveto
268 -58 274 -37 279 -11  curveto
281 0 lineto
234 0 lineto
253 108 lineto
362 108 lineto
348 27 lineto
339 -21 324 -60 303 -89  curveto
282 -118 255 -136 221 -144  curveto
closepath
fill
		} def

	/quotedblright
		{
157 518 moveto
163 554 lineto
175 560 186 571 194 587  curveto
203 603 209 625 214 651  curveto
216 662 lineto
170 662 lineto
189 771 lineto
297 771 lineto
283 689 lineto
274 640 259 601 238 572  curveto
217 544 190 525 157 518  curveto
closepath
337 518 moveto
344 554 lineto
356 560 366 571 375 587  curveto
384 603 390 625 395 651  curveto
397 662 lineto
350 662 lineto
369 771 lineto
478 771 lineto
464 689 lineto
455 640 440 601 419 572  curveto
398 544 371 525 337 518  curveto
closepath
fill
		} def

	/guillemotright
		{
114 445 moveto
227 265 lineto
50 84 lineto
92 48 lineto
323 265 lineto
168 481 lineto
114 445 lineto
closepath
307 445 moveto
420 265 lineto
243 84 lineto
285 48 lineto
516 265 lineto
361 481 lineto
307 445 lineto
closepath
fill
		} def

	/ellipsis
		{
118 0 moveto
135 96 lineto
231 96 lineto
214 0 lineto
118 0 lineto
closepath
452 0 moveto
468 96 lineto
565 96 lineto
548 0 lineto
452 0 lineto
closepath
785 0 moveto
801 96 lineto
898 96 lineto
881 0 lineto
785 0 lineto
closepath
fill
		} def

	/perthousand
		{
8 -18 moveto
710 740 lineto
785 740 lineto
84 -18 lineto
8 -18 lineto
closepath
220 361 moveto
174 361 140 377 118 410  curveto
97 443 91 487 100 542  curveto
110 597 131 641 165 674  curveto
198 706 238 722 286 722  curveto
333 722 367 706 389 674  curveto
411 641 417 597 408 542  curveto
398 486 376 442 343 409  curveto
309 377 268 361 220 361  curveto
closepath
230 409 moveto
257 409 280 420 297 442  curveto
315 465 327 498 335 542  curveto
342 583 341 614 330 638  curveto
320 662 302 674 277 674  curveto
252 674 230 662 211 638  curveto
193 614 180 582 173 542  curveto
166 502 167 469 178 445  curveto
188 421 205 409 230 409  curveto
closepath
506 0 moveto
460 0 426 16 405 49  curveto
383 81 377 125 387 180  curveto
396 236 418 279 451 312  curveto
485 345 525 361 572 361  curveto
618 361 653 345 675 312  curveto
697 280 704 236 694 181  curveto
684 125 662 80 629 48  curveto
596 16 555 0 506 0  curveto
closepath
516 48 moveto
543 48 566 59 583 81  curveto
601 103 614 137 622 181  curveto
629 221 627 253 616 277  curveto
606 301 588 313 563 313  curveto
538 313 517 301 498 277  curveto
479 253 466 221 459 180  curveto
452 140 453 108 464 84  curveto
474 60 491 48 516 48  curveto
closepath
850 0 moveto
804 0 770 16 748 49  curveto
726 81 720 125 730 180  curveto
740 236 761 279 794 312  curveto
828 345 868 361 915 361  curveto
962 361 997 345 1019 312  curveto
1041 280 1047 236 1037 181  curveto
1027 125 1006 80 972 48  curveto
939 16 898 0 850 0  curveto
closepath
859 48 moveto
886 48 909 59 927 81  curveto
944 103 957 137 965 181  curveto
972 221 970 253 959 277  curveto
949 301 931 313 906 313  curveto
882 313 860 301 841 277  curveto
822 253 809 221 802 180  curveto
795 140 797 108 807 84  curveto
818 60 835 48 859 48  curveto
closepath
fill
		} def

	/questiondown
		{
393 529 moveto
376 433 lineto
279 433 lineto
296 529 lineto
393 529 lineto
closepath
359 336 moveto
354 310 lineto
343 248 309 189 252 135  curveto
215 99 lineto
153 41 119 -7 113 -44  curveto
108 -73 115 -96 134 -113  curveto
154 -130 183 -138 221 -138  curveto
271 -138 326 -126 386 -102  curveto
372 -184 lineto
308 -202 250 -211 198 -211  curveto
131 -211 81 -196 47 -166  curveto
14 -136 1 -96 10 -45  curveto
15 -17 25 7 40 28  curveto
55 48 81 74 118 104  curveto
153 132 lineto
188 161 212 185 225 204  curveto
238 224 247 250 253 283  curveto
263 336 lineto
359 336 lineto
closepath
fill
		} def

	/grave
		{
531 626 moveto
459 626 lineto
329 783 lineto
441 783 lineto
531 626 lineto
closepath
fill
		} def

	/acute
		{
302 626 moveto
447 783 lineto
558 783 lineto
374 626 lineto
302 626 lineto
closepath
fill
		} def

	/circumflex
		{
245 626 moveto
390 783 lineto
497 783 lineto
587 626 lineto
515 626 lineto
434 725 lineto
433 725 lineto
318 626 lineto
245 626 lineto
closepath
fill
		} def

	/tilde
		{
254 626 moveto
262 664 275 693 294 712  curveto
312 731 336 740 364 740  curveto
388 740 409 734 427 722  curveto
453 704 lineto
469 692 482 687 492 687  curveto
503 687 512 691 520 700  curveto
528 709 534 722 539 740  curveto
599 740 lineto
590 702 577 674 558 655  curveto
540 635 517 626 489 626  curveto
465 626 444 632 426 645  curveto
400 663 lineto
384 674 370 680 361 680  curveto
350 680 340 675 332 666  curveto
324 657 318 644 314 626  curveto
254 626 lineto
closepath
fill
		} def

	/macron
		{
166 710 moveto
179 783 lineto
594 783 lineto
581 710 lineto
166 710 lineto
closepath
fill
		} def

	/breve
		{
281 783 moveto
341 783 lineto
341 754 349 733 363 719  curveto
378 705 400 698 429 698  curveto
458 698 482 705 502 719  curveto
521 733 536 754 546 783  curveto
606 783 lineto
593 735 569 697 535 669  curveto
500 640 461 626 416 626  curveto
372 626 338 640 313 669  curveto
289 697 278 735 281 783  curveto
closepath
fill
		} def

	/dotaccent
		{
368 626 moveto
385 722 lineto
481 722 lineto
464 626 lineto
368 626 lineto
closepath
fill
		} def

	/dieresis
		{
278 626 moveto
292 710 lineto
377 710 lineto
362 626 lineto
278 626 lineto
closepath
470 626 moveto
485 710 lineto
570 710 lineto
555 626 lineto
470 626 lineto
closepath
fill
		} def

	/ring
		{
415 626 moveto
385 626 361 637 343 658  curveto
326 680 319 706 325 737  curveto
330 767 345 794 371 815  curveto
396 837 424 848 455 848  curveto
486 848 510 837 528 815  curveto
546 794 552 768 547 737  curveto
541 706 526 679 500 658  curveto
475 637 446 626 415 626  curveto
closepath
423 668 moveto
442 668 460 675 476 688  curveto
492 701 501 718 505 737  curveto
508 756 504 772 493 786  curveto
482 799 467 806 448 806  curveto
429 806 411 799 395 786  curveto
380 772 370 756 367 737  curveto
364 718 367 702 378 688  curveto
389 675 404 668 423 668  curveto
closepath
fill
		} def

	/cedilla
		{
305 0 moveto
353 0 lineto
314 -53 lineto
339 -53 360 -60 376 -76  curveto
392 -91 399 -110 395 -130  curveto
391 -153 378 -172 357 -187  curveto
335 -203 310 -210 283 -210  curveto
259 -210 236 -207 213 -200  curveto
220 -161 lineto
234 -166 251 -168 270 -168  curveto
287 -168 300 -165 310 -159  curveto
319 -153 325 -144 327 -132  curveto
330 -116 324 -104 310 -97  curveto
296 -89 274 -85 244 -85  curveto
305 0 lineto
closepath
fill
		} def

	/hungarumlaut
		{
144 481 moveto
291 771 lineto
399 771 lineto
204 481 lineto
144 481 lineto
closepath
361 481 moveto
507 771 lineto
616 771 lineto
421 481 lineto
361 481 lineto
closepath
fill
		} def

	/ogonek
		{
321 0 moveto
373 0 lineto
350 -12 332 -25 319 -40  curveto
306 -55 298 -70 295 -87  curveto
292 -103 295 -114 303 -122  curveto
310 -130 324 -134 343 -134  curveto
361 -134 376 -131 388 -126  curveto
382 -166 lineto
360 -175 337 -180 312 -180  curveto
278 -180 255 -174 240 -161  curveto
226 -148 221 -128 226 -103  curveto
229 -82 239 -63 255 -46  curveto
271 -29 293 -14 321 0  curveto
closepath
fill
		} def

	/caron
		{
615 783 moveto
469 626 lineto
363 626 lineto
273 783 lineto
345 783 lineto
426 684 lineto
427 684 lineto
542 783 lineto
615 783 lineto
closepath
fill
		} def

	/emdash
		{
116 252 moveto
129 325 lineto
562 325 lineto
550 252 lineto
116 252 lineto
closepath
fill
		} def

	/AE
		{
8 0 moveto
555 722 lineto
986 722 lineto
973 646 lineto
671 646 lineto
631 414 lineto
883 414 lineto
870 338 lineto
617 338 lineto
572 76 lineto
896 76 lineto
882 0 lineto
456 0 lineto
491 202 lineto
255 202 lineto
102 0 lineto
8 0 lineto
closepath
312 277 moveto
504 277 lineto
562 605 lineto
312 277 lineto
closepath
fill
		} def

	/ordfeminine
		{
374 453 moveto
333 420 295 403 258 403  curveto
228 403 205 413 189 431  curveto
172 450 167 473 172 502  curveto
179 540 200 570 235 591  curveto
270 612 317 622 374 622  curveto
399 622 lineto
406 660 lineto
409 679 406 693 397 703  curveto
388 712 373 717 352 717  curveto
316 717 277 707 235 686  curveto
246 745 lineto
292 762 335 771 376 771  curveto
418 771 449 761 467 743  curveto
485 725 491 698 484 661  curveto
457 504 lineto
454 488 455 476 458 468  curveto
462 460 469 456 479 456  curveto
482 456 486 456 492 457  curveto
487 413 lineto
468 407 451 403 434 403  curveto
417 403 403 407 393 416  curveto
383 424 378 436 377 453  curveto
374 453 lineto
closepath
377 496 moveto
391 576 lineto
371 577 lineto
335 577 307 571 287 561  curveto
267 550 256 534 252 512  curveto
249 495 251 483 258 474  curveto
265 466 277 461 295 461  curveto
319 461 347 473 377 496  curveto
closepath
fill
		} def

	/Lslash
		{
108 0 moveto
167 337 lineto
62 285 lineto
76 368 lineto
182 420 lineto
234 722 lineto
337 722 lineto
294 476 lineto
426 542 lineto
411 459 lineto
279 394 lineto
224 76 lineto
549 76 lineto
536 0 lineto
108 0 lineto
closepath
fill
		} def

	/Oslash
		{
642 608 moveto
609 645 563 664 504 664  curveto
432 664 372 637 322 584  curveto
272 531 239 457 223 362  curveto
209 286 212 222 230 170  curveto
642 608 lineto
closepath
261 114 moveto
293 77 340 58 399 58  curveto
471 58 531 85 581 138  curveto
631 192 664 266 680 360  curveto
694 437 691 501 673 552  curveto
261 114 lineto
closepath
53 -18 moveto
154 89 lineto
108 160 94 251 114 361  curveto
134 476 180 568 254 637  curveto
327 706 415 740 517 740  curveto
594 740 658 720 708 679  curveto
766 740 lineto
850 740 lineto
749 633 lineto
795 562 809 472 789 360  curveto
769 246 722 154 649 85  curveto
576 16 488 -18 386 -18  curveto
307 -18 243 2 195 43  curveto
137 -18 lineto
53 -18 lineto
closepath
fill
		} def

	/OE
		{
556 28 moveto
500 -2 440 -18 378 -18  curveto
279 -18 205 16 157 86  curveto
108 156 94 248 114 361  curveto
134 476 180 568 254 637  curveto
327 706 414 740 516 740  curveto
575 740 627 725 672 694  curveto
677 722 lineto
1081 722 lineto
1068 646 lineto
766 646 lineto
726 414 lineto
978 414 lineto
965 338 lineto
713 341 lineto
667 76 lineto
989 76 lineto
976 0 lineto
551 0 lineto
556 28 lineto
closepath
599 277 moveto
629 444 lineto
642 520 639 576 618 611  curveto
598 646 560 664 503 664  curveto
432 664 371 637 322 583  curveto
272 530 239 456 222 361  curveto
206 266 213 192 244 138  curveto
275 85 326 58 398 58  curveto
452 58 496 76 530 113  curveto
563 149 587 204 599 277  curveto
closepath
fill
		} def

	/ordmasculine
		{
303 403 moveto
250 403 211 420 186 453  curveto
160 486 153 531 162 587  curveto
172 644 196 688 233 721  curveto
270 754 315 771 369 771  curveto
423 771 462 754 488 721  curveto
514 688 521 644 512 587  curveto
502 530 478 485 441 452  curveto
404 420 358 403 303 403  curveto
closepath
313 457 moveto
344 457 368 468 388 490  curveto
407 512 420 544 428 588  curveto
435 631 433 663 422 685  curveto
411 706 390 717 360 717  curveto
330 717 305 706 286 684  curveto
268 663 254 630 247 587  curveto
239 544 241 511 252 489  curveto
263 468 284 457 313 457  curveto
closepath
fill
		} def

	/ae
		{
411 94 moveto
337 23 267 -12 201 -12  curveto
157 -12 122 1 98 29  curveto
74 56 66 91 73 133  curveto
83 191 115 235 169 266  curveto
224 297 296 313 387 313  curveto
410 313 lineto
421 377 lineto
426 408 423 431 409 446  curveto
396 462 374 469 342 469  curveto
292 469 234 454 170 422  curveto
184 502 lineto
253 528 316 542 373 542  curveto
436 542 483 522 512 482  curveto
559 522 612 542 671 542  curveto
739 542 785 517 811 469  curveto
836 420 841 347 824 250  curveto
495 250 lineto
489 186 498 138 522 107  curveto
546 75 585 60 640 60  curveto
686 60 738 71 796 94  curveto
783 18 lineto
717 -2 656 -12 602 -12  curveto
556 -12 517 -3 485 14  curveto
453 32 428 58 411 94  curveto
closepath
376 119 moveto
400 256 lineto
368 257 lineto
315 257 271 247 235 227  curveto
199 207 178 181 172 148  curveto
168 125 173 106 186 90  curveto
200 74 218 66 242 66  curveto
282 66 326 84 376 119  curveto
closepath
510 316 moveto
733 316 lineto
742 367 740 405 727 431  curveto
714 457 690 470 655 470  curveto
620 470 590 457 566 431  curveto
541 405 523 367 510 316  curveto
closepath
fill
		} def

	/dotlessi
		{
96 0 moveto
188 530 lineto
285 530 lineto
192 0 lineto
96 0 lineto
closepath
fill
		} def

	/lslash
		{
120 0 moveto
182 352 lineto
63 294 lineto
77 375 lineto
196 434 lineto
255 771 lineto
351 771 lineto
302 487 lineto
420 542 lineto
406 462 lineto
287 405 lineto
216 0 lineto
120 0 lineto
closepath
fill
		} def

	/oslash
		{
52 -12 moveto
129 68 lineto
128 70 lineto
95 117 86 182 100 263  curveto
115 349 149 417 203 467  curveto
257 517 323 542 401 542  curveto
459 542 506 528 543 500  curveto
583 542 lineto
654 542 lineto
577 461 lineto
578 459 lineto
610 407 620 343 606 265  curveto
591 180 557 112 503 62  curveto
449 12 383 -12 305 -12  curveto
248 -12 201 1 164 29  curveto
124 -12 lineto
52 -12 lineto
closepath
504 384 moveto
227 95 lineto
248 71 278 60 316 60  curveto
417 60 480 127 503 262  curveto
511 306 511 347 504 384  curveto
closepath
203 145 moveto
479 433 lineto
457 457 427 469 390 469  curveto
289 469 227 402 203 267  curveto
195 219 195 179 203 145  curveto
closepath
fill
		} def

	/oe
		{
492 84 moveto
439 20 375 -12 300 -12  curveto
225 -12 169 13 132 63  curveto
96 113 85 181 100 265  curveto
115 349 149 416 203 466  curveto
257 516 322 542 398 542  curveto
469 542 521 509 553 444  curveto
604 509 669 542 748 542  curveto
816 542 862 517 888 469  curveto
913 420 918 347 901 250  curveto
572 250 lineto
566 186 574 138 599 107  curveto
623 75 662 60 717 60  curveto
763 60 815 71 874 94  curveto
860 18 lineto
794 -2 735 -12 684 -12  curveto
592 -12 529 20 492 84  curveto
closepath
312 60 moveto
355 60 390 76 417 110  curveto
445 144 464 195 476 263  curveto
488 331 487 383 472 417  curveto
457 452 428 469 386 469  curveto
340 469 300 451 268 415  curveto
236 379 214 329 203 265  curveto
191 201 196 151 215 114  curveto
235 78 267 60 312 60  curveto
closepath
587 316 moveto
810 316 lineto
819 367 817 405 804 431  curveto
791 457 767 470 732 470  curveto
697 470 667 457 643 431  curveto
618 405 600 367 587 316  curveto
closepath
fill
		} def

	/germandbls
		{
96 0 moveto
194 562 lineto
208 642 232 699 265 733  curveto
298 766 348 783 413 783  curveto
466 783 507 771 535 747  curveto
563 724 574 693 567 654  curveto
560 614 530 566 478 510  curveto
447 477 431 454 428 440  curveto
425 421 438 396 469 365  curveto
536 299 lineto
584 251 603 200 593 146  curveto
585 97 563 58 527 30  curveto
492 1 448 -12 395 -12  curveto
350 -12 306 -2 263 16  curveto
278 98 lineto
333 72 376 60 409 60  curveto
433 60 453 67 470 81  curveto
487 95 497 113 501 137  curveto
506 165 492 195 461 227  curveto
381 307 lineto
347 342 333 377 339 414  curveto
344 441 367 480 408 530  curveto
442 571 462 607 467 636  curveto
472 661 468 680 456 692  curveto
445 704 425 710 397 710  curveto
370 710 348 701 332 683  curveto
315 665 304 638 297 602  curveto
192 0 lineto
96 0 lineto
closepath
fill
		} def

	/.notdef
		{
0 0 moveto
1000 0 lineto
1000 1000 lineto
0 1000 lineto
0 0 lineto
closepath
50 50 moveto
950 50 lineto
950 950 lineto
50 950 lineto
50 50 lineto
closepath
fill
		} def

	end				% close glyph dict. 
	currentdict			% actually put dict on the stack
	end			% close the dictionary now
	/LucidaSans-Italic exch definefont pop
/LucidaSans-Italic findfont 18.0 scalefont setfont
(x) show
Q
Q
newpath
0.0 0.0 m
0.0 390.0 l
390.0 390.0 l
390.0 0.0 l
h
W
Q
[ 1.0 0.0 0.0 1.0 5.0 5.0 ] defaultmatrix matrix concatmatrix setmatrix
0.0 0.0 translate
q
q
1 38 219 OPL
38 224
-5.0 -5.0 translate
q
31 234 10 18 rc
31.0 249.0 moveto
q 1 -1 scale
9 dict begin
/FontType 3 def
/FontMatrix [0.0010 0 0 0.0010 0 0]def
/FontBBox [0 -206 1090 806 ] def
	/Encoding 256 array def
			0 1 255 {Encoding exch /.notdef put}for
		Encoding 32 /space put
		Encoding 33 /exclam put
		Encoding 34 /quotedbl put
		Encoding 35 /numbersign put
		Encoding 36 /dollar put
		Encoding 37 /percent put
		Encoding 38 /ampersand put
		Encoding 39 /quoteright put
		Encoding 40 /parenleft put
		Encoding 41 /parenright put
		Encoding 42 /asterisk put
		Encoding 43 /plus put
		Encoding 44 /comma put
		Encoding 45 /hyphen put
		Encoding 46 /period put
		Encoding 47 /slash put
		Encoding 48 /zero put
		Encoding 49 /one put
		Encoding 50 /two put
		Encoding 51 /three put
		Encoding 52 /four put
		Encoding 53 /five put
		Encoding 54 /six put
		Encoding 55 /seven put
		Encoding 56 /eight put
		Encoding 57 /nine put
		Encoding 58 /colon put
		Encoding 59 /semicolon put
		Encoding 60 /less put
		Encoding 61 /equal put
		Encoding 62 /greater put
		Encoding 63 /question put
		Encoding 64 /at put
		Encoding 65 /A put
		Encoding 66 /B put
		Encoding 67 /C put
		Encoding 68 /D put
		Encoding 69 /E put
		Encoding 70 /F put
		Encoding 71 /G put
		Encoding 72 /H put
		Encoding 73 /I put
		Encoding 74 /J put
		Encoding 75 /K put
		Encoding 76 /L put
		Encoding 77 /M put
		Encoding 78 /N put
		Encoding 79 /O put
		Encoding 80 /P put
		Encoding 81 /Q put
		Encoding 82 /R put
		Encoding 83 /S put
		Encoding 84 /T put
		Encoding 85 /U put
		Encoding 86 /V put
		Encoding 87 /W put
		Encoding 88 /X put
		Encoding 89 /Y put
		Encoding 90 /Z put
		Encoding 91 /bracketleft put
		Encoding 92 /backslash put
		Encoding 93 /bracketright put
		Encoding 94 /asciicircum put
		Encoding 95 /underscore put
		Encoding 96 /quoteleft put
		Encoding 97 /a put
		Encoding 98 /b put
		Encoding 99 /c put
		Encoding 100 /d put
		Encoding 101 /e put
		Encoding 102 /f put
		Encoding 103 /g put
		Encoding 104 /h put
		Encoding 105 /i put
		Encoding 106 /j put
		Encoding 107 /k put
		Encoding 108 /l put
		Encoding 109 /m put
		Encoding 110 /n put
		Encoding 111 /o put
		Encoding 112 /p put
		Encoding 113 /q put
		Encoding 114 /r put
		Encoding 115 /s put
		Encoding 116 /t put
		Encoding 117 /u put
		Encoding 118 /v put
		Encoding 119 /w put
		Encoding 120 /x put
		Encoding 121 /y put
		Encoding 122 /z put
		Encoding 123 /braceleft put
		Encoding 124 /bar put
		Encoding 125 /braceright put
		Encoding 126 /asciitilde put
		Encoding 161 /exclamdown put
		Encoding 162 /cent put
		Encoding 163 /sterling put
		Encoding 164 /fraction put
		Encoding 165 /yen put
		Encoding 166 /florin put
		Encoding 167 /section put
		Encoding 168 /currency put
		Encoding 169 /quotesingle put
		Encoding 170 /quotedblleft put
		Encoding 171 /guillemotleft put
		Encoding 172 /guilsinglleft put
		Encoding 173 /guilsinglright put
		Encoding 174 /fi put
		Encoding 175 /fl put
		Encoding 177 /endash put
		Encoding 178 /dagger put
		Encoding 179 /daggerdbl put
		Encoding 180 /periodcentered put
		Encoding 182 /paragraph put
		Encoding 183 /bullet put
		Encoding 184 /quotesinglbase put
		Encoding 185 /quotedblbase put
		Encoding 186 /quotedblright put
		Encoding 187 /guillemotright put
		Encoding 188 /ellipsis put
		Encoding 189 /perthousand put
		Encoding 191 /questiondown put
		Encoding 193 /grave put
		Encoding 194 /acute put
		Encoding 195 /circumflex put
		Encoding 196 /tilde put
		Encoding 197 /macron put
		Encoding 198 /breve put
		Encoding 199 /dotaccent put
		Encoding 200 /dieresis put
		Encoding 202 /ring put
		Encoding 203 /cedilla put
		Encoding 205 /hungarumlaut put
		Encoding 206 /ogonek put
		Encoding 207 /caron put
		Encoding 208 /emdash put
		Encoding 225 /AE put
		Encoding 227 /ordfeminine put
		Encoding 232 /Lslash put
		Encoding 233 /Oslash put
		Encoding 234 /OE put
		Encoding 235 /ordmasculine put
		Encoding 241 /ae put
		Encoding 245 /dotlessi put
		Encoding 248 /lslash put
		Encoding 249 /oslash put
		Encoding 250 /oe put
		Encoding 251 /germandbls put
	/BuildGlyph
		{ 2 copy exch /Metrics get exch 
			2 copy known {get}{pop pop 1000.0} ifelse
			0
			0 -206 1090 806
			setcachedevice
			exch /CharProcs get exch
			2 copy known not
					{pop /.notdef}
				if
			get exec
		} bind def

	/BuildChar
		{ 1 index /Encoding get exch get
		  1 index /BuildGlyph get exec
	  } bind def
	/Metrics 150 dict def
		Metrics begin
		/.notdef 1000 def
		/space 305.0 def
		/exclam 1055.0 def
		/quotedbl 555.0 def
		/numbersign 847.0 def
		/dollar 505.0 def
		/percent 555.0 def
		/ampersand 1055.0 def
		/quoteright 555.0 def
		/parenleft 1055.0 def
		/parenright 1055.0 def
		/asterisk 1055.0 def
		/plus 1055.0 def
		/comma 715.0 def
		/hyphen 1145.0 def
		/period 1145.0 def
		/slash 1145.0 def
		/zero 1145.0 def
		/one 1145.0 def
		/two 1055.0 def
		/three 1055.0 def
		/four 1055.0 def
		/five 1055.0 def
		/six 1005.0 def
		/seven 1055.0 def
		/eight 1005.0 def
		/nine 1055.0 def
		/colon 1055.0 def
		/semicolon 1055.0 def
		/less 1055.0 def
		/equal 1055.0 def
		/greater 1055.0 def
		/question 1055.0 def
		/at 1055.0 def
		/A 1055.0 def
		/B 1055.0 def
		/C 1055.0 def
		/D 1055.0 def
		/E 1055.0 def
		/F 1055.0 def
		/G 1055.0 def
		/H 1055.0 def
		/I 1055.0 def
		/J 1055.0 def
		/K 1055.0 def
		/L 1055.0 def
		/M 1055.0 def
		/N 1055.0 def
		/O 1055.0 def
		/P 1055.0 def
		/Q 555.0 def
		/R 1055.0 def
		/S 1055.0 def
		/T 845.0 def
		/U 1055.0 def
		/V 1055.0 def
		/W 1055.0 def
		/X 1055.0 def
		/Y 793.0 def
		/Z 591.0 def
		/bracketleft 485.0 def
		/backslash 555.0 def
		/bracketright 1055.0 def
		/asciicircum 1055.0 def
		/underscore 1055.0 def
		/quoteleft 555.0 def
		/a 805.0 def
		/b 805.0 def
		/c 805.0 def
		/d 1055.0 def
		/e 805.0 def
		/f 805.0 def
		/g 805.0 def
		/h 805.0 def
		/i 805.0 def
		/j 805.0 def
		/k 1055.0 def
		/l 1055.0 def
		/m 679.0 def
		/n 679.0 def
		/o 679.0 def
		/p 679.0 def
		/q 679.0 def
		/r 679.0 def
		/s 679.0 def
		/t 679.0 def
		/u 555.0 def
		/v 555.0 def
		/w 555.0 def
		/x 555.0 def
		/y 555.0 def
		/z 555.0 def
		/braceleft 555.0 def
		/bar 555.0 def
		/braceright 555.0 def
		/asciitilde 555.0 def
		/exclamdown 555.0 def
		/cent 555.0 def
		/sterling 555.0 def
		/fraction 555.0 def
		/yen 555.0 def
		/florin 555.0 def
		/section 555.0 def
		/currency 555.0 def
		/quotesingle 555.0 def
		/quotedblleft 555.0 def
		/guillemotleft 555.0 def
		/guilsinglleft 555.0 def
		/guilsinglright 555.0 def
		/fi 555.0 def
		/fl 555.0 def
		/endash 1145.0 def
		/dagger 555.0 def
		/daggerdbl 555.0 def
		/periodcentered 555.0 def
		/paragraph 555.0 def
		/bullet 555.0 def
		/quotesinglbase 555.0 def
		/quotedblbase 555.0 def
		/quotedblright 555.0 def
		/guillemotright 555.0 def
		/ellipsis 555.0 def
		/perthousand 555.0 def
		/questiondown 555.0 def
		/grave 555.0 def
		/acute 555.0 def
		/circumflex 555.0 def
		/tilde 555.0 def
		/macron 555.0 def
		/breve 555.0 def
		/dotaccent 555.0 def
		/dieresis 555.0 def
		/ring 555.0 def
		/cedilla 555.0 def
		/hungarumlaut 555.0 def
		/ogonek 555.0 def
		/caron 555.0 def
		/emdash 1145.0 def
		/AE 555.0 def
		/ordfeminine 555.0 def
		/Lslash 555.0 def
		/Oslash 555.0 def
		/OE 555.0 def
		/ordmasculine 555.0 def
		/ae 555.0 def
		/dotlessi 555.0 def
		/lslash 555.0 def
		/oslash 555.0 def
		/oe 555.0 def
		/germandbls 555.0 def
	end
	/CharProcs 150 dict def
	CharProcs begin
			%define Glyph dictionary and start filling
	/space
		{
fill
		} def

	/exclam
		{
871 8 moveto
820 -42 lineto
528 249 lineto
234 -42 lineto
184 8 lineto
478 300 lineto
184 593 lineto
234 643 lineto
528 350 lineto
820 643 lineto
871 593 lineto
579 300 lineto
871 8 lineto
closepath
fill
		} def

	/quotedbl
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/numbersign
		{
663 128 moveto
595 60 lineto
423 232 lineto
251 61 lineto
184 129 lineto
356 300 lineto
184 471 lineto
251 538 lineto
423 367 lineto
595 539 lineto
663 472 lineto
491 300 lineto
663 128 lineto
closepath
fill
		} def

	/dollar
		{
322 300 moveto
322 285 316 272 305 260  curveto
293 248 275 243 251 243  curveto
229 243 212 248 200 258  curveto
188 268 182 282 182 300  curveto
182 315 187 328 198 339  curveto
209 350 227 356 251 356  curveto
277 356 296 349 308 337  curveto
317 325 322 313 322 300  curveto
closepath
fill
		} def

	/percent
		{
375 300 moveto
375 277 366 257 349 240  curveto
332 223 308 215 276 215  curveto
247 215 224 222 208 236  curveto
188 252 179 274 179 300  curveto
179 323 187 343 203 359  curveto
219 375 244 384 276 384  curveto
311 384 337 374 354 355  curveto
368 338 375 320 375 300  curveto
closepath
fill
		} def

	/ampersand
		{
871 8 moveto
820 -42 lineto
528 249 lineto
234 -42 lineto
184 8 lineto
184 593 lineto
234 643 lineto
528 350 lineto
820 643 lineto
871 593 lineto
579 300 lineto
871 8 lineto
closepath
478 300 moveto
263 514 lineto
263 86 lineto
478 300 lineto
closepath
fill
		} def

	/quoteright
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/parenleft
		{
-153 8 moveto
820 -42 lineto
526 249 lineto
234 -42 lineto
184 8 lineto
476 300 lineto
184 593 lineto
234 643 lineto
526 350 lineto
820 643 lineto
-153 593 lineto
-153 8 lineto
closepath
-232 86 moveto
-232 514 lineto
577 300 lineto
-232 86 lineto
closepath
fill
		} def

	/parenright
		{
-153 8 moveto
820 -42 lineto
526 249 lineto
234 -42 lineto
184 8 lineto
184 593 lineto
234 643 lineto
526 350 lineto
820 643 lineto
-153 593 lineto
-153 8 lineto
closepath
-232 86 moveto
-232 514 lineto
577 300 lineto
-232 86 lineto
closepath
476 300 moveto
263 513 lineto
263 87 lineto
476 300 lineto
closepath
fill
		} def

	/asterisk
		{
871 8 moveto
820 -42 lineto
528 249 lineto
234 -42 lineto
184 8 lineto
820 643 lineto
871 593 lineto
579 300 lineto
871 8 lineto
closepath
fill
		} def

	/plus
		{
871 8 moveto
820 -42 lineto
526 249 lineto
234 -42 lineto
184 8 lineto
476 300 lineto
184 593 lineto
234 643 lineto
871 8 lineto
closepath
fill
		} def

	/comma
		{
533 12 moveto
502 -37 lineto
408 -4 350 34 328 79  curveto
310 113 301 176 301 267  curveto
301 418 lineto
301 455 296 483 287 501  curveto
278 519 258 538 228 558  curveto
182 588 lineto
214 640 lineto
300 597 lineto
349 572 381 540 397 502  curveto
409 472 415 427 415 365  curveto
415 349 415 325 415 293  curveto
414 261 414 238 414 222  curveto
414 125 438 63 487 36  curveto
494 32 509 24 533 12  curveto
closepath
fill
		} def

	/hyphen
		{
-63 300 moveto
-63 196 71 108 339 35  curveto
607 -38 684 -75 572 -75  curveto
460 -75 367 -38 294 35  curveto
220 108 184 196 184 300  curveto
184 403 220 491 294 565  curveto
367 638 460 675 572 675  curveto
684 675 607 638 339 565  curveto
71 491 -63 403 -63 300  curveto
closepath
-142 300 moveto
-142 389 -2 465 275 528  curveto
553 591 652 623 572 623  curveto
492 623 420 591 357 528  curveto
294 465 263 389 263 300  curveto
263 210 294 134 357 71  curveto
420 8 492 -23 572 -23  curveto
652 -23 553 8 275 71  curveto
-2 134 -142 210 -142 300  curveto
closepath
-383 474 moveto
-383 458 -217 445 113 435  curveto
443 424 596 419 572 419  curveto
548 419 530 424 520 435  curveto
509 445 504 458 504 474  curveto
504 489 509 502 520 513  curveto
530 523 548 529 572 529  curveto
596 529 443 523 113 513  curveto
-217 502 -383 489 -383 474  curveto
closepath
-167 274 moveto
288 274 lineto
288 326 lineto
-167 326 lineto
-167 274 lineto
closepath
-383 126 moveto
-383 110 -217 97 113 87  curveto
443 76 596 71 572 71  curveto
548 71 530 76 520 87  curveto
509 97 504 110 504 126  curveto
504 141 509 154 520 165  curveto
530 175 548 181 572 181  curveto
596 181 443 175 113 165  curveto
-217 154 -383 141 -383 126  curveto
closepath
fill
		} def

	/period
		{
-63 300 moveto
-63 196 71 108 339 35  curveto
607 -38 684 -75 572 -75  curveto
460 -75 367 -38 294 35  curveto
220 108 184 196 184 300  curveto
184 403 220 491 294 565  curveto
367 638 460 675 572 675  curveto
684 675 607 638 339 565  curveto
71 491 -63 403 -63 300  curveto
closepath
-142 300 moveto
-142 389 -2 465 275 528  curveto
553 591 652 623 572 623  curveto
492 623 420 591 357 528  curveto
294 465 263 389 263 300  curveto
263 210 294 134 357 71  curveto
420 8 492 -23 572 -23  curveto
652 -23 553 8 275 71  curveto
-2 134 -142 210 -142 300  curveto
closepath
-305 274 moveto
426 274 lineto
426 326 lineto
-305 326 lineto
-305 274 lineto
closepath
fill
		} def

	/slash
		{
-63 300 moveto
-63 196 71 108 339 35  curveto
607 -38 684 -75 572 -75  curveto
460 -75 367 -38 294 35  curveto
220 108 184 196 184 300  curveto
184 403 220 491 294 565  curveto
367 638 460 675 572 675  curveto
684 675 607 638 339 565  curveto
71 491 -63 403 -63 300  curveto
closepath
-142 300 moveto
-142 389 -2 465 275 528  curveto
553 591 652 623 572 623  curveto
492 623 420 591 357 528  curveto
294 465 263 389 263 300  curveto
263 210 294 134 357 71  curveto
420 8 492 -23 572 -23  curveto
652 -23 553 8 275 71  curveto
-2 134 -142 210 -142 300  curveto
closepath
703 518 moveto
527 82 lineto
442 82 lineto
618 518 lineto
703 518 lineto
closepath
fill
		} def

	/zero
		{
-63 300 moveto
-63 196 71 108 339 35  curveto
607 -38 684 -75 572 -75  curveto
460 -75 367 -38 294 35  curveto
220 108 184 196 184 300  curveto
184 403 220 491 294 565  curveto
367 638 460 675 572 675  curveto
684 675 607 638 339 565  curveto
71 491 -63 403 -63 300  curveto
closepath
-142 300 moveto
-142 389 -2 465 275 528  curveto
553 591 652 623 572 623  curveto
492 623 420 591 357 528  curveto
294 465 263 389 263 300  curveto
263 210 294 134 357 71  curveto
420 8 492 -23 572 -23  curveto
652 -23 553 8 275 71  curveto
-2 134 -142 210 -142 300  curveto
closepath
-316 300 moveto
-316 266 -157 238 160 214  curveto
477 190 614 178 572 178  curveto
530 178 497 190 473 214  curveto
449 238 437 266 437 300  curveto
437 333 449 362 473 386  curveto
497 410 530 422 572 422  curveto
614 422 477 410 160 386  curveto
-157 362 -316 333 -316 300  curveto
closepath
-395 300 moveto
-395 319 -231 335 96 349  curveto
424 363 582 370 572 370  curveto
562 370 379 363 24 349  curveto
-330 335 -508 319 -508 300  curveto
-508 280 -330 264 24 250  curveto
379 236 562 230 572 230  curveto
582 230 424 236 96 250  curveto
-231 264 -395 280 -395 300  curveto
closepath
fill
		} def

	/one
		{
-63 300 moveto
-63 196 71 108 339 35  curveto
607 -38 684 -75 572 -75  curveto
460 -75 367 -38 294 35  curveto
220 108 184 196 184 300  curveto
184 403 220 491 294 565  curveto
367 638 460 675 572 675  curveto
684 675 607 638 339 565  curveto
71 491 -63 403 -63 300  curveto
closepath
-142 300 moveto
-142 389 -2 465 275 528  curveto
553 591 652 623 572 623  curveto
492 623 420 591 357 528  curveto
294 465 263 389 263 300  curveto
263 210 294 134 357 71  curveto
420 8 492 -23 572 -23  curveto
652 -23 553 8 275 71  curveto
-2 134 -142 210 -142 300  curveto
closepath
-381 323 moveto
-381 308 -216 295 114 283  curveto
444 271 596 266 572 266  curveto
550 266 533 271 521 281  curveto
509 291 503 305 503 323  curveto
503 338 508 351 519 362  curveto
530 373 548 379 572 379  curveto
598 379 617 372 629 360  curveto
-44 348 -381 336 -381 323  curveto
closepath
fill
		} def

	/two
		{
-153 300 moveto
-153 208 -14 130 262 66  curveto
539 2 627 -30 527 -30  curveto
427 -30 344 2 280 66  curveto
216 130 184 208 184 300  curveto
184 391 216 469 280 533  curveto
344 597 427 630 527 630  curveto
627 630 539 597 262 533  curveto
-14 469 -153 391 -153 300  curveto
closepath
791 326 moveto
784 396 754 456 701 505  curveto
648 553 590 578 527 578  curveto
464 578 406 553 353 505  curveto
300 456 270 396 264 326  curveto
791 326 lineto
closepath
791 274 moveto
264 274 lineto
270 203 300 143 353 95  curveto
406 46 464 22 527 22  curveto
590 22 648 46 701 95  curveto
754 143 784 203 791 274  curveto
closepath
fill
		} def

	/three
		{
-153 300 moveto
-153 208 -14 130 262 66  curveto
539 2 627 -30 527 -30  curveto
427 -30 344 2 280 66  curveto
216 130 184 208 184 300  curveto
184 391 216 469 280 533  curveto
344 597 427 630 527 630  curveto
627 630 539 597 262 533  curveto
-14 469 -153 391 -153 300  curveto
closepath
-232 300 moveto
-232 372 -85 434 207 487  curveto
499 540 278 569 -457 574  curveto
-457 25 lineto
278 30 499 59 207 112  curveto
-85 165 -232 228 -232 300  curveto
closepath
488 25 moveto
488 574 lineto
435 569 384 540 336 487  curveto
287 434 263 372 263 300  curveto
263 228 287 165 336 112  curveto
384 59 435 30 488 25  curveto
closepath
fill
		} def

	/four
		{
-153 300 moveto
-153 208 -14 130 262 66  curveto
539 2 627 -30 527 -30  curveto
427 -30 344 2 280 66  curveto
216 130 184 208 184 300  curveto
184 391 216 469 280 533  curveto
344 597 427 630 527 630  curveto
627 630 539 597 262 533  curveto
-14 469 -153 391 -153 300  curveto
closepath
791 326 moveto
785 392 758 449 711 497  curveto
663 544 615 570 567 574  curveto
567 326 lineto
791 326 lineto
closepath
488 326 moveto
488 574 lineto
439 570 391 544 344 497  curveto
296 449 270 392 264 326  curveto
488 326 lineto
closepath
791 274 moveto
-457 274 lineto
-457 25 lineto
274 29 663 55 711 103  curveto
758 150 785 207 791 274  curveto
closepath
488 25 moveto
488 274 lineto
264 274 lineto
270 207 296 150 344 103  curveto
391 55 439 29 488 25  curveto
closepath
fill
		} def

	/five
		{
-153 300 moveto
-153 208 -14 130 262 66  curveto
539 2 627 -30 527 -30  curveto
427 -30 344 2 280 66  curveto
216 130 184 208 184 300  curveto
184 391 216 469 280 533  curveto
344 597 427 630 527 630  curveto
627 630 539 597 262 533  curveto
-14 469 -153 391 -153 300  curveto
closepath
691 514 moveto
639 556 585 578 527 578  curveto
469 578 415 556 364 514  curveto
527 350 lineto
691 514 lineto
closepath
-232 300 moveto
-232 366 92 420 740 462  curveto
578 300 lineto
740 137 lineto
92 179 -232 233 -232 300  curveto
closepath
477 300 moveto
314 462 lineto
280 420 263 366 263 300  curveto
263 233 280 179 314 137  curveto
477 300 lineto
closepath
691 86 moveto
527 249 lineto
364 86 lineto
415 43 469 22 527 22  curveto
585 22 639 43 691 86  curveto
closepath
fill
		} def

	/six
		{
-201 274 moveto
-459 274 lineto
-459 -30 lineto
105 -30 354 -1 287 58  curveto
217 120 182 200 182 300  curveto
182 399 217 480 287 542  curveto
353 601 105 630 -459 630  curveto
-459 326 lineto
-201 326 lineto
-201 274 lineto
closepath
486 326 moveto
486 574 lineto
438 569 390 543 343 496  curveto
295 448 268 392 262 326  curveto
486 326 lineto
closepath
486 25 moveto
486 274 lineto
262 274 lineto
268 208 295 151 343 104  curveto
390 56 438 30 486 25  curveto
closepath
fill
		} def

	/seven
		{
833 82 moveto
782 31 lineto
567 246 lineto
405 84 lineto
456 42 173 22 -445 22  curveto
-445 -30 lineto
128 -30 382 2 318 66  curveto
254 130 222 208 222 300  curveto
222 391 254 469 318 533  curveto
382 597 128 630 -445 630  curveto
-445 578 lineto
171 578 453 556 401 513  curveto
567 346 lineto
782 561 lineto
833 511 lineto
618 296 lineto
833 82 lineto
closepath
517 296 moveto
351 461 lineto
317 419 301 366 301 300  curveto
301 232 319 177 355 134  curveto
517 296 lineto
closepath
fill
		} def

	/eight
		{
-201 300 moveto
-201 200 105 120 718 58  curveto
651 0 558 -30 440 -30  curveto
440 274 lineto
182 274 lineto
182 326 lineto
440 326 lineto
440 630 lineto
558 630 651 600 718 542  curveto
105 480 -201 399 -201 300  curveto
closepath
743 326 moveto
736 392 709 448 662 496  curveto
614 543 567 569 519 574  curveto
519 326 lineto
743 326 lineto
closepath
743 274 moveto
-505 274 lineto
-505 25 lineto
225 30 614 56 662 104  curveto
709 151 736 208 743 274  curveto
closepath
fill
		} def

	/nine
		{
-191 300 moveto
-191 208 -52 130 224 66  curveto
501 2 585 -30 476 -30  curveto
476 22 lineto
540 22 598 42 650 84  curveto
487 246 lineto
272 31 lineto
222 82 lineto
437 296 lineto
222 511 lineto
272 561 lineto
487 346 lineto
654 513 lineto
602 556 542 578 476 578  curveto
476 630 lineto
585 630 501 597 224 533  curveto
-52 469 -191 391 -191 300  curveto
closepath
-270 300 moveto
-270 366 54 419 703 461  curveto
538 296 lineto
699 134 lineto
53 177 -270 232 -270 300  curveto
closepath
fill
		} def

	/colon
		{
-153 300 moveto
-153 209 -14 131 262 67  curveto
538 2 627 -30 527 -30  curveto
437 -30 367 -8 315 35  curveto
237 -43 lineto
184 10 lineto
261 88 lineto
209 149 184 220 184 300  curveto
184 390 216 468 281 533  curveto
345 597 427 630 527 630  curveto
616 630 686 608 738 565  curveto
816 643 lineto
870 590 lineto
793 513 lineto
162 451 -153 380 -153 300  curveto
closepath
-232 300 moveto
-232 366 92 419 741 461  curveto
365 85 lineto
416 43 470 22 527 22  curveto
595 22 485 49 198 103  curveto
-88 157 -232 223 -232 300  curveto
closepath
689 516 moveto
638 557 584 578 527 578  curveto
459 578 398 550 344 496  curveto
290 442 263 376 263 300  curveto
263 234 279 180 312 139  curveto
689 516 lineto
closepath
fill
		} def

	/semicolon
		{
-153 300 moveto
-153 208 -14 130 262 66  curveto
539 2 627 -30 527 -30  curveto
427 -30 344 2 280 66  curveto
216 130 184 208 184 300  curveto
184 391 216 469 280 533  curveto
344 597 427 630 527 630  curveto
627 630 539 597 262 533  curveto
-14 469 -153 391 -153 300  curveto
closepath
-232 300 moveto
-232 376 -88 442 198 496  curveto
485 550 595 578 527 578  curveto
459 578 398 550 344 496  curveto
290 442 263 376 263 300  curveto
263 223 290 157 344 103  curveto
398 49 459 22 527 22  curveto
595 22 485 49 198 103  curveto
-88 157 -232 223 -232 300  curveto
closepath
713 201 moveto
693 193 672 190 648 190  curveto
626 190 611 192 601 198  curveto
593 202 581 216 565 239  curveto
551 259 544 269 544 269  curveto
548 264 384 249 54 225  curveto
-275 200 -441 182 -441 172  curveto
-441 151 -118 123 527 89  curveto
488 120 469 148 469 173  curveto
469 181 474 198 486 223  curveto
496 245 502 259 502 264  curveto
502 264 497 255 487 238  curveto
480 228 468 215 451 199  curveto
441 193 424 190 402 190  curveto
379 190 358 193 340 201  curveto
348 238 362 262 381 273  curveto
391 279 408 283 432 285  curveto
456 287 477 292 495 300  curveto
478 307 457 312 433 315  curveto
421 315 403 319 381 325  curveto
360 337 347 362 341 400  curveto
361 406 381 409 403 409  curveto
425 409 441 406 451 401  curveto
458 397 470 383 486 361  curveto
499 342 506 333 506 333  curveto
502 339 494 353 484 377  curveto
474 400 469 417 469 427  curveto
469 451 488 478 528 510  curveto
-117 476 -441 449 -441 427  curveto
-441 417 -105 400 566 376  curveto
556 354 550 340 550 334  curveto
550 334 555 344 567 363  curveto
579 382 590 395 600 401  curveto
610 407 627 410 649 410  curveto
671 410 692 407 711 401  curveto
705 363 691 338 671 326  curveto
661 320 644 316 619 314  curveto
606 312 586 308 558 300  curveto
576 292 596 287 618 285  curveto
634 283 643 283 645 283  curveto
655 281 663 278 671 274  curveto
690 262 704 238 713 201  curveto
closepath
fill
		} def

	/less
		{
-3 274 moveto
870 274 lineto
863 188 828 115 765 57  curveto
701 0 622 -30 527 -30  curveto
432 -30 353 0 290 58  curveto
226 116 191 188 185 274  curveto
34 274 lineto
34 326 lineto
185 326 lineto
191 411 226 483 290 542  curveto
353 600 432 630 527 630  curveto
622 630 701 600 765 542  curveto
828 484 863 412 870 326  curveto
-3 326 lineto
-3 274 lineto
closepath
791 326 moveto
784 397 754 457 701 505  curveto
647 553 589 578 527 578  curveto
465 578 407 553 354 505  curveto
300 457 270 397 264 326  curveto
791 326 lineto
closepath
791 274 moveto
264 274 lineto
270 202 300 142 354 94  curveto
407 46 465 22 527 22  curveto
589 22 647 46 701 94  curveto
754 142 784 202 791 274  curveto
closepath
fill
		} def

	/equal
		{
-3 274 moveto
870 274 lineto
864 193 832 124 774 66  curveto
716 8 306 -23 -457 -29  curveto
-457 -200 lineto
488 -200 lineto
488 -29 lineto
407 -23 338 8 280 66  curveto
222 124 191 193 185 274  curveto
34 274 lineto
34 326 lineto
185 326 lineto
191 406 222 475 280 533  curveto
338 591 407 623 488 629  curveto
488 800 lineto
-457 800 lineto
-457 629 lineto
306 622 716 590 774 533  curveto
831 475 863 406 870 326  curveto
-3 326 lineto
-3 274 lineto
closepath
791 326 moveto
785 392 758 448 710 496  curveto
662 544 615 570 567 574  curveto
567 326 lineto
791 326 lineto
closepath
488 326 moveto
488 574 lineto
440 570 392 544 344 496  curveto
296 448 270 392 264 326  curveto
488 326 lineto
closepath
791 274 moveto
-457 274 lineto
-457 25 lineto
273 29 662 55 710 103  curveto
758 151 785 208 791 274  curveto
closepath
488 25 moveto
488 274 lineto
264 274 lineto
270 208 296 151 344 103  curveto
392 55 440 29 488 25  curveto
closepath
fill
		} def

	/greater
		{
-153 -30 moveto
184 -30 lineto
184 630 lineto
-153 630 lineto
-153 -30 lineto
closepath
-232 326 moveto
-232 578 lineto
263 578 lineto
263 326 lineto
-232 326 lineto
closepath
-232 22 moveto
-232 274 lineto
263 274 lineto
263 22 lineto
-232 22 lineto
closepath
fill
		} def

	/question
		{
-153 -30 moveto
184 -30 lineto
184 630 lineto
-153 630 lineto
-153 -30 lineto
closepath
-232 326 moveto
-232 578 lineto
567 578 lineto
567 326 lineto
-232 326 lineto
closepath
488 326 moveto
488 578 lineto
263 578 lineto
263 326 lineto
488 326 lineto
closepath
-232 22 moveto
-232 274 lineto
567 274 lineto
567 22 lineto
-232 22 lineto
closepath
488 22 moveto
488 274 lineto
263 274 lineto
263 22 lineto
488 22 lineto
closepath
fill
		} def

	/at
		{
-153 -30 moveto
184 -30 lineto
184 630 lineto
-153 630 lineto
-153 -30 lineto
closepath
-232 87 moveto
-232 513 lineto
579 300 lineto
-232 87 lineto
closepath
755 578 moveto
300 578 lineto
528 350 lineto
755 578 lineto
closepath
478 300 moveto
263 514 lineto
263 86 lineto
478 300 lineto
closepath
756 22 moveto
528 249 lineto
299 22 lineto
756 22 lineto
closepath
fill
		} def

	/A
		{
-153 -30 moveto
184 -30 lineto
184 630 lineto
-153 630 lineto
-153 -30 lineto
closepath
-232 22 moveto
-232 578 lineto
263 578 lineto
263 22 lineto
-232 22 lineto
closepath
fill
		} def

	/B
		{
-153 -30 moveto
184 -30 lineto
184 630 lineto
-153 630 lineto
-153 -30 lineto
closepath
fill
		} def

	/C
		{
-153 274 moveto
-457 274 lineto
-457 -30 lineto
488 -30 lineto
488 274 lineto
184 274 lineto
184 326 lineto
488 326 lineto
488 630 lineto
-457 630 lineto
-457 326 lineto
-153 326 lineto
-153 274 lineto
closepath
fill
		} def

	/D
		{
-153 261 moveto
-444 261 lineto
-444 -30 lineto
475 -30 lineto
475 261 lineto
184 261 lineto
184 339 lineto
475 339 lineto
475 630 lineto
-444 630 lineto
-444 339 lineto
-153 339 lineto
-153 261 lineto
closepath
fill
		} def

	/E
		{
-153 394 moveto
-457 394 lineto
-457 90 lineto
488 90 lineto
488 394 lineto
184 394 lineto
184 446 lineto
488 446 lineto
488 750 lineto
-457 750 lineto
-457 446 lineto
-153 446 lineto
-153 394 lineto
closepath
-428 -95 moveto
-428 -110 -262 -123 68 -134  curveto
398 -144 551 -150 527 -150  curveto
503 -150 485 -144 475 -134  curveto
464 -123 459 -110 459 -95  curveto
459 -79 464 -66 475 -56  curveto
485 -45 503 -40 527 -40  curveto
551 -40 398 -45 68 -56  curveto
-262 -66 -428 -79 -428 -95  curveto
closepath
fill
		} def

	/F
		{
-428 695 moveto
-428 679 -262 666 68 656  curveto
398 645 551 640 527 640  curveto
503 640 485 645 475 656  curveto
464 666 459 679 459 695  curveto
459 710 464 723 475 734  curveto
485 744 503 750 527 750  curveto
551 750 398 744 68 734  curveto
-262 723 -428 710 -428 695  curveto
closepath
-153 154 moveto
-457 154 lineto
-457 -150 lineto
488 -150 lineto
488 154 lineto
184 154 lineto
184 206 lineto
488 206 lineto
488 510 lineto
-457 510 lineto
-457 206 lineto
-153 206 lineto
-153 154 lineto
closepath
fill
		} def

	/G
		{
-153 337 moveto
-457 337 lineto
-457 33 lineto
488 33 lineto
488 337 lineto
184 337 lineto
184 389 lineto
488 389 lineto
488 693 lineto
-457 693 lineto
-457 389 lineto
-153 389 lineto
-153 337 lineto
closepath
-153 -94 moveto
184 -94 lineto
184 -42 lineto
-153 -42 lineto
-153 -94 lineto
closepath
fill
		} def

	/H
		{
-153 641 moveto
184 641 lineto
184 693 lineto
-153 693 lineto
-153 641 lineto
closepath
-153 210 moveto
-457 210 lineto
-457 -94 lineto
488 -94 lineto
488 210 lineto
184 210 lineto
184 262 lineto
488 262 lineto
488 566 lineto
-457 566 lineto
-457 262 lineto
-153 262 lineto
-153 210 lineto
closepath
fill
		} def

	/I
		{
-457 404 moveto
488 404 lineto
488 630 lineto
-457 630 lineto
-457 404 lineto
closepath
-153 274 moveto
-406 274 lineto
-406 326 lineto
-153 326 lineto
-153 274 lineto
closepath
437 326 moveto
437 274 lineto
184 274 lineto
184 326 lineto
437 326 lineto
closepath
-457 -30 moveto
488 -30 lineto
488 196 lineto
-457 196 lineto
-457 -30 lineto
closepath
fill
		} def

	/J
		{
-428 523 moveto
-428 507 -262 494 68 484  curveto
398 473 551 468 527 468  curveto
503 468 485 473 475 484  curveto
464 494 459 507 459 523  curveto
459 538 464 551 475 562  curveto
485 572 503 578 527 578  curveto
551 578 398 572 68 562  curveto
-262 551 -428 538 -428 523  curveto
closepath
871 8 moveto
820 -43 lineto
528 249 lineto
234 -43 lineto
184 8 lineto
452 274 lineto
184 274 lineto
184 326 lineto
452 326 lineto
184 593 lineto
234 643 lineto
528 350 lineto
820 643 lineto
871 593 lineto
605 326 lineto
-153 326 lineto
-153 274 lineto
605 274 lineto
871 8 lineto
closepath
-428 78 moveto
-428 62 -262 49 68 39  curveto
398 28 551 23 527 23  curveto
503 23 485 28 475 39  curveto
464 49 459 62 459 78  curveto
459 93 464 106 475 117  curveto
485 127 503 133 527 133  curveto
551 133 398 127 68 117  curveto
-262 106 -428 93 -428 78  curveto
closepath
fill
		} def

	/K
		{
-153 274 moveto
184 274 lineto
184 326 lineto
-153 326 lineto
-153 274 lineto
closepath
fill
		} def

	/L
		{
-153 261 moveto
184 261 lineto
184 339 lineto
-153 339 lineto
-153 261 lineto
closepath
fill
		} def

	/M
		{
-153 274 moveto
184 274 lineto
184 326 lineto
-153 326 lineto
-153 274 lineto
closepath
-428 115 moveto
-428 99 -262 86 68 76  curveto
398 65 551 60 527 60  curveto
503 60 485 65 475 76  curveto
464 86 459 99 459 115  curveto
459 130 464 143 475 154  curveto
485 164 503 170 527 170  curveto
551 170 398 164 68 154  curveto
-262 143 -428 130 -428 115  curveto
closepath
fill
		} def

	/N
		{
-428 485 moveto
-428 469 -262 456 68 446  curveto
398 435 551 430 527 430  curveto
503 430 485 435 475 446  curveto
464 456 459 469 459 485  curveto
459 500 464 513 475 524  curveto
485 534 503 540 527 540  curveto
551 540 398 534 68 524  curveto
-262 513 -428 500 -428 485  curveto
closepath
-153 274 moveto
184 274 lineto
184 326 lineto
-153 326 lineto
-153 274 lineto
closepath
fill
		} def

	/O
		{
-428 485 moveto
-428 469 -262 456 68 446  curveto
398 435 551 430 527 430  curveto
503 430 485 435 475 446  curveto
464 456 459 469 459 485  curveto
459 500 464 513 475 524  curveto
485 534 503 540 527 540  curveto
551 540 398 534 68 524  curveto
-262 513 -428 500 -428 485  curveto
closepath
-153 274 moveto
184 274 lineto
184 326 lineto
-153 326 lineto
-153 274 lineto
closepath
-428 115 moveto
-428 99 -262 86 68 76  curveto
398 65 551 60 527 60  curveto
503 60 485 65 475 76  curveto
464 86 459 99 459 115  curveto
459 130 464 143 475 154  curveto
485 164 503 170 527 170  curveto
551 170 398 164 68 154  curveto
-262 143 -428 130 -428 115  curveto
closepath
fill
		} def

	/P
		{
-205 485 moveto
-205 469 -39 456 291 446  curveto
621 435 774 430 750 430  curveto
726 430 538 435 186 446  curveto
-166 456 -342 469 -342 485  curveto
-342 500 -166 513 186 524  curveto
538 534 726 540 750 540  curveto
774 540 621 534 291 524  curveto
-39 513 -205 500 -205 485  curveto
closepath
-205 115 moveto
-205 99 -39 86 291 76  curveto
621 65 774 60 750 60  curveto
726 60 538 65 186 76  curveto
-166 86 -342 99 -342 115  curveto
-342 130 -166 143 186 154  curveto
538 164 726 170 750 170  curveto
774 170 621 164 291 154  curveto
-39 143 -205 130 -205 115  curveto
closepath
-153 274 moveto
184 274 lineto
184 326 lineto
-153 326 lineto
-153 274 lineto
closepath
373 485 moveto
373 469 367 456 357 446  curveto
346 435 328 430 304 430  curveto
280 430 262 435 252 446  curveto
241 456 236 469 236 485  curveto
236 500 241 513 252 524  curveto
262 534 280 540 304 540  curveto
328 540 346 534 357 524  curveto
367 513 373 500 373 485  curveto
closepath
373 115 moveto
373 99 367 86 357 76  curveto
346 65 328 60 304 60  curveto
280 60 262 65 252 76  curveto
241 86 236 99 236 115  curveto
236 130 241 143 252 154  curveto
262 164 280 170 304 170  curveto
328 170 346 164 357 154  curveto
367 143 373 130 373 115  curveto
closepath
fill
		} def

	/Q
		{
-483 201 moveto
14 201 lineto
14 250 lineto
-483 250 lineto
-483 201 lineto
closepath
fill
		} def

	/R
		{
17 201 moveto
14 201 lineto
14 250 lineto
17 250 lineto
17 201 lineto
closepath
fill
		} def

	/S
		{
767 446 moveto
668 446 lineto
527 583 lineto
387 446 lineto
288 446 lineto
527 681 lineto
767 446 lineto
closepath
-153 274 moveto
184 274 lineto
184 326 lineto
-153 326 lineto
-153 274 lineto
closepath
fill
		} def

	/T
		{
-362 479 moveto
-362 463 -196 450 134 440  curveto
464 429 617 424 593 424  curveto
569 424 381 429 29 440  curveto
-323 450 -499 463 -499 479  curveto
-499 494 -323 507 29 518  curveto
381 528 569 534 593 534  curveto
617 534 464 528 134 518  curveto
-196 507 -362 494 -362 479  curveto
closepath
319 479 moveto
319 463 313 450 303 440  curveto
292 429 274 424 250 424  curveto
226 424 208 429 198 440  curveto
187 450 182 463 182 479  curveto
182 494 187 507 198 518  curveto
208 528 226 534 250 534  curveto
274 534 292 528 303 518  curveto
313 507 319 494 319 479  curveto
closepath
-362 121 moveto
-362 105 -196 92 134 82  curveto
464 71 617 66 593 66  curveto
569 66 381 71 29 82  curveto
-323 92 -499 105 -499 121  curveto
-499 136 -323 149 29 160  curveto
381 170 569 176 593 176  curveto
617 176 464 170 134 160  curveto
-196 149 -362 136 -362 121  curveto
closepath
319 121 moveto
319 105 313 92 303 82  curveto
292 71 274 66 250 66  curveto
226 66 208 71 198 82  curveto
187 92 182 105 182 121  curveto
182 136 187 149 198 160  curveto
208 170 226 176 250 176  curveto
274 176 292 170 303 160  curveto
313 149 319 136 319 121  curveto
closepath
fill
		} def

	/U
		{
-153 13 moveto
184 300 lineto
-153 586 lineto
-153 13 lineto
closepath
-153 -100 moveto
184 -100 lineto
184 -48 lineto
-153 -48 lineto
-153 -100 lineto
closepath
-232 114 moveto
-232 485 lineto
346 300 lineto
-232 114 lineto
closepath
fill
		} def

	/V
		{
871 300 moveto
184 13 lineto
184 586 lineto
871 300 lineto
closepath
-153 -100 moveto
184 -100 lineto
184 -48 lineto
-153 -48 lineto
-153 -100 lineto
closepath
709 300 moveto
263 485 lineto
263 114 lineto
709 300 lineto
closepath
fill
		} def

	/W
		{
-153 -100 moveto
467 -100 lineto
427 -205 lineto
343 -205 lineto
384 -100 lineto
184 -100 lineto
184 -48 lineto
404 -48 lineto
489 173 lineto
184 300 lineto
606 476 lineto
680 667 lineto
762 667 lineto
704 516 lineto
-153 586 lineto
-153 13 lineto
560 143 lineto
487 -48 lineto
-153 -48 lineto
-153 -100 lineto
closepath
-232 114 moveto
-232 485 lineto
673 436 lineto
583 201 lineto
-232 114 lineto
closepath
574 395 moveto
346 300 lineto
511 230 lineto
574 395 lineto
closepath
fill
		} def

	/X
		{
-153 -100 moveto
387 -100 lineto
347 -204 lineto
263 -204 lineto
303 -100 lineto
184 -100 lineto
184 -48 lineto
324 -48 lineto
378 95 lineto
184 13 lineto
184 586 lineto
515 447 lineto
582 617 lineto
664 617 lineto
587 418 lineto
871 300 lineto
478 136 lineto
407 -48 lineto
-153 -48 lineto
-153 -100 lineto
closepath
709 300 moveto
565 360 lineto
509 217 lineto
709 300 lineto
closepath
494 390 moveto
263 485 lineto
263 114 lineto
411 176 lineto
494 390 lineto
closepath
fill
		} def

	/Y
		{
738 148 moveto
712 100 673 59 621 27  curveto
569 -5 513 -22 453 -22  curveto
333 -22 244 11 186 77  curveto
130 138 101 223 97 333  curveto
19 333 lineto
19 373 lineto
98 373 lineto
102 449 132 520 187 585  curveto
245 653 315 688 398 688  curveto
450 688 495 681 533 668  curveto
569 655 589 649 595 649  curveto
613 649 629 662 643 688  curveto
688 688 lineto
736 476 lineto
682 476 lineto
601 596 511 657 413 657  curveto
355 657 307 628 269 572  curveto
235 522 218 461 218 391  curveto
218 385 218 379 218 373  curveto
367 373 lineto
367 333 lineto
221 333 lineto
231 249 259 181 306 129  curveto
357 71 419 42 493 42  curveto
563 42 626 77 682 148  curveto
738 148 lineto
closepath
fill
		} def

	/Z
		{
557 154 moveto
485 51 426 0 380 0  curveto
355 0 337 6 326 18  curveto
314 30 309 45 309 61  curveto
309 69 313 91 322 125  curveto
333 163 345 202 357 242  curveto
373 296 381 333 381 353  curveto
381 372 380 382 378 382  curveto
352 382 314 341 263 260  curveto
223 197 194 140 176 88  curveto
171 70 166 52 162 34  curveto
154 11 137 0 112 0  curveto
80 0 65 8 65 24  curveto
65 26 70 50 80 97  curveto
152 437 lineto
70 396 lineto
70 457 lineto
168 506 lineto
177 549 lineto
184 583 188 605 188 617  curveto
188 627 186 634 183 639  curveto
175 647 152 651 112 653  curveto
112 675 lineto
298 675 lineto
273 559 lineto
364 604 lineto
364 544 lineto
259 491 lineto
200 235 lineto
272 367 342 433 412 433  curveto
456 433 479 408 479 358  curveto
479 342 471 307 455 253  curveto
445 221 435 190 426 160  curveto
413 118 407 87 407 67  curveto
407 55 408 49 411 49  curveto
424 49 461 93 521 181  curveto
557 154 lineto
closepath
fill
		} def

	/bracketleft
		{
443 25 moveto
422 -1 390 -14 348 -14  curveto
296 -14 244 19 194 85  curveto
179 69 140 30 78 -29  curveto
42 7 lineto
161 139 lineto
140 171 122 216 107 274  curveto
92 331 85 380 85 421  curveto
85 480 97 534 121 584  curveto
151 645 198 676 260 676  curveto
314 676 354 654 380 610  curveto
401 572 412 529 412 481  curveto
412 434 394 378 360 314  curveto
340 278 308 228 264 164  curveto
265 144 277 117 300 83  curveto
324 46 340 28 349 28  curveto
365 28 381 43 398 74  curveto
443 25 lineto
closepath
333 481 moveto
333 515 327 545 317 572  curveto
302 608 285 626 265 626  curveto
219 626 196 561 196 432  curveto
196 358 210 291 238 231  curveto
253 245 273 281 297 338  curveto
321 394 333 442 333 481  curveto
closepath
fill
		} def

	/backslash
		{
-507 331 moveto
-507 248 -180 175 473 113  curveto
433 28 367 -14 277 -14  curveto
237 -14 213 -11 203 -6  curveto
175 -92 lineto
104 -92 lineto
143 29 lineto
106 61 78 109 60 174  curveto
45 224 38 276 38 331  curveto
38 413 52 485 82 548  curveto
122 633 187 676 277 676  curveto
317 676 341 673 351 668  curveto
380 754 lineto
451 754 lineto
411 633 lineto
448 600 476 551 495 487  curveto
-173 437 -507 385 -507 331  curveto
closepath
334 615 moveto
316 638 297 650 277 650  curveto
199 650 161 543 161 331  curveto
161 227 166 160 177 132  curveto
334 615 lineto
closepath
394 331 moveto
394 431 388 497 376 527  curveto
220 46 lineto
239 23 258 12 277 12  curveto
355 12 394 118 394 331  curveto
closepath
fill
		} def

	/bracketright
		{
-33 365 moveto
64 365 lineto
64 417 lineto
-33 417 lineto
-33 365 lineto
closepath
-33 183 moveto
64 183 lineto
64 235 lineto
-33 235 lineto
-33 183 lineto
closepath
fill
		} def

	/asciicircum
		{
-33 456 moveto
64 456 lineto
64 508 lineto
-33 508 lineto
-33 456 lineto
closepath
-33 274 moveto
64 274 lineto
64 326 lineto
-33 326 lineto
-33 274 lineto
closepath
-33 92 moveto
64 92 lineto
64 144 lineto
-33 144 lineto
-33 92 lineto
closepath
fill
		} def

	/underscore
		{
-33 547 moveto
64 547 lineto
64 599 lineto
-33 599 lineto
-33 547 lineto
closepath
-33 365 moveto
64 365 lineto
64 417 lineto
-33 417 lineto
-33 365 lineto
closepath
-33 183 moveto
64 183 lineto
64 235 lineto
-33 235 lineto
-33 183 lineto
closepath
-33 1 moveto
64 1 lineto
64 53 lineto
-33 53 lineto
-33 1 lineto
closepath
fill
		} def

	/quoteleft
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/a
		{
-283 365 moveto
64 365 lineto
64 417 lineto
-283 417 lineto
-283 365 lineto
closepath
-283 183 moveto
64 183 lineto
64 235 lineto
-283 235 lineto
-283 183 lineto
closepath
fill
		} def

	/b
		{
-283 456 moveto
64 456 lineto
64 508 lineto
-283 508 lineto
-283 456 lineto
closepath
-283 274 moveto
64 274 lineto
64 326 lineto
-283 326 lineto
-283 274 lineto
closepath
-283 92 moveto
64 92 lineto
64 144 lineto
-283 144 lineto
-283 92 lineto
closepath
fill
		} def

	/c
		{
-283 547 moveto
64 547 lineto
64 599 lineto
-283 599 lineto
-283 547 lineto
closepath
-283 365 moveto
64 365 lineto
64 417 lineto
-283 417 lineto
-283 365 lineto
closepath
-283 183 moveto
64 183 lineto
64 235 lineto
-283 235 lineto
-283 183 lineto
closepath
-283 1 moveto
64 1 lineto
64 53 lineto
-283 53 lineto
-283 1 lineto
closepath
fill
		} def

	/d
		{
-33 274 moveto
64 274 lineto
64 326 lineto
-33 326 lineto
-33 274 lineto
closepath
fill
		} def

	/e
		{
-283 274 moveto
64 274 lineto
64 326 lineto
-283 326 lineto
-283 274 lineto
closepath
fill
		} def

	/f
		{
-283 365 moveto
-460 365 lineto
-460 417 lineto
-283 417 lineto
-283 365 lineto
closepath
491 365 moveto
314 365 lineto
314 417 lineto
491 417 lineto
491 365 lineto
closepath
-283 183 moveto
64 183 lineto
64 235 lineto
-283 235 lineto
-283 183 lineto
closepath
241 417 moveto
241 365 lineto
64 365 lineto
64 417 lineto
241 417 lineto
closepath
fill
		} def

	/g
		{
-283 183 moveto
-460 183 lineto
-460 235 lineto
-283 235 lineto
-283 183 lineto
closepath
-283 365 moveto
64 365 lineto
64 417 lineto
-283 417 lineto
-283 365 lineto
closepath
491 235 moveto
491 183 lineto
314 183 lineto
314 235 lineto
491 235 lineto
closepath
241 183 moveto
64 183 lineto
64 235 lineto
241 235 lineto
241 183 lineto
closepath
fill
		} def

	/h
		{
-283 456 moveto
-460 456 lineto
-460 508 lineto
-283 508 lineto
-283 456 lineto
closepath
491 456 moveto
314 456 lineto
314 508 lineto
491 508 lineto
491 456 lineto
closepath
-283 274 moveto
64 274 lineto
64 326 lineto
-283 326 lineto
-283 274 lineto
closepath
241 508 moveto
241 456 lineto
64 456 lineto
64 508 lineto
241 508 lineto
closepath
-283 92 moveto
64 92 lineto
64 144 lineto
-283 144 lineto
-283 92 lineto
closepath
fill
		} def

	/i
		{
-283 456 moveto
64 456 lineto
64 508 lineto
-283 508 lineto
-283 456 lineto
closepath
-283 92 moveto
-460 92 lineto
-460 144 lineto
-283 144 lineto
-283 92 lineto
closepath
-283 274 moveto
64 274 lineto
64 326 lineto
-283 326 lineto
-283 274 lineto
closepath
491 144 moveto
491 92 lineto
314 92 lineto
314 144 lineto
491 144 lineto
closepath
241 92 moveto
64 92 lineto
64 144 lineto
241 144 lineto
241 92 lineto
closepath
fill
		} def

	/j
		{
741 379 moveto
741 365 737 353 728 343  curveto
718 333 707 328 693 328  curveto
661 326 641 330 630 340  curveto
620 350 614 363 614 377  curveto
613 391 617 402 627 412  curveto
637 422 649 427 663 428  curveto
694 429 714 425 724 415  curveto
734 405 740 393 741 379  curveto
closepath
466 379 moveto
466 365 462 353 453 343  curveto
443 333 432 328 418 328  curveto
386 326 366 330 355 340  curveto
345 350 339 363 339 377  curveto
338 391 342 402 352 412  curveto
362 422 374 427 388 428  curveto
419 429 439 425 449 415  curveto
459 405 465 393 466 379  curveto
closepath
-283 172 moveto
64 172 lineto
64 224 lineto
-283 224 lineto
-283 172 lineto
closepath
191 379 moveto
191 365 187 353 178 343  curveto
168 333 157 328 143 328  curveto
111 326 91 330 80 340  curveto
70 350 64 363 64 377  curveto
63 391 67 402 77 412  curveto
87 422 99 427 113 428  curveto
144 429 164 425 174 415  curveto
184 405 190 393 191 379  curveto
closepath
fill
		} def

	/k
		{
909 435 moveto
771 0 lineto
283 0 lineto
146 435 lineto
527 711 lineto
909 435 lineto
closepath
821 415 moveto
527 628 lineto
234 415 lineto
348 52 lineto
706 52 lineto
821 415 lineto
closepath
fill
		} def

	/l
		{
947 351 moveto
744 0 lineto
311 0 lineto
108 351 lineto
311 702 lineto
744 702 lineto
947 351 lineto
closepath
860 351 moveto
687 650 lineto
368 650 lineto
195 351 lineto
368 52 lineto
687 52 lineto
860 351 lineto
closepath
fill
		} def

	/m
		{
615 781 moveto
89 426 lineto
64 464 lineto
589 818 lineto
615 781 lineto
closepath
-415 285 moveto
74 285 lineto
74 315 lineto
-415 315 lineto
-415 285 lineto
closepath
615 -181 moveto
589 -218 lineto
64 136 lineto
89 173 lineto
615 -181 lineto
closepath
fill
		} def

	/n
		{
615 464 moveto
589 426 lineto
64 781 lineto
89 818 lineto
615 464 lineto
closepath
-419 285 moveto
70 285 lineto
70 315 lineto
-419 315 lineto
-419 285 lineto
closepath
615 136 moveto
89 -218 lineto
64 -181 lineto
589 173 lineto
615 136 lineto
closepath
fill
		} def

	/o
		{
615 781 moveto
89 426 lineto
64 464 lineto
589 818 lineto
615 781 lineto
closepath
615 -181 moveto
589 -218 lineto
64 136 lineto
89 173 lineto
615 -181 lineto
closepath
fill
		} def

	/p
		{
615 464 moveto
589 426 lineto
64 781 lineto
89 818 lineto
615 464 lineto
closepath
615 136 moveto
89 -218 lineto
64 -181 lineto
589 173 lineto
615 136 lineto
closepath
fill
		} def

	/q
		{
615 464 moveto
589 426 lineto
64 781 lineto
89 818 lineto
615 464 lineto
closepath
615 304 moveto
589 266 lineto
64 621 lineto
89 658 lineto
615 304 lineto
closepath
615 136 moveto
89 -218 lineto
64 -181 lineto
589 173 lineto
615 136 lineto
closepath
fill
		} def

	/r
		{
615 464 moveto
589 426 lineto
64 781 lineto
89 818 lineto
615 464 lineto
closepath
615 296 moveto
89 -58 lineto
64 -21 lineto
589 333 lineto
615 296 lineto
closepath
615 136 moveto
89 -218 lineto
64 -181 lineto
589 173 lineto
615 136 lineto
closepath
fill
		} def

	/s
		{
615 781 moveto
89 426 lineto
64 464 lineto
589 818 lineto
615 781 lineto
closepath
615 621 moveto
89 266 lineto
64 304 lineto
589 658 lineto
615 621 lineto
closepath
615 -181 moveto
589 -218 lineto
64 136 lineto
89 173 lineto
615 -181 lineto
closepath
fill
		} def

	/t
		{
615 781 moveto
89 426 lineto
64 464 lineto
589 818 lineto
615 781 lineto
closepath
615 -21 moveto
589 -58 lineto
64 296 lineto
89 333 lineto
615 -21 lineto
closepath
615 -181 moveto
589 -218 lineto
64 136 lineto
89 173 lineto
615 -181 lineto
closepath
fill
		} def

	/u
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/v
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/w
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/x
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/y
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/z
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/braceleft
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/bar
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/braceright
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/asciitilde
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/exclamdown
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/cent
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/sterling
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/fraction
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/yen
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/florin
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/section
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/currency
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/quotesingle
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/quotedblleft
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/guillemotleft
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/guilsinglleft
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/guilsinglright
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/fi
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/fl
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/endash
		{
-63 300 moveto
-63 196 71 108 339 35  curveto
607 -38 684 -75 572 -75  curveto
460 -75 367 -38 294 35  curveto
220 108 184 196 184 300  curveto
184 403 220 491 294 565  curveto
367 638 460 675 572 675  curveto
684 675 607 638 339 565  curveto
71 491 -63 403 -63 300  curveto
closepath
-142 300 moveto
-142 389 -2 465 275 528  curveto
553 591 652 623 572 623  curveto
492 623 420 591 357 528  curveto
294 465 263 389 263 300  curveto
263 210 294 134 357 71  curveto
420 8 492 -23 572 -23  curveto
652 -23 553 8 275 71  curveto
-2 134 -142 210 -142 300  curveto
closepath
-383 474 moveto
-383 458 -217 445 113 435  curveto
443 424 596 419 572 419  curveto
548 419 530 424 520 435  curveto
509 445 504 458 504 474  curveto
504 489 509 502 520 513  curveto
530 523 548 529 572 529  curveto
596 529 443 523 113 513  curveto
-217 502 -383 489 -383 474  curveto
closepath
-167 274 moveto
288 274 lineto
288 326 lineto
-167 326 lineto
-167 274 lineto
closepath
-383 126 moveto
-383 110 -217 97 113 87  curveto
443 76 596 71 572 71  curveto
548 71 530 76 520 87  curveto
509 97 504 110 504 126  curveto
504 141 509 154 520 165  curveto
530 175 548 181 572 181  curveto
596 181 443 175 113 165  curveto
-217 154 -383 141 -383 126  curveto
closepath
fill
		} def

	/dagger
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/daggerdbl
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/periodcentered
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/paragraph
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/bullet
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/quotesinglbase
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/quotedblbase
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/quotedblright
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/guillemotright
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/ellipsis
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/perthousand
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/questiondown
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/grave
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/acute
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/circumflex
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/tilde
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/macron
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/breve
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/dotaccent
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/dieresis
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/ring
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/cedilla
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/hungarumlaut
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/ogonek
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/caron
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/emdash
		{
-63 300 moveto
-63 196 71 108 339 35  curveto
607 -38 684 -75 572 -75  curveto
460 -75 367 -38 294 35  curveto
220 108 184 196 184 300  curveto
184 403 220 491 294 565  curveto
367 638 460 675 572 675  curveto
684 675 607 638 339 565  curveto
71 491 -63 403 -63 300  curveto
closepath
-142 300 moveto
-142 389 -2 465 275 528  curveto
553 591 652 623 572 623  curveto
492 623 420 591 357 528  curveto
294 465 263 389 263 300  curveto
263 210 294 134 357 71  curveto
420 8 492 -23 572 -23  curveto
652 -23 553 8 275 71  curveto
-2 134 -142 210 -142 300  curveto
closepath
-383 474 moveto
-383 458 -217 445 113 435  curveto
443 424 596 419 572 419  curveto
548 419 530 424 520 435  curveto
509 445 504 458 504 474  curveto
504 489 509 502 520 513  curveto
530 523 548 529 572 529  curveto
596 529 443 523 113 513  curveto
-217 502 -383 489 -383 474  curveto
closepath
-167 274 moveto
288 274 lineto
288 326 lineto
-167 326 lineto
-167 274 lineto
closepath
-383 126 moveto
-383 110 -217 97 113 87  curveto
443 76 596 71 572 71  curveto
548 71 530 76 520 87  curveto
509 97 504 110 504 126  curveto
504 141 509 154 520 165  curveto
530 175 548 181 572 181  curveto
596 181 443 175 113 165  curveto
-217 154 -383 141 -383 126  curveto
closepath
fill
		} def

	/AE
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/ordfeminine
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/Lslash
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/Oslash
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/OE
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/ordmasculine
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/ae
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/dotlessi
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/lslash
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/oslash
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/oe
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/germandbls
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/.notdef
		{
0 0 moveto
1000 0 lineto
1000 1000 lineto
0 1000 lineto
0 0 lineto
closepath
50 50 moveto
950 50 lineto
950 950 lineto
50 950 lineto
50 50 lineto
closepath
fill
		} def

	end				% close glyph dict. 
	currentdict			% actually put dict on the stack
	end			% close the dictionary now
	/ESSTIXFive-Bold exch definefont pop
/ESSTIXFive-Bold findfont 18.0 scalefont setfont
(K) show
Q
Q
44.0 249.0 moveto
q 1 -1 scale
9 dict begin
/FontType 3 def
/FontMatrix [0.0010 0 0 0.0010 0 0]def
/FontBBox [0 -213 1628 950 ] def
	/Encoding 256 array def
			0 1 255 {Encoding exch /.notdef put}for
		Encoding 32 /space put
		Encoding 33 /exclam put
		Encoding 34 /quotedbl put
		Encoding 35 /numbersign put
		Encoding 36 /dollar put
		Encoding 37 /percent put
		Encoding 38 /ampersand put
		Encoding 39 /quoteright put
		Encoding 40 /parenleft put
		Encoding 41 /parenright put
		Encoding 42 /asterisk put
		Encoding 43 /plus put
		Encoding 44 /comma put
		Encoding 45 /hyphen put
		Encoding 46 /period put
		Encoding 47 /slash put
		Encoding 48 /zero put
		Encoding 49 /one put
		Encoding 50 /two put
		Encoding 51 /three put
		Encoding 52 /four put
		Encoding 53 /five put
		Encoding 54 /six put
		Encoding 55 /seven put
		Encoding 56 /eight put
		Encoding 57 /nine put
		Encoding 58 /colon put
		Encoding 59 /semicolon put
		Encoding 60 /less put
		Encoding 61 /equal put
		Encoding 62 /greater put
		Encoding 63 /question put
		Encoding 64 /at put
		Encoding 65 /A put
		Encoding 66 /B put
		Encoding 67 /C put
		Encoding 68 /D put
		Encoding 69 /E put
		Encoding 70 /F put
		Encoding 71 /G put
		Encoding 72 /H put
		Encoding 73 /I put
		Encoding 74 /J put
		Encoding 75 /K put
		Encoding 76 /L put
		Encoding 77 /M put
		Encoding 78 /N put
		Encoding 79 /O put
		Encoding 80 /P put
		Encoding 81 /Q put
		Encoding 82 /R put
		Encoding 83 /S put
		Encoding 84 /T put
		Encoding 85 /U put
		Encoding 86 /V put
		Encoding 87 /W put
		Encoding 88 /X put
		Encoding 89 /Y put
		Encoding 90 /Z put
		Encoding 91 /bracketleft put
		Encoding 92 /backslash put
		Encoding 93 /bracketright put
		Encoding 94 /asciicircum put
		Encoding 95 /underscore put
		Encoding 96 /quoteleft put
		Encoding 97 /a put
		Encoding 98 /b put
		Encoding 99 /c put
		Encoding 100 /d put
		Encoding 101 /e put
		Encoding 102 /f put
		Encoding 103 /g put
		Encoding 104 /h put
		Encoding 105 /i put
		Encoding 106 /j put
		Encoding 107 /k put
		Encoding 108 /l put
		Encoding 109 /m put
		Encoding 110 /n put
		Encoding 111 /o put
		Encoding 112 /p put
		Encoding 113 /q put
		Encoding 114 /r put
		Encoding 115 /s put
		Encoding 116 /t put
		Encoding 117 /u put
		Encoding 118 /v put
		Encoding 119 /w put
		Encoding 120 /x put
		Encoding 121 /y put
		Encoding 122 /z put
		Encoding 123 /braceleft put
		Encoding 124 /bar put
		Encoding 125 /braceright put
		Encoding 126 /asciitilde put
		Encoding 161 /exclamdown put
		Encoding 162 /cent put
		Encoding 163 /sterling put
		Encoding 164 /fraction put
		Encoding 165 /yen put
		Encoding 166 /florin put
		Encoding 167 /section put
		Encoding 168 /currency put
		Encoding 169 /quotesingle put
		Encoding 170 /quotedblleft put
		Encoding 171 /guillemotleft put
		Encoding 172 /guilsinglleft put
		Encoding 173 /guilsinglright put
		Encoding 174 /fi put
		Encoding 175 /fl put
		Encoding 177 /endash put
		Encoding 178 /dagger put
		Encoding 179 /daggerdbl put
		Encoding 180 /periodcentered put
		Encoding 182 /paragraph put
		Encoding 183 /bullet put
		Encoding 184 /quotesinglbase put
		Encoding 185 /quotedblbase put
		Encoding 186 /quotedblright put
		Encoding 187 /guillemotright put
		Encoding 188 /ellipsis put
		Encoding 189 /perthousand put
		Encoding 191 /questiondown put
		Encoding 193 /grave put
		Encoding 194 /acute put
		Encoding 195 /circumflex put
		Encoding 196 /tilde put
		Encoding 197 /macron put
		Encoding 198 /breve put
		Encoding 199 /dotaccent put
		Encoding 200 /dieresis put
		Encoding 202 /ring put
		Encoding 203 /cedilla put
		Encoding 205 /hungarumlaut put
		Encoding 206 /ogonek put
		Encoding 207 /caron put
		Encoding 208 /emdash put
		Encoding 225 /AE put
		Encoding 227 /ordfeminine put
		Encoding 232 /Lslash put
		Encoding 233 /Oslash put
		Encoding 234 /OE put
		Encoding 235 /ordmasculine put
		Encoding 241 /ae put
		Encoding 245 /dotlessi put
		Encoding 248 /lslash put
		Encoding 249 /oslash put
		Encoding 250 /oe put
		Encoding 251 /germandbls put
	/BuildGlyph
		{ 2 copy exch /Metrics get exch 
			2 copy known {get}{pop pop 1000.0} ifelse
			0
			0 -213 1628 950
			setcachedevice
			exch /CharProcs get exch
			2 copy known not
					{pop /.notdef}
				if
			get exec
		} bind def

	/BuildChar
		{ 1 index /Encoding get exch get
		  1 index /BuildGlyph get exec
	  } bind def
	/Metrics 150 dict def
		Metrics begin
		/.notdef 1000 def
		/space 371.58203125 def
		/exclam 371.58203125 def
		/quotedbl 428.7109375 def
		/numbersign 687.5 def
		/dollar 687.5 def
		/percent 723.6328125 def
		/ampersand 752.44140625 def
		/quoteright 284.1796875 def
		/parenleft 380.37109375 def
		/parenright 380.37109375 def
		/asterisk 537.109375 def
		/plus 850.09765625 def
		/comma 371.58203125 def
		/hyphen 633.7890625 def
		/period 371.58203125 def
		/slash 579.58984375 def
		/zero 687.5 def
		/one 687.5 def
		/two 687.5 def
		/three 687.5 def
		/four 687.5 def
		/five 687.5 def
		/six 687.5 def
		/seven 687.5 def
		/eight 687.5 def
		/nine 687.5 def
		/colon 371.58203125 def
		/semicolon 371.58203125 def
		/less 850.09765625 def
		/equal 850.09765625 def
		/greater 850.09765625 def
		/question 477.05078125 def
		/at 913.57421875 def
		/A 745.1171875 def
		/B 630.37109375 def
		/C 747.0703125 def
		/D 804.19921875 def
		/E 597.16796875 def
		/F 591.30859375 def
		/G 777.83203125 def
		/H 790.0390625 def
		/I 343.26171875 def
		/J 366.2109375 def
		/K 708.0078125 def
		/L 588.37890625 def
		/M 916.50390625 def
		/N 793.9453125 def
		/O 832.03125 def
		/P 607.91015625 def
		/Q 832.03125 def
		/R 687.5 def
		/S 593.75 def
		/T 687.5 def
		/U 748.046875 def
		/V 708.984375 def
		/W 910.64453125 def
		/X 681.15234375 def
		/Y 678.22265625 def
		/Z 659.66796875 def
		/bracketleft 380.37109375 def
		/backslash 579.58984375 def
		/bracketright 380.37109375 def
		/asciicircum 687.5 def
		/underscore 555.17578125 def
		/quoteleft 669.43359375 def
		/a 607.421875 def
		/b 684.5703125 def
		/c 567.3828125 def
		/d 684.5703125 def
		/e 612.3046875 def
		/f 422.8515625 def
		/g 678.7109375 def
		/h 675.78125 def
		/i 344.23828125 def
		/j 359.375 def
		/k 639.6484375 def
		/l 344.23828125 def
		/m 988.76953125 def
		/n 675.78125 def
		/o 669.43359375 def
		/p 684.5703125 def
		/q 684.5703125 def
		/r 464.35546875 def
		/s 564.94140625 def
		/t 429.19921875 def
		/u 675.78125 def
		/v 572.75390625 def
		/w 825.68359375 def
		/x 668.45703125 def
		/y 577.63671875 def
		/z 628.41796875 def
		/braceleft 380.37109375 def
		/bar 428.7109375 def
		/braceright 380.37109375 def
		/asciitilde 687.5 def
		/exclamdown 371.58203125 def
		/cent 687.5 def
		/sterling 687.5 def
		/fraction 55.17578125 def
		/yen 687.5 def
		/florin 687.5 def
		/section 687.5 def
		/currency 687.98828125 def
		/quotesingle 284.1796875 def
		/quotedblleft 452.63671875 def
		/guillemotleft 579.1015625 def
		/guilsinglleft 386.71875 def
		/guilsinglright 386.71875 def
		/fi 699.70703125 def
		/fl 702.63671875 def
		/endash 633.7890625 def
		/dagger 687.5 def
		/daggerdbl 687.5 def
		/periodcentered 371.58203125 def
		/paragraph 687.5 def
		/bullet 663.57421875 def
		/quotesinglbase 371.58203125 def
		/quotedblbase 452.63671875 def
		/quotedblright 452.63671875 def
		/guillemotright 579.1015625 def
		/ellipsis 1055.17578125 def
		/perthousand 1067.3828125 def
		/questiondown 477.05078125 def
		/grave 669.43359375 def
		/acute 669.43359375 def
		/circumflex 669.43359375 def
		/tilde 669.43359375 def
		/macron 555.17578125 def
		/breve 669.43359375 def
		/dotaccent 669.43359375 def
		/dieresis 669.43359375 def
		/ring 669.43359375 def
		/cedilla 669.43359375 def
		/hungarumlaut 561.03515625 def
		/ogonek 669.43359375 def
		/caron 669.43359375 def
		/emdash 633.7890625 def
		/AE 961.9140625 def
		/ordfeminine 524.90234375 def
		/Lslash 603.515625 def
		/Oslash 832.03125 def
		/OE 1055.17578125 def
		/ordmasculine 524.90234375 def
		/ae 906.25 def
		/dotlessi 344.23828125 def
		/lslash 383.30078125 def
		/oslash 669.43359375 def
		/oe 983.3984375 def
		/germandbls 653.3203125 def
	end
	/CharProcs 150 dict def
	CharProcs begin
			%define Glyph dictionary and start filling
	/space
		{
fill
		} def

	/exclam
		{
123 0 moveto
123 96 lineto
247 96 lineto
247 0 lineto
123 0 lineto
closepath
136 192 moveto
123 578 lineto
123 722 lineto
247 722 lineto
247 578 lineto
235 192 lineto
136 192 lineto
closepath
fill
		} def

	/quotedbl
		{
80 530 moveto
68 771 lineto
191 771 lineto
179 530 lineto
80 530 lineto
closepath
248 530 moveto
236 771 lineto
360 771 lineto
348 530 lineto
248 530 lineto
closepath
fill
		} def

	/numbersign
		{
113 0 moveto
167 216 lineto
21 216 lineto
33 277 lineto
182 277 lineto
224 445 lineto
66 445 lineto
78 505 lineto
239 505 lineto
294 722 lineto
383 722 lineto
329 505 lineto
430 505 lineto
484 722 lineto
574 722 lineto
520 505 lineto
666 505 lineto
654 445 lineto
504 445 lineto
462 277 lineto
620 277 lineto
608 216 lineto
447 216 lineto
393 0 lineto
304 0 lineto
358 216 lineto
256 216 lineto
202 0 lineto
113 0 lineto
closepath
271 277 moveto
373 277 lineto
415 445 lineto
313 445 lineto
271 277 lineto
closepath
fill
		} def

	/dollar
		{
312 -60 moveto
312 0 lineto
255 0 190 13 119 40  curveto
119 136 lineto
211 93 275 72 312 72  curveto
312 331 lineto
246 371 201 407 176 438  curveto
152 469 140 506 140 549  curveto
140 597 156 637 187 669  curveto
218 700 260 718 312 722  curveto
312 783 lineto
387 783 lineto
387 722 lineto
434 722 145 711 -480 689  curveto
-480 599 lineto
122 634 411 652 387 654  curveto
387 399 lineto
404 388 417 380 426 375  curveto
476 345 339 317 16 293  curveto
-306 269 -467 238 -467 202  curveto
-467 151 -312 107 -1 71  curveto
309 34 439 11 387 0  curveto
387 -60 lineto
312 -60 lineto
closepath
387 87 moveto
425 101 444 134 444 187  curveto
444 211 439 230 428 244  curveto
417 259 404 272 387 284  curveto
387 87 lineto
closepath
312 448 moveto
312 645 lineto
272 632 251 601 251 551  curveto
251 526 257 505 270 489  curveto
282 472 296 458 312 448  curveto
closepath
fill
		} def

	/percent
		{
25 -18 moveto
595 740 lineto
697 740 lineto
128 -18 lineto
25 -18 lineto
closepath
184 361 moveto
129 361 88 377 61 410  curveto
33 443 19 487 19 542  curveto
19 597 33 641 61 674  curveto
89 706 130 722 186 722  curveto
242 722 284 706 312 674  curveto
340 641 353 597 353 542  curveto
353 486 340 442 312 409  curveto
284 377 242 361 184 361  curveto
closepath
185 409 moveto
231 409 254 454 254 542  curveto
254 583 247 614 232 638  curveto
218 662 202 674 186 674  curveto
170 674 155 662 141 638  curveto
126 614 119 582 119 542  curveto
119 502 126 469 141 445  curveto
155 421 170 409 185 409  curveto
closepath
533 0 moveto
478 0 437 16 410 49  curveto
383 81 369 125 369 180  curveto
369 236 383 279 410 312  curveto
438 345 480 361 535 361  curveto
592 361 463 345 149 312  curveto
-163 280 -320 236 -320 181  curveto
-320 125 -163 80 150 48  curveto
463 16 591 0 533 0  curveto
closepath
534 48 moveto
-101 48 -419 92 -419 181  curveto
-419 221 -256 253 70 277  curveto
396 301 551 313 535 313  curveto
520 313 505 301 490 277  curveto
476 253 468 221 468 180  curveto
468 140 475 108 490 84  curveto
504 60 519 48 534 48  curveto
closepath
fill
		} def

	/ampersand
		{
532 0 moveto
506 30 lineto
464 -1 403 -18 322 -18  curveto
238 -18 171 3 123 47  curveto
74 91 50 147 50 214  curveto
50 326 108 401 226 441  curveto
193 500 177 549 177 588  curveto
177 631 194 667 228 696  curveto
262 725 308 740 365 740  curveto
421 740 294 726 -16 699  curveto
-327 671 -483 637 -483 594  curveto
-483 522 -194 459 382 406  curveto
430 320 482 245 536 182  curveto
-124 214 -454 269 -454 348  curveto
568 384 lineto
-332 384 lineto
-332 277 -23 185 595 107  curveto
624 70 658 34 695 0  curveto
532 0 lineto
closepath
454 98 moveto
386 182 322 274 264 375  curveto
203 351 173 305 173 238  curveto
173 187 190 143 225 107  curveto
259 72 297 54 338 54  curveto
374 54 413 69 454 98  curveto
closepath
341 476 moveto
396 502 423 540 423 593  curveto
423 643 402 668 361 668  curveto
321 668 301 643 301 592  curveto
301 559 314 520 341 476  curveto
closepath
fill
		} def

	/quoteright
		{
92 505 moveto
68 771 lineto
215 771 lineto
191 505 lineto
92 505 lineto
closepath
fill
		} def

	/parenleft
		{
330 -78 moveto
330 -162 lineto
241 -102 177 -31 135 50  curveto
94 132 74 220 74 313  curveto
74 406 94 493 135 575  curveto
177 658 241 729 330 789  curveto
330 704 lineto
282 652 248 596 227 536  curveto
207 476 197 402 197 313  curveto
197 224 207 149 227 89  curveto
248 29 282 -26 330 -78  curveto
closepath
fill
		} def

	/parenright
		{
48 -78 moveto
48 -162 lineto
137 -102 201 -31 243 50  curveto
284 132 304 220 304 313  curveto
304 406 284 493 243 575  curveto
201 658 137 729 48 789  curveto
48 704 lineto
96 652 130 596 151 536  curveto
171 476 181 402 181 313  curveto
181 224 171 149 151 89  curveto
130 29 96 -26 48 -78  curveto
closepath
fill
		} def

	/asterisk
		{
443 639 moveto
469 560 lineto
292 522 lineto
294 529 295 534 295 535  curveto
295 548 291 559 281 568  curveto
443 639 lineto
closepath
420 409 moveto
342 352 lineto
258 497 lineto
274 499 289 514 300 542  curveto
420 409 lineto
closepath
194 352 moveto
117 409 lineto
235 542 lineto
248 514 262 499 278 497  curveto
194 352 lineto
closepath
67 560 moveto
93 639 lineto
255 568 lineto
246 560 241 549 241 535  curveto
241 534 242 529 243 522  curveto
67 560 lineto
closepath
219 722 moveto
318 722 lineto
301 556 lineto
278 570 267 577 267 577  curveto
267 577 256 570 235 556  curveto
219 722 lineto
closepath
fill
		} def

	/plus
		{
375 0 moveto
375 252 lineto
122 252 lineto
122 325 lineto
375 325 lineto
375 578 lineto
474 578 lineto
474 325 lineto
-296 325 lineto
-296 252 lineto
474 252 lineto
474 0 lineto
375 0 lineto
closepath
fill
		} def

	/comma
		{
111 -159 moveto
111 -120 lineto
142 -111 158 -74 158 -9  curveto
158 0 lineto
111 0 lineto
111 120 lineto
259 120 lineto
259 16 lineto
259 -90 210 -149 111 -159  curveto
closepath
fill
		} def

	/hyphen
		{
86 252 moveto
86 325 lineto
546 325 lineto
546 252 lineto
86 252 lineto
closepath
fill
		} def

	/period
		{
111 0 moveto
111 120 lineto
259 120 lineto
259 0 lineto
111 0 lineto
closepath
fill
		} def

	/slash
		{
108 -144 moveto
368 722 lineto
471 722 lineto
210 -144 lineto
108 -144 lineto
closepath
fill
		} def

	/zero
		{
340 -18 moveto
257 -18 192 17 146 87  curveto
100 157 77 248 77 361  curveto
77 475 100 567 147 636  curveto
193 706 258 740 343 740  curveto
428 740 323 706 28 636  curveto
-266 567 -413 476 -413 363  curveto
-413 247 -266 154 28 85  curveto
323 16 427 -18 340 -18  curveto
closepath
341 54 moveto
434 54 481 157 481 364  curveto
481 567 435 668 343 668  curveto
252 668 207 566 207 361  curveto
207 156 251 54 341 54  curveto
closepath
fill
		} def

	/one
		{
164 0 moveto
164 72 lineto
308 72 lineto
308 635 lineto
164 599 lineto
164 680 lineto
432 747 lineto
432 72 lineto
577 72 lineto
577 0 lineto
164 0 lineto
closepath
fill
		} def

	/two
		{
97 0 moveto
97 84 lineto
125 149 181 221 266 298  curveto
322 347 lineto
393 411 428 475 428 538  curveto
428 578 416 610 392 633  curveto
367 656 338 668 305 668  curveto
264 668 201 643 115 594  curveto
115 695 lineto
179 725 247 740 319 740  curveto
396 740 284 722 -15 686  curveto
-316 649 -466 601 -466 541  curveto
-466 497 -306 459 14 425  curveto
335 392 467 351 411 303  curveto
374 271 lineto
296 206 252 144 240 84  curveto
554 84 lineto
554 0 lineto
97 0 lineto
closepath
fill
		} def

	/three
		{
115 5 moveto
115 105 lineto
202 71 261 54 291 54  curveto
328 54 361 67 390 94  curveto
419 121 433 156 433 198  curveto
433 300 367 351 233 351  curveto
182 351 lineto
182 416 lineto
216 416 lineto
349 416 416 463 416 557  curveto
416 631 376 668 297 668  curveto
258 668 201 650 125 615  curveto
125 711 lineto
182 731 241 740 304 740  curveto
-221 740 -483 684 -483 573  curveto
-483 488 -192 427 389 391  curveto
-176 364 -460 300 -460 200  curveto
-460 132 -311 78 -15 40  curveto
280 1 385 -18 297 -18  curveto
244 -18 183 -10 115 5  curveto
closepath
fill
		} def

	/four
		{
390 0 moveto
390 204 lineto
65 204 lineto
65 277 lineto
390 722 lineto
507 722 lineto
507 283 lineto
-419 283 lineto
-419 204 lineto
507 204 lineto
507 0 lineto
390 0 lineto
closepath
186 283 moveto
396 283 lineto
396 567 lineto
186 283 lineto
closepath
fill
		} def

	/five
		{
135 -2 moveto
135 93 lineto
201 67 251 54 285 54  curveto
324 54 357 68 384 96  curveto
411 124 425 162 425 211  curveto
425 320 354 374 214 374  curveto
206 374 184 372 147 367  curveto
147 722 lineto
-483 722 lineto
-483 638 lineto
259 638 lineto
259 448 lineto
352 448 253 426 -35 384  curveto
-324 341 -469 282 -469 207  curveto
-469 136 -322 81 -28 41  curveto
265 1 365 -18 272 -18  curveto
227 -18 181 -13 135 -2  curveto
closepath
fill
		} def

	/six
		{
212 409 moveto
240 445 293 463 372 463  curveto
444 463 330 442 29 401  curveto
-271 359 -422 305 -422 240  curveto
-422 165 -274 103 21 54  curveto
318 6 426 -18 348 -18  curveto
259 -18 193 14 148 78  curveto
103 142 80 231 80 345  curveto
80 470 106 567 158 637  curveto
209 706 286 741 389 741  curveto
441 741 158 732 -459 713  curveto
-459 619 lineto
137 652 418 668 383 668  curveto
269 668 212 582 212 409  curveto
closepath
477 218 moveto
477 273 465 316 441 347  curveto
416 378 386 394 351 394  curveto
320 394 290 380 260 353  curveto
231 326 216 293 216 254  curveto
216 194 230 145 258 109  curveto
286 72 318 54 355 54  curveto
387 54 416 69 441 98  curveto
465 128 477 168 477 218  curveto
closepath
fill
		} def

	/seven
		{
164 0 moveto
173 56 187 104 204 145  curveto
222 187 252 243 297 314  curveto
494 632 lineto
122 632 lineto
122 722 lineto
-410 722 lineto
-410 632 lineto
86 359 324 148 302 0  curveto
164 0 lineto
closepath
fill
		} def

	/eight
		{
243 393 moveto
173 442 138 497 138 556  curveto
138 611 158 655 198 689  curveto
238 724 294 741 367 741  curveto
436 741 318 726 14 697  curveto
-289 668 -441 631 -441 584  curveto
-441 514 -145 451 447 393  curveto
-126 340 -413 271 -413 187  curveto
-413 126 -265 77 30 39  curveto
325 0 432 -18 351 -18  curveto
271 -18 209 0 166 35  curveto
122 71 100 119 100 177  curveto
100 264 148 336 243 393  curveto
closepath
379 432 moveto
438 470 467 517 467 571  curveto
467 600 456 624 433 641  curveto
411 659 386 668 358 668  curveto
331 668 307 659 285 642  curveto
263 624 252 602 252 574  curveto
252 547 262 523 282 502  curveto
302 480 334 457 379 432  curveto
closepath
311 345 moveto
280 321 258 298 244 276  curveto
230 253 223 226 223 192  curveto
223 151 236 118 263 92  curveto
290 66 320 54 355 54  curveto
388 54 418 65 444 86  curveto
471 108 484 137 484 171  curveto
484 199 476 223 460 242  curveto
443 262 411 285 364 313  curveto
311 345 lineto
closepath
fill
		} def

	/nine
		{
127 4 moveto
127 95 lineto
206 67 263 54 297 54  curveto
348 54 390 79 424 130  curveto
458 181 474 241 474 309  curveto
444 271 392 252 321 252  curveto
251 252 195 275 153 320  curveto
111 364 90 419 90 483  curveto
90 557 112 619 157 667  curveto
202 716 263 740 340 740  curveto
428 740 324 709 28 646  curveto
-267 583 -415 497 -415 387  curveto
-415 263 -272 164 13 91  curveto
299 18 391 -18 287 -18  curveto
241 -18 187 -10 127 4  curveto
closepath
213 502 moveto
213 446 225 402 250 370  curveto
275 338 305 322 339 322  curveto
371 322 401 336 430 363  curveto
459 391 473 424 473 463  curveto
473 525 459 574 431 612  curveto
403 650 371 668 335 668  curveto
302 668 273 654 249 624  curveto
225 594 213 554 213 502  curveto
closepath
fill
		} def

	/colon
		{
123 0 moveto
123 96 lineto
247 96 lineto
247 0 lineto
123 0 lineto
closepath
123 433 moveto
123 530 lineto
247 530 lineto
247 433 lineto
123 433 lineto
closepath
fill
		} def

	/semicolon
		{
123 -163 moveto
123 -120 lineto
146 -108 158 -72 158 -11  curveto
158 0 lineto
123 0 lineto
123 96 lineto
247 96 lineto
247 15 lineto
247 -83 205 -143 123 -163  curveto
closepath
123 433 moveto
123 530 lineto
247 530 lineto
247 433 lineto
123 433 lineto
closepath
fill
		} def

	/less
		{
-296 -13 moveto
122 289 lineto
-296 591 lineto
-296 497 lineto
311 289 lineto
-296 81 lineto
-296 -13 lineto
closepath
fill
		} def

	/equal
		{
122 162 moveto
122 234 lineto
727 234 lineto
727 162 lineto
122 162 lineto
closepath
122 343 moveto
122 415 lineto
727 415 lineto
727 343 lineto
122 343 lineto
closepath
fill
		} def

	/greater
		{
121 -13 moveto
726 289 lineto
121 591 lineto
121 497 lineto
537 289 lineto
121 81 lineto
121 -13 lineto
closepath
fill
		} def

	/question
		{
136 0 moveto
136 96 lineto
259 96 lineto
259 0 lineto
136 0 lineto
closepath
136 192 moveto
136 219 lineto
136 281 160 339 207 394  curveto
238 430 lineto
289 488 315 536 315 574  curveto
315 603 304 626 281 643  curveto
259 659 233 668 203 668  curveto
163 668 106 652 32 620  curveto
32 713 lineto
92 732 152 741 214 741  curveto
289 741 347 726 386 696  curveto
425 666 444 626 444 575  curveto
444 547 439 522 427 501  curveto
416 481 395 455 363 425  curveto
333 396 lineto
302 368 282 344 273 324  curveto
263 305 259 279 259 246  curveto
259 192 lineto
136 192 lineto
closepath
fill
		} def

	/at
		{
574 21 moveto
516 -4 453 -18 388 -18  curveto
288 -18 208 10 148 66  curveto
89 123 59 194 59 281  curveto
59 391 99 492 178 583  curveto
220 632 272 670 332 698  curveto
392 726 458 740 528 740  curveto
629 740 539 711 259 652  curveto
-20 594 -160 521 -160 434  curveto
-160 353 -14 285 277 229  curveto
569 172 675 144 596 144  curveto
533 144 502 163 502 200  curveto
502 214 505 231 512 251  curveto
532 313 lineto
532 313 lineto
487 200 426 144 350 144  curveto
278 144 243 180 243 252  curveto
243 299 254 348 278 400  curveto
301 452 330 493 365 523  curveto
404 557 453 575 512 575  curveto
531 575 549 574 564 573  curveto
580 572 588 572 589 572  curveto
669 572 lineto
608 261 lineto
-76 251 -418 241 -418 231  curveto
-418 209 -69 198 628 198  curveto
663 198 526 221 219 268  curveto
-88 314 -241 367 -241 426  curveto
-241 501 -97 563 192 612  curveto
482 662 591 687 521 687  curveto
427 687 340 646 260 565  curveto
180 483 140 391 140 286  curveto
140 213 165 152 216 106  curveto
266 59 326 36 396 36  curveto
438 36 490 51 553 82  curveto
574 21 lineto
closepath
537 406 moveto
556 501 lineto
527 512 505 518 491 518  curveto
455 518 421 494 391 448  curveto
360 401 345 343 345 273  curveto
345 227 353 204 371 204  curveto
382 204 404 222 437 259  curveto
469 296 503 345 537 406  curveto
closepath
fill
		} def

	/A
		{
473 276 moveto
363 553 lineto
253 276 lineto
473 276 lineto
closepath
581 0 moveto
503 200 lineto
224 200 lineto
144 0 lineto
22 0 lineto
308 722 lineto
437 722 lineto
719 0 lineto
581 0 lineto
closepath
fill
		} def

	/B
		{
107 0 moveto
107 722 lineto
307 722 lineto
389 722 278 708 -23 681  curveto
-326 654 -478 614 -478 563  curveto
-478 475 -186 413 397 376  curveto
-167 340 -449 275 -449 180  curveto
-449 122 -298 77 4 46  curveto
306 15 416 0 333 0  curveto
107 0 lineto
closepath
235 76 moveto
242 76 lineto
309 76 353 81 375 90  curveto
418 108 439 141 439 190  curveto
439 233 420 269 381 297  curveto
343 326 299 340 250 340  curveto
235 340 lineto
235 76 lineto
closepath
235 405 moveto
254 405 lineto
300 405 338 417 368 440  curveto
398 463 413 496 413 539  curveto
413 610 363 646 261 646  curveto
235 646 lineto
235 405 lineto
closepath
fill
		} def

	/C
		{
429 -18 moveto
308 -18 217 14 156 80  curveto
95 146 64 240 64 360  curveto
64 481 95 574 158 641  curveto
220 707 312 740 434 740  curveto
508 740 248 730 -347 708  curveto
-347 603 lineto
217 643 478 664 433 664  curveto
364 664 308 637 265 584  curveto
222 531 200 456 200 359  curveto
200 267 223 195 269 141  curveto
315 88 373 62 443 62  curveto
503 62 239 87 -346 139  curveto
-346 37 lineto
264 0 523 -18 429 -18  curveto
closepath
fill
		} def

	/D
		{
107 0 moveto
107 722 lineto
360 722 lineto
441 722 503 714 548 698  curveto
592 682 630 655 662 617  curveto
31 557 -284 477 -284 378  curveto
-284 258 -145 165 132 99  curveto
409 33 486 0 361 0  curveto
107 0 lineto
closepath
236 76 moveto
354 76 lineto
439 76 501 101 540 152  curveto
-100 206 -420 278 -420 368  curveto
-420 453 -99 520 541 568  curveto
516 598 486 618 451 629  curveto
416 640 368 646 307 646  curveto
236 646 lineto
236 76 lineto
closepath
fill
		} def

	/E
		{
107 0 moveto
107 722 lineto
-485 722 lineto
-485 646 lineto
236 646 lineto
236 414 lineto
489 414 lineto
489 338 lineto
236 338 lineto
236 76 lineto
559 76 lineto
559 0 lineto
107 0 lineto
closepath
fill
		} def

	/F
		{
107 0 moveto
107 722 lineto
-485 722 lineto
-485 646 lineto
236 646 lineto
236 403 lineto
489 403 lineto
489 328 lineto
236 328 lineto
236 0 lineto
107 0 lineto
closepath
fill
		} def

	/G
		{
-346 19 moveto
248 -5 508 -18 434 -18  curveto
310 -18 218 14 156 80  curveto
95 145 64 239 64 361  curveto
64 481 95 574 158 640  curveto
220 707 311 740 432 740  curveto
515 740 255 729 -347 708  curveto
-347 604 lineto
217 644 477 664 433 664  curveto
364 664 308 637 265 584  curveto
222 531 200 456 200 360  curveto
200 264 223 190 270 137  curveto
316 85 376 58 450 58  curveto
475 58 167 64 -475 76  curveto
-475 312 lineto
-346 312 lineto
-346 19 lineto
closepath
fill
		} def

	/H
		{
107 0 moveto
107 722 lineto
236 722 lineto
236 417 lineto
-470 417 lineto
-470 722 lineto
-340 722 lineto
-340 0 lineto
-470 0 lineto
-470 341 lineto
236 341 lineto
236 0 lineto
107 0 lineto
closepath
fill
		} def

	/I
		{
106 0 moveto
106 722 lineto
236 722 lineto
236 0 lineto
106 0 lineto
closepath
fill
		} def

	/J
		{
-75 -134 moveto
-75 -34 lineto
-18 -53 20 -62 40 -62  curveto
71 -62 93 -51 109 -29  curveto
124 -6 132 32 132 87  curveto
132 722 lineto
262 722 lineto
262 91 lineto
262 -65 183 -144 25 -144  curveto
-6 -144 -40 -141 -75 -134  curveto
closepath
fill
		} def

	/K
		{
107 0 moveto
107 722 lineto
230 722 lineto
230 400 lineto
495 722 lineto
625 722 lineto
342 377 lineto
676 0 lineto
519 0 lineto
230 334 lineto
230 0 lineto
107 0 lineto
closepath
fill
		} def

	/L
		{
107 0 moveto
107 722 lineto
236 722 lineto
236 76 lineto
562 76 lineto
562 0 lineto
107 0 lineto
closepath
fill
		} def

	/M
		{
107 0 moveto
107 722 lineto
276 722 lineto
463 200 lineto
655 722 lineto
-214 722 lineto
-214 0 lineto
-335 0 lineto
-335 537 lineto
514 48 lineto
388 48 lineto
217 539 lineto
222 0 lineto
107 0 lineto
closepath
fill
		} def

	/N
		{
107 0 moveto
107 722 lineto
234 722 lineto
-452 205 lineto
-452 722 lineto
-337 722 lineto
-337 0 lineto
559 0 lineto
222 516 lineto
222 0 lineto
107 0 lineto
closepath
fill
		} def

	/O
		{
411 -18 moveto
302 -18 217 16 156 86  curveto
95 155 64 247 64 361  curveto
64 476 95 568 156 637  curveto
218 706 304 740 415 740  curveto
527 740 443 706 163 637  curveto
-116 569 -256 477 -256 362  curveto
-256 245 -116 153 163 84  curveto
443 16 525 -18 411 -18  curveto
closepath
412 58 moveto
477 58 360 85 59 138  curveto
-241 191 -392 266 -392 363  curveto
-392 457 -241 531 58 584  curveto
359 637 478 664 415 664  curveto
353 664 301 637 261 584  curveto
220 531 200 457 200 362  curveto
200 267 220 193 260 139  curveto
300 85 351 58 412 58  curveto
closepath
fill
		} def

	/P
		{
107 0 moveto
107 722 lineto
317 722 lineto
413 722 310 707 7 678  curveto
-296 649 -447 600 -447 533  curveto
-447 456 -303 396 -13 352  curveto
275 308 369 287 267 287  curveto
235 287 lineto
235 0 lineto
107 0 lineto
closepath
235 364 moveto
263 364 lineto
315 364 358 378 391 406  curveto
424 434 441 474 441 525  curveto
441 568 428 599 402 618  curveto
376 636 337 646 284 646  curveto
235 646 lineto
235 364 lineto
closepath
fill
		} def

	/Q
		{
770 -151 moveto
642 -110 541 -64 466 -15  curveto
451 -17 431 -18 405 -18  curveto
299 -18 216 17 155 87  curveto
95 157 64 249 64 361  curveto
64 476 95 568 156 637  curveto
218 706 304 740 415 740  curveto
527 740 443 706 163 637  curveto
-116 568 -256 475 -256 359  curveto
-256 193 23 78 582 15  curveto
665 -21 751 -47 840 -62  curveto
770 -151 lineto
closepath
412 58 moveto
477 58 360 85 59 138  curveto
-241 191 -392 266 -392 363  curveto
-392 457 -241 531 59 584  curveto
360 637 478 664 415 664  curveto
353 664 301 637 261 584  curveto
220 531 200 457 200 362  curveto
200 267 220 193 260 139  curveto
300 85 351 58 412 58  curveto
closepath
fill
		} def

	/R
		{
107 0 moveto
107 722 lineto
339 722 lineto
417 722 304 707 0 676  curveto
-303 646 -456 601 -456 543  curveto
-456 447 -163 378 421 338  curveto
663 0 lineto
510 0 lineto
304 305 lineto
235 305 lineto
235 0 lineto
107 0 lineto
closepath
235 382 moveto
255 382 lineto
375 382 435 432 435 534  curveto
435 608 385 646 286 646  curveto
235 646 lineto
235 382 lineto
closepath
fill
		} def

	/S
		{
261 -18 moveto
204 -18 138 -7 62 13  curveto
62 127 lineto
162 81 233 58 276 58  curveto
308 58 336 69 360 90  curveto
385 111 397 139 397 173  curveto
397 202 389 226 373 246  curveto
357 265 327 288 284 312  curveto
234 341 lineto
173 376 129 409 104 440  curveto
79 471 66 507 66 549  curveto
66 604 86 650 127 686  curveto
167 722 223 740 294 740  curveto
359 740 423 731 484 712  curveto
484 608 lineto
390 645 329 664 300 664  curveto
274 664 249 654 226 635  curveto
203 616 191 593 191 564  curveto
191 540 200 519 217 500  curveto
234 481 265 459 310 434  curveto
361 404 lineto
424 369 297 335 -19 304  curveto
-335 272 -494 234 -494 190  curveto
-494 127 -346 77 -51 39  curveto
243 0 347 -18 261 -18  curveto
closepath
fill
		} def

	/T
		{
279 0 moveto
279 646 lineto
22 646 lineto
22 722 lineto
-358 722 lineto
-358 646 lineto
408 646 lineto
408 0 lineto
279 0 lineto
closepath
fill
		} def

	/U
		{
101 722 moveto
230 722 lineto
230 266 lineto
230 194 244 141 271 108  curveto
298 75 336 58 385 58  curveto
434 58 299 74 -17 105  curveto
-335 136 -493 188 -493 263  curveto
-493 722 lineto
-377 722 lineto
-377 264 lineto
-377 166 -226 94 74 49  curveto
374 4 476 -18 378 -18  curveto
279 -18 208 5 165 51  curveto
122 98 101 170 101 267  curveto
101 722 lineto
closepath
fill
		} def

	/V
		{
304 0 moveto
31 722 lineto
161 722 lineto
371 167 lineto
573 722 lineto
690 722 lineto
428 0 lineto
304 0 lineto
closepath
fill
		} def

	/W
		{
201 0 moveto
14 722 lineto
140 722 lineto
274 206 lineto
397 722 lineto
523 722 lineto
640 212 lineto
784 722 lineto
895 722 lineto
692 0 lineto
563 0 lineto
449 502 lineto
329 0 lineto
201 0 lineto
closepath
fill
		} def

	/X
		{
21 0 moveto
261 362 lineto
33 722 lineto
181 722 lineto
342 470 lineto
511 722 lineto
634 722 lineto
403 373 lineto
640 0 lineto
492 0 lineto
322 265 lineto
145 0 lineto
21 0 lineto
closepath
fill
		} def

	/Y
		{
263 0 moveto
263 301 lineto
22 722 lineto
166 722 lineto
340 419 lineto
529 722 lineto
651 722 lineto
393 303 lineto
393 0 lineto
263 0 lineto
closepath
fill
		} def

	/Z
		{
60 0 moveto
60 82 lineto
448 646 lineto
84 646 lineto
84 722 lineto
-425 722 lineto
-425 646 lineto
210 82 lineto
598 82 lineto
598 0 lineto
60 0 lineto
closepath
fill
		} def

	/bracketleft
		{
110 -144 moveto
110 771 lineto
330 771 lineto
330 698 lineto
221 698 lineto
221 -72 lineto
330 -72 lineto
330 -144 lineto
110 -144 lineto
closepath
fill
		} def

	/backslash
		{
469 -144 moveto
209 722 lineto
106 722 lineto
367 -144 lineto
469 -144 lineto
closepath
fill
		} def

	/bracketright
		{
268 -144 moveto
268 771 lineto
48 771 lineto
48 698 lineto
157 698 lineto
157 -72 lineto
48 -72 lineto
48 -144 lineto
268 -144 lineto
closepath
fill
		} def

	/asciicircum
		{
343 534 moveto
173 192 lineto
65 192 lineto
343 749 lineto
622 192 lineto
514 192 lineto
343 534 lineto
closepath
fill
		} def

	/underscore
		{
56 -72 moveto
56 0 lineto
498 0 lineto
498 -72 lineto
56 -72 lineto
closepath
fill
		} def

	/quoteleft
		{
462 626 moveto
363 626 lineto
206 783 lineto
345 783 lineto
462 626 lineto
closepath
fill
		} def

	/a
		{
388 46 moveto
345 7 292 -12 230 -12  curveto
177 -12 136 1 107 29  curveto
78 56 64 91 64 133  curveto
64 191 88 235 137 266  curveto
185 297 260 313 359 313  curveto
369 313 lineto
369 377 lineto
369 438 342 469 287 469  curveto
246 469 187 449 110 408  curveto
110 502 lineto
174 528 240 542 305 542  curveto
373 542 422 528 450 501  curveto
478 475 492 433 492 377  curveto
492 137 lineto
492 82 504 54 529 54  curveto
529 54 540 56 561 60  curveto
568 3 lineto
547 -6 518 -12 482 -12  curveto
428 -12 397 7 388 46  curveto
closepath
369 119 moveto
369 256 lineto
337 257 lineto
302 257 268 247 236 227  curveto
203 207 187 181 187 148  curveto
187 125 195 106 211 90  curveto
228 74 243 66 257 66  curveto
288 66 326 84 369 119  curveto
closepath
fill
		} def

	/b
		{
110 -5 moveto
110 771 lineto
233 771 lineto
233 479 lineto
254 521 309 542 396 542  curveto
469 542 353 518 49 472  curveto
-255 425 -407 361 -407 281  curveto
-407 193 -257 122 41 68  curveto
341 14 453 -12 376 -12  curveto
304 -12 255 3 228 34  curveto
221 -5 lineto
110 -5 lineto
closepath
233 126 moveto
282 82 325 60 360 60  curveto
444 60 486 130 486 271  curveto
486 395 449 458 376 458  curveto
332 458 284 428 233 370  curveto
233 126 lineto
closepath
fill
		} def

	/c
		{
330 -12 moveto
249 -12 186 14 139 67  curveto
91 120 68 187 68 268  curveto
68 354 91 421 138 469  curveto
184 517 254 542 346 542  curveto
397 542 448 536 499 524  curveto
499 436 lineto
427 457 378 468 352 468  curveto
312 468 278 449 248 412  curveto
218 375 203 326 203 265  curveto
203 205 218 157 249 120  curveto
280 83 315 65 355 65  curveto
390 65 440 81 505 112  curveto
505 16 lineto
443 -2 384 -12 330 -12  curveto
closepath
fill
		} def

	/d
		{
450 0 moveto
450 50 lineto
429 8 374 -12 286 -12  curveto
214 -12 159 11 123 57  curveto
86 104 68 167 68 248  curveto
68 336 88 407 130 461  curveto
171 515 230 542 307 542  curveto
379 542 427 528 450 501  curveto
450 771 lineto
574 771 lineto
574 0 lineto
450 0 lineto
closepath
450 403 moveto
400 447 357 469 321 469  curveto
239 469 197 399 197 258  curveto
197 134 234 72 306 72  curveto
351 72 399 101 450 159  curveto
450 403 lineto
closepath
fill
		} def

	/e
		{
-498 17 moveto
120 -2 401 -12 346 -12  curveto
259 -12 191 13 142 65  curveto
92 117 68 184 68 267  curveto
68 347 89 413 133 465  curveto
176 516 236 542 313 542  curveto
386 542 270 519 -36 474  curveto
-342 428 -495 363 -495 279  curveto
527 250 lineto
193 250 lineto
207 124 264 61 364 61  curveto
395 61 108 75 -498 103  curveto
-498 17 lineto
closepath
197 322 moveto
404 322 lineto
404 420 372 470 307 470  curveto
242 470 206 420 197 322  curveto
closepath
fill
		} def

	/f
		{
251 458 moveto
251 0 lineto
128 0 lineto
128 458 lineto
53 458 lineto
53 530 lineto
128 530 lineto
128 593 lineto
128 720 190 783 314 783  curveto
355 783 396 777 437 767  curveto
437 682 lineto
376 701 337 710 319 710  curveto
297 710 280 703 269 688  curveto
257 673 251 645 251 604  curveto
251 530 lineto
384 530 lineto
384 458 lineto
251 458 lineto
closepath
fill
		} def

	/g
		{
112 -176 moveto
124 -80 lineto
197 -115 256 -132 300 -132  curveto
401 -132 451 -74 451 40  curveto
451 74 lineto
433 32 379 12 288 12  curveto
216 12 161 35 124 81  curveto
86 127 68 190 68 268  curveto
68 349 89 415 132 465  curveto
174 516 234 542 310 542  curveto
379 542 425 528 450 500  curveto
450 530 lineto
-449 530 lineto
-449 144 lineto
-449 61 -283 0 49 -39  curveto
381 -79 536 -112 512 -137  curveto
470 -182 400 -204 302 -204  curveto
232 -204 168 -195 112 -176  curveto
closepath
450 183 moveto
450 403 lineto
408 447 366 469 325 469  curveto
290 469 260 451 235 416  curveto
210 381 197 332 197 270  curveto
197 154 233 96 306 96  curveto
353 96 401 125 450 183  curveto
closepath
fill
		} def

	/h
		{
110 0 moveto
110 771 lineto
233 771 lineto
233 470 lineto
266 518 323 542 405 542  curveto
461 542 331 527 17 498  curveto
-296 469 -453 430 -453 380  curveto
-453 0 lineto
447 0 lineto
447 349 lineto
447 388 441 417 430 433  curveto
418 450 403 458 385 458  curveto
336 458 285 420 233 343  curveto
233 0 lineto
110 0 lineto
closepath
fill
		} def

	/i
		{
110 0 moveto
110 530 lineto
233 530 lineto
233 0 lineto
110 0 lineto
closepath
110 626 moveto
110 722 lineto
233 722 lineto
233 626 lineto
110 626 lineto
closepath
fill
		} def

	/j
		{
-61 -180 moveto
-61 -92 lineto
1 -119 40 -132 54 -132  curveto
79 -132 97 -123 108 -105  curveto
119 -88 125 -53 125 0  curveto
125 530 lineto
249 530 lineto
249 0 lineto
249 -136 186 -204 62 -204  curveto
19 -204 -21 -196 -61 -180  curveto
closepath
125 626 moveto
125 722 lineto
249 722 lineto
249 626 lineto
125 626 lineto
closepath
fill
		} def

	/k
		{
110 0 moveto
110 771 lineto
233 771 lineto
233 303 lineto
431 530 lineto
561 530 lineto
347 282 lineto
605 0 lineto
455 0 lineto
233 242 lineto
233 0 lineto
110 0 lineto
closepath
fill
		} def

	/l
		{
110 0 moveto
110 771 lineto
233 771 lineto
233 0 lineto
110 0 lineto
closepath
fill
		} def

	/m
		{
110 0 moveto
110 530 lineto
233 530 lineto
233 473 lineto
262 519 317 542 400 542  curveto
480 542 530 514 549 458  curveto
583 514 641 542 722 542  curveto
779 542 649 528 333 501  curveto
18 473 -139 435 -139 385  curveto
-139 0 lineto
-263 0 lineto
-263 370 lineto
-263 431 58 461 701 461  curveto
661 461 272 426 -464 355  curveto
-464 0 lineto
435 0 lineto
435 370 lineto
435 431 415 461 375 461  curveto
335 461 288 426 233 355  curveto
233 0 lineto
110 0 lineto
closepath
fill
		} def

	/n
		{
110 0 moveto
110 530 lineto
233 530 lineto
233 470 lineto
266 518 323 542 405 542  curveto
461 542 331 527 17 498  curveto
-296 469 -453 430 -453 380  curveto
-453 0 lineto
447 0 lineto
447 349 lineto
447 388 441 417 430 433  curveto
418 450 403 458 385 458  curveto
336 458 285 420 233 343  curveto
233 0 lineto
110 0 lineto
closepath
fill
		} def

	/o
		{
330 -12 moveto
246 -12 181 12 136 63  curveto
90 113 68 180 68 265  curveto
68 350 90 417 136 467  curveto
181 517 247 542 334 542  curveto
421 542 316 517 20 467  curveto
-274 417 -422 350 -422 266  curveto
-422 179 -275 111 20 62  curveto
316 12 419 -12 330 -12  curveto
closepath
332 60 moveto
425 60 472 128 472 266  curveto
472 401 426 469 334 469  curveto
243 469 197 401 197 265  curveto
197 128 242 60 332 60  curveto
closepath
fill
		} def

	/p
		{
110 -192 moveto
110 530 lineto
233 530 lineto
233 479 lineto
254 521 309 542 396 542  curveto
469 542 353 518 49 472  curveto
-255 425 -407 361 -407 281  curveto
-407 193 -257 122 41 68  curveto
341 14 453 -12 376 -12  curveto
304 -12 257 1 233 28  curveto
233 -192 lineto
110 -192 lineto
closepath
233 126 moveto
282 82 325 60 360 60  curveto
444 60 486 130 486 271  curveto
486 395 449 458 376 458  curveto
332 458 284 428 233 370  curveto
233 126 lineto
closepath
fill
		} def

	/q
		{
450 -192 moveto
450 50 lineto
429 8 374 -12 286 -12  curveto
214 -12 159 11 123 57  curveto
86 104 68 167 68 248  curveto
68 336 88 407 130 461  curveto
171 515 230 542 307 542  curveto
379 542 427 528 450 501  curveto
450 530 lineto
574 530 lineto
574 -192 lineto
450 -192 lineto
closepath
450 403 moveto
400 447 357 469 321 469  curveto
239 469 197 399 197 258  curveto
197 134 234 72 306 72  curveto
351 72 399 101 450 159  curveto
450 403 lineto
closepath
fill
		} def

	/r
		{
110 0 moveto
110 530 lineto
232 530 lineto
232 479 lineto
253 521 304 542 385 542  curveto
404 542 419 541 430 539  curveto
430 440 lineto
395 452 376 458 372 458  curveto
320 458 274 421 233 349  curveto
233 0 lineto
110 0 lineto
closepath
fill
		} def

	/s
		{
263 -12 moveto
211 -12 153 -1 90 18  curveto
90 120 lineto
171 80 230 60 267 60  curveto
286 60 305 67 323 82  curveto
341 97 350 116 350 138  curveto
350 171 325 198 274 220  curveto
218 244 lineto
135 278 93 328 93 393  curveto
93 439 109 475 142 502  curveto
175 528 224 542 290 542  curveto
329 542 370 537 414 529  curveto
434 525 lineto
434 437 lineto
362 459 315 469 292 469  curveto
239 469 213 447 213 402  curveto
213 373 236 348 283 329  curveto
330 309 lineto
382 287 419 264 441 239  curveto
463 214 474 184 474 147  curveto
474 100 455 62 418 32  curveto
382 2 330 -12 263 -12  curveto
closepath
fill
		} def

	/t
		{
282 -12 moveto
224 -12 182 1 155 29  curveto
127 57 114 96 114 146  curveto
114 458 lineto
47 458 lineto
47 530 lineto
114 530 lineto
114 626 lineto
237 638 lineto
237 530 lineto
375 530 lineto
375 458 lineto
237 458 lineto
237 164 lineto
237 94 262 60 313 60  curveto
317 60 337 64 373 72  curveto
373 0 lineto
343 -8 313 -12 282 -12  curveto
closepath
fill
		} def

	/u
		{
441 0 moveto
441 60 lineto
408 11 350 -12 268 -12  curveto
213 -12 172 2 145 31  curveto
118 60 104 99 104 149  curveto
104 530 lineto
227 530 lineto
227 180 lineto
227 140 233 112 244 95  curveto
256 79 271 70 288 70  curveto
338 70 389 109 441 186  curveto
441 530 lineto
564 530 lineto
564 0 lineto
441 0 lineto
closepath
fill
		} def

	/v
		{
220 0 moveto
22 530 lineto
145 530 lineto
287 152 lineto
435 530 lineto
552 530 lineto
343 0 lineto
220 0 lineto
closepath
fill
		} def

	/w
		{
171 0 moveto
19 530 lineto
141 530 lineto
244 165 lineto
355 530 lineto
478 530 lineto
576 165 lineto
695 530 lineto
804 530 lineto
631 0 lineto
508 0 lineto
408 364 lineto
295 0 lineto
171 0 lineto
closepath
fill
		} def

	/x
		{
56 0 moveto
258 273 lineto
62 530 lineto
204 530 lineto
344 344 lineto
472 530 lineto
592 530 lineto
409 261 lineto
608 0 lineto
467 0 lineto
321 191 lineto
180 0 lineto
56 0 lineto
closepath
fill
		} def

	/y
		{
140 -192 moveto
226 0 lineto
21 530 lineto
152 530 lineto
291 165 lineto
439 530 lineto
557 530 lineto
268 -192 lineto
140 -192 lineto
closepath
fill
		} def

	/z
		{
74 0 moveto
74 72 lineto
402 458 lineto
89 458 lineto
89 530 lineto
-476 530 lineto
-476 458 lineto
219 72 lineto
554 72 lineto
554 0 lineto
74 0 lineto
closepath
fill
		} def

	/braceleft
		{
26 349 moveto
63 349 lineto
103 349 124 375 124 428  curveto
124 450 121 473 117 496  curveto
107 539 lineto
101 567 98 594 98 621  curveto
98 664 114 699 145 726  curveto
176 752 227 768 300 772  curveto
300 698 lineto
272 698 lineto
259 698 246 692 231 681  curveto
216 669 209 655 209 638  curveto
209 630 211 614 215 591  curveto
224 542 lineto
227 520 229 494 229 465  curveto
229 404 205 353 157 313  curveto
205 272 229 221 229 160  curveto
229 131 227 105 224 84  curveto
215 34 lineto
211 11 209 -4 209 -12  curveto
209 -29 216 -43 231 -54  curveto
246 -66 260 -72 272 -72  curveto
300 -72 lineto
300 -146 lineto
227 -141 175 -126 144 -99  curveto
113 -72 98 -37 98 5  curveto
98 32 101 59 107 87  curveto
117 129 lineto
121 153 124 176 124 199  curveto
124 251 103 277 63 277  curveto
26 277 lineto
26 349 lineto
closepath
fill
		} def

	/bar
		{
164 -144 moveto
164 771 lineto
263 771 lineto
263 -144 lineto
164 -144 lineto
closepath
fill
		} def

	/braceright
		{
353 349 moveto
316 349 lineto
276 349 255 375 255 428  curveto
255 450 258 473 262 496  curveto
272 539 lineto
278 567 281 594 281 621  curveto
281 664 265 699 234 726  curveto
203 752 152 768 79 772  curveto
79 698 lineto
107 698 lineto
120 698 133 692 148 681  curveto
163 669 170 655 170 638  curveto
170 630 168 614 164 591  curveto
155 542 lineto
152 520 150 494 150 465  curveto
150 404 174 353 222 313  curveto
174 272 150 221 150 160  curveto
150 131 152 105 155 84  curveto
164 34 lineto
168 11 170 -4 170 -12  curveto
170 -29 163 -43 148 -54  curveto
133 -66 119 -72 107 -72  curveto
79 -72 lineto
79 -146 lineto
152 -141 204 -126 235 -99  curveto
266 -72 281 -37 281 5  curveto
281 32 278 59 272 87  curveto
262 129 lineto
258 153 255 176 255 199  curveto
255 251 276 277 316 277  curveto
353 277 lineto
353 349 lineto
closepath
fill
		} def

	/asciitilde
		{
65 216 moveto
65 263 77 302 102 332  curveto
127 362 164 377 213 377  curveto
248 377 288 365 332 342  curveto
384 315 lineto
446 281 lineto
461 274 471 271 477 271  curveto
-174 271 -500 301 -500 361  curveto
622 361 lineto
615 252 567 198 477 198  curveto
440 198 396 211 346 237  curveto
291 266 lineto
233 296 lineto
221 302 214 305 211 305  curveto
180 305 164 275 164 216  curveto
65 216 lineto
closepath
fill
		} def

	/exclamdown
		{
247 530 moveto
247 433 lineto
123 433 lineto
123 530 lineto
247 530 lineto
closepath
235 337 moveto
247 -48 lineto
247 -192 lineto
123 -192 lineto
123 -48 lineto
136 337 lineto
235 337 lineto
closepath
fill
		} def

	/cent
		{
337 0 moveto
337 84 lineto
271 90 217 119 176 170  curveto
134 222 114 285 114 360  curveto
114 437 133 499 172 546  curveto
211 594 266 622 337 632  curveto
337 722 lineto
413 722 lineto
413 632 lineto
456 630 161 622 -472 609  curveto
-472 519 lineto
134 545 429 558 413 560  curveto
413 152 lineto
439 152 144 168 -472 198  curveto
-472 112 lineto
161 93 457 84 413 84  curveto
413 0 lineto
337 0 lineto
closepath
337 166 moveto
337 555 lineto
316 553 295 535 276 502  curveto
256 468 246 420 246 357  curveto
246 303 256 260 276 227  curveto
295 193 316 173 337 166  curveto
closepath
fill
		} def

	/sterling
		{
134 0 moveto
134 84 lineto
168 95 194 113 211 139  curveto
228 164 237 198 237 238  curveto
237 349 lineto
149 349 lineto
149 421 lineto
237 421 lineto
237 526 lineto
237 596 253 649 286 685  curveto
319 722 371 740 442 740  curveto
485 740 185 735 -457 726  curveto
-457 633 lineto
167 656 464 668 436 668  curveto
415 668 397 659 382 640  curveto
367 621 360 593 360 556  curveto
360 421 lineto
465 421 lineto
465 349 lineto
360 349 lineto
360 287 lineto
360 236 354 196 342 167  curveto
331 139 308 111 275 84  curveto
574 84 lineto
574 0 lineto
134 0 lineto
closepath
fill
		} def

	/fraction
		{
-287 -18 moveto
243 740 lineto
336 740 lineto
-194 -18 lineto
-287 -18 lineto
closepath
fill
		} def

	/yen
		{
279 0 moveto
279 168 lineto
134 168 lineto
134 229 lineto
279 229 lineto
279 301 lineto
134 301 lineto
134 361 lineto
279 361 lineto
53 722 lineto
193 722 lineto
356 462 lineto
532 722 lineto
646 722 lineto
402 361 lineto
-477 361 lineto
-477 301 lineto
402 301 lineto
402 229 lineto
-477 229 lineto
-477 168 lineto
402 168 lineto
402 0 lineto
279 0 lineto
closepath
fill
		} def

	/florin
		{
129 -144 moveto
227 349 lineto
131 349 lineto
131 421 lineto
242 421 lineto
252 473 lineto
270 562 299 629 339 673  curveto
380 718 436 740 507 740  curveto
552 740 594 736 633 726  curveto
616 641 lineto
565 659 529 668 507 668  curveto
481 668 457 656 435 631  curveto
412 605 396 568 386 517  curveto
367 421 lineto
-511 421 lineto
-511 349 lineto
353 349 lineto
254 -144 lineto
129 -144 lineto
closepath
fill
		} def

	/section
		{
121 -126 moveto
121 -27 lineto
218 -69 289 -90 334 -90  curveto
368 -90 398 -82 424 -66  curveto
451 -50 464 -28 464 -2  curveto
464 19 457 36 443 49  curveto
429 62 398 78 351 98  curveto
265 135 lineto
218 155 182 179 159 206  curveto
136 233 124 264 124 299  curveto
124 348 148 397 195 445  curveto
149 475 126 515 126 562  curveto
126 616 147 659 189 691  curveto
231 724 291 740 369 740  curveto
427 740 146 733 -472 717  curveto
-472 631 lineto
126 656 407 668 368 668  curveto
335 668 306 660 280 643  curveto
254 626 241 605 241 578  curveto
241 560 248 544 262 530  curveto
276 515 297 502 326 491  curveto
393 464 lineto
460 437 336 410 20 385  curveto
-294 359 -452 326 -452 285  curveto
-452 239 -135 189 499 135  curveto
-130 104 -444 60 -444 4  curveto
-444 -46 -295 -87 1 -117  curveto
299 -147 407 -163 324 -163  curveto
265 -163 198 -151 121 -126  curveto
closepath
430 175 moveto
450 201 460 230 460 261  curveto
460 284 452 303 437 319  curveto
421 334 393 350 352 367  curveto
264 404 lineto
245 380 235 353 235 322  curveto
235 300 244 280 263 261  curveto
281 243 309 226 347 210  curveto
430 175 lineto
closepath
fill
		} def

	/currency
		{
215 177 moveto
117 79 lineto
61 135 lineto
157 230 lineto
127 269 113 313 113 361  curveto
113 409 127 452 157 491  curveto
61 587 lineto
117 643 lineto
215 545 lineto
245 567 288 578 342 578  curveto
398 578 441 567 471 545  curveto
568 643 lineto
625 587 lineto
530 491 lineto
-123 452 -450 409 -450 361  curveto
-450 313 -123 269 530 230  curveto
625 135 lineto
568 79 lineto
471 177 lineto
441 155 398 144 342 144  curveto
288 144 245 155 215 177  curveto
closepath
340 216 moveto
373 216 404 230 432 258  curveto
460 285 474 320 474 361  curveto
474 402 460 436 432 464  curveto
404 491 374 505 342 505  curveto
311 505 281 491 254 464  curveto
226 436 212 402 212 361  curveto
212 321 226 287 253 259  curveto
281 230 310 216 340 216  curveto
closepath
fill
		} def

	/quotesingle
		{
92 505 moveto
68 771 lineto
215 771 lineto
191 505 lineto
92 505 lineto
closepath
fill
		} def

	/quotedblleft
		{
372 777 moveto
372 734 lineto
360 728 352 717 346 701  curveto
340 685 337 664 337 637  curveto
337 626 lineto
384 626 lineto
384 518 lineto
248 518 lineto
248 599 lineto
248 648 256 687 272 715  curveto
288 744 321 765 372 777  curveto
closepath
191 777 moveto
191 734 lineto
179 728 171 717 165 701  curveto
160 685 157 664 157 637  curveto
157 626 lineto
203 626 lineto
203 518 lineto
68 518 lineto
68 599 lineto
68 648 76 687 92 715  curveto
108 744 141 765 191 777  curveto
closepath
fill
		} def

	/guillemotleft
		{
528 445 moveto
384 265 lineto
528 84 lineto
464 36 lineto
261 265 lineto
464 494 lineto
528 445 lineto
closepath
335 445 moveto
191 265 lineto
335 84 lineto
271 36 lineto
68 265 lineto
271 494 lineto
335 445 lineto
closepath
fill
		} def

	/guilsinglleft
		{
335 445 moveto
191 265 lineto
335 84 lineto
271 36 lineto
68 265 lineto
271 494 lineto
335 445 lineto
closepath
fill
		} def

	/guilsinglright
		{
49 445 moveto
193 265 lineto
49 84 lineto
113 36 lineto
316 265 lineto
113 494 lineto
49 445 lineto
closepath
fill
		} def

	/fi
		{
128 0 moveto
128 458 lineto
53 458 lineto
53 530 lineto
128 530 lineto
128 593 lineto
128 720 190 783 314 783  curveto
355 783 396 777 437 767  curveto
437 682 lineto
376 701 337 710 319 710  curveto
297 710 280 703 269 688  curveto
257 673 251 645 251 604  curveto
251 530 lineto
-435 530 lineto
-435 0 lineto
465 0 lineto
465 458 lineto
251 458 lineto
251 0 lineto
128 0 lineto
closepath
465 626 moveto
465 722 lineto
588 722 lineto
588 626 lineto
465 626 lineto
closepath
fill
		} def

	/fl
		{
131 0 moveto
131 458 lineto
53 458 lineto
53 530 lineto
131 530 lineto
131 584 lineto
131 716 202 783 344 783  curveto
384 783 431 779 487 771  curveto
-431 771 lineto
-431 0 lineto
468 0 lineto
468 688 lineto
406 703 364 710 340 710  curveto
314 710 293 702 277 687  curveto
262 671 254 644 254 606  curveto
254 530 lineto
387 530 lineto
387 458 lineto
254 458 lineto
254 0 lineto
131 0 lineto
closepath
fill
		} def

	/endash
		{
86 252 moveto
86 325 lineto
546 325 lineto
546 252 lineto
86 252 lineto
closepath
fill
		} def

	/dagger
		{
282 -144 moveto
293 407 lineto
125 395 lineto
125 471 lineto
293 459 lineto
282 722 lineto
405 722 lineto
393 459 lineto
-462 471 lineto
-462 395 lineto
393 407 lineto
405 -144 lineto
282 -144 lineto
closepath
fill
		} def

	/daggerdbl
		{
282 -144 moveto
293 118 lineto
125 106 lineto
125 182 lineto
293 170 lineto
293 407 lineto
125 395 lineto
125 471 lineto
293 459 lineto
282 722 lineto
405 722 lineto
393 459 lineto
-462 471 lineto
-462 395 lineto
393 407 lineto
393 170 lineto
-462 182 lineto
-462 106 lineto
393 118 lineto
405 -144 lineto
282 -144 lineto
closepath
fill
		} def

	/periodcentered
		{
111 239 moveto
111 360 lineto
259 360 lineto
259 239 lineto
111 239 lineto
closepath
fill
		} def

	/paragraph
		{
324 -144 moveto
324 361 lineto
259 365 209 385 173 421  curveto
137 457 119 504 119 563  curveto
119 621 135 662 166 686  curveto
197 710 254 722 337 722  curveto
-480 722 lineto
-480 -144 lineto
456 -144 lineto
456 662 lineto
411 662 lineto
411 -144 lineto
324 -144 lineto
closepath
fill
		} def

	/bullet
		{
327 108 moveto
261 108 206 129 164 172  curveto
122 215 101 266 101 325  curveto
101 385 122 436 164 478  curveto
207 520 262 542 331 542  curveto
400 542 285 520 -13 478  curveto
-312 435 -462 384 -462 323  curveto
-462 263 -312 212 -14 171  curveto
284 129 398 108 327 108  curveto
closepath
fill
		} def

	/quotesinglbase
		{
111 -147 moveto
111 -108 lineto
127 -103 139 -93 146 -76  curveto
154 -60 158 -38 158 -9  curveto
158 0 lineto
111 0 lineto
111 120 lineto
259 120 lineto
259 16 lineto
259 -33 249 -71 228 -97  curveto
208 -124 169 -141 111 -147  curveto
closepath
fill
		} def

	/quotedblbase
		{
80 -151 moveto
80 -108 lineto
91 -102 100 -91 106 -74  curveto
111 -58 114 -37 114 -11  curveto
114 0 lineto
68 0 lineto
68 108 lineto
203 108 lineto
203 27 lineto
203 -21 195 -60 179 -89  curveto
163 -118 130 -138 80 -151  curveto
closepath
261 -151 moveto
261 -108 lineto
272 -102 281 -91 286 -74  curveto
292 -58 295 -37 295 -11  curveto
295 0 lineto
248 0 lineto
248 108 lineto
384 108 lineto
384 27 lineto
384 -21 376 -60 360 -89  curveto
343 -118 310 -138 261 -151  curveto
closepath
fill
		} def

	/quotedblright
		{
80 511 moveto
80 554 lineto
91 560 100 571 106 587  curveto
111 603 114 625 114 651  curveto
114 662 lineto
68 662 lineto
68 771 lineto
203 771 lineto
203 689 lineto
203 640 195 601 179 572  curveto
163 544 130 523 80 511  curveto
closepath
261 511 moveto
261 554 lineto
272 560 281 571 286 587  curveto
292 603 295 625 295 651  curveto
295 662 lineto
248 662 lineto
248 771 lineto
384 771 lineto
384 689 lineto
384 640 376 601 360 572  curveto
343 544 310 523 261 511  curveto
closepath
fill
		} def

	/guillemotright
		{
49 445 moveto
193 265 lineto
49 84 lineto
113 36 lineto
316 265 lineto
113 494 lineto
49 445 lineto
closepath
242 445 moveto
386 265 lineto
242 84 lineto
306 36 lineto
509 265 lineto
306 494 lineto
242 445 lineto
closepath
fill
		} def

	/ellipsis
		{
132 0 moveto
132 96 lineto
255 96 lineto
255 0 lineto
132 0 lineto
closepath
466 0 moveto
466 96 lineto
589 96 lineto
589 0 lineto
466 0 lineto
closepath
-224 0 moveto
-224 96 lineto
922 96 lineto
922 0 lineto
-224 0 lineto
closepath
fill
		} def

	/perthousand
		{
25 -18 moveto
595 740 lineto
697 740 lineto
128 -18 lineto
25 -18 lineto
closepath
184 361 moveto
129 361 88 377 61 410  curveto
33 443 19 487 19 542  curveto
19 597 33 641 61 674  curveto
89 706 130 722 186 722  curveto
242 722 284 706 312 674  curveto
340 641 353 597 353 542  curveto
353 486 340 442 312 409  curveto
284 377 242 361 184 361  curveto
closepath
185 409 moveto
204 409 220 420 234 442  curveto
247 465 254 498 254 542  curveto
254 583 247 614 232 638  curveto
218 662 202 674 186 674  curveto
170 674 155 662 141 638  curveto
126 614 119 582 119 542  curveto
119 502 126 469 141 445  curveto
155 421 170 409 185 409  curveto
closepath
533 0 moveto
478 0 437 16 410 49  curveto
383 81 369 125 369 180  curveto
369 236 383 279 410 312  curveto
438 345 480 361 535 361  curveto
592 361 463 345 149 312  curveto
-163 280 -320 236 -320 181  curveto
-320 125 -163 80 150 48  curveto
463 16 591 0 533 0  curveto
closepath
534 48 moveto
553 48 399 59 71 81  curveto
-255 103 -419 137 -419 181  curveto
-419 221 -256 253 70 277  curveto
396 301 551 313 535 313  curveto
520 313 505 301 490 277  curveto
476 253 468 221 468 180  curveto
468 140 475 108 490 84  curveto
504 60 519 48 534 48  curveto
closepath
877 0 moveto
822 0 610 16 241 49  curveto
-126 81 -311 125 -311 180  curveto
-311 236 -126 279 242 312  curveto
611 345 823 361 879 361  curveto
935 361 807 345 493 312  curveto
179 280 22 236 22 181  curveto
22 125 179 80 493 48  curveto
807 16 934 0 877 0  curveto
closepath
878 48 moveto
896 48 742 59 414 81  curveto
87 103 -76 137 -76 181  curveto
-76 221 86 253 413 277  curveto
739 301 895 313 879 313  curveto
863 313 677 301 321 277  curveto
-34 253 -212 221 -212 180  curveto
-212 140 -34 108 321 84  curveto
677 60 863 48 878 48  curveto
closepath
fill
		} def

	/questiondown
		{
341 529 moveto
341 433 lineto
218 433 lineto
218 529 lineto
341 529 lineto
closepath
341 336 moveto
341 310 lineto
341 248 317 189 269 135  curveto
238 99 lineto
187 41 162 -7 162 -44  curveto
162 -73 173 -96 195 -113  curveto
218 -130 243 -138 272 -138  curveto
313 -138 371 -122 445 -90  curveto
445 -184 lineto
385 -202 324 -211 262 -211  curveto
187 -211 130 -196 91 -166  curveto
52 -136 32 -96 32 -45  curveto
32 -17 38 7 49 28  curveto
60 48 82 74 114 104  curveto
144 132 lineto
174 161 194 185 203 204  curveto
213 224 218 250 218 283  curveto
218 336 lineto
341 336 lineto
closepath
fill
		} def

	/grave
		{
462 626 moveto
363 626 lineto
206 783 lineto
345 783 lineto
462 626 lineto
closepath
fill
		} def

	/acute
		{
206 626 moveto
324 783 lineto
462 783 lineto
306 626 lineto
206 626 lineto
closepath
fill
		} def

	/circumflex
		{
150 626 moveto
267 783 lineto
401 783 lineto
519 626 lineto
419 626 lineto
321 725 lineto
321 725 lineto
249 626 lineto
150 626 lineto
closepath
fill
		} def

	/tilde
		{
158 626 moveto
160 664 168 693 183 712  curveto
198 731 224 740 261 740  curveto
294 740 321 734 341 722  curveto
371 704 lineto
389 692 398 687 399 687  curveto
401 687 405 691 412 700  curveto
418 709 422 722 423 740  curveto
510 740 lineto
508 702 500 674 485 655  curveto
470 635 444 626 406 626  curveto
373 626 347 632 327 645  curveto
298 663 lineto
279 674 270 680 269 680  curveto
267 680 263 675 257 666  curveto
250 657 246 644 245 626  curveto
158 626 lineto
closepath
fill
		} def

	/macron
		{
56 710 moveto
56 783 lineto
498 783 lineto
498 710 lineto
56 710 lineto
closepath
fill
		} def

	/breve
		{
158 783 moveto
245 783 lineto
250 754 261 733 279 719  curveto
296 705 314 698 334 698  curveto
354 698 373 705 390 719  curveto
407 733 418 754 423 783  curveto
510 783 lineto
505 735 488 697 458 669  curveto
429 640 387 626 334 626  curveto
281 626 239 640 210 669  curveto
181 697 163 735 158 783  curveto
closepath
fill
		} def

	/dotaccent
		{
272 626 moveto
272 722 lineto
395 722 lineto
395 626 lineto
272 626 lineto
closepath
fill
		} def

	/dieresis
		{
182 626 moveto
182 710 lineto
293 710 lineto
293 626 lineto
182 626 lineto
closepath
375 626 moveto
375 710 lineto
486 710 lineto
486 626 lineto
375 626 lineto
closepath
fill
		} def

	/ring
		{
332 626 moveto
293 626 263 637 242 658  curveto
220 680 210 706 210 737  curveto
210 767 221 794 242 815  curveto
264 837 294 848 334 848  curveto
374 848 404 837 426 815  curveto
448 794 458 768 458 737  curveto
458 706 448 679 426 658  curveto
404 637 373 626 332 626  curveto
closepath
333 668 moveto
344 668 356 675 369 688  curveto
383 701 389 718 389 737  curveto
389 756 383 772 369 786  curveto
356 799 344 806 334 806  curveto
324 806 312 799 299 786  curveto
285 772 279 756 279 737  curveto
279 718 285 702 299 688  curveto
312 675 323 668 333 668  curveto
closepath
fill
		} def

	/cedilla
		{
319 0 moveto
394 0 lineto
364 -53 lineto
390 -53 412 -60 431 -76  curveto
450 -91 459 -110 459 -130  curveto
459 -153 449 -172 430 -187  curveto
411 -203 383 -210 347 -210  curveto
315 -210 287 -207 263 -200  curveto
263 -152 lineto
296 -163 317 -168 327 -168  curveto
335 -168 343 -165 351 -159  curveto
360 -153 364 -144 364 -132  curveto
364 -116 356 -104 341 -97  curveto
326 -89 303 -85 273 -85  curveto
319 0 lineto
closepath
fill
		} def

	/hungarumlaut
		{
74 481 moveto
170 771 lineto
305 771 lineto
161 481 lineto
74 481 lineto
closepath
290 481 moveto
387 771 lineto
522 771 lineto
377 481 lineto
290 481 lineto
closepath
fill
		} def

	/ogonek
		{
335 0 moveto
414 0 lineto
393 -12 377 -25 367 -40  curveto
356 -55 351 -70 351 -87  curveto
351 -103 356 -114 365 -122  curveto
374 -130 384 -134 393 -134  curveto
403 -134 422 -127 452 -115  curveto
452 -166 lineto
432 -175 405 -180 370 -180  curveto
328 -180 299 -174 283 -161  curveto
266 -148 258 -128 258 -103  curveto
258 -82 264 -63 277 -46  curveto
290 -29 309 -14 335 0  curveto
closepath
fill
		} def

	/caron
		{
519 783 moveto
401 626 lineto
267 626 lineto
150 783 lineto
249 783 lineto
347 684 lineto
347 684 lineto
419 783 lineto
519 783 lineto
closepath
fill
		} def

	/emdash
		{
86 252 moveto
86 325 lineto
546 325 lineto
546 252 lineto
86 252 lineto
closepath
fill
		} def

	/AE
		{
22 0 moveto
443 722 lineto
-122 722 lineto
-122 646 lineto
-424 646 lineto
-424 414 lineto
-171 414 lineto
-171 338 lineto
-424 338 lineto
-424 76 lineto
-100 76 lineto
-100 0 lineto
470 0 lineto
470 202 lineto
261 202 lineto
143 0 lineto
22 0 lineto
closepath
304 277 moveto
470 277 lineto
470 559 lineto
304 277 lineto
closepath
fill
		} def

	/ordfeminine
		{
311 453 moveto
293 420 260 403 214 403  curveto
176 403 146 413 127 431  curveto
108 450 98 473 98 502  curveto
98 540 114 570 146 591  curveto
177 612 226 622 292 622  curveto
304 622 lineto
304 660 lineto
304 679 299 693 288 703  curveto
278 712 266 717 254 717  curveto
227 717 186 702 129 671  curveto
129 745 lineto
172 762 218 771 268 771  curveto
320 771 356 761 378 743  curveto
399 725 410 698 410 661  curveto
410 504 lineto
410 488 412 476 417 468  curveto
422 460 425 456 426 456  curveto
426 456 435 457 452 460  curveto
456 413 lineto
438 407 416 403 391 403  curveto
364 403 345 407 334 416  curveto
323 424 316 436 311 453  curveto
311 453 lineto
closepath
304 496 moveto
304 576 lineto
284 577 lineto
266 577 248 571 230 561  curveto
212 550 203 534 203 512  curveto
203 495 207 483 216 474  curveto
225 466 233 461 241 461  curveto
257 461 278 473 304 496  curveto
closepath
fill
		} def

	/Lslash
		{
122 0 moveto
122 323 lineto
26 270 lineto
26 368 lineto
122 420 lineto
122 722 lineto
251 722 lineto
251 491 lineto
372 556 lineto
372 459 lineto
251 394 lineto
251 76 lineto
577 76 lineto
577 0 lineto
122 0 lineto
closepath
fill
		} def

	/Oslash
		{
549 608 moveto
510 645 466 664 415 664  curveto
352 664 301 637 261 584  curveto
220 531 200 457 200 362  curveto
200 286 210 229 230 191  curveto
549 608 lineto
closepath
282 114 moveto
321 77 366 58 416 58  curveto
479 58 360 85 59 138  curveto
-241 192 -392 266 -392 360  curveto
-392 437 -60 494 602 531  curveto
282 114 lineto
closepath
70 -18 moveto
152 89 lineto
94 160 64 251 64 361  curveto
64 476 95 568 156 637  curveto
218 706 304 740 415 740  curveto
501 740 567 724 613 691  curveto
651 740 lineto
762 740 lineto
679 633 lineto
55 562 -256 472 -256 360  curveto
-256 246 -116 154 163 85  curveto
443 16 528 -18 417 -18  curveto
328 -18 262 -1 218 30  curveto
181 -18 lineto
70 -18 lineto
closepath
fill
		} def

	/OE
		{
-458 11 moveto
191 -8 480 -18 408 -18  curveto
301 -18 216 16 156 86  curveto
95 156 64 248 64 361  curveto
64 476 95 568 156 637  curveto
217 706 303 740 414 740  curveto
482 740 191 730 -458 711  curveto
-458 722 lineto
-27 722 lineto
-27 646 lineto
-329 646 lineto
-329 414 lineto
-76 414 lineto
-76 338 lineto
-329 340 lineto
-329 76 lineto
-6 76 lineto
-6 0 lineto
-458 0 lineto
-458 11 lineto
closepath
-458 277 moveto
-458 444 lineto
-458 520 -301 576 13 611  curveto
329 646 462 664 414 664  curveto
352 664 301 637 260 583  curveto
220 530 200 456 200 361  curveto
200 266 220 192 261 138  curveto
301 85 353 58 415 58  curveto
461 58 326 76 12 113  curveto
-301 149 -458 204 -458 277  curveto
closepath
fill
		} def

	/ordmasculine
		{
259 403 moveto
198 403 151 420 120 453  curveto
89 486 74 531 74 587  curveto
74 644 89 688 120 721  curveto
152 754 199 771 261 771  curveto
324 771 371 754 403 721  curveto
434 688 450 644 450 587  curveto
450 530 434 485 403 452  curveto
371 420 323 403 259 403  curveto
closepath
260 457 moveto
282 457 300 468 316 490  curveto
331 512 339 544 339 588  curveto
339 631 331 663 316 685  curveto
301 706 283 717 261 717  curveto
240 717 222 706 207 684  curveto
193 663 185 630 185 587  curveto
185 544 192 511 207 489  curveto
222 468 240 457 260 457  curveto
closepath
fill
		} def

	/ae
		{
420 76 moveto
369 17 305 -12 230 -12  curveto
177 -12 136 1 107 29  curveto
78 56 64 91 64 133  curveto
64 191 88 235 137 266  curveto
185 297 260 313 359 313  curveto
369 313 lineto
369 377 lineto
369 408 361 431 345 446  curveto
330 462 310 469 287 469  curveto
246 469 187 449 110 408  curveto
110 502 lineto
174 528 240 542 305 542  curveto
378 542 428 526 456 496  curveto
486 526 535 542 603 542  curveto
680 542 565 517 258 469  curveto
-49 420 -202 347 -202 250  curveto
493 250 lineto
497 186 514 138 544 107  curveto
574 75 611 60 657 60  curveto
694 60 407 75 -202 106  curveto
-202 18 lineto
417 -2 695 -12 631 -12  curveto
576 -12 531 -3 496 14  curveto
461 32 436 52 420 76  curveto
closepath
369 119 moveto
369 256 lineto
337 257 lineto
302 257 268 247 236 227  curveto
203 207 187 181 187 148  curveto
187 125 195 106 211 90  curveto
228 74 243 66 257 66  curveto
288 66 326 84 369 119  curveto
closepath
496 316 moveto
-332 316 lineto
-332 367 -170 405 153 431  curveto
477 457 626 470 600 470  curveto
574 470 551 457 531 431  curveto
511 405 499 367 496 316  curveto
closepath
fill
		} def

	/dotlessi
		{
110 0 moveto
110 530 lineto
233 530 lineto
233 0 lineto
110 0 lineto
closepath
fill
		} def

	/lslash
		{
134 0 moveto
134 337 lineto
26 280 lineto
26 375 lineto
134 434 lineto
134 771 lineto
257 771 lineto
257 500 lineto
366 555 lineto
366 462 lineto
257 405 lineto
257 0 lineto
134 0 lineto
closepath
fill
		} def

	/oslash
		{
68 -12 moveto
131 68 lineto
130 70 lineto
88 117 68 182 68 263  curveto
68 349 90 417 136 467  curveto
181 517 247 542 334 542  curveto
401 542 449 532 479 512  curveto
502 542 lineto
601 542 lineto
538 461 lineto
539 459 lineto
-102 407 -422 343 -422 265  curveto
-422 180 -274 112 21 62  curveto
317 12 421 -12 334 -12  curveto
269 -12 221 -2 191 17  curveto
167 -12 lineto
68 -12 lineto
closepath
459 361 moveto
251 95 lineto
277 71 304 60 333 60  curveto
425 60 472 127 472 262  curveto
472 306 467 339 459 361  curveto
closepath
209 168 moveto
417 433 lineto
391 457 363 469 335 469  curveto
243 469 197 402 197 267  curveto
197 219 201 186 209 168  curveto
closepath
fill
		} def

	/oe
		{
506 65 moveto
472 13 413 -12 329 -12  curveto
245 -12 180 13 135 63  curveto
90 113 68 181 68 265  curveto
68 349 90 416 135 466  curveto
180 516 245 542 330 542  curveto
411 542 468 516 502 465  curveto
533 516 593 542 680 542  curveto
757 542 642 517 335 469  curveto
28 420 -125 347 -125 250  curveto
569 250 lineto
574 186 591 138 621 107  curveto
651 75 688 60 734 60  curveto
770 60 484 75 -125 106  curveto
-125 18 lineto
494 -2 773 -12 713 -12  curveto
613 -12 544 13 506 65  curveto
closepath
329 60 moveto
363 60 390 76 412 110  curveto
433 144 444 195 444 263  curveto
444 331 434 383 413 417  curveto
392 452 365 469 331 469  curveto
294 469 262 451 236 415  curveto
210 379 197 329 197 265  curveto
197 201 210 151 236 114  curveto
262 78 293 60 329 60  curveto
closepath
573 316 moveto
-255 316 lineto
-255 367 -93 405 230 431  curveto
554 457 703 470 677 470  curveto
651 470 628 457 608 431  curveto
588 405 577 367 573 316  curveto
closepath
fill
		} def

	/germandbls
		{
110 0 moveto
110 562 lineto
110 642 123 699 151 733  curveto
178 766 229 783 303 783  curveto
366 783 413 771 445 747  curveto
478 724 494 693 494 654  curveto
494 614 472 566 430 510  curveto
405 477 392 454 392 440  curveto
392 421 410 396 446 365  curveto
524 299 lineto
-101 251 -414 200 -414 146  curveto
-414 97 -259 58 51 30  curveto
362 1 486 -12 424 -12  curveto
370 -12 320 -2 274 16  curveto
274 110 lineto
352 76 402 60 425 60  curveto
441 60 455 67 470 81  curveto
484 95 491 113 491 137  curveto
491 165 472 195 435 227  curveto
342 307 lineto
301 342 281 377 281 414  curveto
281 441 297 480 329 530  curveto
356 571 370 607 370 636  curveto
370 661 363 680 349 692  curveto
335 704 319 710 300 710  curveto
282 710 267 701 253 683  curveto
240 665 233 638 233 602  curveto
233 0 lineto
110 0 lineto
closepath
fill
		} def

	/.notdef
		{
0 0 moveto
1000 0 lineto
1000 1000 lineto
0 1000 lineto
0 0 lineto
closepath
50 50 moveto
950 50 lineto
950 950 lineto
50 950 lineto
50 50 lineto
closepath
fill
		} def

	end				% close glyph dict. 
	currentdict			% actually put dict on the stack
	end			% close the dictionary now
	/LucidaSans-Bold exch definefont pop
/LucidaSans-Bold findfont 18.0 scalefont setfont
(4) show
Q
5.0 5.0 translate
Q
q
1 107 219 OPL
107 224
-5.0 -5.0 translate
q
100 234 10 18 rc
100.0 249.0 moveto
q 1 -1 scale
/ESSTIXFive-Bold findfont 18.0 scalefont setfont
(K) show
Q
Q
113.0 249.0 moveto
q 1 -1 scale
/LucidaSans-Bold findfont 18.0 scalefont setfont
(2) show
Q
5.0 5.0 translate
Q
q
1 176 219 OPL
176 224
-5.0 -5.0 translate
166.0 247.0 moveto
q 1 -1 scale
/LucidaSans-Bold findfont 18.0 scalefont setfont
(0) show
Q
5.0 5.0 translate
Q
q
1 245 219 OPL
245 224
-5.0 -5.0 translate
244.0 249.0 moveto
q 1 -1 scale
/LucidaSans-Bold findfont 18.0 scalefont setfont
(2) show
Q
5.0 5.0 translate
Q
q
1 314 219 OPL
314 224
-5.0 -5.0 translate
313.0 249.0 moveto
q 1 -1 scale
/LucidaSans-Bold findfont 18.0 scalefont setfont
(4) show
Q
5.0 5.0 translate
Q
q
1 383 219 OPL
383 224
-5.0 -5.0 translate
381.0 249.0 moveto
q 1 -1 scale
/LucidaSans-Bold findfont 18.0 scalefont setfont
(6) show
Q
5.0 5.0 translate
Q
Q
q
1 176 4 OPL
173 4
1 176 52 OPL
173 52
1 176 100 OPL
173 100
1 176 147 OPL
173 147
1 176 195 OPL
173 195
1 176 291 OPL
173 291
1 176 243 OPL
173 243
1 176 338 OPL
173 338
1 176 386 OPL
173 386
1 176 386 OPL
176 4
Q
0.0 0.0 translate
q
[ 1.0 0.0 0.0 1.0 0.0 0.0 ] concat
q
118 101 18 21 rc
122.0 119.0 moveto
q 1 -1 scale
/LucidaSans-Italic findfont 18.0 scalefont setfont
(y) show
Q
Q
newpath
0.0 0.0 m
0.0 390.0 l
390.0 390.0 l
390.0 0.0 l
h
W
Q
[ 1.0 0.0 0.0 1.0 5.0 5.0 ] defaultmatrix matrix concatmatrix setmatrix
0.0 0.0 translate
q
q
1 176 362 OPL
171 362
-5.0 -5.0 translate
q
147 360 10 18 rc
147.0 375.0 moveto
q 1 -1 scale
/ESSTIXFive-Bold findfont 18.0 scalefont setfont
(K) show
Q
Q
160.0 375.0 moveto
q 1 -1 scale
/LucidaSans-Bold findfont 18.0 scalefont setfont
(6) show
Q
5.0 5.0 translate
Q
q
1 176 314 OPL
171 314
-5.0 -5.0 translate
q
147 312 10 18 rc
147.0 327.0 moveto
q 1 -1 scale
/ESSTIXFive-Bold findfont 18.0 scalefont setfont
(K) show
Q
Q
160.0 327.0 moveto
q 1 -1 scale
/LucidaSans-Bold findfont 18.0 scalefont setfont
(4) show
Q
5.0 5.0 translate
Q
q
1 176 267 OPL
171 267
-5.0 -5.0 translate
q
147 264 10 18 rc
147.0 279.0 moveto
q 1 -1 scale
/ESSTIXFive-Bold findfont 18.0 scalefont setfont
(K) show
Q
Q
160.0 279.0 moveto
q 1 -1 scale
/LucidaSans-Bold findfont 18.0 scalefont setfont
(2) show
Q
5.0 5.0 translate
Q
q
1 176 219 OPL
171 219
Q
q
1 176 171 OPL
171 171
-5.0 -5.0 translate
160.0 184.0 moveto
q 1 -1 scale
/LucidaSans-Bold findfont 18.0 scalefont setfont
(2) show
Q
5.0 5.0 translate
Q
q
1 176 123 OPL
171 123
-5.0 -5.0 translate
160.0 136.0 moveto
q 1 -1 scale
/LucidaSans-Bold findfont 18.0 scalefont setfont
(4) show
Q
5.0 5.0 translate
Q
q
1 176 76 OPL
171 76
-5.0 -5.0 translate
160.0 88.0 moveto
q 1 -1 scale
/LucidaSans-Bold findfont 18.0 scalefont setfont
(6) show
Q
5.0 5.0 translate
Q
q
1 176 28 OPL
171 28
-5.0 -5.0 translate
160.0 40.0 moveto
q 1 -1 scale
/LucidaSans-Bold findfont 18.0 scalefont setfont
(8) show
Q
5.0 5.0 translate
Q
Q
Q
Q
0 0 400 400 rc
0.0 0.0 translate
0.0 0.0 translate
2 J
0 j
end end restore showpage

%%Trailer
%%EOF
