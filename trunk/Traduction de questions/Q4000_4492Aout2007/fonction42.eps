%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 20 118 575 673
%%Creator: FreeHEP Graphics2D Driver
%%Producer: com.maplesoft.mathdoc.view.plot.paint.PlotPSGraphics2D Revision: 1.20 
%%For: 
%%Title: 
%%CreationDate: Monday, May 21, 2007 9:58:00 AM EDT
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Draw a line. (x0 y0 x1 y1 line)
/L {bias n m l S unbias} def

% Polyline primitive.
/polyline  {n m 1 exch 1 exch
           {pop currentfile token pop currentfile token pop l} for
           } def

% Draw a polyline (n x0 y0 OPL x1 y1 x2 y2 ... ... xn yn)
/OPL {bias polyline S unbias} def

% Draw a closed polyline (n x0 y0 CPL x1 y1 x2 y2 ... ... xn yn)
/CPL {bias polyline s unbias} def

% Draw a filled polyline (n x0 y0 FPL x1 y1 x2 y2 ... ... xn yn)
/FPL {polyline h f*} def

% Draw an oval. (x y w h OVL)
/OVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width currentlinewidth sub 2 div
      height currentlinewidth sub 2 div neg
      scale n 0 0 1 5 -2 roll arc
      smatrix setmatrix S} def

% Draw a filled oval. (x y w h FOVL)
/FOVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width 2 div
      height 2 div neg
      scale n 0 0 m 0 0 1 5 -2 roll arc
      h smatrix setmatrix f} def

% Draw a rounded rectangle. (x y w h arcwidth archeight RREC)
/RREC {matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      s} def

% Draw a filled rounded rectangle. (x y w h arcwidth archeight FRREC)
/FRREC{matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      h f} def

% Draw a string.  (string x y STR)
/STR {q m 1 -1 scale recshow Q} def

% Define basic plot symbols.
/xys   {/siz exch def /yv exch def /xv exch def} def
/hline {xys n xv siz 2. div sub yv m siz 0 rlineto S} def
/vline {xys n xv yv siz 2. div sub m 0 siz rlineto S} def
/plus  {xys n xv yv siz 2. div sub m 0 siz rlineto
                    xv siz 2. div sub yv m siz 0 rlineto S} def
/dot   {n 2. div 0 360 arc s} def
/fdot  {n 2. div 0 360 arc h f} def
/box   {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                    siz 2 sqrt div dup rs} def
/fbox  {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                       siz 2 sqrt div dup rf} def
/tridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto s} def
/ftridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto h f} def

% Symbols defined in terms of the others.
/star     {3 copy cross plus} def
/cross    {xys q xv yv translate 45 rotate 0 0 siz plus Q} def
/diamond  {xys q xv yv translate 45 rotate 0 0 siz box Q} def
/fdiamond {xys q xv yv translate 45 rotate 0 0 siz fbox Q} def
/triup    {xys q xv yv translate 180 rotate 0 0 siz tridn Q} def
/ftriup   {xys q xv yv translate 180 rotate 0 0 siz ftridn Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Helvetica 16#00 vg&newcompositefont
/DialogInput-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
595 791 setpagesize
20 20 20 20 setmargins
0 0 setorigin
400 400 setsize
fittopage
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0.0 0.0 0.0 RG
[ 1.0 0.0 0.0 1.0 0.0 0.0 ] defaultmatrix matrix concatmatrix setmatrix
1.0 w
2 J
0 j
10.0 M
[ ] 0.0 d
1.0 1.0 1.0 RG
0.0 0.0 400.0 400.0 rf
0.0 0.0 0.0 RG
0 J
1 j
0.0 0.0 translate
0.0 0.0 translate
q
5.0 5.0 translate
0 0 390 390 rc
q
0.647059 0.647059 0.647059 RG
1 13 378 OPL
13 11
1 105 378 OPL
105 11
1 198 378 OPL
198 11
1 290 378 OPL
290 11
1 383 378 OPL
383 11
0.913725 0.913725 0.913725 RG
1 59 378 OPL
59 11
1 152 378 OPL
152 11
1 244 378 OPL
244 11
1 337 378 OPL
337 11
0.647059 0.647059 0.647059 RG
Q
q
0.647059 0.647059 0.647059 RG
1 13 378 OPL
383 378
1 13 286 OPL
383 286
1 13 195 OPL
383 195
1 13 103 OPL
383 103
1 13 11 OPL
383 11
0.913725 0.913725 0.913725 RG
1 13 360 OPL
383 360
1 13 341 OPL
383 341
1 13 323 OPL
383 323
1 13 305 OPL
383 305
1 13 268 OPL
383 268
1 13 250 OPL
383 250
1 13 231 OPL
383 231
1 13 213 OPL
383 213
1 13 176 OPL
383 176
1 13 158 OPL
383 158
1 13 139 OPL
383 139
1 13 121 OPL
383 121
1 13 84 OPL
383 84
1 13 66 OPL
383 66
1 13 48 OPL
383 48
1 13 29 OPL
383 29
0.647059 0.647059 0.647059 RG
Q
q
q
2.0 w
1.0 0.0 0.0 RG
11.0 8.023872 374.986694 371.976135 rc
44 298 -8 OPL
300 36
302 64
304 84
306 100
308 112
310 122
312 129
314 136
316 141
318 146
319 150
321 153
323 156
325 159
327 161
329 163
331 165
333 167
335 169
337 170
339 171
341 172
342 174
344 175
346 176
348 176
350 177
352 178
354 179
356 179
358 180
360 181
362 181
364 182
366 182
368 183
370 183
371 183
373 184
375 184
377 184
379 185
381 185
383 185
38 208 390 OPL
210 363
211 342
213 327
215 315
217 305
219 299
221 292
223 287
225 283
227 280
229 277
231 275
233 273
235 271
237 270
238 269
240 268
242 268
244 268
246 268
248 268
250 269
252 270
254 271
256 273
258 275
260 277
262 280
263 283
265 287
267 292
269 298
271 306
273 315
275 327
277 342
279 363
281 390
46 13 191 OPL
17 191
21 191
24 191
28 191
32 191
36 191
40 191
44 190
48 190
52 190
55 190
59 190
63 189
67 189
71 189
75 189
78 188
82 188
86 188
90 187
94 187
98 186
101 186
105 185
109 185
113 184
117 183
121 183
125 182
128 181
133 179
136 178
140 176
144 175
148 173
152 170
156 167
159 164
163 159
167 153
171 146
175 135
179 122
183 100
186 65
190 -7
newpath
0.0 0.0 m
0.0 390.0 l
390.0 390.0 l
390.0 0.0 l
h
W
Q
Q
q
q
1 337 195 OPL
337 197
1 244 195 OPL
244 197
1 152 195 OPL
152 197
1 59 195 OPL
59 197
1 13 195 OPL
383 195
Q
0.0 0.0 translate
q
[ 1.0 0.0 0.0 1.0 0.0 0.0 ] concat
q
142 223 19 21 rc
146.0 241.0 moveto
q 1 -1 scale
9 dict begin
/FontType 3 def
/FontMatrix [0.0010 0 0 0.0010 0 0]def
/FontBBox [0 -213 1628 950 ] def
	/Encoding 256 array def
			0 1 255 {Encoding exch /.notdef put}for
		Encoding 32 /space put
		Encoding 33 /exclam put
		Encoding 34 /quotedbl put
		Encoding 35 /numbersign put
		Encoding 36 /dollar put
		Encoding 37 /percent put
		Encoding 38 /ampersand put
		Encoding 39 /quoteright put
		Encoding 40 /parenleft put
		Encoding 41 /parenright put
		Encoding 42 /asterisk put
		Encoding 43 /plus put
		Encoding 44 /comma put
		Encoding 45 /hyphen put
		Encoding 46 /period put
		Encoding 47 /slash put
		Encoding 48 /zero put
		Encoding 49 /one put
		Encoding 50 /two put
		Encoding 51 /three put
		Encoding 52 /four put
		Encoding 53 /five put
		Encoding 54 /six put
		Encoding 55 /seven put
		Encoding 56 /eight put
		Encoding 57 /nine put
		Encoding 58 /colon put
		Encoding 59 /semicolon put
		Encoding 60 /less put
		Encoding 61 /equal put
		Encoding 62 /greater put
		Encoding 63 /question put
		Encoding 64 /at put
		Encoding 65 /A put
		Encoding 66 /B put
		Encoding 67 /C put
		Encoding 68 /D put
		Encoding 69 /E put
		Encoding 70 /F put
		Encoding 71 /G put
		Encoding 72 /H put
		Encoding 73 /I put
		Encoding 74 /J put
		Encoding 75 /K put
		Encoding 76 /L put
		Encoding 77 /M put
		Encoding 78 /N put
		Encoding 79 /O put
		Encoding 80 /P put
		Encoding 81 /Q put
		Encoding 82 /R put
		Encoding 83 /S put
		Encoding 84 /T put
		Encoding 85 /U put
		Encoding 86 /V put
		Encoding 87 /W put
		Encoding 88 /X put
		Encoding 89 /Y put
		Encoding 90 /Z put
		Encoding 91 /bracketleft put
		Encoding 92 /backslash put
		Encoding 93 /bracketright put
		Encoding 94 /asciicircum put
		Encoding 95 /underscore put
		Encoding 96 /quoteleft put
		Encoding 97 /a put
		Encoding 98 /b put
		Encoding 99 /c put
		Encoding 100 /d put
		Encoding 101 /e put
		Encoding 102 /f put
		Encoding 103 /g put
		Encoding 104 /h put
		Encoding 105 /i put
		Encoding 106 /j put
		Encoding 107 /k put
		Encoding 108 /l put
		Encoding 109 /m put
		Encoding 110 /n put
		Encoding 111 /o put
		Encoding 112 /p put
		Encoding 113 /q put
		Encoding 114 /r put
		Encoding 115 /s put
		Encoding 116 /t put
		Encoding 117 /u put
		Encoding 118 /v put
		Encoding 119 /w put
		Encoding 120 /x put
		Encoding 121 /y put
		Encoding 122 /z put
		Encoding 123 /braceleft put
		Encoding 124 /bar put
		Encoding 125 /braceright put
		Encoding 126 /asciitilde put
		Encoding 161 /exclamdown put
		Encoding 162 /cent put
		Encoding 163 /sterling put
		Encoding 164 /fraction put
		Encoding 165 /yen put
		Encoding 166 /florin put
		Encoding 167 /section put
		Encoding 168 /currency put
		Encoding 169 /quotesingle put
		Encoding 170 /quotedblleft put
		Encoding 171 /guillemotleft put
		Encoding 172 /guilsinglleft put
		Encoding 173 /guilsinglright put
		Encoding 174 /fi put
		Encoding 175 /fl put
		Encoding 177 /endash put
		Encoding 178 /dagger put
		Encoding 179 /daggerdbl put
		Encoding 180 /periodcentered put
		Encoding 182 /paragraph put
		Encoding 183 /bullet put
		Encoding 184 /quotesinglbase put
		Encoding 185 /quotedblbase put
		Encoding 186 /quotedblright put
		Encoding 187 /guillemotright put
		Encoding 188 /ellipsis put
		Encoding 189 /perthousand put
		Encoding 191 /questiondown put
		Encoding 193 /grave put
		Encoding 194 /acute put
		Encoding 195 /circumflex put
		Encoding 196 /tilde put
		Encoding 197 /macron put
		Encoding 198 /breve put
		Encoding 199 /dotaccent put
		Encoding 200 /dieresis put
		Encoding 202 /ring put
		Encoding 203 /cedilla put
		Encoding 205 /hungarumlaut put
		Encoding 206 /ogonek put
		Encoding 207 /caron put
		Encoding 208 /emdash put
		Encoding 225 /AE put
		Encoding 227 /ordfeminine put
		Encoding 232 /Lslash put
		Encoding 233 /Oslash put
		Encoding 234 /OE put
		Encoding 235 /ordmasculine put
		Encoding 241 /ae put
		Encoding 245 /dotlessi put
		Encoding 248 /lslash put
		Encoding 249 /oslash put
		Encoding 250 /oe put
		Encoding 251 /germandbls put
	/BuildGlyph
		{ 2 copy exch /Metrics get exch 
			2 copy known {get}{pop pop 1000.0} ifelse
			0
			0 -213 1628 950
			setcachedevice
			exch /CharProcs get exch
			2 copy known not
					{pop /.notdef}
				if
			get exec
		} bind def

	/BuildChar
		{ 1 index /Encoding get exch get
		  1 index /BuildGlyph get exec
	  } bind def
	/Metrics 150 dict def
		Metrics begin
		/.notdef 1000 def
		/space 316.40625 def
		/exclam 316.40625 def
		/quotedbl 373.53515625 def
		/numbersign 632.32421875 def
		/dollar 632.32421875 def
		/percent 668.45703125 def
		/ampersand 697.265625 def
		/quoteright 229.00390625 def
		/parenleft 325.1953125 def
		/parenright 325.1953125 def
		/asterisk 481.93359375 def
		/plus 794.921875 def
		/comma 316.40625 def
		/hyphen 578.61328125 def
		/period 316.40625 def
		/slash 524.4140625 def
		/zero 632.32421875 def
		/one 632.32421875 def
		/two 632.32421875 def
		/three 632.32421875 def
		/four 632.32421875 def
		/five 632.32421875 def
		/six 632.32421875 def
		/seven 632.32421875 def
		/eight 632.32421875 def
		/nine 632.32421875 def
		/colon 316.40625 def
		/semicolon 316.40625 def
		/less 794.921875 def
		/equal 794.921875 def
		/greater 794.921875 def
		/question 421.875 def
		/at 858.3984375 def
		/A 689.94140625 def
		/B 575.1953125 def
		/C 691.89453125 def
		/D 749.0234375 def
		/E 541.9921875 def
		/F 536.1328125 def
		/G 722.65625 def
		/H 734.86328125 def
		/I 288.0859375 def
		/J 311.03515625 def
		/K 652.83203125 def
		/L 533.203125 def
		/M 861.328125 def
		/N 738.76953125 def
		/O 776.85546875 def
		/P 552.734375 def
		/Q 776.85546875 def
		/R 632.32421875 def
		/S 538.57421875 def
		/T 632.32421875 def
		/U 692.87109375 def
		/V 653.80859375 def
		/W 855.46875 def
		/X 625.9765625 def
		/Y 623.046875 def
		/Z 604.4921875 def
		/bracketleft 325.1953125 def
		/backslash 524.4140625 def
		/bracketright 325.1953125 def
		/asciicircum 632.32421875 def
		/underscore 500.0 def
		/quoteleft 614.2578125 def
		/a 552.24609375 def
		/b 629.39453125 def
		/c 512.20703125 def
		/d 629.39453125 def
		/e 557.12890625 def
		/f 367.67578125 def
		/g 623.53515625 def
		/h 620.60546875 def
		/i 289.0625 def
		/j 304.19921875 def
		/k 584.47265625 def
		/l 289.0625 def
		/m 933.59375 def
		/n 620.60546875 def
		/o 614.2578125 def
		/p 629.39453125 def
		/q 629.39453125 def
		/r 409.1796875 def
		/s 509.765625 def
		/t 374.0234375 def
		/u 620.60546875 def
		/v 517.578125 def
		/w 770.5078125 def
		/x 613.28125 def
		/y 522.4609375 def
		/z 573.2421875 def
		/braceleft 325.1953125 def
		/bar 373.53515625 def
		/braceright 325.1953125 def
		/asciitilde 632.32421875 def
		/exclamdown 316.40625 def
		/cent 632.32421875 def
		/sterling 632.32421875 def
		/fraction 0.0 def
		/yen 632.32421875 def
		/florin 632.32421875 def
		/section 632.32421875 def
		/currency 632.8125 def
		/quotesingle 229.00390625 def
		/quotedblleft 397.4609375 def
		/guillemotleft 523.92578125 def
		/guilsinglleft 331.54296875 def
		/guilsinglright 331.54296875 def
		/fi 644.53125 def
		/fl 647.4609375 def
		/endash 578.61328125 def
		/dagger 632.32421875 def
		/daggerdbl 632.32421875 def
		/periodcentered 316.40625 def
		/paragraph 632.32421875 def
		/bullet 608.3984375 def
		/quotesinglbase 316.40625 def
		/quotedblbase 397.4609375 def
		/quotedblright 397.4609375 def
		/guillemotright 523.92578125 def
		/ellipsis 1000.0 def
		/perthousand 1012.20703125 def
		/questiondown 421.875 def
		/grave 614.2578125 def
		/acute 614.2578125 def
		/circumflex 614.2578125 def
		/tilde 614.2578125 def
		/macron 500.0 def
		/breve 614.2578125 def
		/dotaccent 614.2578125 def
		/dieresis 614.2578125 def
		/ring 614.2578125 def
		/cedilla 614.2578125 def
		/hungarumlaut 505.859375 def
		/ogonek 614.2578125 def
		/caron 614.2578125 def
		/emdash 578.61328125 def
		/AE 906.73828125 def
		/ordfeminine 469.7265625 def
		/Lslash 548.33984375 def
		/Oslash 776.85546875 def
		/OE 1000.0 def
		/ordmasculine 469.7265625 def
		/ae 851.07421875 def
		/dotlessi 289.0625 def
		/lslash 328.125 def
		/oslash 614.2578125 def
		/oe 928.22265625 def
		/germandbls 598.14453125 def
	end
	/CharProcs 150 dict def
	CharProcs begin
			%define Glyph dictionary and start filling
	/space
		{
fill
		} def

	/exclam
		{
109 0 moveto
126 96 lineto
222 96 lineto
206 0 lineto
109 0 lineto
closepath
155 192 moveto
211 578 lineto
236 722 lineto
332 722 lineto
307 578 lineto
228 192 lineto
155 192 lineto
closepath
fill
		} def

	/quotedbl
		{
159 530 moveto
189 771 lineto
285 771 lineto
231 530 lineto
159 530 lineto
closepath
327 530 moveto
357 771 lineto
454 771 lineto
399 530 lineto
327 530 lineto
closepath
fill
		} def

	/numbersign
		{
99 0 moveto
191 216 lineto
45 216 lineto
68 277 lineto
216 277 lineto
288 445 lineto
130 445 lineto
153 505 lineto
314 505 lineto
406 722 lineto
468 722 lineto
376 505 lineto
505 505 lineto
597 722 lineto
659 722 lineto
567 505 lineto
713 505 lineto
691 445 lineto
541 445 lineto
469 277 lineto
628 277 lineto
605 216 lineto
444 216 lineto
352 0 lineto
290 0 lineto
382 216 lineto
253 216 lineto
161 0 lineto
99 0 lineto
closepath
279 277 moveto
407 277 lineto
479 445 lineto
350 445 lineto
279 277 lineto
closepath
fill
		} def

	/dollar
		{
287 -60 moveto
298 0 lineto
241 0 179 13 112 40  curveto
127 123 lineto
194 89 255 72 310 72  curveto
356 331 lineto
297 371 258 407 239 438  curveto
220 469 215 506 222 549  curveto
231 597 253 637 290 669  curveto
327 700 372 718 424 722  curveto
435 783 lineto
483 783 lineto
472 722 lineto
520 722 570 711 623 689  curveto
609 611 lineto
552 638 502 653 461 656  curveto
416 399 lineto
431 388 443 380 451 375  curveto
495 345 525 317 539 293  curveto
553 269 556 238 550 202  curveto
541 151 518 107 482 71  curveto
445 34 400 11 346 0  curveto
335 -60 lineto
287 -60 lineto
closepath
359 78 moveto
419 98 454 134 463 187  curveto
467 211 465 230 457 244  curveto
449 259 429 279 399 303  curveto
359 78 lineto
closepath
373 431 moveto
412 653 lineto
351 635 316 601 307 551  curveto
303 526 305 505 314 489  curveto
323 472 343 452 373 431  curveto
closepath
fill
		} def

	/percent
		{
8 -18 moveto
710 740 lineto
785 740 lineto
84 -18 lineto
8 -18 lineto
closepath
220 361 moveto
174 361 140 377 118 410  curveto
97 443 91 487 100 542  curveto
110 597 131 641 165 674  curveto
198 706 238 722 286 722  curveto
333 722 367 706 389 674  curveto
411 641 417 597 408 542  curveto
398 486 376 442 343 409  curveto
309 377 268 361 220 361  curveto
closepath
230 409 moveto
285 409 320 454 335 542  curveto
342 583 341 614 330 638  curveto
320 662 302 674 277 674  curveto
252 674 230 662 211 638  curveto
193 614 180 582 173 542  curveto
166 502 167 469 178 445  curveto
188 421 205 409 230 409  curveto
closepath
506 0 moveto
460 0 426 16 405 49  curveto
383 81 377 125 387 180  curveto
396 236 418 279 451 312  curveto
485 345 525 361 572 361  curveto
618 361 653 345 675 312  curveto
697 280 704 236 694 181  curveto
684 125 662 80 629 48  curveto
596 16 555 0 506 0  curveto
closepath
516 48 moveto
571 48 606 92 622 181  curveto
629 221 627 253 616 277  curveto
606 301 588 313 563 313  curveto
538 313 517 301 498 277  curveto
479 253 466 221 459 180  curveto
452 140 453 108 464 84  curveto
474 60 491 48 516 48  curveto
closepath
fill
		} def

	/ampersand
		{
518 0 moveto
489 42 lineto
429 2 363 -18 292 -18  curveto
216 -18 158 3 117 47  curveto
76 91 61 147 73 214  curveto
93 326 165 401 289 441  curveto
267 500 259 549 266 588  curveto
274 631 297 667 336 696  curveto
375 725 419 740 468 740  curveto
514 740 551 726 576 699  curveto
602 671 611 637 604 594  curveto
591 522 527 459 412 406  curveto
445 320 488 240 539 165  curveto
576 208 602 269 616 348  curveto
621 384 lineto
717 384 lineto
698 277 650 185 573 107  curveto
596 70 623 34 654 0  curveto
518 0 lineto
closepath
457 98 moveto
404 182 355 277 312 384  curveto
231 354 185 305 174 238  curveto
165 187 174 143 203 107  curveto
231 72 270 54 320 54  curveto
365 54 411 69 457 98  curveto
closepath
387 467 moveto
462 498 504 540 513 593  curveto
522 643 501 668 451 668  curveto
401 668 372 643 363 592  curveto
358 559 366 517 387 467  curveto
closepath
fill
		} def

	/quoteright
		{
166 505 moveto
189 771 lineto
309 771 lineto
238 505 lineto
166 505 lineto
closepath
fill
		} def

	/parenleft
		{
275 -78 moveto
263 -144 lineto
201 -96 157 -31 130 50  curveto
103 132 98 220 114 313  curveto
131 406 167 493 222 575  curveto
278 658 345 723 423 771  curveto
412 704 lineto
355 652 311 596 280 536  curveto
249 476 226 402 211 313  curveto
195 224 192 149 202 89  curveto
212 29 236 -26 275 -78  curveto
closepath
fill
		} def

	/parenright
		{
22 -78 moveto
10 -144 lineto
89 -96 156 -31 212 50  curveto
267 132 303 220 319 313  curveto
336 406 330 493 303 575  curveto
277 658 232 723 170 771  curveto
159 704 lineto
197 652 222 596 232 536  curveto
242 476 239 402 223 313  curveto
207 224 184 149 153 89  curveto
123 29 79 -26 22 -78  curveto
closepath
fill
		} def

	/asterisk
		{
516 629 moveto
526 560 lineto
372 528 lineto
374 531 375 534 375 535  curveto
377 548 374 559 367 568  curveto
516 629 lineto
closepath
451 409 moveto
384 366 lineto
331 497 lineto
348 499 360 507 369 521  curveto
451 409 lineto
closepath
225 366 moveto
174 409 lineto
294 521 lineto
298 507 308 499 324 497  curveto
225 366 lineto
closepath
151 560 moveto
186 629 lineto
314 568 lineto
303 560 296 549 294 535  curveto
294 534 294 531 294 528  curveto
151 560 lineto
closepath
331 722 moveto
403 722 lineto
362 572 lineto
357 575 350 577 342 577  curveto
334 577 326 575 320 572  curveto
331 722 lineto
closepath
fill
		} def

	/plus
		{
361 0 moveto
405 252 lineto
152 252 lineto
165 325 lineto
418 325 lineto
462 578 lineto
534 578 lineto
490 325 lineto
743 325 lineto
730 252 lineto
477 252 lineto
433 0 lineto
361 0 lineto
closepath
fill
		} def

	/comma
		{
70 -156 moveto
76 -120 lineto
109 -111 131 -74 142 -9  curveto
144 0 lineto
97 0 lineto
118 120 lineto
239 120 lineto
221 16 lineto
202 -90 152 -148 70 -156  curveto
closepath
fill
		} def

	/hyphen
		{
116 252 moveto
129 325 lineto
562 325 lineto
550 252 lineto
116 252 lineto
closepath
fill
		} def

	/period
		{
97 0 moveto
118 120 lineto
239 120 lineto
218 0 lineto
97 0 lineto
closepath
fill
		} def

	/slash
		{
68 -144 moveto
480 722 lineto
556 722 lineto
144 -144 lineto
68 -144 lineto
closepath
fill
		} def

	/zero
		{
310 -18 moveto
235 -18 181 17 147 87  curveto
114 157 107 248 126 361  curveto
146 475 185 567 244 636  curveto
303 706 370 740 446 740  curveto
521 740 576 706 611 636  curveto
645 567 652 476 632 363  curveto
612 247 573 154 514 85  curveto
456 16 388 -18 310 -18  curveto
closepath
323 54 moveto
425 54 494 157 531 364  curveto
566 567 533 668 433 668  curveto
333 668 265 566 229 361  curveto
193 156 224 54 323 54  curveto
closepath
fill
		} def

	/one
		{
150 0 moveto
163 72 lineto
307 72 lineto
407 642 lineto
256 606 lineto
269 680 lineto
521 740 lineto
404 72 lineto
548 72 lineto
536 0 lineto
150 0 lineto
closepath
fill
		} def

	/two
		{
83 0 moveto
97 84 lineto
137 149 206 221 305 298  curveto
368 347 lineto
451 411 497 475 508 538  curveto
515 578 509 610 489 633  curveto
468 656 437 668 395 668  curveto
345 668 282 649 207 610  curveto
222 695 lineto
292 725 358 740 421 740  curveto
489 740 540 722 575 686  curveto
609 649 621 601 611 541  curveto
603 497 586 459 560 425  curveto
533 392 487 351 423 303  curveto
380 271 lineto
292 206 236 144 214 84  curveto
527 84 lineto
513 0 lineto
83 0 lineto
closepath
fill
		} def

	/three
		{
102 5 moveto
118 95 lineto
182 67 234 54 274 54  curveto
320 54 359 67 393 94  curveto
426 121 447 156 454 198  curveto
472 300 410 351 267 351  curveto
229 351 lineto
241 416 lineto
275 416 lineto
408 416 483 463 499 557  curveto
512 631 475 668 387 668  curveto
339 668 283 654 221 627  curveto
235 711 lineto
296 731 353 740 406 740  curveto
554 740 618 684 599 573  curveto
584 488 523 427 416 391  curveto
528 364 575 300 557 200  curveto
546 132 514 78 462 40  curveto
410 1 345 -18 267 -18  curveto
222 -18 167 -10 102 5  curveto
closepath
fill
		} def

	/four
		{
376 0 moveto
412 204 lineto
87 204 lineto
99 277 lineto
502 722 lineto
593 722 lineto
516 283 lineto
613 283 lineto
599 204 lineto
502 204 lineto
466 0 lineto
376 0 lineto
closepath
195 283 moveto
432 283 lineto
488 604 lineto
195 283 lineto
closepath
fill
		} def

	/five
		{
121 -2 moveto
136 83 lineto
180 63 224 54 267 54  curveto
315 54 355 68 387 96  curveto
419 124 439 162 448 211  curveto
467 320 401 374 252 374  curveto
235 374 217 373 198 371  curveto
260 722 lineto
625 722 lineto
611 638 lineto
330 638 lineto
296 448 lineto
389 448 458 426 502 384  curveto
547 341 563 282 549 207  curveto
537 136 504 81 449 41  curveto
395 1 326 -18 242 -18  curveto
205 -18 165 -13 121 -2  curveto
closepath
fill
		} def

	/six
		{
237 374 moveto
293 434 356 463 426 463  curveto
489 463 537 442 570 401  curveto
603 359 614 305 602 240  curveto
589 165 556 103 502 54  curveto
448 6 387 -18 318 -18  curveto
238 -18 181 14 147 78  curveto
114 142 107 231 127 345  curveto
149 470 192 567 255 637  curveto
319 706 398 741 492 741  curveto
535 741 587 732 648 713  curveto
633 629 lineto
570 655 516 668 473 668  curveto
350 668 271 570 237 374  curveto
closepath
502 218 moveto
511 273 506 316 487 347  curveto
468 378 437 394 393 394  curveto
353 394 315 380 281 353  curveto
247 326 227 293 220 254  curveto
209 194 215 145 236 109  curveto
258 72 291 54 337 54  curveto
378 54 414 69 444 98  curveto
474 128 493 168 502 218  curveto
closepath
fill
		} def

	/seven
		{
150 0 moveto
169 56 191 104 216 145  curveto
240 187 281 243 338 314  curveto
591 632 lineto
219 632 lineto
234 722 lineto
698 722 lineto
682 632 lineto
449 359 309 148 261 0  curveto
150 0 lineto
closepath
fill
		} def

	/eight
		{
298 393 moveto
236 442 211 497 221 556  curveto
231 611 258 655 304 689  curveto
350 724 406 741 470 741  curveto
530 741 575 726 607 697  curveto
639 668 651 631 643 584  curveto
631 514 575 451 475 393  curveto
574 340 617 271 602 187  curveto
591 126 560 77 508 39  curveto
455 0 393 -18 321 -18  curveto
250 -18 195 0 158 35  curveto
120 71 107 119 117 177  curveto
132 264 193 336 298 393  curveto
closepath
426 423 moveto
501 468 544 517 553 571  curveto
558 600 551 624 532 641  curveto
512 659 484 668 448 668  curveto
412 668 382 659 357 642  curveto
331 624 316 602 312 574  curveto
307 547 313 523 329 502  curveto
345 480 378 454 426 423  curveto
closepath
344 354 moveto
300 324 269 298 251 276  curveto
233 253 222 226 216 192  curveto
209 151 216 118 238 92  curveto
261 66 293 54 337 54  curveto
379 54 415 65 446 86  curveto
476 108 494 137 500 171  curveto
505 199 501 223 488 242  curveto
475 262 447 285 405 313  curveto
344 354 lineto
closepath
fill
		} def

	/nine
		{
114 4 moveto
128 85 lineto
186 64 236 54 279 54  curveto
339 54 390 79 433 130  curveto
475 181 505 252 521 343  curveto
461 283 400 252 338 252  curveto
277 252 230 275 195 320  curveto
161 364 149 419 160 483  curveto
173 557 207 619 260 667  curveto
314 716 375 740 443 740  curveto
522 740 578 709 612 646  curveto
646 583 654 497 635 387  curveto
613 263 568 164 500 91  curveto
432 18 351 -18 257 -18  curveto
219 -18 172 -10 114 4  curveto
closepath
260 502 moveto
250 446 255 402 274 370  curveto
293 338 325 322 368 322  curveto
409 322 446 336 479 363  curveto
513 391 533 424 540 463  curveto
551 525 546 574 524 612  curveto
503 650 470 668 425 668  curveto
383 668 347 654 317 624  curveto
288 594 269 554 260 502  curveto
closepath
fill
		} def

	/colon
		{
109 0 moveto
126 96 lineto
222 96 lineto
206 0 lineto
109 0 lineto
closepath
185 433 moveto
202 530 lineto
298 530 lineto
281 433 lineto
185 433 lineto
closepath
fill
		} def

	/semicolon
		{
82 -156 moveto
88 -120 lineto
113 -108 131 -72 142 -11  curveto
144 0 lineto
109 0 lineto
126 96 lineto
222 96 lineto
208 15 lineto
191 -83 149 -140 82 -156  curveto
closepath
185 433 moveto
202 530 lineto
298 530 lineto
281 433 lineto
185 433 lineto
closepath
fill
		} def

	/less
		{
686 0 moveto
158 289 lineto
787 578 lineto
773 497 lineto
320 289 lineto
700 81 lineto
686 0 lineto
closepath
fill
		} def

	/equal
		{
136 162 moveto
149 234 lineto
727 234 lineto
714 162 lineto
136 162 lineto
closepath
168 343 moveto
181 415 lineto
759 415 lineto
746 343 lineto
168 343 lineto
closepath
fill
		} def

	/greater
		{
108 0 moveto
737 289 lineto
209 578 lineto
195 497 lineto
575 289 lineto
122 81 lineto
108 0 lineto
closepath
fill
		} def

	/question
		{
122 0 moveto
138 96 lineto
235 96 lineto
218 0 lineto
122 0 lineto
closepath
155 192 moveto
160 219 lineto
171 281 205 339 262 394  curveto
299 430 lineto
361 488 395 536 401 574  curveto
406 603 399 626 380 643  curveto
360 659 331 668 293 668  curveto
243 668 188 656 128 632  curveto
142 713 lineto
206 732 264 741 316 741  curveto
383 741 433 726 467 696  curveto
500 666 513 626 504 575  curveto
499 547 489 522 474 501  curveto
459 481 433 455 396 425  curveto
361 396 lineto
326 368 302 344 289 324  curveto
276 305 267 279 261 246  curveto
252 192 lineto
155 192 lineto
closepath
fill
		} def

	/at
		{
537 21 moveto
474 -4 414 -18 358 -18  curveto
266 -18 196 10 146 66  curveto
96 123 79 194 94 281  curveto
113 391 171 492 266 583  curveto
317 632 375 670 440 698  curveto
506 726 569 740 631 740  curveto
722 740 793 711 844 652  curveto
895 594 913 521 898 434  curveto
884 353 847 285 788 229  curveto
729 172 664 144 594 144  curveto
540 144 516 163 523 200  curveto
525 214 532 231 542 251  curveto
572 313 lineto
567 313 lineto
488 200 415 144 348 144  curveto
285 144 260 180 273 252  curveto
281 299 301 348 334 400  curveto
366 452 402 493 442 523  curveto
488 557 536 575 586 575  curveto
596 575 608 574 624 573  curveto
640 572 652 572 662 572  curveto
729 572 lineto
613 261 lineto
609 251 606 241 604 231  curveto
601 209 611 198 636 198  curveto
679 198 722 221 764 268  curveto
806 314 832 367 842 426  curveto
855 501 840 563 797 612  curveto
754 662 693 687 614 687  curveto
511 687 412 646 318 565  curveto
224 483 168 391 149 286  curveto
136 213 151 152 193 106  curveto
235 59 296 36 375 36  curveto
426 36 477 47 528 71  curveto
537 21 lineto
closepath
595 406 moveto
630 501 lineto
602 512 577 518 555 518  curveto
509 518 467 494 428 448  curveto
389 401 364 343 352 273  curveto
344 227 353 204 380 204  curveto
400 204 429 222 468 259  curveto
507 296 549 345 595 406  curveto
closepath
fill
		} def

	/A
		{
507 276 moveto
439 587 lineto
261 276 lineto
507 276 lineto
closepath
567 0 moveto
524 200 lineto
218 200 lineto
103 0 lineto
8 0 lineto
421 722 lineto
522 722 lineto
678 0 lineto
567 0 lineto
closepath
fill
		} def

	/B
		{
93 0 moveto
219 722 lineto
407 722 lineto
479 722 532 708 566 681  curveto
600 654 612 614 603 563  curveto
588 475 527 413 422 376  curveto
534 340 581 275 565 180  curveto
555 122 527 77 483 46  curveto
438 15 379 0 306 0  curveto
93 0 lineto
closepath
208 76 moveto
229 76 lineto
304 76 353 81 377 90  curveto
423 108 450 141 458 190  curveto
466 233 453 269 419 297  curveto
386 326 340 340 283 340  curveto
254 340 lineto
208 76 lineto
closepath
265 405 moveto
298 405 lineto
353 405 397 417 431 440  curveto
466 463 486 496 494 539  curveto
506 610 457 646 347 646  curveto
307 646 lineto
265 405 lineto
closepath
fill
		} def

	/C
		{
399 -18 moveto
287 -18 206 14 156 80  curveto
107 146 92 240 113 360  curveto
135 481 182 574 256 641  curveto
330 707 424 740 537 740  curveto
602 740 676 730 759 708  curveto
742 612 lineto
649 646 576 664 522 664  curveto
444 664 378 637 326 584  curveto
274 531 239 456 222 359  curveto
206 267 216 195 253 141  curveto
289 88 347 62 427 62  curveto
495 62 572 83 658 125  curveto
642 37 lineto
565 0 483 -18 399 -18  curveto
closepath
fill
		} def

	/D
		{
93 0 moveto
219 722 lineto
459 722 lineto
531 722 588 714 629 698  curveto
670 682 704 655 729 617  curveto
770 557 781 477 764 378  curveto
743 258 695 165 620 99  curveto
545 33 450 0 334 0  curveto
93 0 lineto
closepath
209 76 moveto
340 76 lineto
434 76 505 101 553 152  curveto
604 206 638 278 653 368  curveto
668 453 659 520 626 568  curveto
607 598 580 618 547 629  curveto
514 640 463 646 393 646  curveto
308 646 lineto
209 76 lineto
closepath
fill
		} def

	/E
		{
93 0 moveto
219 722 lineto
623 722 lineto
610 646 lineto
308 646 lineto
268 414 lineto
520 414 lineto
507 338 lineto
255 338 lineto
209 76 lineto
531 76 lineto
518 0 lineto
93 0 lineto
closepath
fill
		} def

	/F
		{
93 0 moveto
219 722 lineto
623 722 lineto
610 646 lineto
308 646 lineto
266 403 lineto
519 403 lineto
506 328 lineto
253 328 lineto
195 0 lineto
93 0 lineto
closepath
fill
		} def

	/G
		{
639 19 moveto
547 -5 469 -18 404 -18  curveto
289 -18 206 14 156 80  curveto
106 145 92 239 114 361  curveto
134 481 182 574 256 640  curveto
330 707 423 740 535 740  curveto
608 740 683 729 759 708  curveto
742 613 lineto
648 647 575 664 522 664  curveto
444 664 379 637 326 584  curveto
274 531 239 456 222 360  curveto
206 264 216 190 253 137  curveto
290 85 350 58 433 58  curveto
467 58 505 64 547 76  curveto
588 312 lineto
690 312 lineto
639 19 lineto
closepath
fill
		} def

	/H
		{
93 0 moveto
219 722 lineto
322 722 lineto
268 417 lineto
612 417 lineto
666 722 lineto
768 722 lineto
642 0 lineto
539 0 lineto
599 341 lineto
255 341 lineto
195 0 lineto
93 0 lineto
closepath
fill
		} def

	/I
		{
92 0 moveto
219 722 lineto
321 722 lineto
195 0 lineto
92 0 lineto
closepath
fill
		} def

	/J
		{
-113 -134 moveto
-97 -43 lineto
-60 -56 -27 -62 2 -62  curveto
41 -62 71 -51 90 -29  curveto
109 -6 124 32 134 87  curveto
245 722 lineto
347 722 lineto
237 91 lineto
209 -65 121 -144 -27 -144  curveto
-50 -144 -78 -141 -113 -134  curveto
closepath
fill
		} def

	/K
		{
93 0 moveto
219 722 lineto
315 722 lineto
253 367 lineto
608 722 lineto
711 722 lineto
367 377 lineto
635 0 lineto
505 0 lineto
253 366 lineto
189 0 lineto
93 0 lineto
closepath
fill
		} def

	/L
		{
93 0 moveto
219 722 lineto
322 722 lineto
209 76 lineto
534 76 lineto
521 0 lineto
93 0 lineto
closepath
fill
		} def

	/M
		{
93 0 moveto
219 722 lineto
361 722 lineto
464 163 lineto
768 722 lineto
895 722 lineto
768 0 lineto
672 0 lineto
775 587 lineto
482 48 lineto
382 48 lineto
284 589 lineto
181 0 lineto
93 0 lineto
closepath
fill
		} def

	/N
		{
93 0 moveto
219 722 lineto
320 722 lineto
586 164 lineto
684 722 lineto
771 722 lineto
645 0 lineto
545 0 lineto
278 558 lineto
181 0 lineto
93 0 lineto
closepath
fill
		} def

	/O
		{
381 -18 moveto
280 -18 206 16 157 86  curveto
108 155 94 247 114 361  curveto
134 476 180 568 254 637  curveto
327 706 415 740 518 740  curveto
620 740 696 706 745 637  curveto
795 569 810 477 790 362  curveto
769 245 722 153 649 84  curveto
575 16 486 -18 381 -18  curveto
closepath
396 58 moveto
469 58 531 85 581 138  curveto
631 191 664 266 681 363  curveto
697 457 690 531 659 584  curveto
627 637 576 664 504 664  curveto
432 664 372 637 322 584  curveto
272 531 239 457 223 362  curveto
206 267 213 193 244 139  curveto
274 85 325 58 396 58  curveto
closepath
fill
		} def

	/P
		{
93 0 moveto
219 722 lineto
416 722 lineto
503 722 563 707 596 678  curveto
629 649 640 600 628 533  curveto
615 456 578 396 518 352  curveto
459 308 382 287 290 287  curveto
245 287 lineto
194 0 lineto
93 0 lineto
closepath
258 364 moveto
300 364 lineto
361 364 410 378 448 406  curveto
486 434 510 474 519 525  curveto
526 568 519 599 496 618  curveto
473 636 431 646 370 646  curveto
307 646 lineto
258 364 lineto
closepath
fill
		} def

	/Q
		{
709 -144 moveto
602 -107 514 -63 446 -13  curveto
415 -16 391 -18 375 -18  curveto
278 -18 205 17 157 87  curveto
108 157 94 249 114 361  curveto
134 476 180 568 254 637  curveto
327 706 415 740 518 740  curveto
621 740 697 706 746 637  curveto
795 568 809 475 789 359  curveto
760 193 678 78 544 15  curveto
620 -21 702 -47 788 -62  curveto
709 -144 lineto
closepath
396 58 moveto
469 58 531 85 581 138  curveto
630 191 664 266 681 363  curveto
697 457 690 531 659 584  curveto
628 637 576 664 504 664  curveto
432 664 372 637 322 584  curveto
272 531 239 457 223 362  curveto
206 267 213 193 244 139  curveto
274 85 325 58 396 58  curveto
closepath
fill
		} def

	/R
		{
93 0 moveto
219 722 lineto
438 722 lineto
507 722 558 707 589 676  curveto
621 646 632 601 621 543  curveto
605 447 544 378 440 338  curveto
622 0 lineto
496 0 lineto
344 305 lineto
248 305 lineto
194 0 lineto
93 0 lineto
closepath
261 382 moveto
294 382 lineto
423 382 497 432 514 534  curveto
527 608 480 646 372 646  curveto
307 646 lineto
261 382 lineto
closepath
fill
		} def

	/S
		{
231 -18 moveto
183 -18 123 -7 51 13  curveto
69 115 lineto
143 77 207 58 259 58  curveto
300 58 334 69 362 90  curveto
391 111 408 139 414 173  curveto
419 202 415 226 402 246  curveto
390 265 364 288 325 312  curveto
280 341 lineto
225 376 187 409 167 440  curveto
147 471 141 507 148 549  curveto
158 604 186 650 233 686  curveto
280 722 334 740 397 740  curveto
452 740 510 731 568 712  curveto
552 619 lineto
481 649 427 664 389 664  curveto
354 664 323 654 296 635  curveto
270 616 254 593 249 564  curveto
245 540 250 519 263 500  curveto
277 481 304 459 345 434  curveto
391 404 lineto
447 369 485 335 504 304  curveto
524 272 529 234 522 190  curveto
511 127 479 77 426 39  curveto
372 0 308 -18 231 -18  curveto
closepath
fill
		} def

	/T
		{
265 0 moveto
378 646 lineto
121 646 lineto
135 722 lineto
750 722 lineto
737 646 lineto
480 646 lineto
367 0 lineto
265 0 lineto
closepath
fill
		} def

	/U
		{
213 722 moveto
316 722 lineto
236 266 lineto
223 194 228 141 249 108  curveto
270 75 310 58 368 58  curveto
425 58 469 74 498 105  curveto
528 136 549 188 562 263  curveto
642 722 lineto
732 722 lineto
652 264 lineto
635 166 602 94 553 49  curveto
505 4 436 -18 348 -18  curveto
258 -18 195 5 160 51  curveto
126 98 117 170 134 267  curveto
213 722 lineto
closepath
fill
		} def

	/V
		{
290 0 moveto
144 722 lineto
246 722 lineto
366 130 lineto
686 722 lineto
775 722 lineto
387 0 lineto
290 0 lineto
closepath
fill
		} def

	/W
		{
187 0 moveto
127 722 lineto
226 722 lineto
274 151 lineto
510 722 lineto
608 722 lineto
639 159 lineto
896 722 lineto
980 722 lineto
651 0 lineto
549 0 lineto
519 557 lineto
288 0 lineto
187 0 lineto
closepath
fill
		} def

	/X
		{
7 0 moveto
311 362 lineto
146 722 lineto
267 722 lineto
393 450 lineto
623 722 lineto
720 722 lineto
428 373 lineto
599 0 lineto
478 0 lineto
345 286 lineto
104 0 lineto
7 0 lineto
closepath
fill
		} def

	/Y
		{
249 0 moveto
302 301 lineto
134 722 lineto
251 722 lineto
382 396 lineto
641 722 lineto
736 722 lineto
405 303 lineto
352 0 lineto
249 0 lineto
closepath
fill
		} def

	/Z
		{
46 0 moveto
60 82 lineto
547 646 lineto
183 646 lineto
196 722 lineto
684 722 lineto
670 646 lineto
183 82 lineto
571 82 lineto
557 0 lineto
46 0 lineto
closepath
fill
		} def

	/bracketleft
		{
70 -144 moveto
231 771 lineto
423 771 lineto
411 698 lineto
302 698 lineto
168 -72 lineto
276 -72 lineto
263 -144 lineto
70 -144 lineto
closepath
fill
		} def

	/backslash
		{
404 -144 moveto
295 722 lineto
220 722 lineto
328 -144 lineto
404 -144 lineto
closepath
fill
		} def

	/bracketright
		{
203 -144 moveto
363 771 lineto
170 771 lineto
158 698 lineto
266 698 lineto
131 -72 lineto
23 -72 lineto
10 -144 lineto
203 -144 lineto
closepath
fill
		} def

	/asciicircum
		{
414 561 moveto
166 192 lineto
85 192 lineto
442 722 lineto
615 192 lineto
534 192 lineto
414 561 lineto
closepath
fill
		} def

	/underscore
		{
29 -72 moveto
42 0 lineto
457 0 lineto
444 -72 lineto
29 -72 lineto
closepath
fill
		} def

	/quoteleft
		{
531 626 moveto
459 626 lineto
329 783 lineto
441 783 lineto
531 626 lineto
closepath
fill
		} def

	/a
		{
381 67 moveto
314 14 254 -12 201 -12  curveto
157 -12 122 1 98 29  curveto
74 56 66 91 73 133  curveto
83 191 115 235 169 266  curveto
224 297 296 313 387 313  curveto
410 313 lineto
421 377 lineto
432 438 406 469 342 469  curveto
292 469 234 454 170 422  curveto
184 502 lineto
253 528 316 542 373 542  curveto
432 542 473 528 497 501  curveto
520 475 527 433 517 377  curveto
475 137 lineto
466 82 478 54 512 54  curveto
516 54 522 55 530 56  curveto
528 3 lineto
504 -6 479 -12 453 -12  curveto
408 -12 384 14 381 67  curveto
closepath
376 119 moveto
400 256 lineto
368 257 lineto
315 257 271 247 235 227  curveto
199 207 178 181 172 148  curveto
168 125 173 106 186 90  curveto
200 74 218 66 242 66  curveto
282 66 326 84 376 119  curveto
closepath
fill
		} def

	/b
		{
95 -5 moveto
231 771 lineto
327 771 lineto
267 430 lineto
320 504 385 542 464 542  curveto
528 542 574 518 602 472  curveto
631 425 638 361 624 281  curveto
609 193 575 122 524 68  curveto
474 14 414 -12 347 -12  curveto
284 -12 236 11 202 60  curveto
179 -5 lineto
95 -5 lineto
closepath
214 126 moveto
256 82 299 60 344 60  curveto
436 60 495 130 520 271  curveto
541 395 511 458 429 458  curveto
376 458 318 428 257 370  curveto
214 126 lineto
closepath
fill
		} def

	/c
		{
301 -12 moveto
229 -12 174 14 136 67  curveto
98 120 86 187 101 268  curveto
116 354 151 421 206 469  curveto
261 517 331 542 414 542  curveto
456 542 501 536 550 524  curveto
536 444 lineto
484 460 441 468 407 468  curveto
358 468 315 449 279 412  curveto
243 375 219 326 209 265  curveto
198 205 205 157 229 120  curveto
253 83 290 65 340 65  curveto
384 65 431 76 481 99  curveto
467 16 lineto
401 -2 346 -12 301 -12  curveto
closepath
fill
		} def

	/d
		{
436 0 moveto
453 99 lineto
401 25 336 -12 257 -12  curveto
193 -12 147 11 119 57  curveto
90 104 83 167 97 248  curveto
113 336 146 407 197 461  curveto
248 515 307 542 375 542  curveto
437 542 485 517 518 469  curveto
571 771 lineto
668 771 lineto
533 0 lineto
436 0 lineto
closepath
507 403 moveto
465 447 421 469 377 469  curveto
285 469 226 399 201 258  curveto
180 134 210 72 292 72  curveto
345 72 403 101 464 159  curveto
507 403 lineto
closepath
fill
		} def

	/e
		{
487 17 moveto
419 -2 363 -12 317 -12  curveto
239 -12 179 13 139 65  curveto
99 117 86 184 101 267  curveto
115 347 148 413 200 465  curveto
253 516 313 542 381 542  curveto
445 542 490 519 517 474  curveto
544 428 550 363 536 279  curveto
530 250 lineto
196 250 lineto
188 124 238 61 348 61  curveto
388 61 439 71 501 93  curveto
487 17 lineto
closepath
213 322 moveto
447 322 lineto
464 420 436 470 362 470  curveto
288 470 238 420 213 322  curveto
closepath
fill
		} def

	/f
		{
291 458 moveto
210 0 lineto
114 0 lineto
194 458 lineto
119 458 lineto
131 530 lineto
207 530 lineto
218 593 lineto
240 720 308 783 424 783  curveto
456 783 492 777 531 767  curveto
517 690 lineto
476 704 443 710 417 710  curveto
385 710 362 703 348 688  curveto
334 673 323 645 316 604  curveto
303 530 lineto
436 530 lineto
423 458 lineto
291 458 lineto
closepath
fill
		} def

	/g
		{
67 -176 moveto
93 -92 lineto
144 -119 196 -132 250 -132  curveto
359 -132 423 -74 443 40  curveto
458 123 lineto
409 49 344 12 263 12  curveto
200 12 153 35 124 81  curveto
95 127 87 190 101 268  curveto
115 349 148 415 199 465  curveto
251 516 310 542 378 542  curveto
437 542 484 517 518 469  curveto
529 530 lineto
626 530 lineto
558 144 lineto
543 61 528 0 513 -39  curveto
497 -79 475 -112 447 -137  curveto
397 -182 328 -204 240 -204  curveto
178 -204 120 -195 67 -176  curveto
closepath
468 183 moveto
507 403 lineto
472 447 430 469 380 469  curveto
336 469 298 451 267 416  curveto
235 381 214 332 204 270  curveto
183 154 214 96 296 96  curveto
351 96 409 125 468 183  curveto
closepath
fill
		} def

	/h
		{
96 0 moveto
231 771 lineto
327 771 lineto
267 430 lineto
331 504 400 542 473 542  curveto
519 542 553 527 575 498  curveto
598 469 605 430 596 380  curveto
529 0 lineto
433 0 lineto
494 349 lineto
501 388 500 417 492 433  curveto
483 450 465 458 439 458  curveto
380 458 318 420 252 343  curveto
192 0 lineto
96 0 lineto
closepath
fill
		} def

	/i
		{
96 0 moveto
188 530 lineto
285 530 lineto
192 0 lineto
96 0 lineto
closepath
205 626 moveto
222 722 lineto
318 722 lineto
302 626 lineto
205 626 lineto
closepath
fill
		} def

	/j
		{
-106 -180 moveto
-93 -104 lineto
-51 -122 -19 -132 4 -132  curveto
38 -132 62 -123 76 -105  curveto
90 -88 102 -53 111 0  curveto
204 530 lineto
300 530 lineto
208 0 lineto
184 -136 114 -204 0 -204  curveto
-34 -204 -70 -196 -106 -180  curveto
closepath
220 626 moveto
237 722 lineto
334 722 lineto
317 626 lineto
220 626 lineto
closepath
fill
		} def

	/k
		{
96 0 moveto
231 771 lineto
327 771 lineto
240 272 lineto
509 530 lineto
613 530 lineto
355 282 lineto
564 0 lineto
441 0 lineto
239 271 lineto
192 0 lineto
96 0 lineto
closepath
fill
		} def

	/l
		{
96 0 moveto
231 771 lineto
327 771 lineto
192 0 lineto
96 0 lineto
closepath
fill
		} def

	/m
		{
96 0 moveto
188 530 lineto
285 530 lineto
267 430 lineto
327 504 394 542 467 542  curveto
538 542 580 504 593 430  curveto
652 505 717 542 790 542  curveto
837 542 871 528 892 501  curveto
913 473 919 435 910 385  curveto
843 0 lineto
746 0 lineto
811 370 lineto
822 431 803 461 755 461  curveto
705 461 647 426 580 355  curveto
518 0 lineto
421 0 lineto
486 370 lineto
496 431 477 461 428 461  curveto
380 461 322 426 254 355  curveto
192 0 lineto
96 0 lineto
closepath
fill
		} def

	/n
		{
96 0 moveto
188 530 lineto
285 530 lineto
267 430 lineto
331 504 400 542 473 542  curveto
519 542 553 527 575 498  curveto
598 469 605 430 596 380  curveto
529 0 lineto
433 0 lineto
494 349 lineto
501 388 500 417 492 433  curveto
483 450 465 458 439 458  curveto
380 458 318 420 252 343  curveto
192 0 lineto
96 0 lineto
closepath
fill
		} def

	/o
		{
301 -12 moveto
225 -12 169 12 133 63  curveto
96 113 85 180 100 265  curveto
115 350 150 417 204 467  curveto
258 517 324 542 401 542  curveto
479 542 537 517 573 467  curveto
610 417 621 350 606 266  curveto
591 179 556 111 502 62  curveto
448 12 381 -12 301 -12  curveto
closepath
315 60 moveto
417 60 480 128 504 266  curveto
528 401 489 469 389 469  curveto
289 469 227 401 203 265  curveto
179 128 216 60 315 60  curveto
closepath
fill
		} def

	/p
		{
62 -192 moveto
188 530 lineto
285 530 lineto
267 430 lineto
320 504 385 542 464 542  curveto
528 542 574 518 602 472  curveto
631 425 638 361 624 281  curveto
609 193 575 122 524 68  curveto
474 14 414 -12 347 -12  curveto
284 -12 236 11 202 60  curveto
158 -192 lineto
62 -192 lineto
closepath
214 126 moveto
256 82 299 60 344 60  curveto
436 60 495 130 520 271  curveto
541 395 511 458 429 458  curveto
376 458 318 428 257 370  curveto
214 126 lineto
closepath
fill
		} def

	/q
		{
402 -192 moveto
453 99 lineto
401 25 336 -12 257 -12  curveto
193 -12 147 11 119 57  curveto
90 104 83 167 97 248  curveto
113 336 146 407 197 461  curveto
248 515 307 542 375 542  curveto
437 542 485 517 518 469  curveto
529 530 lineto
626 530 lineto
499 -192 lineto
402 -192 lineto
closepath
507 403 moveto
465 447 421 469 377 469  curveto
285 469 226 399 201 258  curveto
180 134 210 72 292 72  curveto
345 72 403 101 464 159  curveto
507 403 lineto
closepath
fill
		} def

	/r
		{
96 0 moveto
188 530 lineto
285 530 lineto
267 430 lineto
318 504 380 542 453 542  curveto
463 542 473 541 483 539  curveto
467 449 lineto
452 455 438 458 425 458  curveto
364 458 307 421 253 349  curveto
192 0 lineto
96 0 lineto
closepath
fill
		} def

	/s
		{
234 -12 moveto
190 -12 139 -1 79 18  curveto
95 106 lineto
152 75 204 60 251 60  curveto
278 60 303 67 324 82  curveto
344 97 357 116 361 138  curveto
366 171 346 198 298 220  curveto
246 244 lineto
169 278 137 328 148 393  curveto
156 439 179 475 216 502  curveto
253 528 301 542 358 542  curveto
387 542 423 537 465 529  curveto
485 525 lineto
471 445 lineto
420 461 378 469 347 469  curveto
285 469 250 447 242 402  curveto
237 373 256 348 300 329  curveto
343 309 lineto
391 287 424 264 442 239  curveto
459 214 465 184 458 147  curveto
450 100 425 62 383 32  curveto
341 2 291 -12 234 -12  curveto
closepath
fill
		} def

	/t
		{
253 -12 moveto
204 -12 168 1 146 29  curveto
123 57 117 96 125 146  curveto
180 458 lineto
113 458 lineto
126 530 lineto
192 530 lineto
209 626 lineto
307 635 lineto
289 530 lineto
427 530 lineto
415 458 lineto
276 458 lineto
225 164 lineto
212 94 236 60 296 60  curveto
309 60 325 62 344 66  curveto
332 0 lineto
301 -8 275 -12 253 -12  curveto
closepath
fill
		} def

	/u
		{
427 0 moveto
445 99 lineto
381 25 312 -12 239 -12  curveto
193 -12 159 2 136 31  curveto
114 60 107 99 116 149  curveto
183 530 lineto
279 530 lineto
218 180 lineto
211 140 212 112 220 95  curveto
229 79 247 70 274 70  curveto
332 70 394 109 460 186  curveto
520 530 lineto
616 530 lineto
523 0 lineto
427 0 lineto
closepath
fill
		} def

	/v
		{
206 0 moveto
101 530 lineto
197 530 lineto
279 117 lineto
514 530 lineto
604 530 lineto
302 0 lineto
206 0 lineto
closepath
fill
		} def

	/w
		{
157 0 moveto
98 530 lineto
192 530 lineto
237 119 lineto
434 530 lineto
530 530 lineto
568 119 lineto
773 530 lineto
856 530 lineto
590 0 lineto
494 0 lineto
453 410 lineto
254 0 lineto
157 0 lineto
closepath
fill
		} def

	/x
		{
42 0 moveto
292 273 lineto
141 530 lineto
255 530 lineto
374 326 lineto
550 530 lineto
644 530 lineto
413 261 lineto
567 0 lineto
453 0 lineto
330 209 lineto
139 0 lineto
42 0 lineto
closepath
fill
		} def

	/y
		{
93 -192 moveto
212 0 lineto
100 530 lineto
204 530 lineto
286 130 lineto
518 530 lineto
609 530 lineto
193 -192 lineto
93 -192 lineto
closepath
fill
		} def

	/z
		{
60 0 moveto
72 72 lineto
468 458 lineto
155 458 lineto
168 530 lineto
599 530 lineto
587 458 lineto
191 72 lineto
525 72 lineto
513 0 lineto
60 0 lineto
closepath
fill
		} def

	/braceleft
		{
73 349 moveto
97 349 lineto
146 349 176 375 185 428  curveto
189 450 190 473 189 496  curveto
188 539 lineto
186 567 188 594 193 621  curveto
200 664 222 699 258 726  curveto
293 752 339 767 394 771  curveto
381 698 lineto
367 698 lineto
345 698 326 692 309 681  curveto
292 669 283 655 280 638  curveto
278 630 278 614 278 591  curveto
277 542 lineto
277 520 275 494 269 465  curveto
259 404 226 353 171 313  curveto
212 272 227 221 216 160  curveto
211 131 205 105 197 84  curveto
180 34 lineto
172 11 167 -4 166 -12  curveto
163 -29 168 -43 181 -54  curveto
193 -66 211 -72 232 -72  curveto
246 -72 lineto
234 -144 lineto
179 -141 139 -126 113 -99  curveto
87 -72 77 -37 85 5  curveto
90 32 98 59 109 87  curveto
125 129 lineto
134 153 141 176 145 199  curveto
154 251 134 277 84 277  curveto
60 277 lineto
73 349 lineto
closepath
fill
		} def

	/bar
		{
125 -144 moveto
285 771 lineto
357 771 lineto
197 -144 lineto
125 -144 lineto
closepath
fill
		} def

	/braceright
		{
374 349 moveto
351 349 lineto
301 349 281 375 290 428  curveto
294 450 300 473 309 496  curveto
326 539 lineto
337 567 345 594 350 621  curveto
357 664 348 699 321 726  curveto
295 752 255 767 201 771  curveto
189 698 lineto
202 698 lineto
224 698 242 692 254 681  curveto
267 669 272 655 269 638  curveto
267 630 263 614 254 591  curveto
237 542 lineto
230 520 224 494 218 465  curveto
208 404 223 353 264 313  curveto
209 272 176 221 165 160  curveto
160 131 157 105 157 84  curveto
157 34 lineto
157 11 156 -4 155 -12  curveto
152 -29 142 -43 125 -54  curveto
108 -66 89 -72 67 -72  curveto
54 -72 lineto
41 -144 lineto
96 -141 142 -126 177 -99  curveto
213 -72 234 -37 242 5  curveto
247 32 248 59 247 87  curveto
245 129 lineto
244 153 246 176 250 199  curveto
259 251 288 277 338 277  curveto
362 277 lineto
374 349 lineto
closepath
fill
		} def

	/asciitilde
		{
89 216 moveto
97 263 116 302 147 332  curveto
177 362 212 377 252 377  curveto
278 377 311 365 351 342  curveto
398 315 lineto
455 281 lineto
468 274 482 271 497 271  curveto
537 271 561 301 572 361  curveto
644 361 lineto
618 252 565 198 484 198  curveto
456 198 419 211 373 237  curveto
323 266 lineto
271 296 lineto
260 302 249 305 237 305  curveto
197 305 171 275 161 216  curveto
89 216 lineto
closepath
fill
		} def

	/exclamdown
		{
298 530 moveto
281 433 lineto
185 433 lineto
202 530 lineto
298 530 lineto
closepath
253 337 moveto
197 -48 lineto
172 -192 lineto
76 -192 lineto
101 -48 lineto
181 337 lineto
253 337 lineto
closepath
fill
		} def

	/cent
		{
323 0 moveto
338 84 lineto
273 90 224 119 192 170  curveto
159 222 150 285 163 360  curveto
176 437 207 499 254 546  curveto
301 594 361 622 434 632  curveto
450 722 lineto
498 722 lineto
482 632 lineto
525 630 570 622 617 609  curveto
603 528 lineto
549 548 504 559 470 562  curveto
398 152 lineto
443 152 491 163 543 186  curveto
530 112 lineto
478 93 430 84 386 84  curveto
372 0 lineto
323 0 lineto
closepath
351 158 moveto
421 558 lineto
381 554 348 535 323 502  curveto
297 468 279 420 268 357  curveto
258 303 260 260 274 227  curveto
288 193 314 170 351 158  curveto
closepath
fill
		} def

	/sterling
		{
120 0 moveto
135 84 lineto
171 95 200 113 221 139  curveto
243 164 257 198 264 238  curveto
284 349 lineto
196 349 lineto
209 421 lineto
296 421 lineto
315 526 lineto
327 596 353 649 392 685  curveto
432 722 482 740 544 740  curveto
578 740 614 735 652 726  curveto
638 644 lineto
601 660 563 668 526 668  curveto
496 668 472 659 453 640  curveto
435 621 423 593 416 556  curveto
393 421 lineto
498 421 lineto
486 349 lineto
380 349 lineto
369 287 lineto
360 236 347 196 331 167  curveto
314 139 287 111 249 84  curveto
547 84 lineto
533 0 lineto
120 0 lineto
closepath
fill
		} def

	/fraction
		{
-304 -18 moveto
359 740 lineto
425 740 lineto
-238 -18 lineto
-304 -18 lineto
closepath
fill
		} def

	/yen
		{
265 0 moveto
294 168 lineto
150 168 lineto
160 229 lineto
305 229 lineto
317 301 lineto
173 301 lineto
183 361 lineto
328 361 lineto
165 722 lineto
279 722 lineto
405 441 lineto
644 722 lineto
731 722 lineto
424 361 lineto
569 361 lineto
558 301 lineto
414 301 lineto
401 229 lineto
545 229 lineto
535 168 lineto
390 168 lineto
361 0 lineto
265 0 lineto
closepath
fill
		} def

	/florin
		{
90 -144 moveto
275 349 lineto
178 349 lineto
191 421 lineto
302 421 lineto
321 473 lineto
354 562 395 629 443 673  curveto
491 718 547 740 610 740  curveto
646 740 682 736 719 726  curveto
691 650 lineto
659 662 628 668 597 668  curveto
562 668 531 656 504 631  curveto
477 605 454 568 436 517  curveto
400 421 lineto
545 421 lineto
532 349 lineto
373 349 lineto
188 -144 lineto
90 -144 lineto
closepath
fill
		} def

	/section
		{
85 -126 moveto
101 -39 lineto
173 -73 237 -90 291 -90  curveto
334 -90 370 -82 399 -66  curveto
428 -50 445 -28 449 -2  curveto
453 19 449 36 437 49  curveto
426 62 398 78 355 98  curveto
275 135 lineto
231 155 200 179 181 206  curveto
163 233 156 264 162 299  curveto
171 348 203 397 259 445  curveto
219 475 202 515 211 562  curveto
220 616 249 659 296 691  curveto
344 724 402 740 471 740  curveto
520 740 575 733 636 717  curveto
622 639 lineto
560 658 505 668 458 668  curveto
416 668 380 660 351 643  curveto
322 626 306 605 301 578  curveto
298 560 302 544 314 530  curveto
325 515 344 502 371 491  curveto
433 464 lineto
495 437 537 410 559 385  curveto
580 359 587 326 580 285  curveto
572 239 539 189 481 135  curveto
529 104 548 60 538 4  curveto
529 -46 501 -87 452 -117  curveto
403 -147 342 -163 268 -163  curveto
218 -163 157 -151 85 -126  curveto
closepath
439 166 moveto
469 198 486 230 492 261  curveto
496 284 491 303 478 319  curveto
466 334 440 350 403 367  curveto
302 413 lineto
273 383 256 353 250 322  curveto
247 300 252 280 268 261  curveto
283 243 308 226 342 210  curveto
439 166 lineto
closepath
fill
		} def

	/currency
		{
218 188 moveto
106 93 lineto
71 135 lineto
183 230 lineto
160 269 153 313 162 361  curveto
170 409 193 452 229 491  curveto
150 587 lineto
200 629 lineto
279 534 lineto
324 563 370 578 417 578  curveto
463 578 504 563 539 534  curveto
651 629 lineto
687 587 lineto
575 491 lineto
597 452 604 409 595 361  curveto
587 313 565 269 529 230  curveto
608 135 lineto
557 93 lineto
479 188 lineto
433 159 387 144 341 144  curveto
294 144 254 159 218 188  curveto
closepath
351 216 moveto
393 216 430 230 463 258  curveto
496 285 516 320 523 361  curveto
530 402 522 436 499 464  curveto
476 491 445 505 404 505  curveto
363 505 327 491 294 464  curveto
261 436 241 402 234 361  curveto
227 321 235 287 258 259  curveto
280 230 312 216 351 216  curveto
closepath
fill
		} def

	/quotesingle
		{
166 505 moveto
189 771 lineto
309 771 lineto
238 505 lineto
166 505 lineto
closepath
fill
		} def

	/quotedblleft
		{
465 771 moveto
459 734 lineto
447 728 436 717 428 701  curveto
419 685 413 664 408 637  curveto
406 626 lineto
452 626 lineto
433 518 lineto
325 518 lineto
339 599 lineto
348 648 363 687 384 715  curveto
405 744 432 762 465 771  curveto
closepath
285 771 moveto
278 734 lineto
266 728 256 717 247 701  curveto
238 685 232 664 227 637  curveto
225 626 lineto
272 626 lineto
253 518 lineto
144 518 lineto
159 599 lineto
167 648 182 687 203 715  curveto
224 744 251 762 285 771  curveto
closepath
fill
		} def

	/guillemotleft
		{
565 445 moveto
389 265 lineto
502 84 lineto
448 48 lineto
293 265 lineto
524 481 lineto
565 445 lineto
closepath
372 445 moveto
196 265 lineto
309 84 lineto
255 48 lineto
100 265 lineto
331 481 lineto
372 445 lineto
closepath
fill
		} def

	/guilsinglleft
		{
372 445 moveto
196 265 lineto
309 84 lineto
255 48 lineto
100 265 lineto
331 481 lineto
372 445 lineto
closepath
fill
		} def

	/guilsinglright
		{
114 445 moveto
227 265 lineto
50 84 lineto
92 48 lineto
323 265 lineto
168 481 lineto
114 445 lineto
closepath
fill
		} def

	/fi
		{
114 0 moveto
194 458 lineto
119 458 lineto
131 530 lineto
207 530 lineto
218 593 lineto
240 720 308 783 424 783  curveto
456 783 492 777 531 767  curveto
517 690 lineto
476 704 443 710 417 710  curveto
385 710 362 703 348 688  curveto
334 673 323 645 316 604  curveto
303 530 lineto
640 530 lineto
547 0 lineto
451 0 lineto
531 458 lineto
291 458 lineto
210 0 lineto
114 0 lineto
closepath
561 626 moveto
578 722 lineto
674 722 lineto
657 626 lineto
561 626 lineto
closepath
fill
		} def

	/fl
		{
117 0 moveto
197 458 lineto
119 458 lineto
131 530 lineto
209 530 lineto
219 584 lineto
242 716 321 783 454 783  curveto
485 783 527 779 581 771  curveto
686 771 lineto
551 0 lineto
454 0 lineto
575 688 lineto
515 703 470 710 437 710  curveto
402 710 375 702 357 687  curveto
338 671 326 644 320 606  curveto
306 530 lineto
438 530 lineto
426 458 lineto
294 458 lineto
213 0 lineto
117 0 lineto
closepath
fill
		} def

	/endash
		{
116 252 moveto
129 325 lineto
562 325 lineto
550 252 lineto
116 252 lineto
closepath
fill
		} def

	/dagger
		{
242 -144 moveto
351 409 lineto
180 397 lineto
193 469 lineto
359 458 lineto
394 722 lineto
490 722 lineto
432 458 lineto
603 469 lineto
590 397 lineto
423 409 lineto
338 -144 lineto
242 -144 lineto
closepath
fill
		} def

	/daggerdbl
		{
242 -144 moveto
300 120 lineto
130 108 lineto
142 180 lineto
309 168 lineto
351 409 lineto
180 397 lineto
193 469 lineto
359 458 lineto
394 722 lineto
490 722 lineto
432 458 lineto
603 469 lineto
590 397 lineto
423 409 lineto
381 168 lineto
552 180 lineto
539 108 lineto
373 120 lineto
338 -144 lineto
242 -144 lineto
closepath
fill
		} def

	/periodcentered
		{
139 239 moveto
160 360 lineto
281 360 lineto
260 239 lineto
139 239 lineto
closepath
fill
		} def

	/paragraph
		{
284 -144 moveto
373 361 lineto
309 365 263 385 233 421  curveto
203 457 193 504 204 563  curveto
214 621 236 662 272 686  curveto
307 710 362 722 436 722  curveto
629 722 lineto
477 -144 lineto
417 -144 lineto
558 662 lineto
486 662 lineto
345 -144 lineto
284 -144 lineto
closepath
fill
		} def

	/bullet
		{
319 108 moveto
261 108 215 129 180 172  curveto
146 215 134 266 144 325  curveto
154 385 184 436 234 478  curveto
284 520 339 542 399 542  curveto
459 542 506 520 541 478  curveto
576 435 588 384 577 323  curveto
567 263 536 212 486 171  curveto
436 129 380 108 319 108  curveto
closepath
fill
		} def

	/quotesinglbase
		{
72 -144 moveto
78 -108 lineto
95 -103 108 -93 119 -76  curveto
130 -60 137 -38 142 -9  curveto
144 0 lineto
97 0 lineto
118 120 lineto
239 120 lineto
221 16 lineto
212 -33 195 -71 170 -97  curveto
145 -124 113 -140 72 -144  curveto
closepath
fill
		} def

	/quotedblbase
		{
41 -144 moveto
47 -108 lineto
59 -102 70 -91 78 -74  curveto
87 -58 94 -37 98 -11  curveto
100 0 lineto
54 0 lineto
73 108 lineto
181 108 lineto
167 27 lineto
158 -21 143 -60 122 -89  curveto
101 -118 74 -136 41 -144  curveto
closepath
221 -144 moveto
228 -108 lineto
240 -102 251 -91 259 -74  curveto
268 -58 274 -37 279 -11  curveto
281 0 lineto
234 0 lineto
253 108 lineto
362 108 lineto
348 27 lineto
339 -21 324 -60 303 -89  curveto
282 -118 255 -136 221 -144  curveto
closepath
fill
		} def

	/quotedblright
		{
157 518 moveto
163 554 lineto
175 560 186 571 194 587  curveto
203 603 209 625 214 651  curveto
216 662 lineto
170 662 lineto
189 771 lineto
297 771 lineto
283 689 lineto
274 640 259 601 238 572  curveto
217 544 190 525 157 518  curveto
closepath
337 518 moveto
344 554 lineto
356 560 366 571 375 587  curveto
384 603 390 625 395 651  curveto
397 662 lineto
350 662 lineto
369 771 lineto
478 771 lineto
464 689 lineto
455 640 440 601 419 572  curveto
398 544 371 525 337 518  curveto
closepath
fill
		} def

	/guillemotright
		{
114 445 moveto
227 265 lineto
50 84 lineto
92 48 lineto
323 265 lineto
168 481 lineto
114 445 lineto
closepath
307 445 moveto
420 265 lineto
243 84 lineto
285 48 lineto
516 265 lineto
361 481 lineto
307 445 lineto
closepath
fill
		} def

	/ellipsis
		{
118 0 moveto
135 96 lineto
231 96 lineto
214 0 lineto
118 0 lineto
closepath
452 0 moveto
468 96 lineto
565 96 lineto
548 0 lineto
452 0 lineto
closepath
785 0 moveto
801 96 lineto
898 96 lineto
881 0 lineto
785 0 lineto
closepath
fill
		} def

	/perthousand
		{
8 -18 moveto
710 740 lineto
785 740 lineto
84 -18 lineto
8 -18 lineto
closepath
220 361 moveto
174 361 140 377 118 410  curveto
97 443 91 487 100 542  curveto
110 597 131 641 165 674  curveto
198 706 238 722 286 722  curveto
333 722 367 706 389 674  curveto
411 641 417 597 408 542  curveto
398 486 376 442 343 409  curveto
309 377 268 361 220 361  curveto
closepath
230 409 moveto
257 409 280 420 297 442  curveto
315 465 327 498 335 542  curveto
342 583 341 614 330 638  curveto
320 662 302 674 277 674  curveto
252 674 230 662 211 638  curveto
193 614 180 582 173 542  curveto
166 502 167 469 178 445  curveto
188 421 205 409 230 409  curveto
closepath
506 0 moveto
460 0 426 16 405 49  curveto
383 81 377 125 387 180  curveto
396 236 418 279 451 312  curveto
485 345 525 361 572 361  curveto
618 361 653 345 675 312  curveto
697 280 704 236 694 181  curveto
684 125 662 80 629 48  curveto
596 16 555 0 506 0  curveto
closepath
516 48 moveto
543 48 566 59 583 81  curveto
601 103 614 137 622 181  curveto
629 221 627 253 616 277  curveto
606 301 588 313 563 313  curveto
538 313 517 301 498 277  curveto
479 253 466 221 459 180  curveto
452 140 453 108 464 84  curveto
474 60 491 48 516 48  curveto
closepath
850 0 moveto
804 0 770 16 748 49  curveto
726 81 720 125 730 180  curveto
740 236 761 279 794 312  curveto
828 345 868 361 915 361  curveto
962 361 997 345 1019 312  curveto
1041 280 1047 236 1037 181  curveto
1027 125 1006 80 972 48  curveto
939 16 898 0 850 0  curveto
closepath
859 48 moveto
886 48 909 59 927 81  curveto
944 103 957 137 965 181  curveto
972 221 970 253 959 277  curveto
949 301 931 313 906 313  curveto
882 313 860 301 841 277  curveto
822 253 809 221 802 180  curveto
795 140 797 108 807 84  curveto
818 60 835 48 859 48  curveto
closepath
fill
		} def

	/questiondown
		{
393 529 moveto
376 433 lineto
279 433 lineto
296 529 lineto
393 529 lineto
closepath
359 336 moveto
354 310 lineto
343 248 309 189 252 135  curveto
215 99 lineto
153 41 119 -7 113 -44  curveto
108 -73 115 -96 134 -113  curveto
154 -130 183 -138 221 -138  curveto
271 -138 326 -126 386 -102  curveto
372 -184 lineto
308 -202 250 -211 198 -211  curveto
131 -211 81 -196 47 -166  curveto
14 -136 1 -96 10 -45  curveto
15 -17 25 7 40 28  curveto
55 48 81 74 118 104  curveto
153 132 lineto
188 161 212 185 225 204  curveto
238 224 247 250 253 283  curveto
263 336 lineto
359 336 lineto
closepath
fill
		} def

	/grave
		{
531 626 moveto
459 626 lineto
329 783 lineto
441 783 lineto
531 626 lineto
closepath
fill
		} def

	/acute
		{
302 626 moveto
447 783 lineto
558 783 lineto
374 626 lineto
302 626 lineto
closepath
fill
		} def

	/circumflex
		{
245 626 moveto
390 783 lineto
497 783 lineto
587 626 lineto
515 626 lineto
434 725 lineto
433 725 lineto
318 626 lineto
245 626 lineto
closepath
fill
		} def

	/tilde
		{
254 626 moveto
262 664 275 693 294 712  curveto
312 731 336 740 364 740  curveto
388 740 409 734 427 722  curveto
453 704 lineto
469 692 482 687 492 687  curveto
503 687 512 691 520 700  curveto
528 709 534 722 539 740  curveto
599 740 lineto
590 702 577 674 558 655  curveto
540 635 517 626 489 626  curveto
465 626 444 632 426 645  curveto
400 663 lineto
384 674 370 680 361 680  curveto
350 680 340 675 332 666  curveto
324 657 318 644 314 626  curveto
254 626 lineto
closepath
fill
		} def

	/macron
		{
166 710 moveto
179 783 lineto
594 783 lineto
581 710 lineto
166 710 lineto
closepath
fill
		} def

	/breve
		{
281 783 moveto
341 783 lineto
341 754 349 733 363 719  curveto
378 705 400 698 429 698  curveto
458 698 482 705 502 719  curveto
521 733 536 754 546 783  curveto
606 783 lineto
593 735 569 697 535 669  curveto
500 640 461 626 416 626  curveto
372 626 338 640 313 669  curveto
289 697 278 735 281 783  curveto
closepath
fill
		} def

	/dotaccent
		{
368 626 moveto
385 722 lineto
481 722 lineto
464 626 lineto
368 626 lineto
closepath
fill
		} def

	/dieresis
		{
278 626 moveto
292 710 lineto
377 710 lineto
362 626 lineto
278 626 lineto
closepath
470 626 moveto
485 710 lineto
570 710 lineto
555 626 lineto
470 626 lineto
closepath
fill
		} def

	/ring
		{
415 626 moveto
385 626 361 637 343 658  curveto
326 680 319 706 325 737  curveto
330 767 345 794 371 815  curveto
396 837 424 848 455 848  curveto
486 848 510 837 528 815  curveto
546 794 552 768 547 737  curveto
541 706 526 679 500 658  curveto
475 637 446 626 415 626  curveto
closepath
423 668 moveto
442 668 460 675 476 688  curveto
492 701 501 718 505 737  curveto
508 756 504 772 493 786  curveto
482 799 467 806 448 806  curveto
429 806 411 799 395 786  curveto
380 772 370 756 367 737  curveto
364 718 367 702 378 688  curveto
389 675 404 668 423 668  curveto
closepath
fill
		} def

	/cedilla
		{
305 0 moveto
353 0 lineto
314 -53 lineto
339 -53 360 -60 376 -76  curveto
392 -91 399 -110 395 -130  curveto
391 -153 378 -172 357 -187  curveto
335 -203 310 -210 283 -210  curveto
259 -210 236 -207 213 -200  curveto
220 -161 lineto
234 -166 251 -168 270 -168  curveto
287 -168 300 -165 310 -159  curveto
319 -153 325 -144 327 -132  curveto
330 -116 324 -104 310 -97  curveto
296 -89 274 -85 244 -85  curveto
305 0 lineto
closepath
fill
		} def

	/hungarumlaut
		{
144 481 moveto
291 771 lineto
399 771 lineto
204 481 lineto
144 481 lineto
closepath
361 481 moveto
507 771 lineto
616 771 lineto
421 481 lineto
361 481 lineto
closepath
fill
		} def

	/ogonek
		{
321 0 moveto
373 0 lineto
350 -12 332 -25 319 -40  curveto
306 -55 298 -70 295 -87  curveto
292 -103 295 -114 303 -122  curveto
310 -130 324 -134 343 -134  curveto
361 -134 376 -131 388 -126  curveto
382 -166 lineto
360 -175 337 -180 312 -180  curveto
278 -180 255 -174 240 -161  curveto
226 -148 221 -128 226 -103  curveto
229 -82 239 -63 255 -46  curveto
271 -29 293 -14 321 0  curveto
closepath
fill
		} def

	/caron
		{
615 783 moveto
469 626 lineto
363 626 lineto
273 783 lineto
345 783 lineto
426 684 lineto
427 684 lineto
542 783 lineto
615 783 lineto
closepath
fill
		} def

	/emdash
		{
116 252 moveto
129 325 lineto
562 325 lineto
550 252 lineto
116 252 lineto
closepath
fill
		} def

	/AE
		{
8 0 moveto
555 722 lineto
986 722 lineto
973 646 lineto
671 646 lineto
631 414 lineto
883 414 lineto
870 338 lineto
617 338 lineto
572 76 lineto
896 76 lineto
882 0 lineto
456 0 lineto
491 202 lineto
255 202 lineto
102 0 lineto
8 0 lineto
closepath
312 277 moveto
504 277 lineto
562 605 lineto
312 277 lineto
closepath
fill
		} def

	/ordfeminine
		{
374 453 moveto
333 420 295 403 258 403  curveto
228 403 205 413 189 431  curveto
172 450 167 473 172 502  curveto
179 540 200 570 235 591  curveto
270 612 317 622 374 622  curveto
399 622 lineto
406 660 lineto
409 679 406 693 397 703  curveto
388 712 373 717 352 717  curveto
316 717 277 707 235 686  curveto
246 745 lineto
292 762 335 771 376 771  curveto
418 771 449 761 467 743  curveto
485 725 491 698 484 661  curveto
457 504 lineto
454 488 455 476 458 468  curveto
462 460 469 456 479 456  curveto
482 456 486 456 492 457  curveto
487 413 lineto
468 407 451 403 434 403  curveto
417 403 403 407 393 416  curveto
383 424 378 436 377 453  curveto
374 453 lineto
closepath
377 496 moveto
391 576 lineto
371 577 lineto
335 577 307 571 287 561  curveto
267 550 256 534 252 512  curveto
249 495 251 483 258 474  curveto
265 466 277 461 295 461  curveto
319 461 347 473 377 496  curveto
closepath
fill
		} def

	/Lslash
		{
108 0 moveto
167 337 lineto
62 285 lineto
76 368 lineto
182 420 lineto
234 722 lineto
337 722 lineto
294 476 lineto
426 542 lineto
411 459 lineto
279 394 lineto
224 76 lineto
549 76 lineto
536 0 lineto
108 0 lineto
closepath
fill
		} def

	/Oslash
		{
642 608 moveto
609 645 563 664 504 664  curveto
432 664 372 637 322 584  curveto
272 531 239 457 223 362  curveto
209 286 212 222 230 170  curveto
642 608 lineto
closepath
261 114 moveto
293 77 340 58 399 58  curveto
471 58 531 85 581 138  curveto
631 192 664 266 680 360  curveto
694 437 691 501 673 552  curveto
261 114 lineto
closepath
53 -18 moveto
154 89 lineto
108 160 94 251 114 361  curveto
134 476 180 568 254 637  curveto
327 706 415 740 517 740  curveto
594 740 658 720 708 679  curveto
766 740 lineto
850 740 lineto
749 633 lineto
795 562 809 472 789 360  curveto
769 246 722 154 649 85  curveto
576 16 488 -18 386 -18  curveto
307 -18 243 2 195 43  curveto
137 -18 lineto
53 -18 lineto
closepath
fill
		} def

	/OE
		{
556 28 moveto
500 -2 440 -18 378 -18  curveto
279 -18 205 16 157 86  curveto
108 156 94 248 114 361  curveto
134 476 180 568 254 637  curveto
327 706 414 740 516 740  curveto
575 740 627 725 672 694  curveto
677 722 lineto
1081 722 lineto
1068 646 lineto
766 646 lineto
726 414 lineto
978 414 lineto
965 338 lineto
713 341 lineto
667 76 lineto
989 76 lineto
976 0 lineto
551 0 lineto
556 28 lineto
closepath
599 277 moveto
629 444 lineto
642 520 639 576 618 611  curveto
598 646 560 664 503 664  curveto
432 664 371 637 322 583  curveto
272 530 239 456 222 361  curveto
206 266 213 192 244 138  curveto
275 85 326 58 398 58  curveto
452 58 496 76 530 113  curveto
563 149 587 204 599 277  curveto
closepath
fill
		} def

	/ordmasculine
		{
303 403 moveto
250 403 211 420 186 453  curveto
160 486 153 531 162 587  curveto
172 644 196 688 233 721  curveto
270 754 315 771 369 771  curveto
423 771 462 754 488 721  curveto
514 688 521 644 512 587  curveto
502 530 478 485 441 452  curveto
404 420 358 403 303 403  curveto
closepath
313 457 moveto
344 457 368 468 388 490  curveto
407 512 420 544 428 588  curveto
435 631 433 663 422 685  curveto
411 706 390 717 360 717  curveto
330 717 305 706 286 684  curveto
268 663 254 630 247 587  curveto
239 544 241 511 252 489  curveto
263 468 284 457 313 457  curveto
closepath
fill
		} def

	/ae
		{
411 94 moveto
337 23 267 -12 201 -12  curveto
157 -12 122 1 98 29  curveto
74 56 66 91 73 133  curveto
83 191 115 235 169 266  curveto
224 297 296 313 387 313  curveto
410 313 lineto
421 377 lineto
426 408 423 431 409 446  curveto
396 462 374 469 342 469  curveto
292 469 234 454 170 422  curveto
184 502 lineto
253 528 316 542 373 542  curveto
436 542 483 522 512 482  curveto
559 522 612 542 671 542  curveto
739 542 785 517 811 469  curveto
836 420 841 347 824 250  curveto
495 250 lineto
489 186 498 138 522 107  curveto
546 75 585 60 640 60  curveto
686 60 738 71 796 94  curveto
783 18 lineto
717 -2 656 -12 602 -12  curveto
556 -12 517 -3 485 14  curveto
453 32 428 58 411 94  curveto
closepath
376 119 moveto
400 256 lineto
368 257 lineto
315 257 271 247 235 227  curveto
199 207 178 181 172 148  curveto
168 125 173 106 186 90  curveto
200 74 218 66 242 66  curveto
282 66 326 84 376 119  curveto
closepath
510 316 moveto
733 316 lineto
742 367 740 405 727 431  curveto
714 457 690 470 655 470  curveto
620 470 590 457 566 431  curveto
541 405 523 367 510 316  curveto
closepath
fill
		} def

	/dotlessi
		{
96 0 moveto
188 530 lineto
285 530 lineto
192 0 lineto
96 0 lineto
closepath
fill
		} def

	/lslash
		{
120 0 moveto
182 352 lineto
63 294 lineto
77 375 lineto
196 434 lineto
255 771 lineto
351 771 lineto
302 487 lineto
420 542 lineto
406 462 lineto
287 405 lineto
216 0 lineto
120 0 lineto
closepath
fill
		} def

	/oslash
		{
52 -12 moveto
129 68 lineto
128 70 lineto
95 117 86 182 100 263  curveto
115 349 149 417 203 467  curveto
257 517 323 542 401 542  curveto
459 542 506 528 543 500  curveto
583 542 lineto
654 542 lineto
577 461 lineto
578 459 lineto
610 407 620 343 606 265  curveto
591 180 557 112 503 62  curveto
449 12 383 -12 305 -12  curveto
248 -12 201 1 164 29  curveto
124 -12 lineto
52 -12 lineto
closepath
504 384 moveto
227 95 lineto
248 71 278 60 316 60  curveto
417 60 480 127 503 262  curveto
511 306 511 347 504 384  curveto
closepath
203 145 moveto
479 433 lineto
457 457 427 469 390 469  curveto
289 469 227 402 203 267  curveto
195 219 195 179 203 145  curveto
closepath
fill
		} def

	/oe
		{
492 84 moveto
439 20 375 -12 300 -12  curveto
225 -12 169 13 132 63  curveto
96 113 85 181 100 265  curveto
115 349 149 416 203 466  curveto
257 516 322 542 398 542  curveto
469 542 521 509 553 444  curveto
604 509 669 542 748 542  curveto
816 542 862 517 888 469  curveto
913 420 918 347 901 250  curveto
572 250 lineto
566 186 574 138 599 107  curveto
623 75 662 60 717 60  curveto
763 60 815 71 874 94  curveto
860 18 lineto
794 -2 735 -12 684 -12  curveto
592 -12 529 20 492 84  curveto
closepath
312 60 moveto
355 60 390 76 417 110  curveto
445 144 464 195 476 263  curveto
488 331 487 383 472 417  curveto
457 452 428 469 386 469  curveto
340 469 300 451 268 415  curveto
236 379 214 329 203 265  curveto
191 201 196 151 215 114  curveto
235 78 267 60 312 60  curveto
closepath
587 316 moveto
810 316 lineto
819 367 817 405 804 431  curveto
791 457 767 470 732 470  curveto
697 470 667 457 643 431  curveto
618 405 600 367 587 316  curveto
closepath
fill
		} def

	/germandbls
		{
96 0 moveto
194 562 lineto
208 642 232 699 265 733  curveto
298 766 348 783 413 783  curveto
466 783 507 771 535 747  curveto
563 724 574 693 567 654  curveto
560 614 530 566 478 510  curveto
447 477 431 454 428 440  curveto
425 421 438 396 469 365  curveto
536 299 lineto
584 251 603 200 593 146  curveto
585 97 563 58 527 30  curveto
492 1 448 -12 395 -12  curveto
350 -12 306 -2 263 16  curveto
278 98 lineto
333 72 376 60 409 60  curveto
433 60 453 67 470 81  curveto
487 95 497 113 501 137  curveto
506 165 492 195 461 227  curveto
381 307 lineto
347 342 333 377 339 414  curveto
344 441 367 480 408 530  curveto
442 571 462 607 467 636  curveto
472 661 468 680 456 692  curveto
445 704 425 710 397 710  curveto
370 710 348 701 332 683  curveto
315 665 304 638 297 602  curveto
192 0 lineto
96 0 lineto
closepath
fill
		} def

	/.notdef
		{
0 0 moveto
1000 0 lineto
1000 1000 lineto
0 1000 lineto
0 0 lineto
closepath
50 50 moveto
950 50 lineto
950 950 lineto
50 950 lineto
50 50 lineto
closepath
fill
		} def

	end				% close glyph dict. 
	currentdict			% actually put dict on the stack
	end			% close the dictionary now
	/LucidaSans-Italic exch definefont pop
/LucidaSans-Italic findfont 18.0 scalefont setfont
(x) show
Q
Q
newpath
0.0 0.0 m
0.0 390.0 l
390.0 390.0 l
390.0 0.0 l
h
W
Q
[ 1.0 0.0 0.0 1.0 5.0 5.0 ] defaultmatrix matrix concatmatrix setmatrix
0.0 0.0 translate
q
q
1 13 195 OPL
13 199
-5.0 -5.0 translate
q
6 210 10 18 rc
6.0 225.0 moveto
q 1 -1 scale
9 dict begin
/FontType 3 def
/FontMatrix [0.0010 0 0 0.0010 0 0]def
/FontBBox [0 -206 1090 806 ] def
	/Encoding 256 array def
			0 1 255 {Encoding exch /.notdef put}for
		Encoding 32 /space put
		Encoding 33 /exclam put
		Encoding 34 /quotedbl put
		Encoding 35 /numbersign put
		Encoding 36 /dollar put
		Encoding 37 /percent put
		Encoding 38 /ampersand put
		Encoding 39 /quoteright put
		Encoding 40 /parenleft put
		Encoding 41 /parenright put
		Encoding 42 /asterisk put
		Encoding 43 /plus put
		Encoding 44 /comma put
		Encoding 45 /hyphen put
		Encoding 46 /period put
		Encoding 47 /slash put
		Encoding 48 /zero put
		Encoding 49 /one put
		Encoding 50 /two put
		Encoding 51 /three put
		Encoding 52 /four put
		Encoding 53 /five put
		Encoding 54 /six put
		Encoding 55 /seven put
		Encoding 56 /eight put
		Encoding 57 /nine put
		Encoding 58 /colon put
		Encoding 59 /semicolon put
		Encoding 60 /less put
		Encoding 61 /equal put
		Encoding 62 /greater put
		Encoding 63 /question put
		Encoding 64 /at put
		Encoding 65 /A put
		Encoding 66 /B put
		Encoding 67 /C put
		Encoding 68 /D put
		Encoding 69 /E put
		Encoding 70 /F put
		Encoding 71 /G put
		Encoding 72 /H put
		Encoding 73 /I put
		Encoding 74 /J put
		Encoding 75 /K put
		Encoding 76 /L put
		Encoding 77 /M put
		Encoding 78 /N put
		Encoding 79 /O put
		Encoding 80 /P put
		Encoding 81 /Q put
		Encoding 82 /R put
		Encoding 83 /S put
		Encoding 84 /T put
		Encoding 85 /U put
		Encoding 86 /V put
		Encoding 87 /W put
		Encoding 88 /X put
		Encoding 89 /Y put
		Encoding 90 /Z put
		Encoding 91 /bracketleft put
		Encoding 92 /backslash put
		Encoding 93 /bracketright put
		Encoding 94 /asciicircum put
		Encoding 95 /underscore put
		Encoding 96 /quoteleft put
		Encoding 97 /a put
		Encoding 98 /b put
		Encoding 99 /c put
		Encoding 100 /d put
		Encoding 101 /e put
		Encoding 102 /f put
		Encoding 103 /g put
		Encoding 104 /h put
		Encoding 105 /i put
		Encoding 106 /j put
		Encoding 107 /k put
		Encoding 108 /l put
		Encoding 109 /m put
		Encoding 110 /n put
		Encoding 111 /o put
		Encoding 112 /p put
		Encoding 113 /q put
		Encoding 114 /r put
		Encoding 115 /s put
		Encoding 116 /t put
		Encoding 117 /u put
		Encoding 118 /v put
		Encoding 119 /w put
		Encoding 120 /x put
		Encoding 121 /y put
		Encoding 122 /z put
		Encoding 123 /braceleft put
		Encoding 124 /bar put
		Encoding 125 /braceright put
		Encoding 126 /asciitilde put
		Encoding 161 /exclamdown put
		Encoding 162 /cent put
		Encoding 163 /sterling put
		Encoding 164 /fraction put
		Encoding 165 /yen put
		Encoding 166 /florin put
		Encoding 167 /section put
		Encoding 168 /currency put
		Encoding 169 /quotesingle put
		Encoding 170 /quotedblleft put
		Encoding 171 /guillemotleft put
		Encoding 172 /guilsinglleft put
		Encoding 173 /guilsinglright put
		Encoding 174 /fi put
		Encoding 175 /fl put
		Encoding 177 /endash put
		Encoding 178 /dagger put
		Encoding 179 /daggerdbl put
		Encoding 180 /periodcentered put
		Encoding 182 /paragraph put
		Encoding 183 /bullet put
		Encoding 184 /quotesinglbase put
		Encoding 185 /quotedblbase put
		Encoding 186 /quotedblright put
		Encoding 187 /guillemotright put
		Encoding 188 /ellipsis put
		Encoding 189 /perthousand put
		Encoding 191 /questiondown put
		Encoding 193 /grave put
		Encoding 194 /acute put
		Encoding 195 /circumflex put
		Encoding 196 /tilde put
		Encoding 197 /macron put
		Encoding 198 /breve put
		Encoding 199 /dotaccent put
		Encoding 200 /dieresis put
		Encoding 202 /ring put
		Encoding 203 /cedilla put
		Encoding 205 /hungarumlaut put
		Encoding 206 /ogonek put
		Encoding 207 /caron put
		Encoding 208 /emdash put
		Encoding 225 /AE put
		Encoding 227 /ordfeminine put
		Encoding 232 /Lslash put
		Encoding 233 /Oslash put
		Encoding 234 /OE put
		Encoding 235 /ordmasculine put
		Encoding 241 /ae put
		Encoding 245 /dotlessi put
		Encoding 248 /lslash put
		Encoding 249 /oslash put
		Encoding 250 /oe put
		Encoding 251 /germandbls put
	/BuildGlyph
		{ 2 copy exch /Metrics get exch 
			2 copy known {get}{pop pop 1000.0} ifelse
			0
			0 -206 1090 806
			setcachedevice
			exch /CharProcs get exch
			2 copy known not
					{pop /.notdef}
				if
			get exec
		} bind def

	/BuildChar
		{ 1 index /Encoding get exch get
		  1 index /BuildGlyph get exec
	  } bind def
	/Metrics 150 dict def
		Metrics begin
		/.notdef 1000 def
		/space 305.0 def
		/exclam 1055.0 def
		/quotedbl 555.0 def
		/numbersign 847.0 def
		/dollar 505.0 def
		/percent 555.0 def
		/ampersand 1055.0 def
		/quoteright 555.0 def
		/parenleft 1055.0 def
		/parenright 1055.0 def
		/asterisk 1055.0 def
		/plus 1055.0 def
		/comma 715.0 def
		/hyphen 1145.0 def
		/period 1145.0 def
		/slash 1145.0 def
		/zero 1145.0 def
		/one 1145.0 def
		/two 1055.0 def
		/three 1055.0 def
		/four 1055.0 def
		/five 1055.0 def
		/six 1005.0 def
		/seven 1055.0 def
		/eight 1005.0 def
		/nine 1055.0 def
		/colon 1055.0 def
		/semicolon 1055.0 def
		/less 1055.0 def
		/equal 1055.0 def
		/greater 1055.0 def
		/question 1055.0 def
		/at 1055.0 def
		/A 1055.0 def
		/B 1055.0 def
		/C 1055.0 def
		/D 1055.0 def
		/E 1055.0 def
		/F 1055.0 def
		/G 1055.0 def
		/H 1055.0 def
		/I 1055.0 def
		/J 1055.0 def
		/K 1055.0 def
		/L 1055.0 def
		/M 1055.0 def
		/N 1055.0 def
		/O 1055.0 def
		/P 1055.0 def
		/Q 555.0 def
		/R 1055.0 def
		/S 1055.0 def
		/T 845.0 def
		/U 1055.0 def
		/V 1055.0 def
		/W 1055.0 def
		/X 1055.0 def
		/Y 793.0 def
		/Z 591.0 def
		/bracketleft 485.0 def
		/backslash 555.0 def
		/bracketright 1055.0 def
		/asciicircum 1055.0 def
		/underscore 1055.0 def
		/quoteleft 555.0 def
		/a 805.0 def
		/b 805.0 def
		/c 805.0 def
		/d 1055.0 def
		/e 805.0 def
		/f 805.0 def
		/g 805.0 def
		/h 805.0 def
		/i 805.0 def
		/j 805.0 def
		/k 1055.0 def
		/l 1055.0 def
		/m 679.0 def
		/n 679.0 def
		/o 679.0 def
		/p 679.0 def
		/q 679.0 def
		/r 679.0 def
		/s 679.0 def
		/t 679.0 def
		/u 555.0 def
		/v 555.0 def
		/w 555.0 def
		/x 555.0 def
		/y 555.0 def
		/z 555.0 def
		/braceleft 555.0 def
		/bar 555.0 def
		/braceright 555.0 def
		/asciitilde 555.0 def
		/exclamdown 555.0 def
		/cent 555.0 def
		/sterling 555.0 def
		/fraction 555.0 def
		/yen 555.0 def
		/florin 555.0 def
		/section 555.0 def
		/currency 555.0 def
		/quotesingle 555.0 def
		/quotedblleft 555.0 def
		/guillemotleft 555.0 def
		/guilsinglleft 555.0 def
		/guilsinglright 555.0 def
		/fi 555.0 def
		/fl 555.0 def
		/endash 1145.0 def
		/dagger 555.0 def
		/daggerdbl 555.0 def
		/periodcentered 555.0 def
		/paragraph 555.0 def
		/bullet 555.0 def
		/quotesinglbase 555.0 def
		/quotedblbase 555.0 def
		/quotedblright 555.0 def
		/guillemotright 555.0 def
		/ellipsis 555.0 def
		/perthousand 555.0 def
		/questiondown 555.0 def
		/grave 555.0 def
		/acute 555.0 def
		/circumflex 555.0 def
		/tilde 555.0 def
		/macron 555.0 def
		/breve 555.0 def
		/dotaccent 555.0 def
		/dieresis 555.0 def
		/ring 555.0 def
		/cedilla 555.0 def
		/hungarumlaut 555.0 def
		/ogonek 555.0 def
		/caron 555.0 def
		/emdash 1145.0 def
		/AE 555.0 def
		/ordfeminine 555.0 def
		/Lslash 555.0 def
		/Oslash 555.0 def
		/OE 555.0 def
		/ordmasculine 555.0 def
		/ae 555.0 def
		/dotlessi 555.0 def
		/lslash 555.0 def
		/oslash 555.0 def
		/oe 555.0 def
		/germandbls 555.0 def
	end
	/CharProcs 150 dict def
	CharProcs begin
			%define Glyph dictionary and start filling
	/space
		{
fill
		} def

	/exclam
		{
871 8 moveto
820 -42 lineto
528 249 lineto
234 -42 lineto
184 8 lineto
478 300 lineto
184 593 lineto
234 643 lineto
528 350 lineto
820 643 lineto
871 593 lineto
579 300 lineto
871 8 lineto
closepath
fill
		} def

	/quotedbl
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/numbersign
		{
663 128 moveto
595 60 lineto
423 232 lineto
251 61 lineto
184 129 lineto
356 300 lineto
184 471 lineto
251 538 lineto
423 367 lineto
595 539 lineto
663 472 lineto
491 300 lineto
663 128 lineto
closepath
fill
		} def

	/dollar
		{
322 300 moveto
322 285 316 272 305 260  curveto
293 248 275 243 251 243  curveto
229 243 212 248 200 258  curveto
188 268 182 282 182 300  curveto
182 315 187 328 198 339  curveto
209 350 227 356 251 356  curveto
277 356 296 349 308 337  curveto
317 325 322 313 322 300  curveto
closepath
fill
		} def

	/percent
		{
375 300 moveto
375 277 366 257 349 240  curveto
332 223 308 215 276 215  curveto
247 215 224 222 208 236  curveto
188 252 179 274 179 300  curveto
179 323 187 343 203 359  curveto
219 375 244 384 276 384  curveto
311 384 337 374 354 355  curveto
368 338 375 320 375 300  curveto
closepath
fill
		} def

	/ampersand
		{
871 8 moveto
820 -42 lineto
528 249 lineto
234 -42 lineto
184 8 lineto
184 593 lineto
234 643 lineto
528 350 lineto
820 643 lineto
871 593 lineto
579 300 lineto
871 8 lineto
closepath
478 300 moveto
263 514 lineto
263 86 lineto
478 300 lineto
closepath
fill
		} def

	/quoteright
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/parenleft
		{
-153 8 moveto
820 -42 lineto
526 249 lineto
234 -42 lineto
184 8 lineto
476 300 lineto
184 593 lineto
234 643 lineto
526 350 lineto
820 643 lineto
-153 593 lineto
-153 8 lineto
closepath
-232 86 moveto
-232 514 lineto
577 300 lineto
-232 86 lineto
closepath
fill
		} def

	/parenright
		{
-153 8 moveto
820 -42 lineto
526 249 lineto
234 -42 lineto
184 8 lineto
184 593 lineto
234 643 lineto
526 350 lineto
820 643 lineto
-153 593 lineto
-153 8 lineto
closepath
-232 86 moveto
-232 514 lineto
577 300 lineto
-232 86 lineto
closepath
476 300 moveto
263 513 lineto
263 87 lineto
476 300 lineto
closepath
fill
		} def

	/asterisk
		{
871 8 moveto
820 -42 lineto
528 249 lineto
234 -42 lineto
184 8 lineto
820 643 lineto
871 593 lineto
579 300 lineto
871 8 lineto
closepath
fill
		} def

	/plus
		{
871 8 moveto
820 -42 lineto
526 249 lineto
234 -42 lineto
184 8 lineto
476 300 lineto
184 593 lineto
234 643 lineto
871 8 lineto
closepath
fill
		} def

	/comma
		{
533 12 moveto
502 -37 lineto
408 -4 350 34 328 79  curveto
310 113 301 176 301 267  curveto
301 418 lineto
301 455 296 483 287 501  curveto
278 519 258 538 228 558  curveto
182 588 lineto
214 640 lineto
300 597 lineto
349 572 381 540 397 502  curveto
409 472 415 427 415 365  curveto
415 349 415 325 415 293  curveto
414 261 414 238 414 222  curveto
414 125 438 63 487 36  curveto
494 32 509 24 533 12  curveto
closepath
fill
		} def

	/hyphen
		{
-63 300 moveto
-63 196 71 108 339 35  curveto
607 -38 684 -75 572 -75  curveto
460 -75 367 -38 294 35  curveto
220 108 184 196 184 300  curveto
184 403 220 491 294 565  curveto
367 638 460 675 572 675  curveto
684 675 607 638 339 565  curveto
71 491 -63 403 -63 300  curveto
closepath
-142 300 moveto
-142 389 -2 465 275 528  curveto
553 591 652 623 572 623  curveto
492 623 420 591 357 528  curveto
294 465 263 389 263 300  curveto
263 210 294 134 357 71  curveto
420 8 492 -23 572 -23  curveto
652 -23 553 8 275 71  curveto
-2 134 -142 210 -142 300  curveto
closepath
-383 474 moveto
-383 458 -217 445 113 435  curveto
443 424 596 419 572 419  curveto
548 419 530 424 520 435  curveto
509 445 504 458 504 474  curveto
504 489 509 502 520 513  curveto
530 523 548 529 572 529  curveto
596 529 443 523 113 513  curveto
-217 502 -383 489 -383 474  curveto
closepath
-167 274 moveto
288 274 lineto
288 326 lineto
-167 326 lineto
-167 274 lineto
closepath
-383 126 moveto
-383 110 -217 97 113 87  curveto
443 76 596 71 572 71  curveto
548 71 530 76 520 87  curveto
509 97 504 110 504 126  curveto
504 141 509 154 520 165  curveto
530 175 548 181 572 181  curveto
596 181 443 175 113 165  curveto
-217 154 -383 141 -383 126  curveto
closepath
fill
		} def

	/period
		{
-63 300 moveto
-63 196 71 108 339 35  curveto
607 -38 684 -75 572 -75  curveto
460 -75 367 -38 294 35  curveto
220 108 184 196 184 300  curveto
184 403 220 491 294 565  curveto
367 638 460 675 572 675  curveto
684 675 607 638 339 565  curveto
71 491 -63 403 -63 300  curveto
closepath
-142 300 moveto
-142 389 -2 465 275 528  curveto
553 591 652 623 572 623  curveto
492 623 420 591 357 528  curveto
294 465 263 389 263 300  curveto
263 210 294 134 357 71  curveto
420 8 492 -23 572 -23  curveto
652 -23 553 8 275 71  curveto
-2 134 -142 210 -142 300  curveto
closepath
-305 274 moveto
426 274 lineto
426 326 lineto
-305 326 lineto
-305 274 lineto
closepath
fill
		} def

	/slash
		{
-63 300 moveto
-63 196 71 108 339 35  curveto
607 -38 684 -75 572 -75  curveto
460 -75 367 -38 294 35  curveto
220 108 184 196 184 300  curveto
184 403 220 491 294 565  curveto
367 638 460 675 572 675  curveto
684 675 607 638 339 565  curveto
71 491 -63 403 -63 300  curveto
closepath
-142 300 moveto
-142 389 -2 465 275 528  curveto
553 591 652 623 572 623  curveto
492 623 420 591 357 528  curveto
294 465 263 389 263 300  curveto
263 210 294 134 357 71  curveto
420 8 492 -23 572 -23  curveto
652 -23 553 8 275 71  curveto
-2 134 -142 210 -142 300  curveto
closepath
703 518 moveto
527 82 lineto
442 82 lineto
618 518 lineto
703 518 lineto
closepath
fill
		} def

	/zero
		{
-63 300 moveto
-63 196 71 108 339 35  curveto
607 -38 684 -75 572 -75  curveto
460 -75 367 -38 294 35  curveto
220 108 184 196 184 300  curveto
184 403 220 491 294 565  curveto
367 638 460 675 572 675  curveto
684 675 607 638 339 565  curveto
71 491 -63 403 -63 300  curveto
closepath
-142 300 moveto
-142 389 -2 465 275 528  curveto
553 591 652 623 572 623  curveto
492 623 420 591 357 528  curveto
294 465 263 389 263 300  curveto
263 210 294 134 357 71  curveto
420 8 492 -23 572 -23  curveto
652 -23 553 8 275 71  curveto
-2 134 -142 210 -142 300  curveto
closepath
-316 300 moveto
-316 266 -157 238 160 214  curveto
477 190 614 178 572 178  curveto
530 178 497 190 473 214  curveto
449 238 437 266 437 300  curveto
437 333 449 362 473 386  curveto
497 410 530 422 572 422  curveto
614 422 477 410 160 386  curveto
-157 362 -316 333 -316 300  curveto
closepath
-395 300 moveto
-395 319 -231 335 96 349  curveto
424 363 582 370 572 370  curveto
562 370 379 363 24 349  curveto
-330 335 -508 319 -508 300  curveto
-508 280 -330 264 24 250  curveto
379 236 562 230 572 230  curveto
582 230 424 236 96 250  curveto
-231 264 -395 280 -395 300  curveto
closepath
fill
		} def

	/one
		{
-63 300 moveto
-63 196 71 108 339 35  curveto
607 -38 684 -75 572 -75  curveto
460 -75 367 -38 294 35  curveto
220 108 184 196 184 300  curveto
184 403 220 491 294 565  curveto
367 638 460 675 572 675  curveto
684 675 607 638 339 565  curveto
71 491 -63 403 -63 300  curveto
closepath
-142 300 moveto
-142 389 -2 465 275 528  curveto
553 591 652 623 572 623  curveto
492 623 420 591 357 528  curveto
294 465 263 389 263 300  curveto
263 210 294 134 357 71  curveto
420 8 492 -23 572 -23  curveto
652 -23 553 8 275 71  curveto
-2 134 -142 210 -142 300  curveto
closepath
-381 323 moveto
-381 308 -216 295 114 283  curveto
444 271 596 266 572 266  curveto
550 266 533 271 521 281  curveto
509 291 503 305 503 323  curveto
503 338 508 351 519 362  curveto
530 373 548 379 572 379  curveto
598 379 617 372 629 360  curveto
-44 348 -381 336 -381 323  curveto
closepath
fill
		} def

	/two
		{
-153 300 moveto
-153 208 -14 130 262 66  curveto
539 2 627 -30 527 -30  curveto
427 -30 344 2 280 66  curveto
216 130 184 208 184 300  curveto
184 391 216 469 280 533  curveto
344 597 427 630 527 630  curveto
627 630 539 597 262 533  curveto
-14 469 -153 391 -153 300  curveto
closepath
791 326 moveto
784 396 754 456 701 505  curveto
648 553 590 578 527 578  curveto
464 578 406 553 353 505  curveto
300 456 270 396 264 326  curveto
791 326 lineto
closepath
791 274 moveto
264 274 lineto
270 203 300 143 353 95  curveto
406 46 464 22 527 22  curveto
590 22 648 46 701 95  curveto
754 143 784 203 791 274  curveto
closepath
fill
		} def

	/three
		{
-153 300 moveto
-153 208 -14 130 262 66  curveto
539 2 627 -30 527 -30  curveto
427 -30 344 2 280 66  curveto
216 130 184 208 184 300  curveto
184 391 216 469 280 533  curveto
344 597 427 630 527 630  curveto
627 630 539 597 262 533  curveto
-14 469 -153 391 -153 300  curveto
closepath
-232 300 moveto
-232 372 -85 434 207 487  curveto
499 540 278 569 -457 574  curveto
-457 25 lineto
278 30 499 59 207 112  curveto
-85 165 -232 228 -232 300  curveto
closepath
488 25 moveto
488 574 lineto
435 569 384 540 336 487  curveto
287 434 263 372 263 300  curveto
263 228 287 165 336 112  curveto
384 59 435 30 488 25  curveto
closepath
fill
		} def

	/four
		{
-153 300 moveto
-153 208 -14 130 262 66  curveto
539 2 627 -30 527 -30  curveto
427 -30 344 2 280 66  curveto
216 130 184 208 184 300  curveto
184 391 216 469 280 533  curveto
344 597 427 630 527 630  curveto
627 630 539 597 262 533  curveto
-14 469 -153 391 -153 300  curveto
closepath
791 326 moveto
785 392 758 449 711 497  curveto
663 544 615 570 567 574  curveto
567 326 lineto
791 326 lineto
closepath
488 326 moveto
488 574 lineto
439 570 391 544 344 497  curveto
296 449 270 392 264 326  curveto
488 326 lineto
closepath
791 274 moveto
-457 274 lineto
-457 25 lineto
274 29 663 55 711 103  curveto
758 150 785 207 791 274  curveto
closepath
488 25 moveto
488 274 lineto
264 274 lineto
270 207 296 150 344 103  curveto
391 55 439 29 488 25  curveto
closepath
fill
		} def

	/five
		{
-153 300 moveto
-153 208 -14 130 262 66  curveto
539 2 627 -30 527 -30  curveto
427 -30 344 2 280 66  curveto
216 130 184 208 184 300  curveto
184 391 216 469 280 533  curveto
344 597 427 630 527 630  curveto
627 630 539 597 262 533  curveto
-14 469 -153 391 -153 300  curveto
closepath
691 514 moveto
639 556 585 578 527 578  curveto
469 578 415 556 364 514  curveto
527 350 lineto
691 514 lineto
closepath
-232 300 moveto
-232 366 92 420 740 462  curveto
578 300 lineto
740 137 lineto
92 179 -232 233 -232 300  curveto
closepath
477 300 moveto
314 462 lineto
280 420 263 366 263 300  curveto
263 233 280 179 314 137  curveto
477 300 lineto
closepath
691 86 moveto
527 249 lineto
364 86 lineto
415 43 469 22 527 22  curveto
585 22 639 43 691 86  curveto
closepath
fill
		} def

	/six
		{
-201 274 moveto
-459 274 lineto
-459 -30 lineto
105 -30 354 -1 287 58  curveto
217 120 182 200 182 300  curveto
182 399 217 480 287 542  curveto
353 601 105 630 -459 630  curveto
-459 326 lineto
-201 326 lineto
-201 274 lineto
closepath
486 326 moveto
486 574 lineto
438 569 390 543 343 496  curveto
295 448 268 392 262 326  curveto
486 326 lineto
closepath
486 25 moveto
486 274 lineto
262 274 lineto
268 208 295 151 343 104  curveto
390 56 438 30 486 25  curveto
closepath
fill
		} def

	/seven
		{
833 82 moveto
782 31 lineto
567 246 lineto
405 84 lineto
456 42 173 22 -445 22  curveto
-445 -30 lineto
128 -30 382 2 318 66  curveto
254 130 222 208 222 300  curveto
222 391 254 469 318 533  curveto
382 597 128 630 -445 630  curveto
-445 578 lineto
171 578 453 556 401 513  curveto
567 346 lineto
782 561 lineto
833 511 lineto
618 296 lineto
833 82 lineto
closepath
517 296 moveto
351 461 lineto
317 419 301 366 301 300  curveto
301 232 319 177 355 134  curveto
517 296 lineto
closepath
fill
		} def

	/eight
		{
-201 300 moveto
-201 200 105 120 718 58  curveto
651 0 558 -30 440 -30  curveto
440 274 lineto
182 274 lineto
182 326 lineto
440 326 lineto
440 630 lineto
558 630 651 600 718 542  curveto
105 480 -201 399 -201 300  curveto
closepath
743 326 moveto
736 392 709 448 662 496  curveto
614 543 567 569 519 574  curveto
519 326 lineto
743 326 lineto
closepath
743 274 moveto
-505 274 lineto
-505 25 lineto
225 30 614 56 662 104  curveto
709 151 736 208 743 274  curveto
closepath
fill
		} def

	/nine
		{
-191 300 moveto
-191 208 -52 130 224 66  curveto
501 2 585 -30 476 -30  curveto
476 22 lineto
540 22 598 42 650 84  curveto
487 246 lineto
272 31 lineto
222 82 lineto
437 296 lineto
222 511 lineto
272 561 lineto
487 346 lineto
654 513 lineto
602 556 542 578 476 578  curveto
476 630 lineto
585 630 501 597 224 533  curveto
-52 469 -191 391 -191 300  curveto
closepath
-270 300 moveto
-270 366 54 419 703 461  curveto
538 296 lineto
699 134 lineto
53 177 -270 232 -270 300  curveto
closepath
fill
		} def

	/colon
		{
-153 300 moveto
-153 209 -14 131 262 67  curveto
538 2 627 -30 527 -30  curveto
437 -30 367 -8 315 35  curveto
237 -43 lineto
184 10 lineto
261 88 lineto
209 149 184 220 184 300  curveto
184 390 216 468 281 533  curveto
345 597 427 630 527 630  curveto
616 630 686 608 738 565  curveto
816 643 lineto
870 590 lineto
793 513 lineto
162 451 -153 380 -153 300  curveto
closepath
-232 300 moveto
-232 366 92 419 741 461  curveto
365 85 lineto
416 43 470 22 527 22  curveto
595 22 485 49 198 103  curveto
-88 157 -232 223 -232 300  curveto
closepath
689 516 moveto
638 557 584 578 527 578  curveto
459 578 398 550 344 496  curveto
290 442 263 376 263 300  curveto
263 234 279 180 312 139  curveto
689 516 lineto
closepath
fill
		} def

	/semicolon
		{
-153 300 moveto
-153 208 -14 130 262 66  curveto
539 2 627 -30 527 -30  curveto
427 -30 344 2 280 66  curveto
216 130 184 208 184 300  curveto
184 391 216 469 280 533  curveto
344 597 427 630 527 630  curveto
627 630 539 597 262 533  curveto
-14 469 -153 391 -153 300  curveto
closepath
-232 300 moveto
-232 376 -88 442 198 496  curveto
485 550 595 578 527 578  curveto
459 578 398 550 344 496  curveto
290 442 263 376 263 300  curveto
263 223 290 157 344 103  curveto
398 49 459 22 527 22  curveto
595 22 485 49 198 103  curveto
-88 157 -232 223 -232 300  curveto
closepath
713 201 moveto
693 193 672 190 648 190  curveto
626 190 611 192 601 198  curveto
593 202 581 216 565 239  curveto
551 259 544 269 544 269  curveto
548 264 384 249 54 225  curveto
-275 200 -441 182 -441 172  curveto
-441 151 -118 123 527 89  curveto
488 120 469 148 469 173  curveto
469 181 474 198 486 223  curveto
496 245 502 259 502 264  curveto
502 264 497 255 487 238  curveto
480 228 468 215 451 199  curveto
441 193 424 190 402 190  curveto
379 190 358 193 340 201  curveto
348 238 362 262 381 273  curveto
391 279 408 283 432 285  curveto
456 287 477 292 495 300  curveto
478 307 457 312 433 315  curveto
421 315 403 319 381 325  curveto
360 337 347 362 341 400  curveto
361 406 381 409 403 409  curveto
425 409 441 406 451 401  curveto
458 397 470 383 486 361  curveto
499 342 506 333 506 333  curveto
502 339 494 353 484 377  curveto
474 400 469 417 469 427  curveto
469 451 488 478 528 510  curveto
-117 476 -441 449 -441 427  curveto
-441 417 -105 400 566 376  curveto
556 354 550 340 550 334  curveto
550 334 555 344 567 363  curveto
579 382 590 395 600 401  curveto
610 407 627 410 649 410  curveto
671 410 692 407 711 401  curveto
705 363 691 338 671 326  curveto
661 320 644 316 619 314  curveto
606 312 586 308 558 300  curveto
576 292 596 287 618 285  curveto
634 283 643 283 645 283  curveto
655 281 663 278 671 274  curveto
690 262 704 238 713 201  curveto
closepath
fill
		} def

	/less
		{
-3 274 moveto
870 274 lineto
863 188 828 115 765 57  curveto
701 0 622 -30 527 -30  curveto
432 -30 353 0 290 58  curveto
226 116 191 188 185 274  curveto
34 274 lineto
34 326 lineto
185 326 lineto
191 411 226 483 290 542  curveto
353 600 432 630 527 630  curveto
622 630 701 600 765 542  curveto
828 484 863 412 870 326  curveto
-3 326 lineto
-3 274 lineto
closepath
791 326 moveto
784 397 754 457 701 505  curveto
647 553 589 578 527 578  curveto
465 578 407 553 354 505  curveto
300 457 270 397 264 326  curveto
791 326 lineto
closepath
791 274 moveto
264 274 lineto
270 202 300 142 354 94  curveto
407 46 465 22 527 22  curveto
589 22 647 46 701 94  curveto
754 142 784 202 791 274  curveto
closepath
fill
		} def

	/equal
		{
-3 274 moveto
870 274 lineto
864 193 832 124 774 66  curveto
716 8 306 -23 -457 -29  curveto
-457 -200 lineto
488 -200 lineto
488 -29 lineto
407 -23 338 8 280 66  curveto
222 124 191 193 185 274  curveto
34 274 lineto
34 326 lineto
185 326 lineto
191 406 222 475 280 533  curveto
338 591 407 623 488 629  curveto
488 800 lineto
-457 800 lineto
-457 629 lineto
306 622 716 590 774 533  curveto
831 475 863 406 870 326  curveto
-3 326 lineto
-3 274 lineto
closepath
791 326 moveto
785 392 758 448 710 496  curveto
662 544 615 570 567 574  curveto
567 326 lineto
791 326 lineto
closepath
488 326 moveto
488 574 lineto
440 570 392 544 344 496  curveto
296 448 270 392 264 326  curveto
488 326 lineto
closepath
791 274 moveto
-457 274 lineto
-457 25 lineto
273 29 662 55 710 103  curveto
758 151 785 208 791 274  curveto
closepath
488 25 moveto
488 274 lineto
264 274 lineto
270 208 296 151 344 103  curveto
392 55 440 29 488 25  curveto
closepath
fill
		} def

	/greater
		{
-153 -30 moveto
184 -30 lineto
184 630 lineto
-153 630 lineto
-153 -30 lineto
closepath
-232 326 moveto
-232 578 lineto
263 578 lineto
263 326 lineto
-232 326 lineto
closepath
-232 22 moveto
-232 274 lineto
263 274 lineto
263 22 lineto
-232 22 lineto
closepath
fill
		} def

	/question
		{
-153 -30 moveto
184 -30 lineto
184 630 lineto
-153 630 lineto
-153 -30 lineto
closepath
-232 326 moveto
-232 578 lineto
567 578 lineto
567 326 lineto
-232 326 lineto
closepath
488 326 moveto
488 578 lineto
263 578 lineto
263 326 lineto
488 326 lineto
closepath
-232 22 moveto
-232 274 lineto
567 274 lineto
567 22 lineto
-232 22 lineto
closepath
488 22 moveto
488 274 lineto
263 274 lineto
263 22 lineto
488 22 lineto
closepath
fill
		} def

	/at
		{
-153 -30 moveto
184 -30 lineto
184 630 lineto
-153 630 lineto
-153 -30 lineto
closepath
-232 87 moveto
-232 513 lineto
579 300 lineto
-232 87 lineto
closepath
755 578 moveto
300 578 lineto
528 350 lineto
755 578 lineto
closepath
478 300 moveto
263 514 lineto
263 86 lineto
478 300 lineto
closepath
756 22 moveto
528 249 lineto
299 22 lineto
756 22 lineto
closepath
fill
		} def

	/A
		{
-153 -30 moveto
184 -30 lineto
184 630 lineto
-153 630 lineto
-153 -30 lineto
closepath
-232 22 moveto
-232 578 lineto
263 578 lineto
263 22 lineto
-232 22 lineto
closepath
fill
		} def

	/B
		{
-153 -30 moveto
184 -30 lineto
184 630 lineto
-153 630 lineto
-153 -30 lineto
closepath
fill
		} def

	/C
		{
-153 274 moveto
-457 274 lineto
-457 -30 lineto
488 -30 lineto
488 274 lineto
184 274 lineto
184 326 lineto
488 326 lineto
488 630 lineto
-457 630 lineto
-457 326 lineto
-153 326 lineto
-153 274 lineto
closepath
fill
		} def

	/D
		{
-153 261 moveto
-444 261 lineto
-444 -30 lineto
475 -30 lineto
475 261 lineto
184 261 lineto
184 339 lineto
475 339 lineto
475 630 lineto
-444 630 lineto
-444 339 lineto
-153 339 lineto
-153 261 lineto
closepath
fill
		} def

	/E
		{
-153 394 moveto
-457 394 lineto
-457 90 lineto
488 90 lineto
488 394 lineto
184 394 lineto
184 446 lineto
488 446 lineto
488 750 lineto
-457 750 lineto
-457 446 lineto
-153 446 lineto
-153 394 lineto
closepath
-428 -95 moveto
-428 -110 -262 -123 68 -134  curveto
398 -144 551 -150 527 -150  curveto
503 -150 485 -144 475 -134  curveto
464 -123 459 -110 459 -95  curveto
459 -79 464 -66 475 -56  curveto
485 -45 503 -40 527 -40  curveto
551 -40 398 -45 68 -56  curveto
-262 -66 -428 -79 -428 -95  curveto
closepath
fill
		} def

	/F
		{
-428 695 moveto
-428 679 -262 666 68 656  curveto
398 645 551 640 527 640  curveto
503 640 485 645 475 656  curveto
464 666 459 679 459 695  curveto
459 710 464 723 475 734  curveto
485 744 503 750 527 750  curveto
551 750 398 744 68 734  curveto
-262 723 -428 710 -428 695  curveto
closepath
-153 154 moveto
-457 154 lineto
-457 -150 lineto
488 -150 lineto
488 154 lineto
184 154 lineto
184 206 lineto
488 206 lineto
488 510 lineto
-457 510 lineto
-457 206 lineto
-153 206 lineto
-153 154 lineto
closepath
fill
		} def

	/G
		{
-153 337 moveto
-457 337 lineto
-457 33 lineto
488 33 lineto
488 337 lineto
184 337 lineto
184 389 lineto
488 389 lineto
488 693 lineto
-457 693 lineto
-457 389 lineto
-153 389 lineto
-153 337 lineto
closepath
-153 -94 moveto
184 -94 lineto
184 -42 lineto
-153 -42 lineto
-153 -94 lineto
closepath
fill
		} def

	/H
		{
-153 641 moveto
184 641 lineto
184 693 lineto
-153 693 lineto
-153 641 lineto
closepath
-153 210 moveto
-457 210 lineto
-457 -94 lineto
488 -94 lineto
488 210 lineto
184 210 lineto
184 262 lineto
488 262 lineto
488 566 lineto
-457 566 lineto
-457 262 lineto
-153 262 lineto
-153 210 lineto
closepath
fill
		} def

	/I
		{
-457 404 moveto
488 404 lineto
488 630 lineto
-457 630 lineto
-457 404 lineto
closepath
-153 274 moveto
-406 274 lineto
-406 326 lineto
-153 326 lineto
-153 274 lineto
closepath
437 326 moveto
437 274 lineto
184 274 lineto
184 326 lineto
437 326 lineto
closepath
-457 -30 moveto
488 -30 lineto
488 196 lineto
-457 196 lineto
-457 -30 lineto
closepath
fill
		} def

	/J
		{
-428 523 moveto
-428 507 -262 494 68 484  curveto
398 473 551 468 527 468  curveto
503 468 485 473 475 484  curveto
464 494 459 507 459 523  curveto
459 538 464 551 475 562  curveto
485 572 503 578 527 578  curveto
551 578 398 572 68 562  curveto
-262 551 -428 538 -428 523  curveto
closepath
871 8 moveto
820 -43 lineto
528 249 lineto
234 -43 lineto
184 8 lineto
452 274 lineto
184 274 lineto
184 326 lineto
452 326 lineto
184 593 lineto
234 643 lineto
528 350 lineto
820 643 lineto
871 593 lineto
605 326 lineto
-153 326 lineto
-153 274 lineto
605 274 lineto
871 8 lineto
closepath
-428 78 moveto
-428 62 -262 49 68 39  curveto
398 28 551 23 527 23  curveto
503 23 485 28 475 39  curveto
464 49 459 62 459 78  curveto
459 93 464 106 475 117  curveto
485 127 503 133 527 133  curveto
551 133 398 127 68 117  curveto
-262 106 -428 93 -428 78  curveto
closepath
fill
		} def

	/K
		{
-153 274 moveto
184 274 lineto
184 326 lineto
-153 326 lineto
-153 274 lineto
closepath
fill
		} def

	/L
		{
-153 261 moveto
184 261 lineto
184 339 lineto
-153 339 lineto
-153 261 lineto
closepath
fill
		} def

	/M
		{
-153 274 moveto
184 274 lineto
184 326 lineto
-153 326 lineto
-153 274 lineto
closepath
-428 115 moveto
-428 99 -262 86 68 76  curveto
398 65 551 60 527 60  curveto
503 60 485 65 475 76  curveto
464 86 459 99 459 115  curveto
459 130 464 143 475 154  curveto
485 164 503 170 527 170  curveto
551 170 398 164 68 154  curveto
-262 143 -428 130 -428 115  curveto
closepath
fill
		} def

	/N
		{
-428 485 moveto
-428 469 -262 456 68 446  curveto
398 435 551 430 527 430  curveto
503 430 485 435 475 446  curveto
464 456 459 469 459 485  curveto
459 500 464 513 475 524  curveto
485 534 503 540 527 540  curveto
551 540 398 534 68 524  curveto
-262 513 -428 500 -428 485  curveto
closepath
-153 274 moveto
184 274 lineto
184 326 lineto
-153 326 lineto
-153 274 lineto
closepath
fill
		} def

	/O
		{
-428 485 moveto
-428 469 -262 456 68 446  curveto
398 435 551 430 527 430  curveto
503 430 485 435 475 446  curveto
464 456 459 469 459 485  curveto
459 500 464 513 475 524  curveto
485 534 503 540 527 540  curveto
551 540 398 534 68 524  curveto
-262 513 -428 500 -428 485  curveto
closepath
-153 274 moveto
184 274 lineto
184 326 lineto
-153 326 lineto
-153 274 lineto
closepath
-428 115 moveto
-428 99 -262 86 68 76  curveto
398 65 551 60 527 60  curveto
503 60 485 65 475 76  curveto
464 86 459 99 459 115  curveto
459 130 464 143 475 154  curveto
485 164 503 170 527 170  curveto
551 170 398 164 68 154  curveto
-262 143 -428 130 -428 115  curveto
closepath
fill
		} def

	/P
		{
-205 485 moveto
-205 469 -39 456 291 446  curveto
621 435 774 430 750 430  curveto
726 430 538 435 186 446  curveto
-166 456 -342 469 -342 485  curveto
-342 500 -166 513 186 524  curveto
538 534 726 540 750 540  curveto
774 540 621 534 291 524  curveto
-39 513 -205 500 -205 485  curveto
closepath
-205 115 moveto
-205 99 -39 86 291 76  curveto
621 65 774 60 750 60  curveto
726 60 538 65 186 76  curveto
-166 86 -342 99 -342 115  curveto
-342 130 -166 143 186 154  curveto
538 164 726 170 750 170  curveto
774 170 621 164 291 154  curveto
-39 143 -205 130 -205 115  curveto
closepath
-153 274 moveto
184 274 lineto
184 326 lineto
-153 326 lineto
-153 274 lineto
closepath
373 485 moveto
373 469 367 456 357 446  curveto
346 435 328 430 304 430  curveto
280 430 262 435 252 446  curveto
241 456 236 469 236 485  curveto
236 500 241 513 252 524  curveto
262 534 280 540 304 540  curveto
328 540 346 534 357 524  curveto
367 513 373 500 373 485  curveto
closepath
373 115 moveto
373 99 367 86 357 76  curveto
346 65 328 60 304 60  curveto
280 60 262 65 252 76  curveto
241 86 236 99 236 115  curveto
236 130 241 143 252 154  curveto
262 164 280 170 304 170  curveto
328 170 346 164 357 154  curveto
367 143 373 130 373 115  curveto
closepath
fill
		} def

	/Q
		{
-483 201 moveto
14 201 lineto
14 250 lineto
-483 250 lineto
-483 201 lineto
closepath
fill
		} def

	/R
		{
17 201 moveto
14 201 lineto
14 250 lineto
17 250 lineto
17 201 lineto
closepath
fill
		} def

	/S
		{
767 446 moveto
668 446 lineto
527 583 lineto
387 446 lineto
288 446 lineto
527 681 lineto
767 446 lineto
closepath
-153 274 moveto
184 274 lineto
184 326 lineto
-153 326 lineto
-153 274 lineto
closepath
fill
		} def

	/T
		{
-362 479 moveto
-362 463 -196 450 134 440  curveto
464 429 617 424 593 424  curveto
569 424 381 429 29 440  curveto
-323 450 -499 463 -499 479  curveto
-499 494 -323 507 29 518  curveto
381 528 569 534 593 534  curveto
617 534 464 528 134 518  curveto
-196 507 -362 494 -362 479  curveto
closepath
319 479 moveto
319 463 313 450 303 440  curveto
292 429 274 424 250 424  curveto
226 424 208 429 198 440  curveto
187 450 182 463 182 479  curveto
182 494 187 507 198 518  curveto
208 528 226 534 250 534  curveto
274 534 292 528 303 518  curveto
313 507 319 494 319 479  curveto
closepath
-362 121 moveto
-362 105 -196 92 134 82  curveto
464 71 617 66 593 66  curveto
569 66 381 71 29 82  curveto
-323 92 -499 105 -499 121  curveto
-499 136 -323 149 29 160  curveto
381 170 569 176 593 176  curveto
617 176 464 170 134 160  curveto
-196 149 -362 136 -362 121  curveto
closepath
319 121 moveto
319 105 313 92 303 82  curveto
292 71 274 66 250 66  curveto
226 66 208 71 198 82  curveto
187 92 182 105 182 121  curveto
182 136 187 149 198 160  curveto
208 170 226 176 250 176  curveto
274 176 292 170 303 160  curveto
313 149 319 136 319 121  curveto
closepath
fill
		} def

	/U
		{
-153 13 moveto
184 300 lineto
-153 586 lineto
-153 13 lineto
closepath
-153 -100 moveto
184 -100 lineto
184 -48 lineto
-153 -48 lineto
-153 -100 lineto
closepath
-232 114 moveto
-232 485 lineto
346 300 lineto
-232 114 lineto
closepath
fill
		} def

	/V
		{
871 300 moveto
184 13 lineto
184 586 lineto
871 300 lineto
closepath
-153 -100 moveto
184 -100 lineto
184 -48 lineto
-153 -48 lineto
-153 -100 lineto
closepath
709 300 moveto
263 485 lineto
263 114 lineto
709 300 lineto
closepath
fill
		} def

	/W
		{
-153 -100 moveto
467 -100 lineto
427 -205 lineto
343 -205 lineto
384 -100 lineto
184 -100 lineto
184 -48 lineto
404 -48 lineto
489 173 lineto
184 300 lineto
606 476 lineto
680 667 lineto
762 667 lineto
704 516 lineto
-153 586 lineto
-153 13 lineto
560 143 lineto
487 -48 lineto
-153 -48 lineto
-153 -100 lineto
closepath
-232 114 moveto
-232 485 lineto
673 436 lineto
583 201 lineto
-232 114 lineto
closepath
574 395 moveto
346 300 lineto
511 230 lineto
574 395 lineto
closepath
fill
		} def

	/X
		{
-153 -100 moveto
387 -100 lineto
347 -204 lineto
263 -204 lineto
303 -100 lineto
184 -100 lineto
184 -48 lineto
324 -48 lineto
378 95 lineto
184 13 lineto
184 586 lineto
515 447 lineto
582 617 lineto
664 617 lineto
587 418 lineto
871 300 lineto
478 136 lineto
407 -48 lineto
-153 -48 lineto
-153 -100 lineto
closepath
709 300 moveto
565 360 lineto
509 217 lineto
709 300 lineto
closepath
494 390 moveto
263 485 lineto
263 114 lineto
411 176 lineto
494 390 lineto
closepath
fill
		} def

	/Y
		{
738 148 moveto
712 100 673 59 621 27  curveto
569 -5 513 -22 453 -22  curveto
333 -22 244 11 186 77  curveto
130 138 101 223 97 333  curveto
19 333 lineto
19 373 lineto
98 373 lineto
102 449 132 520 187 585  curveto
245 653 315 688 398 688  curveto
450 688 495 681 533 668  curveto
569 655 589 649 595 649  curveto
613 649 629 662 643 688  curveto
688 688 lineto
736 476 lineto
682 476 lineto
601 596 511 657 413 657  curveto
355 657 307 628 269 572  curveto
235 522 218 461 218 391  curveto
218 385 218 379 218 373  curveto
367 373 lineto
367 333 lineto
221 333 lineto
231 249 259 181 306 129  curveto
357 71 419 42 493 42  curveto
563 42 626 77 682 148  curveto
738 148 lineto
closepath
fill
		} def

	/Z
		{
557 154 moveto
485 51 426 0 380 0  curveto
355 0 337 6 326 18  curveto
314 30 309 45 309 61  curveto
309 69 313 91 322 125  curveto
333 163 345 202 357 242  curveto
373 296 381 333 381 353  curveto
381 372 380 382 378 382  curveto
352 382 314 341 263 260  curveto
223 197 194 140 176 88  curveto
171 70 166 52 162 34  curveto
154 11 137 0 112 0  curveto
80 0 65 8 65 24  curveto
65 26 70 50 80 97  curveto
152 437 lineto
70 396 lineto
70 457 lineto
168 506 lineto
177 549 lineto
184 583 188 605 188 617  curveto
188 627 186 634 183 639  curveto
175 647 152 651 112 653  curveto
112 675 lineto
298 675 lineto
273 559 lineto
364 604 lineto
364 544 lineto
259 491 lineto
200 235 lineto
272 367 342 433 412 433  curveto
456 433 479 408 479 358  curveto
479 342 471 307 455 253  curveto
445 221 435 190 426 160  curveto
413 118 407 87 407 67  curveto
407 55 408 49 411 49  curveto
424 49 461 93 521 181  curveto
557 154 lineto
closepath
fill
		} def

	/bracketleft
		{
443 25 moveto
422 -1 390 -14 348 -14  curveto
296 -14 244 19 194 85  curveto
179 69 140 30 78 -29  curveto
42 7 lineto
161 139 lineto
140 171 122 216 107 274  curveto
92 331 85 380 85 421  curveto
85 480 97 534 121 584  curveto
151 645 198 676 260 676  curveto
314 676 354 654 380 610  curveto
401 572 412 529 412 481  curveto
412 434 394 378 360 314  curveto
340 278 308 228 264 164  curveto
265 144 277 117 300 83  curveto
324 46 340 28 349 28  curveto
365 28 381 43 398 74  curveto
443 25 lineto
closepath
333 481 moveto
333 515 327 545 317 572  curveto
302 608 285 626 265 626  curveto
219 626 196 561 196 432  curveto
196 358 210 291 238 231  curveto
253 245 273 281 297 338  curveto
321 394 333 442 333 481  curveto
closepath
fill
		} def

	/backslash
		{
-507 331 moveto
-507 248 -180 175 473 113  curveto
433 28 367 -14 277 -14  curveto
237 -14 213 -11 203 -6  curveto
175 -92 lineto
104 -92 lineto
143 29 lineto
106 61 78 109 60 174  curveto
45 224 38 276 38 331  curveto
38 413 52 485 82 548  curveto
122 633 187 676 277 676  curveto
317 676 341 673 351 668  curveto
380 754 lineto
451 754 lineto
411 633 lineto
448 600 476 551 495 487  curveto
-173 437 -507 385 -507 331  curveto
closepath
334 615 moveto
316 638 297 650 277 650  curveto
199 650 161 543 161 331  curveto
161 227 166 160 177 132  curveto
334 615 lineto
closepath
394 331 moveto
394 431 388 497 376 527  curveto
220 46 lineto
239 23 258 12 277 12  curveto
355 12 394 118 394 331  curveto
closepath
fill
		} def

	/bracketright
		{
-33 365 moveto
64 365 lineto
64 417 lineto
-33 417 lineto
-33 365 lineto
closepath
-33 183 moveto
64 183 lineto
64 235 lineto
-33 235 lineto
-33 183 lineto
closepath
fill
		} def

	/asciicircum
		{
-33 456 moveto
64 456 lineto
64 508 lineto
-33 508 lineto
-33 456 lineto
closepath
-33 274 moveto
64 274 lineto
64 326 lineto
-33 326 lineto
-33 274 lineto
closepath
-33 92 moveto
64 92 lineto
64 144 lineto
-33 144 lineto
-33 92 lineto
closepath
fill
		} def

	/underscore
		{
-33 547 moveto
64 547 lineto
64 599 lineto
-33 599 lineto
-33 547 lineto
closepath
-33 365 moveto
64 365 lineto
64 417 lineto
-33 417 lineto
-33 365 lineto
closepath
-33 183 moveto
64 183 lineto
64 235 lineto
-33 235 lineto
-33 183 lineto
closepath
-33 1 moveto
64 1 lineto
64 53 lineto
-33 53 lineto
-33 1 lineto
closepath
fill
		} def

	/quoteleft
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/a
		{
-283 365 moveto
64 365 lineto
64 417 lineto
-283 417 lineto
-283 365 lineto
closepath
-283 183 moveto
64 183 lineto
64 235 lineto
-283 235 lineto
-283 183 lineto
closepath
fill
		} def

	/b
		{
-283 456 moveto
64 456 lineto
64 508 lineto
-283 508 lineto
-283 456 lineto
closepath
-283 274 moveto
64 274 lineto
64 326 lineto
-283 326 lineto
-283 274 lineto
closepath
-283 92 moveto
64 92 lineto
64 144 lineto
-283 144 lineto
-283 92 lineto
closepath
fill
		} def

	/c
		{
-283 547 moveto
64 547 lineto
64 599 lineto
-283 599 lineto
-283 547 lineto
closepath
-283 365 moveto
64 365 lineto
64 417 lineto
-283 417 lineto
-283 365 lineto
closepath
-283 183 moveto
64 183 lineto
64 235 lineto
-283 235 lineto
-283 183 lineto
closepath
-283 1 moveto
64 1 lineto
64 53 lineto
-283 53 lineto
-283 1 lineto
closepath
fill
		} def

	/d
		{
-33 274 moveto
64 274 lineto
64 326 lineto
-33 326 lineto
-33 274 lineto
closepath
fill
		} def

	/e
		{
-283 274 moveto
64 274 lineto
64 326 lineto
-283 326 lineto
-283 274 lineto
closepath
fill
		} def

	/f
		{
-283 365 moveto
-460 365 lineto
-460 417 lineto
-283 417 lineto
-283 365 lineto
closepath
491 365 moveto
314 365 lineto
314 417 lineto
491 417 lineto
491 365 lineto
closepath
-283 183 moveto
64 183 lineto
64 235 lineto
-283 235 lineto
-283 183 lineto
closepath
241 417 moveto
241 365 lineto
64 365 lineto
64 417 lineto
241 417 lineto
closepath
fill
		} def

	/g
		{
-283 183 moveto
-460 183 lineto
-460 235 lineto
-283 235 lineto
-283 183 lineto
closepath
-283 365 moveto
64 365 lineto
64 417 lineto
-283 417 lineto
-283 365 lineto
closepath
491 235 moveto
491 183 lineto
314 183 lineto
314 235 lineto
491 235 lineto
closepath
241 183 moveto
64 183 lineto
64 235 lineto
241 235 lineto
241 183 lineto
closepath
fill
		} def

	/h
		{
-283 456 moveto
-460 456 lineto
-460 508 lineto
-283 508 lineto
-283 456 lineto
closepath
491 456 moveto
314 456 lineto
314 508 lineto
491 508 lineto
491 456 lineto
closepath
-283 274 moveto
64 274 lineto
64 326 lineto
-283 326 lineto
-283 274 lineto
closepath
241 508 moveto
241 456 lineto
64 456 lineto
64 508 lineto
241 508 lineto
closepath
-283 92 moveto
64 92 lineto
64 144 lineto
-283 144 lineto
-283 92 lineto
closepath
fill
		} def

	/i
		{
-283 456 moveto
64 456 lineto
64 508 lineto
-283 508 lineto
-283 456 lineto
closepath
-283 92 moveto
-460 92 lineto
-460 144 lineto
-283 144 lineto
-283 92 lineto
closepath
-283 274 moveto
64 274 lineto
64 326 lineto
-283 326 lineto
-283 274 lineto
closepath
491 144 moveto
491 92 lineto
314 92 lineto
314 144 lineto
491 144 lineto
closepath
241 92 moveto
64 92 lineto
64 144 lineto
241 144 lineto
241 92 lineto
closepath
fill
		} def

	/j
		{
741 379 moveto
741 365 737 353 728 343  curveto
718 333 707 328 693 328  curveto
661 326 641 330 630 340  curveto
620 350 614 363 614 377  curveto
613 391 617 402 627 412  curveto
637 422 649 427 663 428  curveto
694 429 714 425 724 415  curveto
734 405 740 393 741 379  curveto
closepath
466 379 moveto
466 365 462 353 453 343  curveto
443 333 432 328 418 328  curveto
386 326 366 330 355 340  curveto
345 350 339 363 339 377  curveto
338 391 342 402 352 412  curveto
362 422 374 427 388 428  curveto
419 429 439 425 449 415  curveto
459 405 465 393 466 379  curveto
closepath
-283 172 moveto
64 172 lineto
64 224 lineto
-283 224 lineto
-283 172 lineto
closepath
191 379 moveto
191 365 187 353 178 343  curveto
168 333 157 328 143 328  curveto
111 326 91 330 80 340  curveto
70 350 64 363 64 377  curveto
63 391 67 402 77 412  curveto
87 422 99 427 113 428  curveto
144 429 164 425 174 415  curveto
184 405 190 393 191 379  curveto
closepath
fill
		} def

	/k
		{
909 435 moveto
771 0 lineto
283 0 lineto
146 435 lineto
527 711 lineto
909 435 lineto
closepath
821 415 moveto
527 628 lineto
234 415 lineto
348 52 lineto
706 52 lineto
821 415 lineto
closepath
fill
		} def

	/l
		{
947 351 moveto
744 0 lineto
311 0 lineto
108 351 lineto
311 702 lineto
744 702 lineto
947 351 lineto
closepath
860 351 moveto
687 650 lineto
368 650 lineto
195 351 lineto
368 52 lineto
687 52 lineto
860 351 lineto
closepath
fill
		} def

	/m
		{
615 781 moveto
89 426 lineto
64 464 lineto
589 818 lineto
615 781 lineto
closepath
-415 285 moveto
74 285 lineto
74 315 lineto
-415 315 lineto
-415 285 lineto
closepath
615 -181 moveto
589 -218 lineto
64 136 lineto
89 173 lineto
615 -181 lineto
closepath
fill
		} def

	/n
		{
615 464 moveto
589 426 lineto
64 781 lineto
89 818 lineto
615 464 lineto
closepath
-419 285 moveto
70 285 lineto
70 315 lineto
-419 315 lineto
-419 285 lineto
closepath
615 136 moveto
89 -218 lineto
64 -181 lineto
589 173 lineto
615 136 lineto
closepath
fill
		} def

	/o
		{
615 781 moveto
89 426 lineto
64 464 lineto
589 818 lineto
615 781 lineto
closepath
615 -181 moveto
589 -218 lineto
64 136 lineto
89 173 lineto
615 -181 lineto
closepath
fill
		} def

	/p
		{
615 464 moveto
589 426 lineto
64 781 lineto
89 818 lineto
615 464 lineto
closepath
615 136 moveto
89 -218 lineto
64 -181 lineto
589 173 lineto
615 136 lineto
closepath
fill
		} def

	/q
		{
615 464 moveto
589 426 lineto
64 781 lineto
89 818 lineto
615 464 lineto
closepath
615 304 moveto
589 266 lineto
64 621 lineto
89 658 lineto
615 304 lineto
closepath
615 136 moveto
89 -218 lineto
64 -181 lineto
589 173 lineto
615 136 lineto
closepath
fill
		} def

	/r
		{
615 464 moveto
589 426 lineto
64 781 lineto
89 818 lineto
615 464 lineto
closepath
615 296 moveto
89 -58 lineto
64 -21 lineto
589 333 lineto
615 296 lineto
closepath
615 136 moveto
89 -218 lineto
64 -181 lineto
589 173 lineto
615 136 lineto
closepath
fill
		} def

	/s
		{
615 781 moveto
89 426 lineto
64 464 lineto
589 818 lineto
615 781 lineto
closepath
615 621 moveto
89 266 lineto
64 304 lineto
589 658 lineto
615 621 lineto
closepath
615 -181 moveto
589 -218 lineto
64 136 lineto
89 173 lineto
615 -181 lineto
closepath
fill
		} def

	/t
		{
615 781 moveto
89 426 lineto
64 464 lineto
589 818 lineto
615 781 lineto
closepath
615 -21 moveto
589 -58 lineto
64 296 lineto
89 333 lineto
615 -21 lineto
closepath
615 -181 moveto
589 -218 lineto
64 136 lineto
89 173 lineto
615 -181 lineto
closepath
fill
		} def

	/u
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/v
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/w
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/x
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/y
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/z
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/braceleft
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/bar
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/braceright
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/asciitilde
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/exclamdown
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/cent
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/sterling
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/fraction
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/yen
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/florin
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/section
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/currency
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/quotesingle
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/quotedblleft
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/guillemotleft
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/guilsinglleft
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/guilsinglright
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/fi
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/fl
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/endash
		{
-63 300 moveto
-63 196 71 108 339 35  curveto
607 -38 684 -75 572 -75  curveto
460 -75 367 -38 294 35  curveto
220 108 184 196 184 300  curveto
184 403 220 491 294 565  curveto
367 638 460 675 572 675  curveto
684 675 607 638 339 565  curveto
71 491 -63 403 -63 300  curveto
closepath
-142 300 moveto
-142 389 -2 465 275 528  curveto
553 591 652 623 572 623  curveto
492 623 420 591 357 528  curveto
294 465 263 389 263 300  curveto
263 210 294 134 357 71  curveto
420 8 492 -23 572 -23  curveto
652 -23 553 8 275 71  curveto
-2 134 -142 210 -142 300  curveto
closepath
-383 474 moveto
-383 458 -217 445 113 435  curveto
443 424 596 419 572 419  curveto
548 419 530 424 520 435  curveto
509 445 504 458 504 474  curveto
504 489 509 502 520 513  curveto
530 523 548 529 572 529  curveto
596 529 443 523 113 513  curveto
-217 502 -383 489 -383 474  curveto
closepath
-167 274 moveto
288 274 lineto
288 326 lineto
-167 326 lineto
-167 274 lineto
closepath
-383 126 moveto
-383 110 -217 97 113 87  curveto
443 76 596 71 572 71  curveto
548 71 530 76 520 87  curveto
509 97 504 110 504 126  curveto
504 141 509 154 520 165  curveto
530 175 548 181 572 181  curveto
596 181 443 175 113 165  curveto
-217 154 -383 141 -383 126  curveto
closepath
fill
		} def

	/dagger
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/daggerdbl
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/periodcentered
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/paragraph
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/bullet
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/quotesinglbase
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/quotedblbase
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/quotedblright
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/guillemotright
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/ellipsis
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/perthousand
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/questiondown
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/grave
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/acute
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/circumflex
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/tilde
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/macron
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/breve
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/dotaccent
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/dieresis
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/ring
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/cedilla
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/hungarumlaut
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/ogonek
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/caron
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/emdash
		{
-63 300 moveto
-63 196 71 108 339 35  curveto
607 -38 684 -75 572 -75  curveto
460 -75 367 -38 294 35  curveto
220 108 184 196 184 300  curveto
184 403 220 491 294 565  curveto
367 638 460 675 572 675  curveto
684 675 607 638 339 565  curveto
71 491 -63 403 -63 300  curveto
closepath
-142 300 moveto
-142 389 -2 465 275 528  curveto
553 591 652 623 572 623  curveto
492 623 420 591 357 528  curveto
294 465 263 389 263 300  curveto
263 210 294 134 357 71  curveto
420 8 492 -23 572 -23  curveto
652 -23 553 8 275 71  curveto
-2 134 -142 210 -142 300  curveto
closepath
-383 474 moveto
-383 458 -217 445 113 435  curveto
443 424 596 419 572 419  curveto
548 419 530 424 520 435  curveto
509 445 504 458 504 474  curveto
504 489 509 502 520 513  curveto
530 523 548 529 572 529  curveto
596 529 443 523 113 513  curveto
-217 502 -383 489 -383 474  curveto
closepath
-167 274 moveto
288 274 lineto
288 326 lineto
-167 326 lineto
-167 274 lineto
closepath
-383 126 moveto
-383 110 -217 97 113 87  curveto
443 76 596 71 572 71  curveto
548 71 530 76 520 87  curveto
509 97 504 110 504 126  curveto
504 141 509 154 520 165  curveto
530 175 548 181 572 181  curveto
596 181 443 175 113 165  curveto
-217 154 -383 141 -383 126  curveto
closepath
fill
		} def

	/AE
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/ordfeminine
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/Lslash
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/Oslash
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/OE
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/ordmasculine
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/ae
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/dotlessi
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/lslash
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/oslash
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/oe
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/germandbls
		{
77 0 moveto
77 803 lineto
479 803 lineto
479 0 lineto
77 0 lineto
closepath
166 63 moveto
389 63 lineto
389 741 lineto
166 741 lineto
166 63 lineto
closepath
fill
		} def

	/.notdef
		{
0 0 moveto
1000 0 lineto
1000 1000 lineto
0 1000 lineto
0 0 lineto
closepath
50 50 moveto
950 50 lineto
950 950 lineto
50 950 lineto
50 50 lineto
closepath
fill
		} def

	end				% close glyph dict. 
	currentdict			% actually put dict on the stack
	end			% close the dictionary now
	/ESSTIXFive-Bold exch definefont pop
/ESSTIXFive-Bold findfont 18.0 scalefont setfont
(K) show
Q
Q
19.0 225.0 moveto
q 1 -1 scale
9 dict begin
/FontType 3 def
/FontMatrix [0.0010 0 0 0.0010 0 0]def
/FontBBox [0 -210 1652 952 ] def
	/Encoding 256 array def
			0 1 255 {Encoding exch /.notdef put}for
		Encoding 32 /space put
		Encoding 33 /exclam put
		Encoding 34 /quotedbl put
		Encoding 35 /numbersign put
		Encoding 36 /dollar put
		Encoding 37 /percent put
		Encoding 38 /ampersand put
		Encoding 39 /quoteright put
		Encoding 40 /parenleft put
		Encoding 41 /parenright put
		Encoding 42 /asterisk put
		Encoding 43 /plus put
		Encoding 44 /comma put
		Encoding 45 /hyphen put
		Encoding 46 /period put
		Encoding 47 /slash put
		Encoding 48 /zero put
		Encoding 49 /one put
		Encoding 50 /two put
		Encoding 51 /three put
		Encoding 52 /four put
		Encoding 53 /five put
		Encoding 54 /six put
		Encoding 55 /seven put
		Encoding 56 /eight put
		Encoding 57 /nine put
		Encoding 58 /colon put
		Encoding 59 /semicolon put
		Encoding 60 /less put
		Encoding 61 /equal put
		Encoding 62 /greater put
		Encoding 63 /question put
		Encoding 64 /at put
		Encoding 65 /A put
		Encoding 66 /B put
		Encoding 67 /C put
		Encoding 68 /D put
		Encoding 69 /E put
		Encoding 70 /F put
		Encoding 71 /G put
		Encoding 72 /H put
		Encoding 73 /I put
		Encoding 74 /J put
		Encoding 75 /K put
		Encoding 76 /L put
		Encoding 77 /M put
		Encoding 78 /N put
		Encoding 79 /O put
		Encoding 80 /P put
		Encoding 81 /Q put
		Encoding 82 /R put
		Encoding 83 /S put
		Encoding 84 /T put
		Encoding 85 /U put
		Encoding 86 /V put
		Encoding 87 /W put
		Encoding 88 /X put
		Encoding 89 /Y put
		Encoding 90 /Z put
		Encoding 91 /bracketleft put
		Encoding 92 /backslash put
		Encoding 93 /bracketright put
		Encoding 94 /asciicircum put
		Encoding 95 /underscore put
		Encoding 96 /quoteleft put
		Encoding 97 /a put
		Encoding 98 /b put
		Encoding 99 /c put
		Encoding 100 /d put
		Encoding 101 /e put
		Encoding 102 /f put
		Encoding 103 /g put
		Encoding 104 /h put
		Encoding 105 /i put
		Encoding 106 /j put
		Encoding 107 /k put
		Encoding 108 /l put
		Encoding 109 /m put
		Encoding 110 /n put
		Encoding 111 /o put
		Encoding 112 /p put
		Encoding 113 /q put
		Encoding 114 /r put
		Encoding 115 /s put
		Encoding 116 /t put
		Encoding 117 /u put
		Encoding 118 /v put
		Encoding 119 /w put
		Encoding 120 /x put
		Encoding 121 /y put
		Encoding 122 /z put
		Encoding 123 /braceleft put
		Encoding 124 /bar put
		Encoding 125 /braceright put
		Encoding 126 /asciitilde put
		Encoding 161 /exclamdown put
		Encoding 162 /cent put
		Encoding 163 /sterling put
		Encoding 164 /fraction put
		Encoding 165 /yen put
		Encoding 166 /florin put
		Encoding 167 /section put
		Encoding 168 /currency put
		Encoding 169 /quotesingle put
		Encoding 170 /quotedblleft put
		Encoding 171 /guillemotleft put
		Encoding 172 /guilsinglleft put
		Encoding 173 /guilsinglright put
		Encoding 174 /fi put
		Encoding 175 /fl put
		Encoding 177 /endash put
		Encoding 178 /dagger put
		Encoding 179 /daggerdbl put
		Encoding 180 /periodcentered put
		Encoding 182 /paragraph put
		Encoding 183 /bullet put
		Encoding 184 /quotesinglbase put
		Encoding 185 /quotedblbase put
		Encoding 186 /quotedblright put
		Encoding 187 /guillemotright put
		Encoding 188 /ellipsis put
		Encoding 189 /perthousand put
		Encoding 191 /questiondown put
		Encoding 193 /grave put
		Encoding 194 /acute put
		Encoding 195 /circumflex put
		Encoding 196 /tilde put
		Encoding 197 /macron put
		Encoding 198 /breve put
		Encoding 199 /dotaccent put
		Encoding 200 /dieresis put
		Encoding 202 /ring put
		Encoding 203 /cedilla put
		Encoding 205 /hungarumlaut put
		Encoding 206 /ogonek put
		Encoding 207 /caron put
		Encoding 208 /emdash put
		Encoding 225 /AE put
		Encoding 227 /ordfeminine put
		Encoding 232 /Lslash put
		Encoding 233 /Oslash put
		Encoding 234 /OE put
		Encoding 235 /ordmasculine put
		Encoding 241 /ae put
		Encoding 245 /dotlessi put
		Encoding 248 /lslash put
		Encoding 249 /oslash put
		Encoding 250 /oe put
		Encoding 251 /germandbls put
	/BuildGlyph
		{ 2 copy exch /Metrics get exch 
			2 copy known {get}{pop pop 1000.0} ifelse
			0
			0 -210 1652 952
			setcachedevice
			exch /CharProcs get exch
			2 copy known not
					{pop /.notdef}
				if
			get exec
		} bind def

	/BuildChar
		{ 1 index /Encoding get exch get
		  1 index /BuildGlyph get exec
	  } bind def
	/Metrics 150 dict def
		Metrics begin
		/.notdef 1000 def
		/space 329.58984375 def
		/exclam 313.4765625 def
		/quotedbl 451.66015625 def
		/numbersign 659.66796875 def
		/dollar 659.66796875 def
		/percent 783.203125 def
		/ampersand 744.62890625 def
		/quoteright 247.0703125 def
		/parenleft 370.60546875 def
		/parenright 370.60546875 def
		/asterisk 466.30859375 def
		/plus 795.41015625 def
		/comma 247.0703125 def
		/hyphen 638.671875 def
		/period 247.0703125 def
		/slash 565.4296875 def
		/zero 659.66796875 def
		/one 659.66796875 def
		/two 659.66796875 def
		/three 659.66796875 def
		/four 659.66796875 def
		/five 659.66796875 def
		/six 659.66796875 def
		/seven 659.66796875 def
		/eight 659.66796875 def
		/nine 659.66796875 def
		/colon 247.0703125 def
		/semicolon 247.0703125 def
		/less 795.41015625 def
		/equal 795.41015625 def
		/greater 795.41015625 def
		/question 497.0703125 def
		/at 844.23828125 def
		/A 736.328125 def
		/B 629.8828125 def
		/C 712.40234375 def
		/D 792.96875 def
		/E 600.5859375 def
		/F 574.21875 def
		/G 745.60546875 def
		/H 780.2734375 def
		/I 331.54296875 def
		/J 418.45703125 def
		/K 709.9609375 def
		/L 581.54296875 def
		/M 907.71484375 def
		/N 768.5546875 def
		/O 823.2421875 def
		/P 613.28125 def
		/Q 823.73046875 def
		/R 689.94140625 def
		/S 571.2890625 def
		/T 689.94140625 def
		/U 736.328125 def
		/V 698.73046875 def
		/W 903.80859375 def
		/X 666.9921875 def
		/Y 686.5234375 def
		/Z 644.53125 def
		/bracketleft 370.60546875 def
		/backslash 565.4296875 def
		/bracketright 370.60546875 def
		/asciicircum 659.66796875 def
		/underscore 500.0 def
		/quoteleft 638.671875 def
		/a 587.890625 def
		/b 662.59765625 def
		/c 532.2265625 def
		/d 662.59765625 def
		/e 585.9375 def
		/f 414.55078125 def
		/g 659.66796875 def
		/h 656.73828125 def
		/i 325.1953125 def
		/j 333.0078125 def
		/k 632.8125 def
		/l 325.1953125 def
		/m 969.7265625 def
		/n 656.73828125 def
		/o 638.671875 def
		/p 662.59765625 def
		/q 662.59765625 def
		/r 454.58984375 def
		/s 565.4296875 def
		/t 405.2734375 def
		/u 656.73828125 def
		/v 593.26171875 def
		/w 862.79296875 def
		/x 590.8203125 def
		/y 583.0078125 def
		/z 590.8203125 def
		/braceleft 370.60546875 def
		/bar 385.7421875 def
		/braceright 370.60546875 def
		/asciitilde 794.921875 def
		/exclamdown 313.4765625 def
		/cent 659.66796875 def
		/sterling 659.66796875 def
		/fraction 0.0 def
		/yen 659.66796875 def
		/florin 659.66796875 def
		/section 659.66796875 def
		/currency 659.66796875 def
		/quotesingle 247.0703125 def
		/quotedblleft 451.66015625 def
		/guillemotleft 569.3359375 def
		/guilsinglleft 346.19140625 def
		/guilsinglright 346.19140625 def
		/fi 677.734375 def
		/fl 677.734375 def
		/endash 638.671875 def
		/dagger 659.66796875 def
		/daggerdbl 659.66796875 def
		/periodcentered 638.671875 def
		/paragraph 659.66796875 def
		/bullet 623.53515625 def
		/quotesinglbase 247.0703125 def
		/quotedblbase 451.66015625 def
		/quotedblright 451.66015625 def
		/guillemotright 569.3359375 def
		/ellipsis 1000.0 def
		/perthousand 1162.59765625 def
		/questiondown 497.0703125 def
		/grave 638.671875 def
		/acute 638.671875 def
		/circumflex 638.671875 def
		/tilde 638.671875 def
		/macron 500.0 def
		/breve 638.671875 def
		/dotaccent 638.671875 def
		/dieresis 638.671875 def
		/ring 638.671875 def
		/cedilla 638.671875 def
		/hungarumlaut 750.0 def
		/ogonek 638.671875 def
		/caron 638.671875 def
		/emdash 638.671875 def
		/AE 957.51953125 def
		/ordfeminine 481.93359375 def
		/Lslash 587.40234375 def
		/Oslash 823.2421875 def
		/OE 1059.08203125 def
		/ordmasculine 481.93359375 def
		/ae 882.8125 def
		/dotlessi 325.1953125 def
		/lslash 355.46875 def
		/oslash 638.671875 def
		/oe 959.9609375 def
		/germandbls 661.1328125 def
	end
	/CharProcs 150 dict def
	CharProcs begin
			%define Glyph dictionary and start filling
	/space
		{
fill
		} def

	/exclam
		{
84 0 moveto
84 120 lineto
229 120 lineto
229 0 lineto
84 0 lineto
closepath
108 204 moveto
84 578 lineto
84 722 lineto
229 722 lineto
229 578 lineto
205 204 lineto
108 204 lineto
closepath
fill
		} def

	/quotedbl
		{
72 481 moveto
48 771 lineto
192 771 lineto
162 481 lineto
72 481 lineto
closepath
289 481 moveto
265 771 lineto
409 771 lineto
379 481 lineto
289 481 lineto
closepath
fill
		} def

	/numbersign
		{
100 0 moveto
152 208 lineto
19 208 lineto
33 280 lineto
170 280 lineto
211 442 lineto
65 442 lineto
80 515 lineto
229 515 lineto
281 722 lineto
355 722 lineto
304 515 lineto
432 515 lineto
483 722 lineto
558 722 lineto
506 515 lineto
640 515 lineto
625 442 lineto
488 442 lineto
447 280 lineto
593 280 lineto
579 208 lineto
429 208 lineto
377 0 lineto
303 0 lineto
355 208 lineto
227 208 lineto
175 0 lineto
100 0 lineto
closepath
245 280 moveto
373 280 lineto
414 442 lineto
286 442 lineto
245 280 lineto
closepath
fill
		} def

	/dollar
		{
296 -78 moveto
296 1 lineto
242 1 176 14 99 38  curveto
99 144 lineto
171 111 237 93 296 90  curveto
296 322 lineto
271 339 lineto
212 379 171 413 150 441  curveto
130 469 119 503 119 542  curveto
119 591 135 631 167 664  curveto
198 696 242 715 296 722  curveto
296 801 lineto
375 801 lineto
375 722 lineto
426 719 478 709 530 691  curveto
530 593 lineto
477 618 425 633 375 637  curveto
375 418 lineto
397 404 lineto
458 364 500 331 522 303  curveto
543 275 554 241 554 200  curveto
554 147 538 103 506 68  curveto
474 32 430 10 375 1  curveto
375 -78 lineto
296 -78 lineto
closepath
360 96 moveto
406 110 430 139 430 182  curveto
430 214 406 247 360 280  curveto
360 96 lineto
closepath
312 459 moveto
312 633 lineto
267 618 244 592 244 553  curveto
244 519 267 488 312 459  curveto
closepath
fill
		} def

	/percent
		{
58 -18 moveto
626 740 lineto
724 740 lineto
156 -18 lineto
58 -18 lineto
closepath
182 361 moveto
129 361 88 377 57 409  curveto
27 442 12 486 12 542  curveto
12 598 27 642 58 674  curveto
88 706 130 722 184 722  curveto
237 722 278 706 309 674  curveto
340 642 355 598 355 542  curveto
355 485 340 441 309 409  curveto
278 377 236 361 182 361  curveto
closepath
183 433 moveto
225 433 247 469 247 542  curveto
247 614 226 650 184 650  curveto
141 650 120 614 120 542  curveto
120 469 141 433 183 433  curveto
closepath
597 0 moveto
545 0 503 16 473 48  curveto
442 80 427 125 427 180  curveto
427 236 443 281 473 313  curveto
504 345 546 361 599 361  curveto
652 361 694 345 725 313  curveto
755 281 771 237 771 181  curveto
771 124 755 79 725 47  curveto
694 15 652 0 597 0  curveto
closepath
598 72 moveto
641 72 662 108 662 181  curveto
662 253 641 289 599 289  curveto
557 289 536 252 536 180  curveto
536 108 556 72 598 72  curveto
closepath
fill
		} def

	/ampersand
		{
691 0 moveto
521 0 lineto
489 38 lineto
432 0 370 -18 301 -18  curveto
223 -18 159 3 109 47  curveto
58 90 33 146 33 213  curveto
33 312 93 387 213 437  curveto
178 497 161 547 161 585  curveto
161 629 180 666 219 696  curveto
257 726 304 741 361 741  curveto
415 741 460 726 495 698  curveto
530 669 548 632 548 587  curveto
548 518 495 459 388 409  curveto
430 333 478 260 535 192  curveto
568 240 584 306 584 391  curveto
584 402 lineto
706 402 lineto
706 296 667 201 590 119  curveto
622 78 656 38 691 0  curveto
closepath
262 362 moveto
203 335 173 294 173 239  curveto
173 193 188 154 218 123  curveto
247 91 284 75 327 75  curveto
364 75 399 86 432 109  curveto
378 177 327 251 280 332  curveto
262 362 lineto
closepath
343 477 moveto
399 506 427 542 427 584  curveto
427 628 406 650 363 650  curveto
320 650 298 629 298 587  curveto
298 559 313 522 343 477  curveto
closepath
fill
		} def

	/quoteright
		{
78 469 moveto
48 771 lineto
205 771 lineto
168 469 lineto
78 469 lineto
closepath
fill
		} def

	/parenleft
		{
322 776 moveto
322 683 lineto
235 596 192 472 192 313  curveto
192 153 235 30 322 -57  curveto
322 -150 lineto
243 -107 179 -44 131 40  curveto
83 125 60 216 60 313  curveto
60 410 83 501 130 584  curveto
177 667 241 731 322 776  curveto
closepath
fill
		} def

	/parenright
		{
48 776 moveto
48 683 lineto
135 596 178 472 178 313  curveto
178 153 135 30 48 -57  curveto
48 -150 lineto
127 -107 191 -44 239 40  curveto
287 125 310 216 310 313  curveto
310 410 287 501 240 584  curveto
193 667 129 731 48 776  curveto
closepath
fill
		} def

	/asterisk
		{
266 576 moveto
391 646 lineto
423 545 lineto
281 528 lineto
282 532 282 535 282 538  curveto
282 552 277 564 266 576  curveto
closepath
279 519 moveto
383 421 lineto
298 359 lineto
237 489 lineto
256 492 269 502 279 519  curveto
closepath
228 489 moveto
167 359 lineto
82 421 lineto
187 519 lineto
196 502 209 492 228 489  curveto
closepath
184 528 moveto
42 545 lineto
74 646 lineto
199 576 lineto
188 564 183 552 183 538  curveto
183 535 183 532 184 528  curveto
closepath
180 722 moveto
285 722 lineto
258 582 lineto
250 586 241 588 232 588  curveto
224 588 215 586 207 582  curveto
180 722 lineto
closepath
fill
		} def

	/plus
		{
355 0 moveto
355 247 lineto
108 247 lineto
108 331 lineto
355 331 lineto
355 578 lineto
439 578 lineto
439 331 lineto
686 331 lineto
686 247 lineto
439 247 lineto
439 0 lineto
355 0 lineto
closepath
fill
		} def

	/comma
		{
105 0 moveto
45 0 lineto
45 156 lineto
202 156 lineto
202 35 lineto
202 -92 149 -156 45 -156  curveto
45 -102 lineto
85 -102 105 -73 105 -15  curveto
105 0 lineto
closepath
fill
		} def

	/hyphen
		{
96 265 moveto
96 355 lineto
542 355 lineto
542 265 lineto
96 265 lineto
closepath
fill
		} def

	/period
		{
45 0 moveto
45 156 lineto
202 156 lineto
202 0 lineto
45 0 lineto
closepath
fill
		} def

	/slash
		{
108 -144 moveto
368 722 lineto
456 722 lineto
196 -144 lineto
108 -144 lineto
closepath
fill
		} def

	/zero
		{
326 -18 moveto
244 -18 177 17 126 87  curveto
75 157 49 249 49 361  curveto
49 474 75 566 126 636  curveto
178 705 246 740 330 740  curveto
413 740 480 705 532 636  curveto
584 566 609 475 609 363  curveto
609 247 584 155 532 85  curveto
480 16 412 -18 326 -18  curveto
closepath
328 72 moveto
413 72 456 168 456 361  curveto
456 554 414 650 330 650  curveto
245 650 203 554 203 361  curveto
203 168 245 72 328 72  curveto
closepath
fill
		} def

	/one
		{
140 0 moveto
140 84 lineto
285 84 lineto
285 617 lineto
140 581 lineto
140 668 lineto
430 740 lineto
430 84 lineto
574 84 lineto
574 0 lineto
140 0 lineto
closepath
fill
		} def

	/two
		{
71 0 moveto
71 114 lineto
79 125 lineto
118 176 158 220 198 255  curveto
257 308 lineto
355 394 403 469 403 534  curveto
403 609 360 647 274 647  curveto
221 647 160 629 90 593  curveto
90 699 lineto
163 727 235 740 303 740  curveto
380 740 442 722 488 686  curveto
534 649 557 601 557 540  curveto
557 498 546 460 523 425  curveto
501 391 461 351 405 305  curveto
356 266 lineto
288 211 248 161 235 114  curveto
554 114 lineto
554 0 lineto
71 0 lineto
closepath
fill
		} def

	/three
		{
98 5 moveto
98 113 lineto
170 86 229 72 275 72  curveto
319 72 353 83 380 105  curveto
406 127 419 157 419 193  curveto
419 289 349 336 209 336  curveto
165 336 lineto
165 423 lineto
203 423 lineto
333 423 399 466 399 552  curveto
399 617 359 650 278 650  curveto
225 650 168 636 108 609  curveto
108 708 lineto
171 730 238 741 309 741  curveto
383 741 441 725 484 695  curveto
526 664 547 622 547 568  curveto
547 483 494 422 387 387  curveto
509 359 570 294 570 192  curveto
570 127 545 76 497 38  curveto
448 0 381 -18 297 -18  curveto
226 -18 160 -10 98 5  curveto
closepath
fill
		} def

	/four
		{
384 0 moveto
384 192 lineto
46 192 lineto
46 301 lineto
378 722 lineto
510 722 lineto
510 301 lineto
595 301 lineto
595 192 lineto
510 192 lineto
510 0 lineto
384 0 lineto
closepath
162 301 moveto
387 301 lineto
387 584 lineto
162 301 lineto
closepath
fill
		} def

	/five
		{
124 2 moveto
124 107 lineto
185 84 236 72 277 72  curveto
319 72 351 84 376 109  curveto
400 133 412 166 412 208  curveto
412 312 338 364 189 364  curveto
171 364 154 362 136 359  curveto
136 722 lineto
551 722 lineto
551 608 lineto
242 608 lineto
234 452 lineto
339 452 420 431 478 388  curveto
537 346 566 286 566 209  curveto
566 139 540 83 489 42  curveto
438 2 368 -18 279 -18  curveto
242 -18 190 -11 124 2  curveto
closepath
fill
		} def

	/six
		{
200 383 moveto
245 437 303 465 374 465  curveto
438 465 492 444 534 401  curveto
576 359 598 305 598 240  curveto
598 164 573 102 524 54  curveto
476 6 413 -18 336 -18  curveto
246 -18 176 13 125 77  curveto
75 141 50 230 50 344  curveto
50 470 79 567 136 636  curveto
193 706 274 741 378 741  curveto
427 741 487 732 560 714  curveto
560 609 lineto
494 637 435 650 383 650  curveto
325 650 280 627 248 580  curveto
216 533 200 467 200 383  curveto
closepath
453 216 moveto
453 265 442 304 421 333  curveto
399 362 370 376 333 376  curveto
297 376 267 363 243 337  curveto
219 311 207 279 207 240  curveto
207 190 218 149 242 118  curveto
266 87 297 72 335 72  curveto
371 72 400 85 421 111  curveto
442 137 453 172 453 216  curveto
closepath
fill
		} def

	/seven
		{
149 0 moveto
156 54 170 102 190 143  curveto
210 184 255 255 325 357  curveto
495 605 lineto
119 605 lineto
119 722 lineto
613 722 lineto
613 605 lineto
518 486 444 372 390 265  curveto
336 158 310 69 310 0  curveto
149 0 lineto
closepath
fill
		} def

	/eight
		{
213 387 moveto
144 433 109 488 109 553  curveto
109 609 131 654 175 689  curveto
219 723 276 741 348 741  curveto
415 741 468 726 509 696  curveto
549 667 569 627 569 578  curveto
569 514 528 453 447 396  curveto
550 343 601 275 601 194  curveto
601 130 576 79 526 40  curveto
476 1 410 -18 329 -18  curveto
251 -18 188 0 140 35  curveto
93 71 69 118 69 177  curveto
69 262 117 332 213 387  curveto
closepath
372 437 moveto
420 475 444 515 444 558  curveto
444 586 434 608 414 625  curveto
394 642 368 650 335 650  curveto
305 650 281 643 262 628  curveto
243 613 234 594 234 570  curveto
234 547 243 526 262 509  curveto
280 491 317 467 372 437  curveto
closepath
285 338 moveto
232 295 206 249 206 200  curveto
206 162 219 131 245 107  curveto
272 83 305 70 345 70  curveto
381 70 410 80 434 99  curveto
458 118 470 142 470 171  curveto
470 196 462 217 446 234  curveto
430 252 399 274 352 300  curveto
285 338 lineto
closepath
fill
		} def

	/nine
		{
101 5 moveto
101 109 lineto
163 84 220 72 273 72  curveto
330 72 375 95 408 143  curveto
441 190 458 255 458 336  curveto
412 281 355 254 288 254  curveto
225 254 171 276 128 320  curveto
85 364 63 418 63 482  curveto
63 558 87 619 136 668  curveto
185 716 248 740 324 740  curveto
413 740 483 708 534 645  curveto
585 582 610 494 610 382  curveto
610 257 580 159 521 88  curveto
461 17 379 -18 274 -18  curveto
229 -18 172 -10 101 5  curveto
closepath
208 505 moveto
208 455 218 415 240 386  curveto
262 357 291 343 328 343  curveto
363 343 393 356 417 382  curveto
441 409 453 441 453 479  curveto
453 531 441 572 418 603  curveto
394 634 363 650 325 650  curveto
289 650 260 637 239 611  curveto
218 585 208 549 208 505  curveto
closepath
fill
		} def

	/colon
		{
51 0 moveto
51 144 lineto
195 144 lineto
195 0 lineto
51 0 lineto
closepath
51 391 moveto
51 536 lineto
195 536 lineto
195 391 lineto
51 391 lineto
closepath
fill
		} def

	/semicolon
		{
105 0 moveto
51 0 lineto
51 144 lineto
195 144 lineto
195 35 lineto
195 -84 147 -148 51 -156  curveto
51 -102 lineto
87 -92 105 -62 105 -15  curveto
105 0 lineto
closepath
51 391 moveto
51 536 lineto
195 536 lineto
195 391 lineto
51 391 lineto
closepath
fill
		} def

	/less
		{
686 0 moveto
108 289 lineto
686 578 lineto
686 483 lineto
297 289 lineto
297 288 lineto
686 94 lineto
686 0 lineto
closepath
fill
		} def

	/equal
		{
108 150 moveto
108 234 lineto
686 234 lineto
686 150 lineto
108 150 lineto
closepath
108 343 moveto
108 427 lineto
686 427 lineto
686 343 lineto
108 343 lineto
closepath
fill
		} def

	/greater
		{
108 0 moveto
686 289 lineto
108 578 lineto
108 483 lineto
497 289 lineto
497 288 lineto
108 94 lineto
108 0 lineto
closepath
fill
		} def

	/question
		{
136 0 moveto
136 120 lineto
281 120 lineto
281 0 lineto
136 0 lineto
closepath
281 204 moveto
136 204 lineto
136 218 lineto
136 270 160 323 208 376  curveto
243 415 lineto
290 466 313 513 313 553  curveto
313 614 275 644 199 644  curveto
150 644 93 630 30 601  curveto
30 711 lineto
95 730 158 740 220 740  curveto
297 740 358 725 403 696  curveto
447 666 470 626 470 575  curveto
470 528 443 479 389 428  curveto
356 397 lineto
326 368 306 343 296 323  curveto
286 303 281 278 281 246  curveto
281 204 lineto
closepath
fill
		} def

	/at
		{
518 21 moveto
461 -4 404 -18 347 -18  curveto
254 -18 178 10 118 66  curveto
59 123 29 194 29 282  curveto
29 391 69 492 148 583  curveto
239 688 351 740 485 740  curveto
576 740 653 711 714 653  curveto
775 595 806 522 806 435  curveto
806 353 781 284 731 228  curveto
681 172 620 144 547 144  curveto
494 144 467 162 467 197  curveto
467 213 476 250 495 310  curveto
484 310 lineto
459 261 428 221 392 190  curveto
355 159 321 144 289 144  curveto
230 144 201 182 201 257  curveto
201 334 227 406 280 472  curveto
333 539 389 572 451 572  curveto
458 572 469 571 482 569  curveto
502 566 523 565 546 565  curveto
612 565 lineto
558 292 lineto
554 276 552 260 552 245  curveto
552 223 565 212 590 212  curveto
629 212 664 234 695 280  curveto
727 325 743 375 743 430  curveto
743 500 718 559 668 606  curveto
619 654 557 677 484 677  curveto
372 677 276 633 198 545  curveto
127 466 92 378 92 283  curveto
92 214 116 156 163 112  curveto
211 67 272 44 346 44  curveto
396 44 446 56 497 80  curveto
518 21 lineto
closepath
493 402 moveto
512 493 lineto
486 505 463 511 442 511  curveto
400 511 364 488 334 442  curveto
304 397 289 342 289 279  curveto
289 239 300 219 323 219  curveto
340 219 366 237 400 274  curveto
434 310 465 353 493 402  curveto
closepath
fill
		} def

	/A
		{
11 0 moveto
292 722 lineto
442 722 lineto
724 0 lineto
569 0 lineto
494 192 lineto
195 192 lineto
120 0 lineto
11 0 lineto
closepath
232 289 moveto
457 289 lineto
345 577 lineto
232 289 lineto
closepath
fill
		} def

	/B
		{
90 0 moveto
90 722 lineto
335 722 lineto
408 722 463 708 501 681  curveto
539 654 558 614 558 562  curveto
558 475 500 413 385 377  curveto
520 344 587 278 587 178  curveto
587 121 568 76 528 46  curveto
489 15 432 0 358 0  curveto
90 0 lineto
closepath
231 421 moveto
267 421 lineto
309 421 343 432 368 453  curveto
393 473 405 502 405 538  curveto
405 571 395 593 375 605  curveto
355 617 317 623 262 623  curveto
231 623 lineto
231 421 lineto
closepath
231 102 moveto
264 102 lineto
327 102 370 109 394 122  curveto
418 136 430 160 430 196  curveto
430 233 414 264 382 288  curveto
350 312 310 325 261 325  curveto
231 325 lineto
231 102 lineto
closepath
fill
		} def

	/C
		{
671 28 moveto
601 -2 518 -18 421 -18  curveto
302 -18 210 15 144 82  curveto
78 148 45 241 45 361  curveto
45 483 78 576 145 642  curveto
211 707 306 740 430 740  curveto
508 740 587 731 665 712  curveto
665 595 lineto
576 626 502 641 443 641  curveto
367 641 308 617 267 569  curveto
225 520 205 452 205 363  curveto
205 276 227 208 271 159  curveto
316 110 377 85 457 85  curveto
528 85 599 103 671 139  curveto
671 28 lineto
closepath
fill
		} def

	/D
		{
90 0 moveto
90 722 lineto
401 722 lineto
513 722 599 692 658 633  curveto
718 574 748 488 748 376  curveto
748 257 716 164 653 98  curveto
590 32 501 0 388 0  curveto
90 0 lineto
closepath
240 102 moveto
353 102 lineto
432 102 491 124 530 168  curveto
568 212 588 278 588 367  curveto
588 436 572 494 541 540  curveto
520 571 494 593 463 605  curveto
433 617 389 623 331 623  curveto
240 623 lineto
240 102 lineto
closepath
fill
		} def

	/E
		{
90 0 moveto
90 722 lineto
542 722 lineto
542 623 lineto
240 623 lineto
240 421 lineto
487 421 lineto
487 325 lineto
240 325 lineto
240 102 lineto
564 102 lineto
564 0 lineto
90 0 lineto
closepath
fill
		} def

	/F
		{
90 0 moveto
90 722 lineto
544 722 lineto
544 623 lineto
240 623 lineto
240 403 lineto
490 403 lineto
490 304 lineto
240 304 lineto
240 0 lineto
90 0 lineto
closepath
fill
		} def

	/G
		{
667 17 moveto
576 -6 498 -18 433 -18  curveto
308 -18 212 14 145 80  curveto
78 145 45 239 45 362  curveto
45 483 78 577 145 642  curveto
212 708 307 740 431 740  curveto
510 740 589 731 667 712  curveto
667 595 lineto
576 626 502 641 444 641  curveto
368 641 309 617 267 568  curveto
225 519 205 450 205 360  curveto
205 274 227 206 271 156  curveto
316 107 378 83 456 83  curveto
473 83 493 85 517 90  curveto
517 328 lineto
667 328 lineto
667 17 lineto
closepath
fill
		} def

	/H
		{
90 0 moveto
90 722 lineto
240 722 lineto
240 429 lineto
539 429 lineto
539 722 lineto
689 722 lineto
689 0 lineto
539 0 lineto
539 329 lineto
240 329 lineto
240 0 lineto
90 0 lineto
closepath
fill
		} def

	/I
		{
90 0 moveto
90 722 lineto
240 722 lineto
240 0 lineto
90 0 lineto
closepath
fill
		} def

	/J
		{
-33 -126 moveto
-34 -19 lineto
4 -34 45 -42 86 -42  curveto
120 -42 144 -32 157 -13  curveto
170 5 177 40 177 89  curveto
177 722 lineto
328 722 lineto
328 105 lineto
328 17 310 -46 273 -85  curveto
237 -125 178 -144 96 -144  curveto
55 -144 12 -138 -33 -126  curveto
closepath
fill
		} def

	/K
		{
90 0 moveto
90 722 lineto
234 722 lineto
234 372 lineto
511 722 lineto
636 722 lineto
385 398 lineto
696 0 lineto
508 0 lineto
234 355 lineto
234 0 lineto
90 0 lineto
closepath
fill
		} def

	/L
		{
90 0 moveto
90 722 lineto
240 722 lineto
240 102 lineto
566 102 lineto
566 0 lineto
90 0 lineto
closepath
fill
		} def

	/M
		{
90 0 moveto
90 722 lineto
289 722 lineto
463 214 lineto
642 722 lineto
817 722 lineto
817 0 lineto
678 0 lineto
678 545 lineto
502 48 lineto
381 48 lineto
208 552 lineto
208 0 lineto
90 0 lineto
closepath
fill
		} def

	/N
		{
90 0 moveto
90 722 lineto
222 722 lineto
557 229 lineto
557 722 lineto
678 722 lineto
678 0 lineto
543 0 lineto
210 493 lineto
210 0 lineto
90 0 lineto
closepath
fill
		} def

	/O
		{
407 -18 moveto
297 -18 209 16 144 85  curveto
78 154 45 246 45 361  curveto
45 477 78 569 144 638  curveto
210 706 299 740 412 740  curveto
523 740 612 706 678 638  curveto
745 569 778 478 778 362  curveto
778 244 745 152 678 83  curveto
612 15 522 -18 407 -18  curveto
closepath
409 81 moveto
473 81 524 106 562 157  curveto
599 208 618 276 618 363  curveto
618 447 599 514 562 565  curveto
524 616 474 641 412 641  curveto
349 641 299 616 261 565  curveto
223 514 205 446 205 361  curveto
205 277 223 209 261 158  curveto
298 107 347 81 409 81  curveto
closepath
fill
		} def

	/P
		{
90 0 moveto
90 722 lineto
342 722 lineto
430 722 492 707 530 678  curveto
568 649 586 599 586 530  curveto
586 452 561 391 511 348  curveto
461 304 390 283 300 283  curveto
237 283 lineto
237 0 lineto
90 0 lineto
closepath
237 382 moveto
267 382 lineto
318 382 359 394 388 418  curveto
418 442 433 474 433 515  curveto
433 587 387 623 296 623  curveto
237 623 lineto
237 382 lineto
closepath
fill
		} def

	/Q
		{
775 -144 moveto
646 -110 540 -67 459 -15  curveto
435 -17 418 -18 406 -18  curveto
297 -18 209 16 144 85  curveto
78 154 45 246 45 361  curveto
45 477 78 569 144 638  curveto
210 706 299 740 412 740  curveto
524 740 613 706 679 637  curveto
745 569 778 476 778 359  curveto
778 195 714 81 585 16  curveto
680 -15 776 -37 873 -47  curveto
775 -144 lineto
closepath
409 81 moveto
473 81 524 106 562 157  curveto
599 207 618 276 618 362  curveto
618 447 599 514 562 565  curveto
524 616 474 641 412 641  curveto
349 641 299 616 261 565  curveto
223 514 205 446 205 361  curveto
205 277 223 209 261 158  curveto
298 107 348 81 409 81  curveto
closepath
fill
		} def

	/R
		{
90 0 moveto
90 722 lineto
360 722 lineto
507 722 581 662 581 543  curveto
581 498 568 458 543 421  curveto
518 385 484 356 440 337  curveto
677 0 lineto
494 0 lineto
314 295 lineto
231 295 lineto
231 0 lineto
90 0 lineto
closepath
231 394 moveto
266 394 lineto
375 394 430 438 430 526  curveto
430 591 381 623 284 623  curveto
231 623 lineto
231 394 lineto
closepath
fill
		} def

	/S
		{
49 6 moveto
49 130 lineto
127 97 194 81 249 81  curveto
288 81 318 90 341 107  curveto
363 124 374 148 374 177  curveto
374 201 367 220 353 237  curveto
339 253 312 272 273 294  curveto
225 321 lineto
160 357 115 392 88 426  curveto
61 459 48 498 48 542  curveto
48 602 70 650 114 686  curveto
157 722 215 740 287 740  curveto
345 740 410 732 482 715  curveto
482 600 lineto
408 627 350 641 307 641  curveto
273 641 247 634 227 619  curveto
207 604 197 585 197 561  curveto
197 541 204 523 218 508  curveto
232 493 258 475 297 453  curveto
349 424 lineto
418 385 466 349 493 316  curveto
519 284 532 243 532 196  curveto
532 129 507 77 458 39  curveto
408 0 339 -18 251 -18  curveto
194 -18 126 -9 49 6  curveto
closepath
fill
		} def

	/T
		{
269 0 moveto
269 623 lineto
10 623 lineto
10 722 lineto
679 722 lineto
679 623 lineto
420 623 lineto
420 0 lineto
269 0 lineto
closepath
fill
		} def

	/U
		{
84 722 moveto
234 722 lineto
234 279 lineto
234 209 246 159 269 128  curveto
292 97 329 81 381 81  curveto
430 81 466 96 488 125  curveto
510 155 521 203 521 269  curveto
521 722 lineto
651 722 lineto
651 278 lineto
651 212 645 161 632 126  curveto
620 91 597 60 563 35  curveto
517 0 455 -18 378 -18  curveto
295 -18 228 0 178 38  curveto
143 64 119 95 105 131  curveto
91 166 84 216 84 280  curveto
84 722 lineto
closepath
fill
		} def

	/V
		{
279 0 moveto
12 722 lineto
172 722 lineto
379 163 lineto
580 722 lineto
688 722 lineto
430 0 lineto
279 0 lineto
closepath
fill
		} def

	/W
		{
190 0 moveto
10 722 lineto
152 722 lineto
284 193 lineto
408 722 lineto
534 722 lineto
652 196 lineto
791 722 lineto
895 722 lineto
705 0 lineto
562 0 lineto
450 495 lineto
333 0 lineto
190 0 lineto
closepath
fill
		} def

	/X
		{
23 0 moveto
255 355 lineto
34 722 lineto
209 722 lineto
356 479 lineto
515 722 lineto
637 722 lineto
415 381 lineto
645 0 lineto
470 0 lineto
313 258 lineto
145 0 lineto
23 0 lineto
closepath
fill
		} def

	/Y
		{
262 0 moveto
262 302 lineto
19 722 lineto
185 722 lineto
361 417 lineto
545 722 lineto
665 722 lineto
412 303 lineto
412 0 lineto
262 0 lineto
closepath
fill
		} def

	/Z
		{
51 0 moveto
51 102 lineto
411 623 lineto
72 623 lineto
72 722 lineto
585 722 lineto
585 623 lineto
226 102 lineto
585 102 lineto
585 0 lineto
51 0 lineto
closepath
fill
		} def

	/bracketleft
		{
96 -144 moveto
96 771 lineto
322 771 lineto
322 686 lineto
216 686 lineto
216 -60 lineto
322 -60 lineto
322 -144 lineto
96 -144 lineto
closepath
fill
		} def

	/backslash
		{
456 -144 moveto
196 722 lineto
108 722 lineto
368 -144 lineto
456 -144 lineto
closepath
fill
		} def

	/bracketright
		{
274 -144 moveto
274 771 lineto
48 771 lineto
48 686 lineto
154 686 lineto
154 -60 lineto
48 -60 lineto
48 -144 lineto
274 -144 lineto
closepath
fill
		} def

	/asciicircum
		{
618 192 moveto
524 192 lineto
330 581 lineto
329 581 lineto
134 192 lineto
40 192 lineto
329 771 lineto
618 192 lineto
closepath
fill
		} def

	/underscore
		{
42 -78 moveto
42 0 lineto
457 0 lineto
457 -78 lineto
42 -78 lineto
closepath
fill
		} def

	/quoteleft
		{
423 626 moveto
330 626 lineto
173 783 lineto
305 783 lineto
423 626 lineto
closepath
fill
		} def

	/a
		{
353 57 moveto
304 11 253 -12 198 -12  curveto
151 -12 113 2 83 30  curveto
54 59 40 96 40 142  curveto
40 201 63 246 111 279  curveto
158 311 226 327 314 327  curveto
353 327 lineto
353 375 lineto
353 431 321 459 257 459  curveto
201 459 144 443 86 411  curveto
86 511 lineto
152 535 217 548 281 548  curveto
421 548 491 492 491 380  curveto
491 143 lineto
491 101 505 80 532 80  curveto
537 80 543 81 551 82  curveto
554 1 lineto
524 -7 497 -12 473 -12  curveto
414 -12 376 11 359 57  curveto
353 57 lineto
closepath
353 135 moveto
353 244 lineto
318 244 lineto
225 244 178 214 178 156  curveto
178 136 185 119 198 106  curveto
212 92 229 85 249 85  curveto
282 85 317 102 353 135  curveto
closepath
fill
		} def

	/b
		{
90 0 moveto
90 771 lineto
234 771 lineto
234 435 lineto
271 510 330 548 410 548  curveto
474 548 525 524 562 477  curveto
599 430 617 365 617 282  curveto
617 193 596 121 555 68  curveto
513 14 457 -12 388 -12  curveto
328 -12 277 9 234 54  curveto
208 0 lineto
90 0 lineto
closepath
234 140 moveto
270 101 307 81 347 81  curveto
382 81 410 98 432 133  curveto
453 167 463 213 463 270  curveto
463 380 428 435 357 435  curveto
315 435 274 407 234 352  curveto
234 140 lineto
closepath
fill
		} def

	/c
		{
485 11 moveto
425 -4 370 -12 319 -12  curveto
233 -12 166 12 116 63  curveto
66 113 42 181 42 268  curveto
42 356 67 424 118 474  curveto
169 523 240 548 330 548  curveto
374 548 424 541 481 527  curveto
481 422 lineto
422 442 374 451 339 451  curveto
296 451 261 435 234 401  curveto
208 368 195 324 195 269  curveto
195 213 209 168 238 134  curveto
266 100 304 83 352 83  curveto
395 83 439 92 485 111  curveto
485 11 lineto
closepath
fill
		} def

	/d
		{
427 0 moveto
427 101 lineto
390 25 332 -12 252 -12  curveto
187 -12 137 11 100 58  curveto
63 105 45 170 45 253  curveto
45 343 66 414 107 468  curveto
149 521 204 548 274 548  curveto
330 548 381 526 427 481  curveto
427 771 lineto
572 771 lineto
572 0 lineto
427 0 lineto
closepath
427 396 moveto
392 435 355 454 315 454  curveto
280 454 252 437 230 403  curveto
209 369 199 323 199 265  curveto
199 155 234 101 304 101  curveto
347 101 388 128 427 183  curveto
427 396 lineto
closepath
fill
		} def

	/e
		{
526 18 moveto
458 -2 393 -12 331 -12  curveto
242 -12 171 13 119 63  curveto
67 114 42 184 42 271  curveto
42 354 65 421 113 472  curveto
160 523 222 548 300 548  curveto
379 548 436 523 472 474  curveto
508 424 526 346 526 239  curveto
194 239 lineto
204 137 260 85 362 85  curveto
411 85 465 97 526 119  curveto
526 18 lineto
closepath
192 320 moveto
384 320 lineto
384 412 355 458 296 458  curveto
236 458 201 412 192 320  curveto
closepath
fill
		} def

	/f
		{
105 0 moveto
105 445 lineto
31 445 lineto
31 536 lineto
105 536 lineto
105 574 lineto
105 713 171 783 303 783  curveto
345 783 389 777 435 764  curveto
435 667 lineto
394 684 357 692 324 692  curveto
274 692 250 655 250 580  curveto
250 536 lineto
385 536 lineto
385 445 lineto
250 445 lineto
250 0 lineto
105 0 lineto
closepath
fill
		} def

	/g
		{
94 -166 moveto
105 -61 lineto
165 -88 222 -102 276 -102  curveto
329 -102 368 -91 392 -68  curveto
415 -45 427 -8 427 42  curveto
427 115 lineto
392 38 334 0 253 0  curveto
189 0 139 23 101 71  curveto
64 119 45 183 45 265  curveto
45 350 66 419 108 470  curveto
150 522 206 548 275 548  curveto
330 548 381 526 427 481  curveto
442 536 lineto
572 536 lineto
572 126 lineto
572 45 567 -13 557 -49  curveto
547 -85 528 -116 500 -142  curveto
451 -183 383 -204 296 -204  curveto
234 -204 166 -191 94 -166  curveto
closepath
427 199 moveto
427 397 lineto
392 436 356 456 318 456  curveto
281 456 252 439 231 406  curveto
209 373 199 328 199 272  curveto
199 168 232 115 300 115  curveto
346 115 389 143 427 199  curveto
closepath
fill
		} def

	/h
		{
90 0 moveto
90 771 lineto
234 771 lineto
234 435 lineto
282 510 342 548 417 548  curveto
465 548 503 533 530 502  curveto
558 472 572 431 572 378  curveto
572 0 lineto
427 0 lineto
427 343 lineto
427 404 407 434 367 434  curveto
321 434 277 402 234 337  curveto
234 0 lineto
90 0 lineto
closepath
fill
		} def

	/i
		{
90 0 moveto
90 536 lineto
234 536 lineto
234 0 lineto
90 0 lineto
closepath
90 626 moveto
90 747 lineto
234 747 lineto
234 626 lineto
90 626 lineto
closepath
fill
		} def

	/j
		{
-87 -182 moveto
-87 -85 lineto
-45 -104 -9 -114 20 -114  curveto
48 -114 68 -105 80 -88  curveto
92 -70 98 -41 98 0  curveto
98 536 lineto
242 536 lineto
242 9 lineto
242 -65 225 -119 192 -153  curveto
159 -187 105 -205 32 -205  curveto
0 -205 -39 -197 -87 -182  curveto
closepath
98 626 moveto
98 747 lineto
242 747 lineto
242 626 lineto
98 626 lineto
closepath
fill
		} def

	/k
		{
90 0 moveto
90 771 lineto
234 771 lineto
234 286 lineto
244 286 lineto
435 536 lineto
555 536 lineto
378 306 lineto
610 0 lineto
434 0 lineto
244 268 lineto
234 268 lineto
234 0 lineto
90 0 lineto
closepath
fill
		} def

	/l
		{
90 0 moveto
90 771 lineto
234 771 lineto
234 0 lineto
90 0 lineto
closepath
fill
		} def

	/m
		{
90 0 moveto
90 536 lineto
229 536 lineto
229 435 lineto
271 510 331 548 409 548  curveto
450 548 483 538 509 518  curveto
535 498 551 470 557 435  curveto
607 510 667 548 738 548  curveto
836 548 885 494 885 386  curveto
885 0 lineto
747 0 lineto
747 338 lineto
747 402 725 434 683 434  curveto
640 434 598 402 557 340  curveto
557 0 lineto
418 0 lineto
418 338 lineto
418 402 397 434 354 434  curveto
311 434 270 403 229 340  curveto
229 0 lineto
90 0 lineto
closepath
fill
		} def

	/n
		{
90 0 moveto
90 536 lineto
234 536 lineto
234 435 lineto
282 510 342 548 417 548  curveto
465 548 503 533 530 502  curveto
558 472 572 431 572 378  curveto
572 0 lineto
427 0 lineto
427 343 lineto
427 404 407 434 367 434  curveto
321 434 277 402 234 337  curveto
234 0 lineto
90 0 lineto
closepath
fill
		} def

	/o
		{
315 -12 moveto
231 -12 165 13 115 63  curveto
66 114 42 182 42 268  curveto
42 354 66 423 116 473  curveto
166 523 233 548 318 548  curveto
404 548 472 523 521 473  curveto
571 423 596 354 596 269  curveto
596 181 571 112 521 62  curveto
471 12 403 -12 315 -12  curveto
closepath
317 78 moveto
400 78 442 141 442 269  curveto
442 327 431 373 409 407  curveto
387 441 357 458 318 458  curveto
280 458 250 441 228 407  curveto
206 373 195 326 195 268  curveto
195 209 206 163 228 129  curveto
250 95 280 78 317 78  curveto
closepath
fill
		} def

	/p
		{
90 -192 moveto
90 536 lineto
234 536 lineto
234 435 lineto
271 510 330 548 410 548  curveto
474 548 525 524 562 477  curveto
599 430 617 365 617 282  curveto
617 192 596 121 555 67  curveto
513 14 457 -12 387 -12  curveto
331 -12 280 9 234 54  curveto
234 -192 lineto
90 -192 lineto
closepath
234 140 moveto
270 101 307 81 347 81  curveto
382 81 410 98 432 133  curveto
453 167 463 213 463 270  curveto
463 380 428 435 357 435  curveto
315 435 274 407 234 352  curveto
234 140 lineto
closepath
fill
		} def

	/q
		{
427 -192 moveto
427 101 lineto
390 25 332 -12 252 -12  curveto
187 -12 137 11 100 58  curveto
63 105 45 170 45 253  curveto
45 343 66 414 107 468  curveto
149 521 204 548 274 548  curveto
330 548 381 526 427 481  curveto
445 536 lineto
572 536 lineto
572 -192 lineto
427 -192 lineto
closepath
427 396 moveto
392 435 355 454 315 454  curveto
280 454 252 437 230 403  curveto
209 369 199 323 199 265  curveto
199 155 234 101 304 101  curveto
347 101 388 128 427 183  curveto
427 396 lineto
closepath
fill
		} def

	/r
		{
90 0 moveto
90 536 lineto
234 536 lineto
234 435 lineto
272 510 329 548 405 548  curveto
414 548 423 547 432 545  curveto
432 416 lineto
412 423 393 427 375 427  curveto
317 427 270 398 234 340  curveto
234 0 lineto
90 0 lineto
closepath
fill
		} def

	/s
		{
76 17 moveto
76 123 lineto
147 93 208 78 259 78  curveto
319 78 348 98 348 138  curveto
348 164 324 187 275 207  curveto
226 226 lineto
173 248 135 271 112 295  curveto
90 320 78 351 78 387  curveto
78 438 97 477 136 506  curveto
175 534 229 548 299 548  curveto
342 548 394 541 455 529  curveto
455 427 lineto
397 447 349 458 311 458  curveto
251 458 221 439 221 402  curveto
221 377 243 357 287 340  curveto
329 324 lineto
392 300 436 276 460 251  curveto
485 227 497 196 497 157  curveto
497 107 476 66 434 34  curveto
392 3 338 -12 271 -12  curveto
207 -12 141 -2 76 17  curveto
closepath
fill
		} def

	/t
		{
366 2 moveto
332 -7 305 -12 285 -12  curveto
159 -12 97 46 97 163  curveto
97 445 lineto
37 445 lineto
37 536 lineto
97 536 lineto
97 626 lineto
241 643 lineto
241 536 lineto
356 536 lineto
356 445 lineto
241 445 lineto
241 182 lineto
241 116 268 83 322 83  curveto
334 83 349 86 366 90  curveto
366 2 lineto
closepath
fill
		} def

	/u
		{
421 0 moveto
421 101 lineto
375 25 314 -12 239 -12  curveto
191 -12 153 2 125 33  curveto
98 63 84 104 84 157  curveto
84 536 lineto
229 536 lineto
229 192 lineto
229 132 249 101 290 101  curveto
335 101 379 133 421 198  curveto
421 536 lineto
566 536 lineto
566 0 lineto
421 0 lineto
closepath
fill
		} def

	/v
		{
222 0 moveto
18 536 lineto
170 536 lineto
320 149 lineto
469 536 lineto
573 536 lineto
367 0 lineto
222 0 lineto
closepath
fill
		} def

	/w
		{
185 0 moveto
36 536 lineto
170 536 lineto
275 160 lineto
388 536 lineto
513 536 lineto
614 158 lineto
728 536 lineto
828 536 lineto
669 0 lineto
530 0 lineto
433 367 lineto
323 0 lineto
185 0 lineto
closepath
fill
		} def

	/x
		{
33 0 moveto
217 269 lineto
41 536 lineto
205 536 lineto
320 366 lineto
431 536 lineto
548 536 lineto
380 272 lineto
560 0 lineto
396 0 lineto
275 177 lineto
152 0 lineto
33 0 lineto
closepath
fill
		} def

	/y
		{
92 -192 moveto
213 0 lineto
15 536 lineto
170 536 lineto
303 177 lineto
460 536 lineto
570 536 lineto
239 -192 lineto
92 -192 lineto
closepath
fill
		} def

	/z
		{
60 0 moveto
60 96 lineto
359 445 lineto
73 445 lineto
73 536 lineto
530 536 lineto
530 445 lineto
230 96 lineto
536 96 lineto
536 0 lineto
60 0 lineto
closepath
fill
		} def

	/braceleft
		{
48 361 moveto
72 361 lineto
117 361 139 382 139 424  curveto
139 447 136 470 130 494  curveto
119 539 lineto
111 568 108 596 108 622  curveto
108 668 126 705 162 731  curveto
197 757 247 771 310 771  curveto
310 686 lineto
256 683 229 662 229 624  curveto
229 614 231 599 234 580  curveto
241 538 lineto
245 516 247 493 247 469  curveto
247 402 215 350 150 313  curveto
215 275 247 223 247 157  curveto
247 133 245 110 241 87  curveto
234 46 lineto
231 26 229 11 229 2  curveto
229 -35 256 -56 310 -60  curveto
310 -144 lineto
247 -144 197 -131 162 -104  curveto
126 -78 108 -42 108 3  curveto
108 30 111 57 119 86  curveto
130 131 lineto
136 155 139 179 139 202  curveto
139 244 117 265 72 265  curveto
48 265 lineto
48 361 lineto
closepath
fill
		} def

	/bar
		{
150 -144 moveto
150 771 lineto
234 771 lineto
234 -144 lineto
150 -144 lineto
closepath
fill
		} def

	/braceright
		{
310 361 moveto
286 361 lineto
241 361 219 382 219 424  curveto
219 447 222 470 228 494  curveto
239 539 lineto
247 568 250 596 250 622  curveto
250 668 232 705 196 731  curveto
161 757 111 771 48 771  curveto
48 686 lineto
102 683 129 662 129 624  curveto
129 614 127 599 124 580  curveto
117 538 lineto
113 516 111 493 111 469  curveto
111 402 143 350 208 313  curveto
143 275 111 223 111 157  curveto
111 133 113 110 117 87  curveto
124 46 lineto
127 26 129 11 129 2  curveto
129 -35 102 -56 48 -60  curveto
48 -144 lineto
111 -144 161 -131 196 -104  curveto
232 -78 250 -42 250 3  curveto
250 30 247 57 239 86  curveto
228 131 lineto
222 155 219 179 219 202  curveto
219 244 241 265 286 265  curveto
310 265 lineto
310 361 lineto
closepath
fill
		} def

	/asciitilde
		{
163 216 moveto
108 216 lineto
108 329 154 386 248 386  curveto
284 386 334 372 397 344  curveto
440 325 lineto
498 299 538 286 560 286  curveto
608 286 631 310 631 356  curveto
631 361 lineto
686 361 lineto
686 248 639 191 546 191  curveto
510 191 460 205 397 233  curveto
354 253 lineto
296 278 256 291 234 291  curveto
187 291 163 268 163 221  curveto
163 216 lineto
closepath
fill
		} def

	/exclamdown
		{
229 536 moveto
229 415 lineto
84 415 lineto
84 536 lineto
229 536 lineto
closepath
205 331 moveto
229 -42 lineto
229 -186 lineto
84 -186 lineto
84 -42 lineto
108 331 lineto
205 331 lineto
closepath
fill
		} def

	/cent
		{
342 0 moveto
342 85 lineto
261 90 197 117 151 167  curveto
105 217 82 283 82 367  curveto
82 451 104 517 149 565  curveto
193 613 258 640 342 647  curveto
342 722 lineto
420 722 lineto
420 646 lineto
463 644 504 637 543 627  curveto
543 521 lineto
499 540 458 551 420 553  curveto
420 182 lineto
462 185 503 194 543 209  curveto
543 110 lineto
502 98 461 90 420 87  curveto
420 0 lineto
342 0 lineto
closepath
342 190 moveto
342 552 lineto
272 531 237 471 237 374  curveto
237 277 272 216 342 190  curveto
closepath
fill
		} def

	/sterling
		{
120 0 moveto
120 114 lineto
156 122 181 137 195 157  curveto
209 177 216 209 216 251  curveto
216 340 lineto
137 340 lineto
137 430 lineto
216 430 lineto
216 513 lineto
216 665 289 741 436 741  curveto
475 741 518 737 566 729  curveto
566 630 lineto
527 643 489 650 453 650  curveto
392 650 361 615 361 545  curveto
361 430 lineto
456 430 lineto
456 340 lineto
361 340 lineto
361 276 354 229 341 201  curveto
327 172 299 143 255 114  curveto
573 114 lineto
573 0 lineto
120 0 lineto
closepath
fill
		} def

	/fraction
		{
-304 -18 moveto
226 740 lineto
304 740 lineto
-226 -18 lineto
-304 -18 lineto
closepath
fill
		} def

	/yen
		{
253 0 moveto
253 147 lineto
126 147 lineto
126 219 lineto
253 219 lineto
253 292 lineto
126 292 lineto
126 364 lineto
249 364 lineto
30 722 lineto
192 722 lineto
354 457 lineto
527 722 lineto
634 722 lineto
402 364 lineto
524 364 lineto
524 292 lineto
398 292 lineto
398 219 lineto
524 219 lineto
524 147 lineto
398 147 lineto
398 0 lineto
253 0 lineto
closepath
fill
		} def

	/florin
		{
115 -144 moveto
211 340 lineto
121 340 lineto
121 430 lineto
229 430 lineto
239 474 lineto
277 652 370 740 518 740  curveto
557 740 595 737 629 730  curveto
622 632 lineto
582 644 547 650 517 650  curveto
451 650 410 606 393 517  curveto
376 430 lineto
499 430 lineto
499 340 lineto
358 340 lineto
262 -144 lineto
115 -144 lineto
closepath
fill
		} def

	/section
		{
106 -135 moveto
106 -28 lineto
188 -57 257 -72 311 -72  curveto
392 -72 433 -49 433 -3  curveto
433 13 427 26 416 36  curveto
404 47 380 60 343 76  curveto
268 108 lineto
209 134 167 160 142 188  curveto
117 215 104 249 104 289  curveto
104 339 128 389 177 437  curveto
126 470 101 511 101 562  curveto
101 616 123 659 168 692  curveto
212 724 271 741 344 741  curveto
403 741 466 734 533 721  curveto
533 621 lineto
469 640 410 650 356 650  curveto
276 650 235 628 235 583  curveto
235 556 261 532 313 511  curveto
378 484 lineto
445 457 492 429 519 401  curveto
545 373 559 338 559 294  curveto
559 246 535 196 488 145  curveto
540 111 566 66 566 10  curveto
566 -45 543 -88 497 -118  curveto
450 -148 383 -163 296 -163  curveto
243 -163 179 -153 106 -135  curveto
closepath
420 183 moveto
439 208 449 232 449 254  curveto
449 275 442 292 428 306  curveto
415 319 389 334 350 352  curveto
245 399 lineto
226 375 217 352 217 331  curveto
217 292 251 258 319 228  curveto
420 183 lineto
closepath
fill
		} def

	/currency
		{
449 541 moveto
546 638 lineto
606 578 lineto
509 481 lineto
534 443 546 403 546 361  curveto
546 319 534 279 509 241  curveto
605 144 lineto
546 84 lineto
449 181 lineto
449 181 lineto
410 156 370 144 329 144  curveto
288 144 248 156 208 181  curveto
208 181 lineto
112 84 lineto
52 144 lineto
149 241 lineto
125 279 112 319 112 361  curveto
112 403 125 443 149 481  curveto
52 578 lineto
112 638 lineto
208 541 lineto
248 565 288 578 329 578  curveto
370 578 410 565 449 541  curveto
closepath
330 469 moveto
299 469 274 459 252 437  curveto
231 416 220 391 220 360  curveto
220 331 231 305 252 284  curveto
274 263 299 252 329 252  curveto
359 252 384 263 406 284  curveto
427 305 437 331 437 361  curveto
437 390 427 416 406 437  curveto
385 459 359 469 330 469  curveto
closepath
fill
		} def

	/quotesingle
		{
78 469 moveto
48 771 lineto
205 771 lineto
168 469 lineto
78 469 lineto
closepath
fill
		} def

	/quotedblleft
		{
135 614 moveto
189 614 lineto
189 469 lineto
45 469 lineto
45 579 lineto
45 698 93 762 189 771  curveto
189 716 lineto
153 706 135 677 135 629  curveto
135 614 lineto
closepath
352 614 moveto
406 614 lineto
406 469 lineto
262 469 lineto
262 579 lineto
262 698 310 762 406 771  curveto
406 716 lineto
370 706 352 677 352 629  curveto
352 614 lineto
closepath
fill
		} def

	/guillemotleft
		{
536 433 moveto
407 268 lineto
536 102 lineto
468 51 lineto
264 268 lineto
468 484 lineto
536 433 lineto
closepath
312 432 moveto
185 268 lineto
312 102 lineto
245 51 lineto
42 268 lineto
245 484 lineto
312 432 lineto
closepath
fill
		} def

	/guilsinglleft
		{
312 433 moveto
185 268 lineto
312 102 lineto
245 51 lineto
42 268 lineto
245 484 lineto
312 433 lineto
closepath
fill
		} def

	/guilsinglright
		{
33 433 moveto
160 268 lineto
33 102 lineto
100 51 lineto
304 268 lineto
100 484 lineto
33 433 lineto
closepath
fill
		} def

	/fi
		{
105 0 moveto
105 445 lineto
31 445 lineto
31 536 lineto
105 536 lineto
105 573 lineto
105 640 121 692 153 728  curveto
185 765 231 783 290 783  curveto
326 783 365 776 406 763  curveto
406 664 lineto
366 682 336 691 316 691  curveto
272 691 250 650 250 569  curveto
250 536 lineto
587 536 lineto
587 0 lineto
442 0 lineto
442 445 lineto
250 445 lineto
250 0 lineto
105 0 lineto
closepath
466 626 moveto
466 747 lineto
587 747 lineto
587 626 lineto
466 626 lineto
closepath
fill
		} def

	/fl
		{
373 445 moveto
250 445 lineto
250 0 lineto
105 0 lineto
105 445 lineto
31 445 lineto
31 536 lineto
105 536 lineto
105 569 lineto
105 712 173 783 309 783  curveto
344 783 387 779 438 771  curveto
587 771 lineto
587 0 lineto
442 0 lineto
442 677 lineto
414 688 387 693 359 693  curveto
286 693 250 656 250 581  curveto
250 536 lineto
373 536 lineto
373 445 lineto
closepath
fill
		} def

	/endash
		{
96 265 moveto
96 355 lineto
542 355 lineto
542 265 lineto
96 265 lineto
closepath
fill
		} def

	/dagger
		{
257 -144 moveto
269 391 lineto
97 379 lineto
97 487 lineto
269 476 lineto
257 722 lineto
401 722 lineto
389 476 lineto
561 487 lineto
561 379 lineto
389 391 lineto
401 -144 lineto
257 -144 lineto
closepath
fill
		} def

	/daggerdbl
		{
257 -144 moveto
269 102 lineto
97 90 lineto
97 198 lineto
269 186 lineto
269 391 lineto
97 379 lineto
97 487 lineto
269 476 lineto
257 722 lineto
401 722 lineto
389 476 lineto
561 487 lineto
561 379 lineto
389 391 lineto
389 186 lineto
561 198 lineto
561 90 lineto
389 102 lineto
401 -144 lineto
257 -144 lineto
closepath
fill
		} def

	/periodcentered
		{
241 229 moveto
241 385 lineto
397 385 lineto
397 229 lineto
241 229 lineto
closepath
fill
		} def

	/paragraph
		{
275 -144 moveto
275 361 lineto
147 378 83 445 83 561  curveto
83 619 98 660 129 685  curveto
161 710 212 722 284 722  curveto
504 722 lineto
504 -144 lineto
426 -144 lineto
426 656 lineto
354 656 lineto
354 -144 lineto
275 -144 lineto
closepath
fill
		} def

	/bullet
		{
307 72 moveto
243 72 187 96 140 143  curveto
94 191 70 247 70 312  curveto
70 379 94 436 141 483  curveto
188 530 245 554 311 554  curveto
378 554 435 530 482 483  curveto
529 436 552 378 552 311  curveto
552 245 528 188 481 142  curveto
433 95 375 72 307 72  curveto
closepath
fill
		} def

	/quotesinglbase
		{
105 0 moveto
45 0 lineto
45 156 lineto
202 156 lineto
202 35 lineto
202 -92 149 -156 45 -156  curveto
45 -102 lineto
85 -102 105 -73 105 -15  curveto
105 0 lineto
closepath
fill
		} def

	/quotedblbase
		{
99 0 moveto
45 0 lineto
45 144 lineto
189 144 lineto
189 35 lineto
189 -84 141 -148 45 -156  curveto
45 -102 lineto
81 -92 99 -62 99 -15  curveto
99 0 lineto
closepath
316 0 moveto
262 0 lineto
262 144 lineto
406 144 lineto
406 35 lineto
406 -84 358 -148 262 -156  curveto
262 -102 lineto
298 -92 316 -62 316 -15  curveto
316 0 lineto
closepath
fill
		} def

	/quotedblright
		{
99 626 moveto
45 626 lineto
45 771 lineto
189 771 lineto
189 662 lineto
189 542 141 478 45 469  curveto
45 523 lineto
81 534 99 563 99 611  curveto
99 626 lineto
closepath
316 626 moveto
262 626 lineto
262 771 lineto
406 771 lineto
406 662 lineto
406 542 358 478 262 469  curveto
262 523 lineto
298 534 316 563 316 611  curveto
316 626 lineto
closepath
fill
		} def

	/guillemotright
		{
32 433 moveto
161 268 lineto
32 102 lineto
100 51 lineto
304 268 lineto
100 484 lineto
32 433 lineto
closepath
256 432 moveto
383 268 lineto
256 102 lineto
323 51 lineto
527 268 lineto
323 484 lineto
256 432 lineto
closepath
fill
		} def

	/ellipsis
		{
112 0 moveto
112 108 lineto
220 108 lineto
220 0 lineto
112 0 lineto
closepath
445 0 moveto
445 108 lineto
554 108 lineto
554 0 lineto
445 0 lineto
closepath
778 0 moveto
778 108 lineto
887 108 lineto
887 0 lineto
778 0 lineto
closepath
fill
		} def

	/perthousand
		{
58 -18 moveto
626 740 lineto
724 740 lineto
156 -18 lineto
58 -18 lineto
closepath
182 361 moveto
129 361 88 377 57 409  curveto
27 442 12 486 12 542  curveto
12 598 27 642 58 674  curveto
88 706 130 722 184 722  curveto
237 722 278 706 309 674  curveto
340 642 355 598 355 542  curveto
355 485 340 441 309 409  curveto
278 377 236 361 182 361  curveto
closepath
183 433 moveto
225 433 247 469 247 542  curveto
247 614 226 650 184 650  curveto
141 650 120 614 120 542  curveto
120 469 141 433 183 433  curveto
closepath
597 0 moveto
545 0 503 16 473 48  curveto
442 80 427 125 427 180  curveto
427 236 443 281 473 313  curveto
504 345 546 361 599 361  curveto
652 361 694 345 725 313  curveto
755 281 771 237 771 181  curveto
771 124 755 79 725 47  curveto
694 15 652 0 597 0  curveto
closepath
598 72 moveto
641 72 662 108 662 181  curveto
662 253 641 289 599 289  curveto
557 289 536 252 536 180  curveto
536 108 556 72 598 72  curveto
closepath
977 0 moveto
924 0 883 16 853 48  curveto
822 80 807 125 807 180  curveto
807 236 822 281 853 313  curveto
883 345 925 361 979 361  curveto
1032 361 1074 345 1104 313  curveto
1135 281 1150 237 1150 181  curveto
1150 124 1135 79 1104 47  curveto
1073 15 1031 0 977 0  curveto
closepath
978 72 moveto
1021 72 1042 108 1042 181  curveto
1042 253 1021 289 979 289  curveto
937 289 916 252 916 180  curveto
916 108 936 72 978 72  curveto
closepath
fill
		} def

	/questiondown
		{
360 536 moveto
360 415 lineto
216 415 lineto
216 536 lineto
360 536 lineto
closepath
216 331 moveto
360 331 lineto
360 317 lineto
360 265 336 212 288 159  curveto
254 121 lineto
207 69 184 23 184 -17  curveto
184 -78 222 -108 298 -108  curveto
347 -108 403 -93 467 -64  curveto
467 -175 lineto
402 -194 338 -204 276 -204  curveto
199 -204 138 -189 94 -160  curveto
49 -130 27 -90 27 -39  curveto
27 7 54 56 107 107  curveto
140 138 lineto
170 167 191 192 201 212  curveto
211 232 216 258 216 290  curveto
216 331 lineto
closepath
fill
		} def

	/grave
		{
423 626 moveto
330 626 lineto
173 783 lineto
305 783 lineto
423 626 lineto
closepath
fill
		} def

	/acute
		{
226 626 moveto
343 783 lineto
476 783 lineto
319 626 lineto
226 626 lineto
closepath
fill
		} def

	/circumflex
		{
134 626 moveto
252 783 lineto
385 783 lineto
503 626 lineto
416 626 lineto
319 722 lineto
318 722 lineto
222 626 lineto
134 626 lineto
closepath
fill
		} def

	/tilde
		{
219 626 moveto
147 626 lineto
147 678 155 717 171 743  curveto
188 770 212 783 245 783  curveto
266 783 287 776 307 762  curveto
326 749 lineto
341 738 lineto
362 724 376 716 385 716  curveto
396 716 404 722 410 733  curveto
415 744 418 761 418 783  curveto
490 783 lineto
490 730 482 691 466 665  curveto
449 639 425 626 392 626  curveto
371 626 350 633 330 647  curveto
312 660 lineto
304 665 299 669 296 670  curveto
277 685 262 692 252 692  curveto
241 692 233 687 227 676  curveto
222 665 219 648 219 626  curveto
closepath
fill
		} def

	/macron
		{
42 704 moveto
42 783 lineto
457 783 lineto
457 704 lineto
42 704 lineto
closepath
fill
		} def

	/breve
		{
146 783 moveto
218 783 lineto
225 760 237 742 254 731  curveto
270 719 292 713 319 713  curveto
346 713 367 719 384 731  curveto
400 742 412 760 419 783  curveto
491 783 lineto
486 735 467 697 436 668  curveto
405 640 366 626 319 626  curveto
271 626 232 640 201 668  curveto
170 696 152 735 146 783  curveto
closepath
fill
		} def

	/dotaccent
		{
247 626 moveto
247 771 lineto
391 771 lineto
391 626 lineto
247 626 lineto
closepath
fill
		} def

	/dieresis
		{
162 626 moveto
162 734 lineto
271 734 lineto
271 626 lineto
162 626 lineto
closepath
367 626 moveto
367 734 lineto
475 734 lineto
475 626 lineto
367 626 lineto
closepath
fill
		} def

	/ring
		{
317 626 moveto
286 626 260 637 238 660  curveto
216 682 205 709 205 740  curveto
205 772 216 799 238 822  curveto
260 844 287 855 319 855  curveto
350 855 377 844 400 822  curveto
422 799 433 772 433 741  curveto
433 708 422 681 400 659  curveto
377 637 350 626 317 626  curveto
closepath
318 680 moveto
335 680 350 686 361 698  curveto
373 709 379 724 379 741  curveto
379 757 373 771 361 783  curveto
350 795 335 801 319 801  curveto
302 801 288 795 276 783  curveto
265 771 259 757 259 741  curveto
259 724 265 710 276 698  curveto
288 686 302 680 318 680  curveto
closepath
fill
		} def

	/cedilla
		{
303 0 moveto
369 0 lineto
332 -55 lineto
408 -63 445 -88 445 -131  curveto
445 -153 434 -172 410 -187  curveto
387 -203 358 -210 324 -210  curveto
297 -210 266 -206 232 -196  curveto
232 -151 lineto
255 -156 274 -159 289 -159  curveto
329 -159 349 -149 349 -129  curveto
349 -102 317 -88 253 -88  curveto
244 -88 lineto
303 0 lineto
closepath
fill
		} def

	/hungarumlaut
		{
125 0 moveto
125 625 lineto
625 625 lineto
625 0 lineto
125 0 lineto
closepath
156 31 moveto
593 31 lineto
593 593 lineto
156 593 lineto
156 31 lineto
closepath
fill
		} def

	/ogonek
		{
326 0 moveto
404 0 lineto
374 -14 351 -28 336 -42  curveto
321 -57 313 -72 313 -87  curveto
313 -103 320 -114 333 -122  curveto
346 -130 366 -134 392 -134  curveto
419 -134 441 -131 458 -126  curveto
458 -166 lineto
430 -175 397 -180 360 -180  curveto
312 -180 276 -174 252 -161  curveto
228 -148 216 -128 216 -103  curveto
216 -83 225 -65 244 -48  curveto
262 -31 289 -14 326 0  curveto
closepath
fill
		} def

	/caron
		{
503 783 moveto
385 626 lineto
252 626 lineto
134 783 lineto
222 783 lineto
318 686 lineto
319 686 lineto
416 783 lineto
503 783 lineto
closepath
fill
		} def

	/emdash
		{
96 265 moveto
96 355 lineto
542 355 lineto
542 265 lineto
96 265 lineto
closepath
fill
		} def

	/AE
		{
10 0 moveto
419 722 lineto
899 722 lineto
899 623 lineto
595 623 lineto
595 421 lineto
845 421 lineto
845 322 lineto
595 322 lineto
595 102 lineto
921 102 lineto
921 0 lineto
447 0 lineto
447 186 lineto
233 186 lineto
127 0 lineto
10 0 lineto
closepath
286 280 moveto
447 280 lineto
447 563 lineto
286 280 lineto
closepath
fill
		} def

	/ordfeminine
		{
276 439 moveto
251 414 223 401 191 401  curveto
162 401 137 410 118 429  curveto
99 447 90 470 90 499  curveto
90 573 146 611 258 611  curveto
281 611 lineto
281 634 lineto
281 664 262 680 224 680  curveto
187 680 152 670 119 650  curveto
119 719 lineto
158 734 198 741 240 741  curveto
335 741 383 707 383 639  curveto
383 498 lineto
383 478 390 469 403 469  curveto
406 469 410 469 415 470  curveto
415 409 lineto
394 404 376 401 360 401  curveto
322 401 296 414 282 439  curveto
276 439 lineto
closepath
281 497 moveto
281 552 lineto
259 552 lineto
214 552 192 537 192 507  curveto
192 482 204 469 229 469  curveto
246 469 264 479 281 497  curveto
closepath
fill
		} def

	/Lslash
		{
96 0 moveto
96 291 lineto
0 241 lineto
0 335 lineto
96 385 lineto
96 722 lineto
246 722 lineto
246 466 lineto
367 531 lineto
367 435 lineto
246 371 lineto
246 102 lineto
572 102 lineto
572 0 lineto
96 0 lineto
closepath
fill
		} def

	/Oslash
		{
411 -18 moveto
327 -18 254 2 190 43  curveto
138 -18 lineto
44 -18 lineto
136 91 lineto
75 161 44 251 44 362  curveto
44 477 77 569 143 638  curveto
209 706 298 740 410 740  curveto
494 740 568 720 630 679  curveto
683 740 lineto
777 740 lineto
685 631 lineto
746 562 777 471 777 360  curveto
777 244 744 152 677 84  curveto
611 16 522 -18 411 -18  curveto
closepath
233 207 moveto
548 581 lineto
513 621 467 641 410 641  curveto
348 641 298 616 260 565  curveto
222 514 204 446 204 361  curveto
204 308 213 256 233 207  curveto
closepath
272 141 moveto
308 101 354 81 411 81  curveto
473 81 523 107 561 157  curveto
598 208 617 277 617 362  curveto
617 416 607 467 588 516  curveto
272 141 lineto
closepath
fill
		} def

	/OE
		{
548 18 moveto
499 -6 451 -18 404 -18  curveto
296 -18 209 16 143 85  curveto
78 155 45 247 45 361  curveto
45 476 78 568 144 637  curveto
209 706 297 740 407 740  curveto
455 740 502 728 548 704  curveto
548 722 lineto
1000 722 lineto
1000 623 lineto
699 623 lineto
699 421 lineto
946 421 lineto
946 322 lineto
699 322 lineto
699 102 lineto
1023 102 lineto
1023 0 lineto
548 0 lineto
548 18 lineto
closepath
548 290 moveto
548 433 lineto
548 507 537 560 515 592  curveto
493 625 458 641 408 641  curveto
347 641 298 615 261 564  curveto
223 512 205 444 205 361  curveto
205 277 223 210 261 158  curveto
298 107 347 81 409 81  curveto
458 81 494 97 516 130  curveto
537 162 548 215 548 290  curveto
closepath
fill
		} def

	/ordmasculine
		{
238 401 moveto
185 401 142 417 111 447  curveto
79 477 63 519 63 571  curveto
63 624 79 665 111 695  curveto
142 725 186 740 241 740  curveto
295 740 339 725 370 695  curveto
402 665 417 624 417 571  curveto
417 518 402 476 370 446  curveto
339 416 295 401 238 401  curveto
closepath
240 464 moveto
281 464 302 500 302 572  curveto
302 643 282 678 241 678  curveto
199 678 179 642 179 571  curveto
179 500 199 464 240 464  curveto
closepath
fill
		} def

	/ae
		{
391 93 moveto
341 23 277 -12 201 -12  curveto
152 -12 114 1 84 30  curveto
54 58 40 95 40 142  curveto
40 201 63 246 111 277  curveto
158 309 226 325 314 325  curveto
353 325 lineto
353 375 lineto
353 431 321 459 257 459  curveto
201 459 144 443 86 411  curveto
86 511 lineto
152 535 216 548 278 548  curveto
334 548 388 528 440 489  curveto
490 528 543 548 602 548  curveto
678 548 734 523 770 473  curveto
806 423 824 345 824 239  curveto
491 239 lineto
501 137 558 85 660 85  curveto
708 85 763 97 824 119  curveto
824 18 lineto
755 -2 687 -12 619 -12  curveto
521 -12 445 23 391 93  curveto
closepath
353 135 moveto
353 244 lineto
318 244 lineto
275 244 241 236 216 220  curveto
191 204 178 183 178 156  curveto
178 136 185 119 198 106  curveto
212 92 229 85 249 85  curveto
282 85 317 102 353 135  curveto
closepath
490 320 moveto
682 320 lineto
682 413 652 459 594 459  curveto
534 459 499 413 490 320  curveto
closepath
fill
		} def

	/dotlessi
		{
90 0 moveto
90 536 lineto
234 536 lineto
234 0 lineto
90 0 lineto
closepath
fill
		} def

	/lslash
		{
108 0 moveto
108 308 lineto
5 253 lineto
5 350 lineto
108 405 lineto
108 771 lineto
252 771 lineto
252 483 lineto
355 537 lineto
355 442 lineto
252 387 lineto
252 0 lineto
108 0 lineto
closepath
fill
		} def

	/oslash
		{
42 -12 moveto
110 69 lineto
65 122 42 189 42 268  curveto
42 354 67 423 117 473  curveto
167 523 234 548 319 548  curveto
379 548 431 535 478 509  curveto
510 548 lineto
597 548 lineto
529 466 lineto
574 414 597 347 597 267  curveto
597 181 572 113 522 62  curveto
473 12 405 -12 320 -12  curveto
260 -12 207 0 162 27  curveto
129 -12 lineto
42 -12 lineto
closepath
237 117 moveto
258 91 286 78 320 78  curveto
358 78 388 95 410 128  curveto
432 162 443 208 443 267  curveto
443 295 439 323 433 352  curveto
237 117 lineto
closepath
402 418 moveto
381 444 354 458 319 458  curveto
281 458 251 441 229 407  curveto
207 373 196 327 196 268  curveto
196 240 200 212 207 184  curveto
402 418 lineto
closepath
fill
		} def

	/oe
		{
497 67 moveto
464 35 436 14 412 3  curveto
388 -6 355 -12 314 -12  curveto
232 -12 166 13 118 63  curveto
69 113 45 182 45 268  curveto
45 352 69 419 118 471  curveto
167 522 231 548 312 548  curveto
385 548 448 519 501 462  curveto
548 519 608 548 682 548  curveto
757 548 812 523 848 473  curveto
883 423 901 345 901 239  curveto
568 239 lineto
578 137 634 85 737 85  curveto
785 85 840 97 901 119  curveto
901 18 lineto
831 -2 763 -12 696 -12  curveto
619 -12 553 14 497 67  curveto
closepath
319 78 moveto
389 78 424 141 424 268  curveto
424 394 390 458 320 458  curveto
283 458 253 440 231 406  curveto
209 372 198 326 198 268  curveto
198 210 209 163 231 129  curveto
253 95 282 78 319 78  curveto
closepath
566 320 moveto
758 320 lineto
758 413 729 459 670 459  curveto
611 459 576 413 566 320  curveto
closepath
fill
		} def

	/germandbls
		{
90 0 moveto
90 552 lineto
90 706 163 783 308 783  curveto
371 783 421 771 458 748  curveto
495 725 514 694 514 655  curveto
514 624 503 593 482 563  curveto
452 521 lineto
429 490 418 467 418 453  curveto
418 432 435 408 469 379  curveto
536 325 lineto
605 268 640 210 640 153  curveto
640 102 623 62 590 32  curveto
556 2 511 -12 454 -12  curveto
408 -12 359 -3 306 14  curveto
306 114 lineto
357 90 400 78 437 78  curveto
486 78 511 98 511 138  curveto
511 159 491 186 451 219  curveto
379 279 lineto
326 322 300 364 300 404  curveto
300 428 306 451 319 474  curveto
342 514 lineto
366 556 lineto
380 580 387 604 387 626  curveto
387 671 361 694 311 694  curveto
260 694 234 659 234 590  curveto
234 0 lineto
90 0 lineto
closepath
fill
		} def

	/.notdef
		{
0 0 moveto
1000 0 lineto
1000 1000 lineto
0 1000 lineto
0 0 lineto
closepath
50 50 moveto
950 50 lineto
950 950 lineto
50 950 lineto
50 50 lineto
closepath
fill
		} def

	end				% close glyph dict. 
	currentdict			% actually put dict on the stack
	end			% close the dictionary now
	/LucidaSans-Bold exch definefont pop
/LucidaSans-Bold findfont 18.0 scalefont setfont
(3) show
Q
5.0 5.0 translate
Q
q
1 105 195 OPL
105 199
-5.0 -5.0 translate
q
98 210 10 18 rc
98.0 225.0 moveto
q 1 -1 scale
/ESSTIXFive-Bold findfont 18.0 scalefont setfont
(K) show
Q
Q
111.0 225.0 moveto
q 1 -1 scale
/LucidaSans-Bold findfont 18.0 scalefont setfont
(2) show
Q
5.0 5.0 translate
Q
q
1 198 195 OPL
198 199
-5.0 -5.0 translate
q
190 210 10 18 rc
190.0 225.0 moveto
q 1 -1 scale
/ESSTIXFive-Bold findfont 18.0 scalefont setfont
(K) show
Q
Q
203.0 225.0 moveto
q 1 -1 scale
/LucidaSans-Bold findfont 18.0 scalefont setfont
(1) show
Q
5.0 5.0 translate
Q
q
1 290 195 OPL
290 199
-5.0 -5.0 translate
280.0 222.0 moveto
q 1 -1 scale
/LucidaSans-Bold findfont 18.0 scalefont setfont
(0) show
Q
5.0 5.0 translate
Q
q
1 383 195 OPL
383 199
-5.0 -5.0 translate
381.0 225.0 moveto
q 1 -1 scale
/LucidaSans-Bold findfont 18.0 scalefont setfont
(1) show
Q
5.0 5.0 translate
Q
Q
q
1 290 29 OPL
287 29
1 290 66 OPL
287 66
1 290 84 OPL
287 84
1 290 48 OPL
287 48
1 290 139 OPL
287 139
1 290 121 OPL
287 121
1 290 158 OPL
287 158
1 290 176 OPL
287 176
1 290 213 OPL
287 213
1 290 231 OPL
287 231
1 290 250 OPL
287 250
1 290 268 OPL
287 268
1 290 305 OPL
287 305
1 290 323 OPL
287 323
1 290 360 OPL
287 360
1 290 341 OPL
287 341
1 290 378 OPL
290 11
Q
0.0 0.0 translate
q
[ 1.0 0.0 0.0 1.0 0.0 0.0 ] concat
q
221 92 18 21 rc
225.0 110.0 moveto
q 1 -1 scale
/LucidaSans-Italic findfont 18.0 scalefont setfont
(y) show
Q
Q
newpath
0.0 0.0 m
0.0 390.0 l
390.0 390.0 l
390.0 0.0 l
h
W
Q
[ 1.0 0.0 0.0 1.0 5.0 5.0 ] defaultmatrix matrix concatmatrix setmatrix
0.0 0.0 translate
q
q
1 290 378 OPL
285 378
-5.0 -5.0 translate
q
249 376 10 18 rc
249.0 391.0 moveto
q 1 -1 scale
/ESSTIXFive-Bold findfont 18.0 scalefont setfont
(K) show
Q
Q
262.0 391.0 moveto
q 1 -1 scale
/LucidaSans-Bold findfont 18.0 scalefont setfont
(10) show
Q
5.0 5.0 translate
Q
q
1 290 286 OPL
285 286
-5.0 -5.0 translate
q
261 284 10 18 rc
261.0 299.0 moveto
q 1 -1 scale
/ESSTIXFive-Bold findfont 18.0 scalefont setfont
(K) show
Q
Q
274.0 299.0 moveto
q 1 -1 scale
/LucidaSans-Bold findfont 18.0 scalefont setfont
(5) show
Q
5.0 5.0 translate
Q
q
1 290 195 OPL
285 195
Q
q
1 290 103 OPL
285 103
-5.0 -5.0 translate
274.0 115.0 moveto
q 1 -1 scale
/LucidaSans-Bold findfont 18.0 scalefont setfont
(5) show
Q
5.0 5.0 translate
Q
q
1 290 11 OPL
285 11
-5.0 -5.0 translate
262.0 24.0 moveto
q 1 -1 scale
/LucidaSans-Bold findfont 18.0 scalefont setfont
(10) show
Q
5.0 5.0 translate
Q
Q
Q
Q
0 0 400 400 rc
0.0 0.0 translate
0.0 0.0 translate
2 J
0 j
end end restore showpage

%%Trailer
%%EOF
