%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 20 135 575 656
%%Creator: FreeHEP Graphics2D Driver
%%Producer: com.maplesoft.mathdoc.view.plot.paint.PlotPSGraphics2D Revision: 1.20 
%%For: 
%%Title: 
%%CreationDate: Monday, May 21, 2007 11:40:00 AM EDT
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Draw a line. (x0 y0 x1 y1 line)
/L {bias n m l S unbias} def

% Polyline primitive.
/polyline  {n m 1 exch 1 exch
           {pop currentfile token pop currentfile token pop l} for
           } def

% Draw a polyline (n x0 y0 OPL x1 y1 x2 y2 ... ... xn yn)
/OPL {bias polyline S unbias} def

% Draw a closed polyline (n x0 y0 CPL x1 y1 x2 y2 ... ... xn yn)
/CPL {bias polyline s unbias} def

% Draw a filled polyline (n x0 y0 FPL x1 y1 x2 y2 ... ... xn yn)
/FPL {polyline h f*} def

% Draw an oval. (x y w h OVL)
/OVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width currentlinewidth sub 2 div
      height currentlinewidth sub 2 div neg
      scale n 0 0 1 5 -2 roll arc
      smatrix setmatrix S} def

% Draw a filled oval. (x y w h FOVL)
/FOVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width 2 div
      height 2 div neg
      scale n 0 0 m 0 0 1 5 -2 roll arc
      h smatrix setmatrix f} def

% Draw a rounded rectangle. (x y w h arcwidth archeight RREC)
/RREC {matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      s} def

% Draw a filled rounded rectangle. (x y w h arcwidth archeight FRREC)
/FRREC{matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      h f} def

% Draw a string.  (string x y STR)
/STR {q m 1 -1 scale recshow Q} def

% Define basic plot symbols.
/xys   {/siz exch def /yv exch def /xv exch def} def
/hline {xys n xv siz 2. div sub yv m siz 0 rlineto S} def
/vline {xys n xv yv siz 2. div sub m 0 siz rlineto S} def
/plus  {xys n xv yv siz 2. div sub m 0 siz rlineto
                    xv siz 2. div sub yv m siz 0 rlineto S} def
/dot   {n 2. div 0 360 arc s} def
/fdot  {n 2. div 0 360 arc h f} def
/box   {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                    siz 2 sqrt div dup rs} def
/fbox  {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                       siz 2 sqrt div dup rf} def
/tridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto s} def
/ftridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto h f} def

% Symbols defined in terms of the others.
/star     {3 copy cross plus} def
/cross    {xys q xv yv translate 45 rotate 0 0 siz plus Q} def
/diamond  {xys q xv yv translate 45 rotate 0 0 siz box Q} def
/fdiamond {xys q xv yv translate 45 rotate 0 0 siz fbox Q} def
/triup    {xys q xv yv translate 180 rotate 0 0 siz tridn Q} def
/ftriup   {xys q xv yv translate 180 rotate 0 0 siz ftridn Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Helvetica 16#00 vg&newcompositefont
/DialogInput-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
595 791 setpagesize
20 20 20 20 setmargins
0 0 setorigin
566 530 setsize
fittopage
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0.0 0.0 0.0 RG
[ 1.0 0.0 0.0 1.0 0.0 0.0 ] defaultmatrix matrix concatmatrix setmatrix
1.0 w
2 J
0 j
10.0 M
[ ] 0.0 d
1.0 1.0 1.0 RG
0.0 0.0 566.0 530.0 rf
0.0 0.0 0.0 RG
2.0 w
0 J
1 j
0.0 0.0 translate
0.0 0.0 translate
q
5.0 5.0 translate
0 0 556 520 rc
1.0 w
q
0.647059 0.647059 0.647059 RG
Q
q
0.647059 0.647059 0.647059 RG
Q
2.0 w
q
q
192.0 0.001961 172.0 512.863586 rc
48 194 487 OPL
196 483
197 479
198 476
200 472
202 468
203 464
204 461
206 457
207 453
209 449
210 446
212 442
213 438
215 434
216 431
218 427
219 423
221 419
222 416
224 412
225 408
227 404
228 401
230 397
231 393
233 390
234 386
236 382
237 378
239 375
240 371
242 367
243 363
245 360
246 356
248 352
249 348
251 345
252 341
254 337
255 333
257 330
258 326
260 322
261 319
263 315
264 311
266 307
newpath
0.0 0.0 m
0.0 520.0 l
556.0 520.0 l
556.0 0.0 l
h
W
Q
q
0.0 0.0 1.0 RG
192.0 0.001961 172.0 512.863586 rc
1 266 487 OPL
266 100
newpath
0.0 0.0 m
0.0 520.0 l
556.0 520.0 l
556.0 0.0 l
h
W
Q
q
192.0 0.001961 172.0 512.863586 rc
48 194 487 OPL
196 487
197 487
198 487
200 487
202 487
203 487
204 487
206 487
207 487
209 487
210 487
212 487
213 487
215 487
216 487
218 487
219 487
221 487
222 487
224 487
225 487
227 487
228 487
230 487
231 487
233 487
234 487
236 487
237 487
239 487
240 487
242 487
243 487
245 487
246 487
248 487
249 487
251 487
252 487
254 487
255 487
257 487
258 487
260 487
261 487
263 487
264 487
266 487
newpath
0.0 0.0 m
0.0 520.0 l
556.0 520.0 l
556.0 0.0 l
h
W
Q
q
0.0 0.0 1.0 RG
192.0 0.001961 172.0 512.863586 rc
48 266 487 OPL
268 487
269 487
271 487
274 487
276 487
277 487
279 487
281 487
283 487
286 487
287 487
289 487
292 487
293 487
295 487
297 487
299 487
301 487
303 487
305 487
307 487
309 487
311 487
313 487
315 487
317 487
319 487
321 487
323 487
325 487
327 487
329 487
331 487
333 487
335 487
337 487
339 487
341 487
343 487
345 487
347 487
349 487
351 487
353 487
355 487
357 487
359 487
361 487
newpath
0.0 0.0 m
0.0 520.0 l
556.0 520.0 l
556.0 0.0 l
h
W
Q
q
192.0 0.001961 172.0 512.863586 rc
48 266 100 OPL
268 98
269 96
271 94
274 92
276 90
277 88
279 86
281 84
283 82
286 79
287 78
289 76
292 73
293 71
295 70
297 67
299 66
301 63
303 62
305 59
307 57
309 55
311 53
313 51
315 49
317 47
319 45
321 43
323 41
325 39
327 37
329 35
331 33
333 31
335 29
337 27
339 25
341 23
343 21
345 19
347 17
349 15
351 13
353 11
355 9
357 7
359 5
361 3
newpath
0.0 0.0 m
0.0 520.0 l
556.0 520.0 l
556.0 0.0 l
h
W
Q
q
192.0 0.001961 172.0 512.863586 rc
48 266 100 OPL
268 100
269 100
271 100
274 100
276 100
277 100
279 100
281 100
283 100
286 100
287 100
289 100
292 100
293 100
295 100
297 100
299 100
301 100
303 100
305 100
307 100
309 100
311 100
313 100
315 100
317 100
319 100
321 100
323 100
325 100
327 100
329 100
331 100
333 100
335 100
337 100
339 100
341 100
343 100
345 100
347 100
349 100
351 100
353 100
355 100
357 100
359 100
361 100
newpath
0.0 0.0 m
0.0 520.0 l
556.0 520.0 l
556.0 0.0 l
h
W
Q
q
192.0 0.001961 172.0 512.863586 rc
24 201 466 OPL
201 466
202 467
202 468
202 468
203 469
203 470
203 471
204 472
204 473
204 474
204 475
205 476
205 477
205 477
205 478
205 479
205 480
206 481
206 482
206 483
206 483
206 484
206 485
206 486
newpath
0.0 0.0 m
0.0 520.0 l
556.0 520.0 l
556.0 0.0 l
h
W
Q
q
-5.0 -5.0 translate
5.0 5.0 translate
q
[ 1.0 0.0 0.0 1.0 0.0 0.0 ] concat
q
219 493 21 26 rc
223.0 515.0 moveto
q 1 -1 scale
9 dict begin
/FontType 3 def
/FontMatrix [0.0010 0 0 0.0010 0 0]def
/FontBBox [0 -213 1065 950 ] def
	/Encoding 256 array def
			0 1 255 {Encoding exch /.notdef put}for
		Encoding 32 /space put
		Encoding 33 /exclam put
		Encoding 34 /quotedbl put
		Encoding 35 /numbersign put
		Encoding 36 /dollar put
		Encoding 37 /percent put
		Encoding 38 /ampersand put
		Encoding 39 /quoteright put
		Encoding 40 /parenleft put
		Encoding 41 /parenright put
		Encoding 42 /asterisk put
		Encoding 43 /plus put
		Encoding 44 /comma put
		Encoding 45 /hyphen put
		Encoding 46 /period put
		Encoding 47 /slash put
		Encoding 48 /zero put
		Encoding 49 /one put
		Encoding 50 /two put
		Encoding 51 /three put
		Encoding 52 /four put
		Encoding 53 /five put
		Encoding 54 /six put
		Encoding 55 /seven put
		Encoding 56 /eight put
		Encoding 57 /nine put
		Encoding 58 /colon put
		Encoding 59 /semicolon put
		Encoding 60 /less put
		Encoding 61 /equal put
		Encoding 62 /greater put
		Encoding 63 /question put
		Encoding 64 /at put
		Encoding 65 /A put
		Encoding 66 /B put
		Encoding 67 /C put
		Encoding 68 /D put
		Encoding 69 /E put
		Encoding 70 /F put
		Encoding 71 /G put
		Encoding 72 /H put
		Encoding 73 /I put
		Encoding 74 /J put
		Encoding 75 /K put
		Encoding 76 /L put
		Encoding 77 /M put
		Encoding 78 /N put
		Encoding 79 /O put
		Encoding 80 /P put
		Encoding 81 /Q put
		Encoding 82 /R put
		Encoding 83 /S put
		Encoding 84 /T put
		Encoding 85 /U put
		Encoding 86 /V put
		Encoding 87 /W put
		Encoding 88 /X put
		Encoding 89 /Y put
		Encoding 90 /Z put
		Encoding 91 /bracketleft put
		Encoding 92 /backslash put
		Encoding 93 /bracketright put
		Encoding 94 /asciicircum put
		Encoding 95 /underscore put
		Encoding 96 /quoteleft put
		Encoding 97 /a put
		Encoding 98 /b put
		Encoding 99 /c put
		Encoding 100 /d put
		Encoding 101 /e put
		Encoding 102 /f put
		Encoding 103 /g put
		Encoding 104 /h put
		Encoding 105 /i put
		Encoding 106 /j put
		Encoding 107 /k put
		Encoding 108 /l put
		Encoding 109 /m put
		Encoding 110 /n put
		Encoding 111 /o put
		Encoding 112 /p put
		Encoding 113 /q put
		Encoding 114 /r put
		Encoding 115 /s put
		Encoding 116 /t put
		Encoding 117 /u put
		Encoding 118 /v put
		Encoding 119 /w put
		Encoding 120 /x put
		Encoding 121 /y put
		Encoding 122 /z put
		Encoding 123 /braceleft put
		Encoding 124 /bar put
		Encoding 125 /braceright put
		Encoding 126 /asciitilde put
		Encoding 161 /exclamdown put
		Encoding 162 /cent put
		Encoding 163 /sterling put
		Encoding 164 /fraction put
		Encoding 165 /yen put
		Encoding 166 /florin put
		Encoding 167 /section put
		Encoding 168 /currency put
		Encoding 169 /quotesingle put
		Encoding 170 /quotedblleft put
		Encoding 171 /guillemotleft put
		Encoding 172 /guilsinglleft put
		Encoding 173 /guilsinglright put
		Encoding 174 /fi put
		Encoding 175 /fl put
		Encoding 177 /endash put
		Encoding 178 /dagger put
		Encoding 179 /daggerdbl put
		Encoding 180 /periodcentered put
		Encoding 182 /paragraph put
		Encoding 183 /bullet put
		Encoding 184 /quotesinglbase put
		Encoding 185 /quotedblbase put
		Encoding 186 /quotedblright put
		Encoding 187 /guillemotright put
		Encoding 188 /ellipsis put
		Encoding 189 /perthousand put
		Encoding 191 /questiondown put
		Encoding 193 /grave put
		Encoding 194 /acute put
		Encoding 195 /circumflex put
		Encoding 196 /tilde put
		Encoding 197 /macron put
		Encoding 198 /breve put
		Encoding 199 /dotaccent put
		Encoding 200 /dieresis put
		Encoding 202 /ring put
		Encoding 203 /cedilla put
		Encoding 205 /hungarumlaut put
		Encoding 206 /ogonek put
		Encoding 207 /caron put
		Encoding 208 /emdash put
		Encoding 225 /AE put
		Encoding 227 /ordfeminine put
		Encoding 232 /Lslash put
		Encoding 233 /Oslash put
		Encoding 234 /OE put
		Encoding 235 /ordmasculine put
		Encoding 241 /ae put
		Encoding 245 /dotlessi put
		Encoding 248 /lslash put
		Encoding 249 /oslash put
		Encoding 250 /oe put
		Encoding 251 /germandbls put
	/BuildGlyph
		{ 2 copy exch /Metrics get exch 
			2 copy known {get}{pop pop 1000.0} ifelse
			0
			0 -213 1065 950
			setcachedevice
			exch /CharProcs get exch
			2 copy known not
					{pop /.notdef}
				if
			get exec
		} bind def

	/BuildChar
		{ 1 index /Encoding get exch get
		  1 index /BuildGlyph get exec
	  } bind def
	/Metrics 150 dict def
		Metrics begin
		/.notdef 1000 def
		/space 304.19921875 def
		/exclam 265.13671875 def
		/quotedbl 385.7421875 def
		/numbersign 608.3984375 def
		/dollar 608.3984375 def
		/percent 758.7890625 def
		/ampersand 727.5390625 def
		/quoteright 241.2109375 def
		/parenleft 310.05859375 def
		/parenright 310.05859375 def
		/asterisk 458.0078125 def
		/plus 794.921875 def
		/comma 265.13671875 def
		/hyphen 578.61328125 def
		/period 265.13671875 def
		/slash 524.4140625 def
		/zero 608.3984375 def
		/one 608.3984375 def
		/two 608.3984375 def
		/three 608.3984375 def
		/four 608.3984375 def
		/five 608.3984375 def
		/six 608.3984375 def
		/seven 608.3984375 def
		/eight 608.3984375 def
		/nine 608.3984375 def
		/colon 265.13671875 def
		/semicolon 265.13671875 def
		/less 794.921875 def
		/equal 794.921875 def
		/greater 794.921875 def
		/question 471.19140625 def
		/at 861.328125 def
		/A 747.0703125 def
		/B 605.95703125 def
		/C 714.35546875 def
		/D 770.01953125 def
		/E 568.359375 def
		/F 550.29296875 def
		/G 756.34765625 def
		/H 775.87890625 def
		/I 325.1953125 def
		/J 421.38671875 def
		/K 698.2421875 def
		/L 571.77734375 def
		/M 864.74609375 def
		/N 761.71875 def
		/O 783.203125 def
		/P 578.61328125 def
		/Q 787.59765625 def
		/R 686.03515625 def
		/S 549.31640625 def
		/T 662.59765625 def
		/U 727.05078125 def
		/V 656.25 def
		/W 877.9296875 def
		/X 624.0234375 def
		/Y 662.59765625 def
		/Z 632.32421875 def
		/bracketleft 310.05859375 def
		/backslash 524.4140625 def
		/bracketright 310.05859375 def
		/asciicircum 608.3984375 def
		/underscore 500.0 def
		/quoteleft 602.5390625 def
		/a 608.3984375 def
		/b 596.19140625 def
		/c 487.3046875 def
		/d 608.3984375 def
		/e 518.06640625 def
		/f 379.39453125 def
		/g 602.05078125 def
		/h 630.859375 def
		/i 289.0625 def
		/j 343.26171875 def
		/k 560.05859375 def
		/l 289.0625 def
		/m 944.3359375 def
		/n 630.859375 def
		/o 560.05859375 def
		/p 608.3984375 def
		/q 599.609375 def
		/r 469.7265625 def
		/s 439.94140625 def
		/t 355.46875 def
		/u 629.39453125 def
		/v 558.10546875 def
		/w 805.17578125 def
		/x 510.25390625 def
		/y 558.10546875 def
		/z 536.1328125 def
		/braceleft 337.40234375 def
		/bar 373.53515625 def
		/braceright 337.40234375 def
		/asciitilde 794.921875 def
		/exclamdown 265.13671875 def
		/cent 608.3984375 def
		/sterling 608.3984375 def
		/fraction 421.875 def
		/yen 608.3984375 def
		/florin 608.3984375 def
		/section 608.3984375 def
		/currency 608.3984375 def
		/quotesingle 241.2109375 def
		/quotedblleft 457.51953125 def
		/guillemotleft 524.90234375 def
		/guilsinglleft 330.078125 def
		/guilsinglright 330.078125 def
		/fi 750.0 def
		/fl 750.0 def
		/endash 578.61328125 def
		/dagger 608.3984375 def
		/daggerdbl 608.3984375 def
		/periodcentered 265.13671875 def
		/paragraph 608.3984375 def
		/bullet 608.3984375 def
		/quotesinglbase 265.13671875 def
		/quotedblbase 457.51953125 def
		/quotedblright 457.51953125 def
		/guillemotright 524.90234375 def
		/ellipsis 1000.0 def
		/perthousand 1065.4296875 def
		/questiondown 471.19140625 def
		/grave 602.5390625 def
		/acute 602.5390625 def
		/circumflex 602.5390625 def
		/tilde 602.5390625 def
		/macron 500.0 def
		/breve 602.5390625 def
		/dotaccent 602.5390625 def
		/dieresis 560.05859375 def
		/ring 602.5390625 def
		/cedilla 602.5390625 def
		/hungarumlaut 750.0 def
		/ogonek 602.5390625 def
		/caron 602.5390625 def
		/emdash 578.61328125 def
		/AE 906.73828125 def
		/ordfeminine 458.0078125 def
		/Lslash 571.77734375 def
		/Oslash 783.203125 def
		/OE 1005.37109375 def
		/ordmasculine 458.0078125 def
		/ae 881.34765625 def
		/dotlessi 289.0625 def
		/lslash 337.40234375 def
		/oslash 560.05859375 def
		/oe 892.08984375 def
		/germandbls 603.02734375 def
	end
	/CharProcs 150 dict def
	CharProcs begin
			%define Glyph dictionary and start filling
	/space
		{
fill
		} def

	/exclam
		{
84 0 moveto
103 96 lineto
200 96 lineto
180 0 lineto
84 0 lineto
closepath
156 192 moveto
199 578 lineto
228 722 lineto
324 722 lineto
295 578 lineto
186 192 lineto
156 192 lineto
closepath
fill
		} def

	/quotedbl
		{
197 530 moveto
197 771 lineto
293 771 lineto
227 530 lineto
197 530 lineto
closepath
360 530 moveto
360 771 lineto
456 771 lineto
390 530 lineto
360 530 lineto
closepath
fill
		} def

	/numbersign
		{
83 0 moveto
188 222 lineto
70 222 lineto
76 271 lineto
210 271 lineto
296 451 lineto
115 451 lineto
122 500 lineto
318 500 lineto
423 722 lineto
478 722 lineto
373 500 lineto
509 500 lineto
614 722 lineto
669 722 lineto
564 500 lineto
682 500 lineto
676 451 lineto
541 451 lineto
456 271 lineto
636 271 lineto
630 222 lineto
434 222 lineto
328 0 lineto
274 0 lineto
379 222 lineto
242 222 lineto
137 0 lineto
83 0 lineto
closepath
265 271 moveto
401 271 lineto
487 451 lineto
350 451 lineto
265 271 lineto
closepath
fill
		} def

	/dollar
		{
281 -60 moveto
293 0 lineto
233 3 181 13 139 27  curveto
164 150 lineto
212 150 lineto
211 141 lineto
208 114 lineto
206 101 205 92 205 87  curveto
205 56 237 38 300 33  curveto
361 339 lineto
340 354 lineto
296 386 266 414 250 437  curveto
234 461 226 490 226 524  curveto
226 578 247 625 289 666  curveto
331 706 381 726 437 726  curveto
449 783 lineto
479 783 lineto
467 722 lineto
524 719 580 708 635 688  curveto
612 572 lineto
563 572 lineto
565 581 lineto
567 597 568 606 568 607  curveto
570 618 571 628 571 635  curveto
571 651 560 664 540 675  curveto
519 685 493 690 462 690  curveto
405 409 lineto
445 378 lineto
488 346 517 318 532 295  curveto
548 272 555 245 555 214  curveto
555 158 533 109 489 69  curveto
446 28 390 5 323 0  curveto
312 -60 lineto
281 -60 lineto
closepath
330 33 moveto
423 48 470 101 470 193  curveto
470 234 442 276 387 319  curveto
330 33 lineto
closepath
379 431 moveto
431 689 lineto
394 683 364 667 341 640  curveto
319 614 307 582 307 545  curveto
307 508 331 470 379 431  curveto
closepath
fill
		} def

	/percent
		{
262 361 moveto
225 361 195 372 172 396  curveto
150 419 139 450 139 489  curveto
139 554 157 609 194 654  curveto
231 699 275 722 327 722  curveto
365 722 396 711 418 688  curveto
441 665 452 634 452 595  curveto
452 530 434 474 397 429  curveto
360 384 315 361 262 361  curveto
closepath
210 484 moveto
210 422 230 391 269 391  curveto
299 391 326 412 350 455  curveto
374 497 386 544 386 597  curveto
386 661 367 693 328 693  curveto
297 693 270 672 246 630  curveto
222 587 210 539 210 484  curveto
closepath
578 0 moveto
540 0 510 11 487 34  curveto
465 58 454 89 454 128  curveto
454 192 472 247 509 292  curveto
546 338 590 361 642 361  curveto
680 361 711 349 733 326  curveto
756 303 767 272 767 233  curveto
767 168 749 113 712 68  curveto
675 22 630 0 578 0  curveto
closepath
525 123 moveto
525 60 545 29 584 29  curveto
614 29 641 51 665 93  curveto
689 135 701 183 701 236  curveto
701 300 682 332 643 332  curveto
612 332 585 310 561 268  curveto
537 226 525 178 525 123  curveto
closepath
88 -18 moveto
753 740 lineto
817 740 lineto
152 -18 lineto
88 -18 lineto
closepath
fill
		} def

	/ampersand
		{
522 0 moveto
515 7 508 16 502 26  curveto
494 38 488 47 484 53  curveto
411 5 343 -19 280 -19  curveto
223 -19 175 0 136 38  curveto
97 77 78 124 78 181  curveto
78 298 154 383 308 436  curveto
293 480 286 517 286 545  curveto
286 599 306 645 346 683  curveto
386 721 434 740 490 740  curveto
530 740 562 729 587 707  curveto
611 684 624 654 624 618  curveto
624 530 553 463 411 415  curveto
442 328 487 236 545 139  curveto
597 192 624 255 624 328  curveto
624 338 620 345 613 348  curveto
606 350 585 353 550 354  curveto
540 355 lineto
545 385 lineto
792 385 lineto
787 355 lineto
777 354 lineto
759 353 748 353 744 353  curveto
728 353 717 350 710 344  curveto
704 337 696 322 687 297  curveto
683 285 lineto
659 221 620 163 564 111  curveto
574 95 lineto
601 55 629 34 660 32  curveto
697 30 lineto
704 30 lineto
698 0 lineto
522 0 lineto
closepath
469 82 moveto
404 187 353 295 316 406  curveto
225 364 180 298 180 209  curveto
180 159 194 119 222 87  curveto
250 56 287 41 332 41  curveto
381 41 427 54 469 82  curveto
closepath
401 442 moveto
493 487 539 550 539 630  curveto
539 682 518 708 476 708  curveto
447 708 423 696 405 670  curveto
386 644 377 611 377 570  curveto
377 536 385 493 401 442  curveto
closepath
fill
		} def

	/quoteright
		{
213 505 moveto
213 771 lineto
334 771 lineto
244 505 lineto
213 505 lineto
closepath
fill
		} def

	/parenleft
		{
239 -144 moveto
142 -70 93 42 93 197  curveto
93 310 122 417 180 518  curveto
238 619 318 703 421 771  curveto
415 740 lineto
364 697 324 651 297 604  curveto
269 557 244 494 223 415  curveto
190 295 174 189 174 97  curveto
174 4 196 -65 242 -114  curveto
239 -144 lineto
closepath
fill
		} def

	/parenright
		{
195 771 moveto
293 697 341 583 341 429  curveto
341 315 312 208 255 107  curveto
197 6 116 -77 13 -144  curveto
20 -114 lineto
91 -52 145 22 180 111  curveto
202 168 221 237 237 319  curveto
253 400 261 470 261 527  curveto
261 621 238 692 193 740  curveto
195 771 lineto
closepath
fill
		} def

	/asterisk
		{
167 413 moveto
298 525 lineto
302 516 309 509 319 504  curveto
224 361 lineto
167 413 lineto
closepath
187 624 moveto
309 568 lineto
300 560 295 549 295 533  curveto
151 553 lineto
187 624 lineto
closepath
401 722 moveto
353 572 lineto
344 575 338 577 333 577  curveto
330 577 324 575 317 572  curveto
328 722 lineto
401 722 lineto
closepath
522 548 moveto
369 530 lineto
370 534 370 538 370 542  curveto
370 548 367 556 360 564  curveto
510 619 lineto
522 548 lineto
closepath
363 363 moveto
331 502 lineto
344 502 355 507 363 517  curveto
435 404 lineto
363 363 lineto
closepath
fill
		} def

	/plus
		{
373 0 moveto
426 265 lineto
161 265 lineto
170 313 lineto
436 313 lineto
488 578 lineto
536 578 lineto
483 313 lineto
749 313 lineto
739 265 lineto
474 265 lineto
421 0 lineto
373 0 lineto
closepath
fill
		} def

	/comma
		{
117 0 moveto
71 0 lineto
97 120 lineto
217 120 lineto
195 11 lineto
173 -100 121 -156 39 -156  curveto
46 -126 lineto
80 -126 102 -96 111 -35  curveto
117 0 lineto
closepath
fill
		} def

	/hyphen
		{
125 265 moveto
137 325 lineto
570 325 lineto
558 265 lineto
125 265 lineto
closepath
fill
		} def

	/period
		{
72 0 moveto
96 120 lineto
216 120 lineto
192 0 lineto
72 0 lineto
closepath
fill
		} def

	/slash
		{
79 -144 moveto
509 723 lineto
560 723 lineto
130 -144 lineto
79 -144 lineto
closepath
fill
		} def

	/zero
		{
308 -18 moveto
248 -18 200 4 163 48  curveto
126 92 108 150 108 223  curveto
108 361 141 482 208 586  curveto
276 689 354 741 444 741  curveto
504 741 552 719 589 674  curveto
626 630 644 572 644 500  curveto
644 361 611 239 544 136  curveto
477 33 398 -18 308 -18  curveto
closepath
207 206 moveto
207 76 243 12 315 12  curveto
376 12 429 63 476 167  curveto
522 270 545 390 545 526  curveto
545 649 510 710 439 710  curveto
378 710 324 660 277 558  curveto
230 456 207 339 207 206  curveto
closepath
fill
		} def

	/one
		{
497 729 moveto
377 126 lineto
372 99 369 76 369 56  curveto
369 42 382 34 407 33  curveto
439 30 lineto
497 30 lineto
491 0 lineto
117 0 lineto
123 30 lineto
181 30 lineto
212 30 233 33 244 39  curveto
255 45 263 58 269 78  curveto
281 126 lineto
370 574 lineto
377 624 lineto
380 641 lineto
378 652 369 657 351 657  curveto
345 657 326 654 294 648  curveto
245 640 lineto
250 670 lineto
497 729 lineto
closepath
fill
		} def

	/two
		{
86 0 moveto
97 54 lineto
132 127 203 205 309 288  curveto
359 326 lineto
478 419 538 504 538 580  curveto
538 666 497 709 415 709  curveto
335 709 289 684 275 633  curveto
265 593 lineto
263 584 lineto
214 584 lineto
236 693 lineto
302 725 370 741 441 741  curveto
503 741 552 727 587 699  curveto
622 671 640 632 640 583  curveto
640 536 626 495 599 459  curveto
572 423 523 384 454 340  curveto
379 292 lineto
262 219 203 150 203 84  curveto
540 84 lineto
517 0 lineto
86 0 lineto
closepath
fill
		} def

	/three
		{
105 2 moveto
130 126 lineto
178 126 lineto
177 117 lineto
176 109 174 96 171 78  curveto
170 72 170 67 170 63  curveto
170 48 180 36 200 26  curveto
220 16 245 11 275 11  curveto
328 11 373 33 410 77  curveto
448 121 466 173 466 235  curveto
466 331 402 379 274 379  curveto
243 379 lineto
249 409 lineto
293 409 lineto
364 409 420 426 460 459  curveto
501 492 521 537 521 595  curveto
521 630 510 658 488 679  curveto
466 700 437 710 400 710  curveto
339 710 304 690 295 649  curveto
290 629 287 617 286 612  curveto
284 603 lineto
236 603 lineto
259 719 lineto
312 733 363 740 410 740  curveto
548 740 617 693 617 598  curveto
617 552 598 511 561 473  curveto
524 436 474 409 411 392  curveto
516 376 568 326 568 241  curveto
568 166 540 104 483 55  curveto
427 6 355 -18 267 -18  curveto
215 -18 161 -11 105 2  curveto
closepath
fill
		} def

	/four
		{
392 201 moveto
67 201 lineto
78 255 lineto
534 731 lineto
582 731 lineto
491 273 lineto
593 273 lineto
573 201 lineto
477 201 lineto
461 126 lineto
456 99 454 76 454 57  curveto
454 42 466 34 491 33  curveto
524 30 lineto
533 30 lineto
527 0 lineto
255 0 lineto
262 30 lineto
277 30 lineto
310 33 lineto
331 34 346 40 354 52  curveto
362 63 369 88 377 126  curveto
392 201 lineto
closepath
138 273 moveto
407 273 lineto
477 629 lineto
138 273 lineto
closepath
fill
		} def

	/five
		{
117 2 moveto
142 126 lineto
190 126 lineto
189 117 lineto
185 88 lineto
183 77 183 69 183 63  curveto
183 50 192 38 212 28  curveto
231 18 254 13 281 13  curveto
334 13 379 36 416 83  curveto
454 129 472 185 472 251  curveto
472 361 412 417 291 417  curveto
268 417 241 414 209 410  curveto
272 722 lineto
655 722 lineto
638 638 lineto
285 638 lineto
247 445 lineto
273 447 295 449 312 449  curveto
393 449 458 431 504 397  curveto
551 362 575 315 575 255  curveto
575 174 546 108 488 57  curveto
430 7 355 -18 263 -18  curveto
215 -18 166 -11 117 2  curveto
closepath
fill
		} def

	/six
		{
249 400 moveto
309 446 368 469 425 469  curveto
479 469 523 453 556 421  curveto
590 388 607 346 607 294  curveto
607 212 578 139 520 76  curveto
462 13 395 -18 320 -18  curveto
256 -18 207 3 170 47  curveto
134 91 116 152 116 229  curveto
116 298 129 369 154 441  curveto
178 513 211 573 252 623  curveto
318 701 396 740 488 740  curveto
544 740 601 728 656 703  curveto
633 587 lineto
585 587 lineto
587 599 lineto
591 636 lineto
593 645 593 651 593 655  curveto
593 669 582 681 558 693  curveto
535 704 509 710 481 710  curveto
429 710 382 683 341 628  curveto
299 573 269 497 249 400  curveto
closepath
212 200 moveto
212 76 252 14 332 14  curveto
379 14 421 42 457 98  curveto
493 155 511 219 511 293  curveto
511 384 473 430 397 430  curveto
341 430 296 409 262 368  curveto
229 326 212 271 212 200  curveto
closepath
fill
		} def

	/seven
		{
152 0 moveto
165 80 209 163 285 249  curveto
400 378 lineto
628 632 lineto
231 632 lineto
249 722 lineto
707 722 lineto
693 653 lineto
567 527 467 406 392 291  curveto
317 176 275 79 266 0  curveto
152 0 lineto
closepath
fill
		} def

	/eight
		{
301 387 moveto
248 424 221 469 221 524  curveto
221 584 245 635 292 677  curveto
339 720 396 741 462 741  curveto
518 741 562 729 596 704  curveto
629 680 646 647 646 607  curveto
646 528 585 459 464 398  curveto
555 343 601 280 601 208  curveto
601 146 574 92 520 48  curveto
466 4 401 -18 325 -18  curveto
259 -18 208 -3 171 26  curveto
134 55 116 96 116 149  curveto
116 239 177 319 301 387  curveto
closepath
340 359 moveto
325 367 lineto
248 315 209 245 209 157  curveto
209 60 250 12 333 12  curveto
379 12 418 28 450 61  curveto
482 93 499 132 499 179  curveto
499 212 487 242 464 268  curveto
441 294 400 324 340 359  curveto
closepath
436 417 moveto
520 456 562 515 562 594  curveto
562 672 525 710 451 710  curveto
413 710 380 696 354 668  curveto
328 640 314 605 314 564  curveto
314 514 355 465 436 417  curveto
closepath
fill
		} def

	/nine
		{
513 321 moveto
452 275 394 252 336 252  curveto
282 252 238 269 205 301  curveto
171 334 154 376 154 428  curveto
154 510 183 583 241 646  curveto
299 709 365 740 441 740  curveto
505 740 555 718 591 675  curveto
627 631 645 570 645 492  curveto
645 424 632 354 607 281  curveto
582 209 549 148 509 99  curveto
443 21 365 -18 273 -18  curveto
216 -18 160 -5 104 19  curveto
127 135 lineto
176 135 lineto
174 123 lineto
169 86 lineto
168 77 167 71 167 67  curveto
167 54 179 42 203 30  curveto
227 18 251 12 277 12  curveto
331 12 378 39 420 94  curveto
461 148 492 224 513 321  curveto
closepath
548 522 moveto
548 646 508 708 429 708  curveto
382 708 340 680 304 624  curveto
268 568 250 503 250 429  curveto
250 337 288 292 363 292  curveto
420 292 465 312 498 354  curveto
532 395 548 451 548 522  curveto
closepath
fill
		} def

	/colon
		{
72 0 moveto
96 120 lineto
216 120 lineto
192 0 lineto
72 0 lineto
closepath
153 409 moveto
177 530 lineto
298 530 lineto
274 409 lineto
153 409 lineto
closepath
fill
		} def

	/semicolon
		{
117 0 moveto
72 0 lineto
96 120 lineto
216 120 lineto
194 11 lineto
172 -100 121 -156 41 -156  curveto
46 -126 lineto
79 -126 98 -105 106 -62  curveto
110 -35 lineto
117 0 lineto
closepath
153 409 moveto
177 530 lineto
297 530 lineto
273 409 lineto
153 409 lineto
closepath
fill
		} def

	/less
		{
686 0 moveto
166 289 lineto
801 578 lineto
791 524 lineto
274 289 lineto
274 288 lineto
697 53 lineto
686 0 lineto
closepath
fill
		} def

	/equal
		{
143 174 moveto
152 222 lineto
730 222 lineto
721 174 lineto
143 174 lineto
closepath
179 355 moveto
188 403 lineto
767 403 lineto
757 355 lineto
179 355 lineto
closepath
fill
		} def

	/greater
		{
108 0 moveto
119 53 lineto
635 288 lineto
635 289 lineto
212 524 lineto
223 578 lineto
744 289 lineto
108 0 lineto
closepath
fill
		} def

	/question
		{
147 0 moveto
167 96 lineto
263 96 lineto
244 0 lineto
147 0 lineto
closepath
186 192 moveto
188 201 lineto
194 233 204 259 215 278  curveto
227 296 249 322 283 355  curveto
324 396 lineto
401 473 440 542 440 604  curveto
440 635 430 661 410 680  curveto
390 700 364 709 332 709  curveto
267 709 230 687 219 642  curveto
215 622 211 605 208 593  curveto
205 584 lineto
157 584 lineto
182 707 lineto
248 729 309 740 362 740  curveto
415 740 459 728 492 703  curveto
526 678 542 646 542 606  curveto
542 574 534 546 517 522  curveto
501 499 468 470 418 434  curveto
384 409 lineto
324 365 289 293 279 192  curveto
186 192 lineto
closepath
fill
		} def

	/at
		{
609 21 moveto
552 -4 496 -18 441 -18  curveto
347 -18 269 10 208 66  curveto
146 123 116 194 116 281  curveto
116 390 156 490 236 583  curveto
327 688 441 740 577 740  curveto
669 740 746 711 808 653  curveto
870 594 900 521 900 434  curveto
900 356 876 288 827 230  curveto
779 173 722 144 656 144  curveto
600 144 571 166 571 210  curveto
571 222 573 235 576 247  curveto
587 289 lineto
592 310 lineto
582 310 lineto
517 199 454 144 392 144  curveto
333 144 303 182 303 257  curveto
303 335 330 407 384 473  curveto
438 539 497 572 561 572  curveto
575 572 588 570 601 567  curveto
640 556 lineto
642 555 646 554 653 553  curveto
699 553 lineto
643 273 lineto
639 254 638 239 638 226  curveto
638 195 654 180 687 180  curveto
733 180 774 207 813 262  curveto
851 316 870 375 870 439  curveto
870 516 841 580 784 632  curveto
727 684 656 710 572 710  curveto
463 710 365 667 277 580  curveto
190 493 146 396 146 287  curveto
146 207 174 141 229 89  curveto
284 38 355 12 440 12  curveto
492 12 544 24 599 48  curveto
609 21 lineto
closepath
596 399 moveto
617 502 lineto
590 516 561 523 528 523  curveto
484 523 448 500 418 454  curveto
389 408 374 350 374 281  curveto
374 230 389 204 419 204  curveto
467 204 526 269 596 399  curveto
closepath
fill
		} def

	/A
		{
0 0 moveto
5 30 lineto
15 30 lineto
39 31 lineto
60 32 79 47 97 75  curveto
129 124 lineto
507 734 lineto
542 734 lineto
658 133 lineto
666 89 675 61 683 49  curveto
692 38 709 32 734 30  curveto
747 30 lineto
740 0 lineto
469 0 lineto
476 30 lineto
491 30 lineto
538 30 562 38 562 53  curveto
562 70 559 93 553 123  curveto
535 222 lineto
234 222 lineto
173 125 lineto
169 119 165 111 159 100  curveto
141 66 lineto
137 59 135 53 135 48  curveto
135 36 147 30 170 30  curveto
195 30 lineto
208 30 lineto
201 0 lineto
0 0 lineto
closepath
253 265 moveto
525 265 lineto
463 604 lineto
253 265 lineto
closepath
fill
		} def

	/B
		{
426 370 moveto
541 347 599 292 599 205  curveto
599 143 575 93 527 56  curveto
479 18 417 0 338 0  curveto
23 0 lineto
29 30 lineto
38 30 lineto
72 33 lineto
93 34 107 40 115 52  curveto
123 63 131 88 139 126  curveto
232 596 lineto
237 622 240 646 240 666  curveto
240 680 227 688 202 689  curveto
170 691 lineto
161 692 lineto
167 722 lineto
397 722 lineto
482 722 544 712 581 690  curveto
619 669 638 635 638 587  curveto
638 537 619 492 580 453  curveto
542 413 491 386 426 370  curveto
closepath
287 358 moveto
238 129 lineto
231 86 lineto
227 68 lineto
229 46 252 35 295 35  curveto
352 35 400 52 437 86  curveto
475 121 494 164 494 215  curveto
494 259 478 294 445 320  curveto
413 345 369 358 313 358  curveto
287 358 lineto
closepath
292 391 moveto
319 391 lineto
386 391 439 408 478 442  curveto
517 476 536 522 536 582  curveto
536 621 524 649 499 665  curveto
474 681 432 689 372 689  curveto
352 689 lineto
292 391 lineto
closepath
fill
		} def

	/C
		{
647 43 moveto
548 2 455 -18 370 -18  curveto
290 -18 227 6 180 55  curveto
134 104 111 172 111 257  curveto
111 393 155 507 244 601  curveto
333 694 443 740 573 740  curveto
637 740 704 732 776 716  curveto
747 572 lineto
687 572 lineto
688 582 lineto
690 592 691 602 693 611  curveto
695 621 696 630 696 636  curveto
696 657 684 674 659 687  curveto
634 701 603 708 566 708  curveto
483 708 414 677 357 615  curveto
265 516 219 397 219 257  curveto
219 189 238 135 275 96  curveto
313 57 364 37 429 37  curveto
485 37 561 53 656 85  curveto
647 43 lineto
closepath
fill
		} def

	/D
		{
23 0 moveto
29 30 lineto
38 30 lineto
72 33 lineto
93 34 107 40 115 52  curveto
123 63 131 88 139 126  curveto
232 596 lineto
237 622 240 646 240 666  curveto
240 680 227 688 202 689  curveto
170 691 lineto
161 692 lineto
167 722 lineto
391 722 lineto
454 723 lineto
503 724 lineto
522 724 lineto
708 724 800 639 800 471  curveto
800 334 759 222 676 133  curveto
594 44 489 0 362 0  curveto
23 0 lineto
closepath
353 689 moveto
241 126 lineto
235 88 lineto
232 71 lineto
235 45 263 32 316 32  curveto
450 32 549 84 614 187  curveto
667 270 693 364 693 470  curveto
693 551 672 608 630 641  curveto
587 673 513 689 408 689  curveto
353 689 lineto
closepath
fill
		} def

	/E
		{
544 0 moveto
23 0 lineto
29 30 lineto
38 30 lineto
72 33 lineto
93 34 107 40 115 52  curveto
123 63 131 88 139 126  curveto
232 596 lineto
237 622 240 646 240 666  curveto
240 680 227 688 202 689  curveto
170 691 lineto
161 692 lineto
167 722 lineto
661 722 lineto
636 596 lineto
581 596 lineto
583 605 lineto
588 646 lineto
592 664 lineto
589 677 562 683 510 683  curveto
352 683 lineto
294 394 lineto
427 394 lineto
458 396 lineto
479 396 492 405 497 423  curveto
498 429 500 437 502 445  curveto
505 454 lineto
544 454 lineto
512 295 lineto
473 295 lineto
475 304 lineto
477 319 478 330 478 336  curveto
478 346 470 352 454 353  curveto
419 355 lineto
287 355 lineto
241 126 lineto
237 108 235 90 235 73  curveto
235 60 240 51 249 47  curveto
257 43 277 42 307 42  curveto
384 42 lineto
431 42 462 44 476 48  curveto
490 52 499 63 503 79  curveto
514 123 lineto
516 132 lineto
570 132 lineto
544 0 lineto
closepath
fill
		} def

	/F
		{
286 350 moveto
241 126 lineto
236 104 234 83 234 63  curveto
234 50 237 42 242 38  curveto
248 35 260 33 278 33  curveto
279 33 291 32 315 30  curveto
324 30 lineto
318 0 lineto
23 0 lineto
29 30 lineto
38 30 lineto
72 33 lineto
93 34 107 40 115 52  curveto
123 63 131 88 139 126  curveto
232 596 lineto
237 622 240 646 240 666  curveto
240 680 227 688 202 689  curveto
170 691 lineto
161 692 lineto
167 722 lineto
661 722 lineto
636 596 lineto
581 596 lineto
583 605 lineto
588 646 lineto
592 664 lineto
589 677 562 683 510 683  curveto
352 683 lineto
293 389 lineto
426 389 lineto
457 390 lineto
471 390 481 392 485 395  curveto
489 398 493 406 496 418  curveto
496 420 498 428 501 440  curveto
504 449 lineto
543 449 lineto
511 290 lineto
472 290 lineto
474 299 lineto
476 314 477 325 477 331  curveto
477 341 469 347 453 348  curveto
418 350 lineto
286 350 lineto
closepath
fill
		} def

	/G
		{
646 32 moveto
540 -1 453 -18 382 -18  curveto
296 -18 230 5 182 53  curveto
135 101 111 169 111 256  curveto
111 393 155 508 244 601  curveto
332 694 441 741 571 741  curveto
639 741 708 732 776 716  curveto
743 584 lineto
689 584 lineto
690 594 lineto
695 623 lineto
697 634 698 643 698 651  curveto
698 688 654 707 566 707  curveto
470 707 388 662 321 572  curveto
253 483 219 374 219 247  curveto
219 177 237 122 274 83  curveto
310 45 361 25 427 25  curveto
463 25 503 33 546 48  curveto
573 184 lineto
578 211 581 234 581 253  curveto
581 268 569 276 543 277  curveto
511 279 lineto
502 280 lineto
508 310 lineto
788 310 lineto
782 280 lineto
773 279 lineto
726 276 701 269 695 257  curveto
684 229 676 205 672 184  curveto
646 32 lineto
closepath
fill
		} def

	/H
		{
286 354 moveto
241 126 lineto
236 99 233 76 233 57  curveto
233 42 245 34 271 33  curveto
303 30 lineto
312 30 lineto
306 0 lineto
23 0 lineto
29 30 lineto
38 30 lineto
72 33 lineto
93 34 107 40 115 52  curveto
123 63 131 88 139 126  curveto
232 596 lineto
237 623 240 646 240 666  curveto
240 680 228 688 203 689  curveto
170 691 lineto
161 692 lineto
167 722 lineto
450 722 lineto
444 692 lineto
435 691 lineto
401 689 lineto
380 688 366 681 358 670  curveto
350 659 342 634 334 596  curveto
294 393 lineto
638 393 lineto
678 596 lineto
683 623 686 646 686 666  curveto
686 680 673 688 648 689  curveto
616 691 lineto
607 692 lineto
613 722 lineto
896 722 lineto
890 692 lineto
881 691 lineto
848 689 lineto
826 688 812 681 804 670  curveto
796 659 788 634 781 596  curveto
687 126 lineto
682 99 679 76 679 57  curveto
679 42 692 34 717 33  curveto
750 30 lineto
758 30 lineto
752 0 lineto
469 0 lineto
475 30 lineto
484 30 lineto
518 33 lineto
539 34 553 40 561 52  curveto
569 63 577 88 585 126  curveto
630 354 lineto
286 354 lineto
closepath
fill
		} def

	/I
		{
310 30 moveto
304 0 lineto
21 0 lineto
26 30 lineto
36 30 lineto
69 33 lineto
90 34 105 40 113 52  curveto
121 63 128 88 136 126  curveto
229 596 lineto
235 622 237 646 237 666  curveto
237 680 225 688 200 689  curveto
167 691 lineto
158 692 lineto
165 722 lineto
447 722 lineto
441 692 lineto
432 691 lineto
399 689 lineto
378 688 363 681 355 670  curveto
347 659 340 634 332 596  curveto
238 126 lineto
233 99 230 76 230 57  curveto
230 42 243 34 268 33  curveto
301 30 lineto
310 30 lineto
closepath
fill
		} def

	/J
		{
-21 -134 moveto
0 -22 lineto
58 -22 lineto
56 -34 lineto
54 -53 52 -67 52 -76  curveto
52 -97 70 -107 104 -107  curveto
159 -107 195 -70 211 3  curveto
225 72 lineto
329 596 lineto
334 623 337 646 337 666  curveto
337 680 324 688 299 689  curveto
267 691 lineto
258 692 lineto
264 722 lineto
547 722 lineto
541 692 lineto
532 691 lineto
498 689 lineto
477 688 463 681 455 670  curveto
447 659 439 634 432 596  curveto
339 131 lineto
319 30 288 -40 246 -82  curveto
203 -123 141 -144 60 -144  curveto
34 -144 7 -141 -21 -134  curveto
closepath
fill
		} def

	/K
		{
289 365 moveto
241 126 lineto
236 99 233 76 233 56  curveto
233 42 244 34 268 33  curveto
297 30 lineto
306 30 lineto
300 0 lineto
23 0 lineto
29 30 lineto
38 30 lineto
72 33 lineto
93 34 107 40 115 52  curveto
123 63 131 88 139 126  curveto
232 596 lineto
237 622 240 646 240 666  curveto
240 680 227 688 202 689  curveto
170 691 lineto
161 692 lineto
167 722 lineto
450 722 lineto
444 692 lineto
435 691 lineto
401 689 lineto
380 688 366 681 358 670  curveto
350 659 342 634 334 596  curveto
289 368 lineto
553 596 lineto
571 611 585 625 597 638  curveto
616 660 628 673 633 677  curveto
637 680 639 682 639 684  curveto
639 689 631 692 615 692  curveto
576 692 lineto
564 692 lineto
570 722 lineto
780 722 lineto
773 692 lineto
765 691 lineto
744 691 lineto
723 691 704 683 685 667  curveto
602 592 lineto
380 404 lineto
572 124 lineto
608 69 lineto
624 45 649 33 684 30  curveto
693 30 lineto
687 0 lineto
421 0 lineto
427 30 lineto
437 30 lineto
466 30 lineto
485 30 495 35 495 44  curveto
495 48 488 61 475 83  curveto
449 127 lineto
289 365 lineto
closepath
fill
		} def

	/L
		{
553 0 moveto
23 0 lineto
29 30 lineto
38 30 lineto
72 33 lineto
93 34 107 40 115 52  curveto
123 63 131 88 139 126  curveto
232 596 lineto
237 622 240 646 240 666  curveto
240 680 227 688 202 689  curveto
170 691 lineto
161 692 lineto
167 722 lineto
450 722 lineto
444 692 lineto
435 691 lineto
401 689 lineto
380 688 366 681 358 670  curveto
350 659 342 634 334 596  curveto
241 126 lineto
235 97 232 77 232 65  curveto
232 55 236 48 245 45  curveto
253 43 274 42 308 42  curveto
394 42 lineto
440 42 471 44 487 50  curveto
502 55 513 67 517 85  curveto
528 134 lineto
531 144 lineto
582 144 lineto
553 0 lineto
closepath
fill
		} def

	/M
		{
783 645 moveto
444 83 lineto
409 83 lineto
285 593 lineto
192 126 lineto
187 99 184 76 184 57  curveto
184 42 197 34 222 33  curveto
254 30 lineto
263 30 lineto
257 0 lineto
23 0 lineto
29 30 lineto
38 30 lineto
72 33 lineto
91 34 103 37 109 42  curveto
116 47 121 59 126 78  curveto
139 126 lineto
234 596 lineto
240 622 242 645 242 666  curveto
242 680 230 688 205 689  curveto
172 691 lineto
163 692 lineto
169 722 lineto
353 722 lineto
478 206 lineto
793 722 lineto
984 722 lineto
978 692 lineto
969 691 lineto
936 689 lineto
914 688 900 681 892 670  curveto
884 659 876 634 869 596  curveto
775 126 lineto
770 99 767 76 767 57  curveto
767 42 780 34 805 33  curveto
837 30 lineto
846 30 lineto
840 0 lineto
565 0 lineto
571 30 lineto
580 30 lineto
614 33 lineto
635 34 649 40 657 52  curveto
665 63 673 88 681 126  curveto
783 645 lineto
closepath
fill
		} def

	/N
		{
651 -8 moveto
613 -8 lineto
277 593 lineto
184 126 lineto
179 99 176 76 176 57  curveto
176 42 188 34 213 33  curveto
246 30 lineto
255 30 lineto
249 0 lineto
22 0 lineto
28 30 lineto
38 30 lineto
71 33 lineto
92 34 107 40 114 52  curveto
122 63 130 88 138 126  curveto
231 596 lineto
236 623 239 646 239 666  curveto
239 680 227 688 202 689  curveto
169 691 lineto
160 692 lineto
166 722 lineto
318 722 lineto
638 146 lineto
727 596 lineto
732 623 735 646 735 666  curveto
735 680 722 688 697 689  curveto
665 691 lineto
656 692 lineto
662 722 lineto
887 722 lineto
881 692 lineto
872 691 lineto
838 689 lineto
817 688 803 681 795 670  curveto
787 659 779 634 771 596  curveto
651 -8 lineto
closepath
fill
		} def

	/O
		{
374 -18 moveto
293 -18 229 5 182 54  curveto
134 103 111 169 111 252  curveto
111 384 154 499 241 595  curveto
328 692 431 740 549 740  curveto
632 740 697 716 745 668  curveto
792 620 816 554 816 470  curveto
816 336 772 221 685 125  curveto
598 29 494 -18 374 -18  curveto
closepath
220 244 moveto
220 173 236 118 267 78  curveto
299 38 343 18 398 18  curveto
479 18 550 63 614 155  curveto
678 247 709 351 709 466  curveto
709 540 693 598 661 641  curveto
629 685 586 707 532 707  curveto
449 707 376 660 314 567  curveto
251 475 220 367 220 244  curveto
closepath
fill
		} def

	/P
		{
167 722 moveto
327 722 lineto
442 725 lineto
491 726 lineto
606 726 663 677 663 580  curveto
663 498 632 431 569 378  curveto
507 326 427 300 330 300  curveto
274 300 lineto
240 126 lineto
235 99 232 76 232 57  curveto
232 42 245 34 270 33  curveto
302 30 lineto
323 30 lineto
317 0 lineto
23 0 lineto
29 30 lineto
38 30 lineto
72 33 lineto
93 34 107 40 115 52  curveto
123 63 131 88 139 126  curveto
232 596 lineto
237 622 240 646 240 666  curveto
240 680 227 688 202 689  curveto
170 691 lineto
161 692 lineto
167 722 lineto
closepath
281 334 moveto
323 334 lineto
390 334 446 357 489 402  curveto
533 447 555 505 555 576  curveto
555 652 509 689 417 689  curveto
352 689 lineto
281 334 lineto
closepath
fill
		} def

	/Q
		{
920 -95 moveto
840 -184 lineto
824 -188 810 -190 799 -190  curveto
736 -190 672 -173 605 -140  curveto
539 -107 485 -65 443 -12  curveto
426 -15 408 -17 391 -17  curveto
302 -17 234 6 187 52  curveto
139 98 116 164 116 250  curveto
116 382 159 497 246 594  curveto
333 692 435 740 553 740  curveto
636 740 700 716 747 669  curveto
793 621 816 554 816 469  curveto
816 358 784 257 721 168  curveto
657 78 577 21 481 -3  curveto
566 -76 670 -112 792 -112  curveto
836 -112 879 -106 920 -95  curveto
closepath
222 244 moveto
222 174 238 118 270 78  curveto
301 38 345 18 401 18  curveto
480 18 552 63 616 155  curveto
680 247 712 349 712 463  curveto
712 538 696 597 664 641  curveto
632 685 589 707 535 707  curveto
452 707 379 660 316 567  curveto
253 475 222 367 222 244  curveto
closepath
fill
		} def

	/R
		{
520 0 moveto
364 340 lineto
283 340 lineto
240 126 lineto
235 99 232 76 232 57  curveto
232 42 245 34 270 33  curveto
303 30 lineto
312 30 lineto
306 0 lineto
22 0 lineto
28 30 lineto
38 30 lineto
71 33 lineto
92 34 107 40 114 52  curveto
122 63 130 88 138 126  curveto
231 596 lineto
237 622 239 646 239 666  curveto
239 680 227 688 202 689  curveto
169 691 lineto
160 692 lineto
167 722 lineto
337 722 lineto
403 723 lineto
478 726 lineto
601 726 663 678 663 583  curveto
663 533 645 488 609 446  curveto
573 405 525 373 463 351  curveto
574 124 lineto
609 63 lineto
620 44 636 33 656 32  curveto
677 30 lineto
686 30 lineto
680 0 lineto
520 0 lineto
closepath
289 372 moveto
330 372 lineto
398 372 453 390 493 428  curveto
534 466 555 516 555 578  curveto
555 652 508 689 415 689  curveto
353 689 lineto
289 372 lineto
closepath
fill
		} def

	/S
		{
59 17 moveto
87 156 lineto
141 156 lineto
140 147 lineto
136 121 134 105 132 99  curveto
130 90 129 85 129 83  curveto
129 64 144 48 172 35  curveto
201 22 236 15 277 15  curveto
318 15 354 31 384 62  curveto
414 93 429 130 429 172  curveto
429 221 400 269 341 316  curveto
295 353 lineto
219 415 181 475 181 534  curveto
181 593 204 643 252 682  curveto
299 721 359 740 430 740  curveto
486 740 551 728 626 705  curveto
597 560 lineto
543 560 lineto
545 574 lineto
551 629 lineto
553 647 lineto
552 664 539 679 513 691  curveto
488 703 458 708 422 708  curveto
382 708 348 695 321 668  curveto
293 641 279 607 279 568  curveto
279 520 311 470 374 419  curveto
423 380 lineto
497 320 534 259 534 197  curveto
534 133 508 81 457 41  curveto
405 1 338 -18 255 -18  curveto
204 -18 145 -8 77 11  curveto
59 17 lineto
closepath
fill
		} def

	/T
		{
416 683 moveto
300 683 lineto
250 681 lineto
232 681 221 678 215 674  curveto
209 669 205 659 202 643  curveto
198 625 195 610 192 600  curveto
189 590 lineto
138 590 lineto
164 722 lineto
785 722 lineto
759 590 lineto
708 590 lineto
709 600 lineto
711 611 713 625 716 643  curveto
718 650 718 657 718 665  curveto
718 675 707 681 684 681  curveto
634 683 lineto
518 683 lineto
407 126 lineto
402 99 399 76 399 57  curveto
399 42 412 34 437 33  curveto
470 30 lineto
491 30 lineto
485 0 lineto
177 0 lineto
184 30 lineto
205 30 lineto
230 30 252 33 269 38  curveto
282 42 294 71 305 126  curveto
416 683 lineto
closepath
fill
		} def

	/U
		{
151 692 moveto
157 722 lineto
440 722 lineto
435 692 lineto
425 691 lineto
392 689 lineto
371 688 356 681 348 670  curveto
340 659 333 634 325 596  curveto
253 235 lineto
248 210 246 186 246 163  curveto
246 117 259 81 285 55  curveto
311 29 347 16 393 16  curveto
514 16 591 103 626 277  curveto
689 596 lineto
695 622 698 646 698 666  curveto
698 680 685 688 660 689  curveto
627 691 lineto
619 692 lineto
625 722 lineto
856 722 lineto
850 692 lineto
841 691 lineto
807 689 lineto
786 688 772 681 764 670  curveto
756 659 748 634 740 596  curveto
675 266 lineto
638 76 539 -18 380 -18  curveto
308 -18 251 -1 209 32  curveto
168 66 147 113 147 172  curveto
147 201 151 233 158 270  curveto
223 596 lineto
228 623 230 646 230 666  curveto
230 680 218 688 193 689  curveto
160 691 lineto
151 692 lineto
closepath
fill
		} def

	/V
		{
307 -9 moveto
190 595 lineto
178 643 lineto
173 664 168 677 162 682  curveto
156 687 143 690 124 691  curveto
115 692 lineto
121 722 lineto
371 722 lineto
365 692 lineto
356 692 lineto
328 691 lineto
300 691 287 680 287 658  curveto
287 656 287 653 288 650  curveto
292 622 lineto
297 588 lineto
386 117 lineto
669 593 lineto
673 599 677 608 683 620  curveto
691 636 698 648 702 657  curveto
706 664 708 669 708 674  curveto
708 686 697 692 675 692  curveto
648 692 lineto
639 692 lineto
646 722 lineto
826 722 lineto
820 692 lineto
811 691 lineto
789 690 775 688 769 684  curveto
762 681 755 671 745 655  curveto
700 579 lineto
350 -9 lineto
307 -9 lineto
closepath
fill
		} def

	/W
		{
221 -9 moveto
189 595 lineto
186 647 lineto
184 673 175 687 159 690  curveto
128 691 lineto
120 692 lineto
125 722 lineto
378 722 lineto
373 692 lineto
364 692 lineto
327 692 304 689 295 684  curveto
287 678 282 662 282 638  curveto
285 593 lineto
308 167 lineto
581 716 lineto
627 716 lineto
667 165 lineto
878 590 lineto
887 609 893 621 895 625  curveto
909 659 lineto
911 665 912 669 912 672  curveto
912 685 899 691 874 691  curveto
845 692 lineto
836 692 lineto
842 722 lineto
1042 722 lineto
1035 692 lineto
1026 691 lineto
998 690 lineto
983 689 972 687 967 682  curveto
961 678 954 666 946 649  curveto
916 590 lineto
617 -9 lineto
583 -9 lineto
544 565 lineto
259 -9 lineto
221 -9 lineto
closepath
fill
		} def

	/X
		{
-23 0 moveto
-17 30 lineto
-8 30 lineto
18 32 35 34 42 38  curveto
50 42 62 52 80 70  curveto
132 123 lineto
342 356 lineto
246 597 lineto
221 653 lineto
211 677 196 689 177 690  curveto
150 691 lineto
141 692 lineto
147 722 lineto
409 722 lineto
403 692 lineto
394 692 lineto
371 691 lineto
344 691 331 682 331 663  curveto
331 654 334 642 341 627  curveto
347 615 351 604 355 595  curveto
423 428 lineto
574 598 lineto
582 606 591 618 602 634  curveto
614 651 624 664 629 670  curveto
633 675 635 678 635 680  curveto
635 687 625 691 606 691  curveto
587 692 lineto
578 692 lineto
584 722 lineto
771 722 lineto
765 692 lineto
755 691 lineto
732 690 lineto
710 689 674 659 622 600  curveto
442 398 lineto
556 124 lineto
574 79 587 53 594 45  curveto
602 37 618 32 642 30  curveto
651 30 lineto
645 0 lineto
380 0 lineto
386 30 lineto
395 30 lineto
423 30 lineto
453 30 467 38 467 54  curveto
467 61 463 74 456 93  curveto
443 125 lineto
363 323 lineto
186 126 lineto
146 82 126 55 126 46  curveto
126 35 137 30 160 30  curveto
181 30 lineto
190 30 lineto
184 0 lineto
-23 0 lineto
closepath
fill
		} def

	/Y
		{
340 325 moveto
234 590 lineto
230 600 223 618 213 646  curveto
207 665 200 677 192 682  curveto
185 687 170 690 146 691  curveto
137 692 lineto
143 722 lineto
405 722 lineto
399 692 lineto
384 691 lineto
360 690 lineto
335 689 323 680 323 665  curveto
323 653 330 628 345 590  curveto
431 366 lineto
613 589 lineto
645 628 lineto
663 652 672 667 672 675  curveto
672 686 661 691 640 691  curveto
634 691 628 691 622 691  curveto
613 692 lineto
619 722 lineto
802 722 lineto
796 692 lineto
787 691 lineto
761 690 lineto
745 689 728 678 712 658  curveto
654 587 lineto
442 326 lineto
403 126 lineto
398 98 395 75 395 57  curveto
395 42 408 34 433 33  curveto
465 30 lineto
474 30 lineto
468 0 lineto
185 0 lineto
191 30 lineto
200 30 lineto
234 33 lineto
256 34 271 41 279 53  curveto
286 65 295 95 304 144  curveto
340 325 lineto
closepath
fill
		} def

	/Z
		{
55 0 moveto
63 39 lineto
579 683 lineto
359 683 lineto
305 681 lineto
288 681 276 679 271 675  curveto
265 671 260 661 257 645  curveto
251 619 247 601 244 590  curveto
241 578 lineto
187 578 lineto
216 722 lineto
702 722 lineto
695 689 lineto
181 45 lineto
412 45 lineto
493 48 lineto
514 48 527 59 532 80  curveto
544 129 lineto
546 138 lineto
601 138 lineto
573 0 lineto
55 0 lineto
closepath
fill
		} def

	/bracketleft
		{
46 -144 moveto
229 771 lineto
421 771 lineto
416 740 lineto
307 740 lineto
137 -114 lineto
245 -114 lineto
239 -144 lineto
46 -144 lineto
closepath
fill
		} def

	/backslash
		{
387 -144 moveto
336 -144 lineto
252 723 lineto
302 723 lineto
387 -144 lineto
closepath
fill
		} def

	/bracketright
		{
388 771 moveto
206 -144 lineto
13 -144 lineto
19 -114 lineto
127 -114 lineto
298 740 lineto
189 740 lineto
195 771 lineto
388 771 lineto
closepath
fill
		} def

	/asciicircum
		{
77 192 moveto
448 722 lineto
607 192 lineto
550 192 lineto
429 600 lineto
142 192 lineto
77 192 lineto
closepath
fill
		} def

	/underscore
		{
35 -63 moveto
48 0 lineto
452 0 lineto
439 -63 lineto
35 -63 lineto
closepath
fill
		} def

	/quoteleft
		{
513 626 moveto
467 626 lineto
311 783 lineto
434 783 lineto
513 626 lineto
closepath
fill
		} def

	/a
		{
413 0 moveto
457 222 lineto
417 151 371 94 322 51  curveto
272 9 225 -12 182 -12  curveto
151 -12 125 -1 106 21  curveto
88 43 78 72 78 109  curveto
78 215 115 314 190 405  curveto
264 496 345 542 432 542  curveto
449 542 473 539 503 533  curveto
518 530 lineto
614 530 lineto
534 126 lineto
529 99 526 76 526 57  curveto
526 42 538 34 563 33  curveto
596 30 lineto
605 30 lineto
599 0 lineto
413 0 lineto
closepath
472 295 moveto
506 465 lineto
469 485 429 495 386 495  curveto
338 495 298 472 268 428  curveto
244 393 223 346 206 287  curveto
189 229 180 176 180 129  curveto
180 82 195 59 226 59  curveto
289 59 371 138 472 295  curveto
closepath
fill
		} def

	/b
		{
87 -12 moveto
218 644 lineto
223 671 226 694 226 713  curveto
226 728 214 736 188 737  curveto
156 740 lineto
147 740 lineto
153 771 lineto
339 771 lineto
247 307 lineto
287 378 332 435 382 478  curveto
432 521 479 542 522 542  curveto
554 542 579 531 598 509  curveto
617 487 626 457 626 419  curveto
626 314 589 216 514 124  curveto
440 33 360 -12 274 -12  curveto
232 -12 193 -4 158 12  curveto
87 -12 lineto
closepath
232 233 moveto
198 64 lineto
237 44 278 35 319 35  curveto
367 35 406 57 437 102  curveto
460 136 481 183 498 242  curveto
515 301 523 354 523 401  curveto
523 447 508 470 479 470  curveto
415 470 333 391 232 233  curveto
closepath
fill
		} def

	/c
		{
455 46 moveto
384 7 314 -12 246 -12  curveto
196 -12 156 4 127 36  curveto
98 69 84 114 84 172  curveto
84 268 118 354 185 429  curveto
252 504 329 542 416 542  curveto
455 542 496 534 538 519  curveto
511 385 lineto
463 385 lineto
464 394 lineto
465 401 467 412 470 426  curveto
471 433 471 438 471 443  curveto
471 481 438 500 372 500  curveto
319 500 275 471 239 412  curveto
204 353 186 279 186 191  curveto
186 92 227 42 310 42  curveto
345 42 396 57 463 87  curveto
455 46 lineto
closepath
fill
		} def

	/d
		{
413 0 moveto
457 222 lineto
417 151 371 94 322 51  curveto
272 9 225 -12 182 -12  curveto
151 -12 125 -1 106 21  curveto
88 43 78 72 78 109  curveto
78 215 115 314 190 405  curveto
264 496 345 542 432 542  curveto
449 542 473 539 503 533  curveto
518 530 lineto
541 644 lineto
546 671 549 694 549 714  curveto
549 728 536 736 511 737  curveto
479 740 lineto
470 740 lineto
476 771 lineto
662 771 lineto
534 126 lineto
529 99 526 76 526 57  curveto
526 42 538 34 563 33  curveto
596 30 lineto
605 30 lineto
599 0 lineto
413 0 lineto
closepath
472 295 moveto
507 467 lineto
469 486 429 496 387 496  curveto
339 496 300 474 269 429  curveto
245 393 224 346 206 288  curveto
189 229 180 176 180 129  curveto
180 82 195 59 226 59  curveto
289 59 371 138 472 295  curveto
closepath
fill
		} def

	/e
		{
504 84 moveto
407 20 321 -12 247 -12  curveto
197 -12 158 4 128 38  curveto
99 71 84 116 84 173  curveto
84 268 117 353 183 428  curveto
250 504 324 542 408 542  curveto
440 542 466 532 487 513  curveto
507 494 518 470 518 441  curveto
518 375 487 321 427 279  curveto
367 237 286 213 185 208  curveto
184 184 lineto
184 90 223 43 302 43  curveto
367 43 437 71 513 127  curveto
504 84 lineto
closepath
187 237 moveto
261 242 319 261 361 294  curveto
403 327 424 369 424 421  curveto
424 473 403 499 360 499  curveto
317 499 279 474 247 425  curveto
214 376 194 313 187 237  curveto
closepath
fill
		} def

	/f
		{
70 -192 moveto
206 490 lineto
134 490 lineto
142 530 lineto
214 530 lineto
222 556 lineto
271 707 349 783 458 783  curveto
497 783 531 777 562 766  curveto
537 638 lineto
489 638 lineto
490 647 lineto
492 664 494 677 496 687  curveto
497 695 498 703 498 709  curveto
498 736 476 750 431 750  curveto
400 750 377 737 362 711  curveto
346 685 331 635 316 561  curveto
310 530 lineto
460 530 lineto
453 490 lineto
302 490 lineto
167 -192 lineto
70 -192 lineto
closepath
fill
		} def

	/g
		{
81 -178 moveto
45 -41 lineto
134 -120 218 -160 297 -160  curveto
331 -160 356 -146 374 -117  curveto
391 -89 408 -34 424 47  curveto
464 250 lineto
424 180 379 124 328 81  curveto
277 38 231 17 188 17  curveto
158 17 133 27 114 49  curveto
95 71 85 98 85 132  curveto
85 181 98 234 123 291  curveto
149 349 182 398 222 440  curveto
287 508 357 542 434 542  curveto
451 542 475 539 505 533  curveto
520 530 lineto
617 530 lineto
542 161 lineto
531 105 lineto
507 -7 472 -87 423 -134  curveto
375 -181 305 -205 213 -205  curveto
176 -205 132 -196 81 -178  curveto
closepath
481 328 moveto
508 466 lineto
471 484 433 494 393 494  curveto
343 494 304 474 274 434  curveto
217 356 188 263 188 154  curveto
188 110 203 88 233 88  curveto
294 88 371 160 465 303  curveto
481 328 lineto
closepath
fill
		} def

	/h
		{
102 0 moveto
230 644 lineto
236 671 238 694 238 714  curveto
238 728 226 736 201 737  curveto
168 740 lineto
159 740 lineto
165 771 lineto
352 771 lineto
261 313 lineto
303 383 348 439 398 480  curveto
447 521 493 542 536 542  curveto
593 542 621 511 621 450  curveto
621 435 618 412 612 381  curveto
561 126 lineto
556 99 553 76 553 57  curveto
553 42 566 34 591 33  curveto
624 30 lineto
632 30 lineto
626 0 lineto
439 0 lineto
518 395 lineto
521 412 523 425 523 436  curveto
523 458 511 469 488 469  curveto
436 469 361 400 261 260  curveto
247 240 lineto
198 0 lineto
102 0 lineto
closepath
fill
		} def

	/i
		{
102 0 moveto
183 403 lineto
188 430 190 453 190 473  curveto
190 487 178 495 153 497  curveto
120 499 lineto
111 500 lineto
117 530 lineto
304 530 lineto
224 126 lineto
218 99 216 76 216 57  curveto
216 42 228 34 253 33  curveto
286 30 lineto
295 30 lineto
289 0 lineto
102 0 lineto
closepath
227 626 moveto
246 722 lineto
342 722 lineto
323 626 lineto
227 626 lineto
closepath
fill
		} def

	/j
		{
-79 -186 moveto
-53 -57 lineto
-4 -57 lineto
-6 -66 lineto
-10 -100 lineto
-12 -112 -13 -121 -13 -127  curveto
-13 -154 8 -168 52 -168  curveto
87 -168 112 -157 126 -135  curveto
140 -114 155 -65 170 9  curveto
249 403 lineto
254 430 257 453 257 473  curveto
257 487 244 495 219 497  curveto
187 499 lineto
178 500 lineto
184 530 lineto
370 530 lineto
279 69 lineto
242 -113 156 -205 20 -205  curveto
-9 -205 -42 -198 -79 -186  curveto
closepath
293 626 moveto
312 722 lineto
409 722 lineto
390 626 lineto
293 626 lineto
closepath
fill
		} def

	/k
		{
90 0 moveto
218 644 lineto
223 671 226 694 226 714  curveto
226 728 214 736 188 737  curveto
156 740 lineto
147 740 lineto
153 771 lineto
340 771 lineto
245 295 lineto
252 295 lineto
411 376 491 445 491 500  curveto
491 512 486 522 476 530  curveto
573 536 lineto
578 527 580 519 580 512  curveto
580 463 498 396 333 309  curveto
398 201 457 118 509 60  curveto
524 42 549 32 583 31  curveto
594 30 lineto
588 0 lineto
427 0 lineto
362 78 303 169 248 273  curveto
241 273 lineto
186 0 lineto
90 0 lineto
closepath
fill
		} def

	/l
		{
90 0 moveto
218 644 lineto
223 671 226 694 226 714  curveto
226 728 214 736 188 737  curveto
156 740 lineto
147 740 lineto
153 771 lineto
340 771 lineto
211 126 lineto
206 99 204 76 204 57  curveto
204 42 216 34 241 33  curveto
274 30 lineto
283 30 lineto
277 0 lineto
90 0 lineto
closepath
fill
		} def

	/m
		{
102 0 moveto
183 403 lineto
188 430 190 453 190 473  curveto
190 487 178 495 153 497  curveto
120 499 lineto
111 500 lineto
117 530 lineto
304 530 lineto
261 313 lineto
358 465 447 542 528 542  curveto
581 542 608 511 608 451  curveto
608 439 606 426 604 413  curveto
597 380 lineto
583 313 lineto
686 466 776 542 854 542  curveto
906 542 933 509 933 444  curveto
933 429 930 406 924 377  curveto
874 126 lineto
869 99 866 76 866 57  curveto
866 42 879 34 904 33  curveto
936 30 lineto
945 30 lineto
939 0 lineto
752 0 lineto
833 406 lineto
836 417 837 427 837 433  curveto
837 458 828 470 811 470  curveto
784 470 747 447 698 401  curveto
650 355 608 303 574 246  curveto
524 0 lineto
427 0 lineto
508 406 lineto
511 418 512 427 512 433  curveto
512 458 503 470 485 470  curveto
459 470 421 447 373 401  curveto
325 355 283 303 247 243  curveto
198 0 lineto
102 0 lineto
closepath
fill
		} def

	/n
		{
102 0 moveto
183 403 lineto
188 430 190 453 190 473  curveto
190 487 178 495 153 497  curveto
120 499 lineto
111 500 lineto
117 530 lineto
304 530 lineto
261 313 lineto
303 383 348 439 398 480  curveto
447 521 493 542 536 542  curveto
593 542 621 511 621 450  curveto
621 435 618 412 612 381  curveto
561 126 lineto
556 99 553 76 553 57  curveto
553 42 566 34 591 33  curveto
624 30 lineto
632 30 lineto
626 0 lineto
439 0 lineto
518 395 lineto
521 412 523 425 523 436  curveto
523 458 511 469 488 469  curveto
436 469 361 400 261 260  curveto
247 240 lineto
198 0 lineto
102 0 lineto
closepath
fill
		} def

	/o
		{
256 -12 moveto
143 -12 86 48 86 170  curveto
86 268 119 355 184 429  curveto
249 504 325 542 410 542  curveto
524 542 582 481 582 359  curveto
582 261 549 174 483 100  curveto
418 25 342 -12 256 -12  curveto
closepath
283 24 moveto
333 24 378 59 417 129  curveto
456 199 475 280 475 372  curveto
475 460 445 504 386 504  curveto
335 504 290 469 250 399  curveto
211 329 192 249 192 157  curveto
192 69 222 24 283 24  curveto
closepath
fill
		} def

	/p
		{
63 -192 moveto
182 403 lineto
187 430 190 453 190 473  curveto
190 487 177 495 152 497  curveto
120 499 lineto
111 500 lineto
117 530 lineto
304 530 lineto
259 307 lineto
299 378 344 435 394 478  curveto
444 521 491 542 534 542  curveto
566 542 591 531 610 509  curveto
629 487 638 457 638 420  curveto
638 313 601 215 526 124  curveto
451 33 371 -12 284 -12  curveto
267 -12 243 -9 213 -2  curveto
198 0 lineto
160 -192 lineto
63 -192 lineto
closepath
245 233 moveto
210 64 lineto
250 44 290 35 332 35  curveto
379 35 418 57 449 102  curveto
472 136 493 183 510 242  curveto
527 301 536 354 536 400  curveto
536 447 521 470 491 470  curveto
427 470 345 391 245 233  curveto
closepath
fill
		} def

	/q
		{
374 -192 moveto
457 222 lineto
417 151 371 94 322 51  curveto
272 9 225 -12 182 -12  curveto
151 -12 125 -1 106 21  curveto
88 43 78 72 78 109  curveto
78 215 115 314 190 405  curveto
264 496 345 542 432 542  curveto
449 542 473 539 503 533  curveto
518 530 lineto
614 530 lineto
471 -192 lineto
374 -192 lineto
closepath
472 295 moveto
507 467 lineto
469 486 429 496 387 496  curveto
339 496 300 474 269 429  curveto
245 393 224 346 206 288  curveto
189 229 180 176 180 129  curveto
180 82 195 59 226 59  curveto
289 59 371 138 472 295  curveto
closepath
fill
		} def

	/r
		{
102 0 moveto
183 403 lineto
188 430 190 453 190 473  curveto
190 487 178 495 153 497  curveto
120 499 lineto
111 500 lineto
117 530 lineto
304 530 lineto
261 313 lineto
355 466 445 542 532 542  curveto
540 542 548 541 556 538  curveto
515 427 lineto
500 434 485 437 471 437  curveto
409 437 334 374 248 247  curveto
198 0 lineto
102 0 lineto
closepath
fill
		} def

	/s
		{
48 29 moveto
72 150 lineto
121 150 lineto
120 141 lineto
116 111 lineto
114 100 113 91 113 85  curveto
113 68 125 53 149 39  curveto
173 25 199 18 229 18  curveto
257 18 281 26 300 44  curveto
319 62 328 84 328 110  curveto
328 136 315 164 288 192  curveto
237 246 lineto
178 308 148 359 148 398  curveto
148 440 165 474 198 501  curveto
232 528 275 542 328 542  curveto
379 542 428 530 475 506  curveto
451 388 lineto
403 388 lineto
404 397 lineto
406 413 408 424 409 432  curveto
411 442 412 450 412 457  curveto
412 493 382 512 321 512  curveto
297 512 277 503 261 486  curveto
244 469 236 447 236 421  curveto
236 396 252 367 284 335  curveto
335 285 lineto
391 230 418 179 418 134  curveto
418 90 401 54 366 28  curveto
331 1 284 -12 226 -12  curveto
169 -12 110 1 48 29  curveto
closepath
fill
		} def

	/t
		{
317 5 moveto
290 -6 264 -12 240 -12  curveto
204 -12 174 -1 152 20  curveto
129 41 118 70 118 104  curveto
118 118 120 135 124 155  curveto
191 490 lineto
109 490 lineto
117 530 lineto
198 530 lineto
218 626 lineto
319 653 lineto
295 530 lineto
430 530 lineto
422 490 lineto
287 490 lineto
217 141 lineto
214 123 212 106 212 90  curveto
212 52 230 32 267 32  curveto
283 32 303 37 325 46  curveto
317 5 lineto
closepath
fill
		} def

	/u
		{
430 0 moveto
474 216 lineto
382 64 290 -12 198 -12  curveto
142 -12 113 18 113 79  curveto
113 94 116 117 123 148  curveto
173 403 lineto
179 430 181 453 181 473  curveto
181 487 169 495 144 497  curveto
111 499 lineto
102 500 lineto
108 530 lineto
295 530 lineto
217 141 lineto
214 116 lineto
213 107 212 102 212 99  curveto
212 77 224 66 247 66  curveto
295 66 370 135 474 273  curveto
488 292 lineto
511 403 lineto
516 430 519 453 519 473  curveto
519 487 506 495 481 497  curveto
448 499 lineto
439 500 lineto
445 530 lineto
632 530 lineto
552 126 lineto
547 99 544 76 544 57  curveto
544 42 556 34 582 33  curveto
614 30 lineto
623 30 lineto
617 0 lineto
430 0 lineto
closepath
fill
		} def

	/v
		{
237 -5 moveto
237 61 231 134 219 211  curveto
208 288 194 346 178 384  curveto
149 452 lineto
141 472 132 484 123 489  curveto
114 493 92 497 59 499  curveto
50 500 lineto
56 530 lineto
232 530 lineto
284 410 314 269 324 107  curveto
414 212 lineto
490 302 528 380 528 446  curveto
528 476 516 504 491 530  curveto
609 530 lineto
616 514 620 497 620 479  curveto
620 445 604 406 572 360  curveto
541 314 470 229 361 103  curveto
267 -5 lineto
237 -5 lineto
closepath
fill
		} def

	/w
		{
221 -5 moveto
223 32 225 60 225 78  curveto
225 125 220 183 210 250  curveto
201 317 191 366 179 396  curveto
158 455 lineto
152 472 143 484 133 490  curveto
122 496 105 499 81 499  curveto
72 500 lineto
78 530 lineto
236 530 lineto
278 405 303 276 313 143  curveto
410 306 468 434 489 527  curveto
520 527 lineto
570 402 600 270 610 132  curveto
657 202 lineto
732 310 770 392 770 447  curveto
770 479 759 507 738 530  curveto
856 530 lineto
858 520 859 512 859 504  curveto
859 462 826 392 759 295  curveto
646 130 575 29 548 -5  curveto
515 -5 lineto
518 26 520 49 520 62  curveto
520 171 503 274 469 370  curveto
419 264 377 185 343 133  curveto
268 18 lineto
266 16 262 8 253 -5  curveto
221 -5 lineto
closepath
fill
		} def

	/x
		{
259 269 moveto
199 403 lineto
175 453 lineto
166 472 159 483 153 488  curveto
147 493 137 496 121 497  curveto
92 499 lineto
83 500 lineto
88 530 lineto
247 530 lineto
344 322 lineto
366 339 lineto
429 391 461 434 461 468  curveto
461 486 454 507 440 530  curveto
536 530 lineto
539 518 541 508 541 500  curveto
541 472 531 446 511 423  curveto
492 401 448 363 379 312  curveto
355 294 lineto
436 125 lineto
465 71 lineto
478 47 494 33 515 32  curveto
546 30 lineto
555 30 lineto
549 0 lineto
389 0 lineto
275 241 lineto
233 204 lineto
166 144 133 93 133 49  curveto
133 32 138 15 150 0  curveto
46 0 lineto
44 9 43 15 43 20  curveto
43 62 74 109 135 163  curveto
210 227 lineto
259 269 lineto
closepath
fill
		} def

	/y
		{
-2 -192 moveto
57 -151 132 -88 222 -5  curveto
241 12 lineto
237 88 228 167 212 251  curveto
197 335 180 396 164 433  curveto
149 464 138 482 129 488  curveto
121 493 98 497 62 499  curveto
50 500 lineto
56 530 lineto
233 530 lineto
284 410 313 270 321 109  curveto
381 187 lineto
440 262 480 317 499 352  curveto
519 387 529 420 529 449  curveto
529 480 516 507 490 530  curveto
611 530 lineto
618 515 622 501 622 488  curveto
622 460 613 431 594 401  curveto
576 371 539 322 481 253  curveto
296 31 lineto
222 -56 167 -131 131 -192  curveto
-2 -192 lineto
closepath
fill
		} def

	/z
		{
50 0 moveto
57 36 lineto
455 494 lineto
303 494 lineto
254 492 lineto
238 492 227 489 221 485  curveto
216 480 211 469 207 453  curveto
205 444 202 432 198 417  curveto
195 409 lineto
144 409 lineto
168 530 lineto
574 530 lineto
567 497 lineto
163 36 lineto
347 36 lineto
395 36 424 38 434 41  curveto
443 45 450 58 456 79  curveto
456 82 459 93 464 111  curveto
466 120 lineto
514 120 lineto
490 0 lineto
50 0 lineto
closepath
fill
		} def

	/braceleft
		{
430 771 moveto
424 740 lineto
381 735 352 722 337 701  curveto
322 680 314 643 314 588  curveto
313 550 lineto
313 483 300 429 273 386  curveto
246 343 210 318 163 310  curveto
185 294 lineto
222 268 241 235 241 194  curveto
241 164 229 119 204 59  curveto
180 2 lineto
171 -19 167 -37 167 -51  curveto
167 -69 174 -83 189 -96  curveto
204 -108 222 -114 243 -114  curveto
246 -114 250 -114 253 -114  curveto
248 -144 lineto
143 -144 90 -105 90 -28  curveto
90 0 100 37 120 83  curveto
140 131 lineto
159 176 168 212 168 237  curveto
168 276 148 295 109 295  curveto
85 295 lineto
91 325 lineto
113 325 lineto
153 325 181 338 199 365  curveto
216 391 225 435 225 496  curveto
224 527 lineto
224 689 293 771 430 771  curveto
closepath
fill
		} def

	/bar
		{
133 -144 moveto
315 771 lineto
364 771 lineto
182 -144 lineto
133 -144 lineto
closepath
fill
		} def

	/braceright
		{
85 -144 moveto
91 -114 lineto
134 -109 163 -96 178 -75  curveto
193 -54 200 -16 200 38  curveto
201 76 lineto
201 142 215 197 241 239  curveto
268 282 305 308 352 316  curveto
330 331 lineto
292 357 273 391 273 432  curveto
273 461 286 506 311 566  curveto
334 623 lineto
344 646 348 664 348 678  curveto
348 695 341 710 326 722  curveto
311 735 293 741 272 741  curveto
268 741 265 741 261 740  curveto
267 771 lineto
372 771 424 732 424 655  curveto
424 626 415 589 395 542  curveto
375 495 lineto
356 449 347 414 347 388  curveto
347 350 366 331 405 331  curveto
430 331 lineto
424 301 lineto
401 301 lineto
362 301 333 287 316 261  curveto
298 234 290 190 290 129  curveto
291 99 lineto
291 -63 222 -144 85 -144  curveto
closepath
fill
		} def

	/asciitilde
		{
181 216 moveto
151 216 lineto
177 320 230 372 312 372  curveto
344 372 394 355 462 321  curveto
501 302 lineto
564 271 605 255 625 255  curveto
672 255 706 291 728 361  curveto
758 361 lineto
731 257 677 205 598 205  curveto
571 205 531 219 476 246  curveto
450 259 lineto
409 278 lineto
351 308 309 322 285 322  curveto
233 322 198 287 181 216  curveto
closepath
fill
		} def

	/exclamdown
		{
286 530 moveto
267 433 lineto
170 433 lineto
189 530 lineto
286 530 lineto
closepath
214 337 moveto
170 -48 lineto
142 -192 lineto
45 -192 lineto
74 -48 lineto
184 337 lineto
214 337 lineto
closepath
fill
		} def

	/cent
		{
314 0 moveto
333 92 lineto
272 92 227 107 197 137  curveto
167 168 152 213 152 273  curveto
152 363 178 442 230 509  curveto
283 576 353 622 442 646  curveto
458 722 lineto
488 722 lineto
473 648 lineto
489 648 lineto
528 648 570 642 615 628  curveto
592 512 lineto
544 512 lineto
545 521 lineto
548 542 lineto
550 559 551 569 551 573  curveto
551 597 525 610 471 610  curveto
466 610 lineto
372 141 lineto
429 141 486 156 542 187  curveto
535 150 lineto
478 123 421 104 363 94  curveto
344 0 lineto
314 0 lineto
closepath
343 146 moveto
435 608 lineto
377 590 331 554 298 501  curveto
264 448 248 384 248 311  curveto
248 262 256 225 271 197  curveto
287 170 311 153 343 146  curveto
closepath
fill
		} def

	/sterling
		{
110 0 moveto
125 72 lineto
160 79 187 94 205 117  curveto
222 140 236 179 248 234  curveto
274 370 lineto
184 370 lineto
190 400 lineto
280 400 lineto
290 445 lineto
309 544 340 617 383 666  curveto
425 716 480 740 546 740  curveto
581 740 622 730 668 708  curveto
645 593 lineto
603 593 lineto
604 602 lineto
607 622 608 638 608 650  curveto
608 686 580 704 525 704  curveto
494 704 469 690 449 662  curveto
430 634 414 589 402 527  curveto
377 400 lineto
500 400 lineto
494 370 lineto
371 370 lineto
355 292 lineto
342 227 327 182 309 157  curveto
291 133 253 104 196 72  curveto
538 72 lineto
523 0 lineto
110 0 lineto
closepath
fill
		} def

	/fraction
		{
-84 -18 moveto
597 740 lineto
645 740 lineto
-36 -18 lineto
-84 -18 lineto
closepath
fill
		} def

	/yen
		{
291 192 moveto
146 192 lineto
152 222 lineto
297 222 lineto
317 325 lineto
172 325 lineto
179 355 lineto
323 355 lineto
216 595 lineto
187 652 lineto
174 677 153 690 125 691  curveto
116 692 lineto
122 722 lineto
369 722 lineto
363 692 lineto
354 692 lineto
334 692 lineto
308 692 295 685 295 672  curveto
295 660 305 634 325 591  curveto
416 393 lineto
590 591 lineto
633 640 655 669 655 677  curveto
655 687 644 691 622 691  curveto
601 692 lineto
592 692 lineto
598 722 lineto
779 722 lineto
773 692 lineto
764 691 lineto
741 690 lineto
724 689 707 678 690 659  curveto
630 592 lineto
419 355 lineto
564 355 lineto
558 325 lineto
414 325 lineto
393 222 lineto
538 222 lineto
532 192 lineto
387 192 lineto
374 126 lineto
369 99 366 76 366 57  curveto
366 42 379 34 403 33  curveto
436 30 lineto
445 30 lineto
439 0 lineto
162 0 lineto
168 30 lineto
177 30 lineto
211 33 lineto
232 34 246 40 254 52  curveto
262 63 270 88 277 126  curveto
291 192 lineto
closepath
fill
		} def

	/florin
		{
182 -144 moveto
284 361 lineto
182 361 lineto
188 391 lineto
290 391 lineto
308 480 lineto
323 559 353 622 398 669  curveto
442 717 493 740 551 740  curveto
589 740 623 735 654 724  curveto
628 596 lineto
580 596 lineto
581 605 lineto
584 625 586 639 587 645  curveto
589 653 589 661 589 667  curveto
589 692 571 705 535 705  curveto
501 705 476 691 458 664  curveto
441 637 425 586 410 509  curveto
386 391 lineto
517 391 lineto
511 361 lineto
380 361 lineto
280 -144 lineto
182 -144 lineto
closepath
fill
		} def

	/section
		{
81 -127 moveto
103 -16 lineto
145 -16 lineto
143 -31 lineto
140 -49 lineto
139 -53 139 -58 139 -63  curveto
139 -83 153 -99 181 -112  curveto
209 -125 243 -132 284 -132  curveto
329 -132 367 -118 397 -91  curveto
428 -64 444 -31 444 7  curveto
444 42 417 72 363 97  curveto
306 124 lineto
248 150 209 174 188 195  curveto
168 216 158 242 158 275  curveto
158 330 194 386 265 442  curveto
228 475 209 511 209 549  curveto
209 605 234 652 283 687  curveto
332 723 396 741 474 741  curveto
527 741 579 732 630 715  curveto
607 602 lineto
565 602 lineto
567 611 lineto
570 628 572 643 572 656  curveto
572 669 560 681 536 690  curveto
512 699 482 704 446 704  curveto
401 704 364 692 336 668  curveto
308 644 293 612 293 574  curveto
293 538 321 507 375 479  curveto
435 449 lineto
489 421 525 398 543 378  curveto
561 358 570 332 570 298  curveto
570 249 536 194 469 136  curveto
510 105 531 69 531 27  curveto
531 -27 507 -73 457 -108  curveto
408 -144 346 -162 270 -162  curveto
210 -162 147 -151 81 -127  curveto
closepath
444 156 moveto
476 193 491 229 491 264  curveto
491 298 463 330 407 359  curveto
346 391 lineto
331 398 312 409 289 423  curveto
256 387 240 350 240 312  curveto
240 276 266 246 318 220  curveto
379 190 lineto
415 171 lineto
421 168 431 163 444 156  curveto
closepath
fill
		} def

	/currency
		{
506 218 moveto
581 125 lineto
555 104 lineto
480 197 lineto
428 162 377 145 326 145  curveto
276 145 233 162 195 197  curveto
83 104 lineto
65 125 lineto
178 218 lineto
159 252 149 285 149 318  curveto
149 383 178 444 235 503  curveto
160 598 lineto
186 619 lineto
260 525 lineto
312 560 363 578 415 578  curveto
464 578 508 560 546 525  curveto
658 619 lineto
675 598 lineto
562 503 lineto
582 470 592 436 592 404  curveto
592 340 563 278 506 218  curveto
closepath
539 394 moveto
539 433 526 465 501 489  curveto
475 514 443 526 403 526  curveto
351 526 304 506 263 466  curveto
222 425 202 380 202 329  curveto
202 290 214 258 240 233  curveto
265 208 297 195 336 195  curveto
389 195 436 215 477 256  curveto
518 296 539 342 539 394  curveto
closepath
fill
		} def

	/quotesingle
		{
213 505 moveto
213 771 lineto
334 771 lineto
244 505 lineto
213 505 lineto
closepath
fill
		} def

	/quotedblleft
		{
269 614 moveto
314 614 lineto
291 494 lineto
170 494 lineto
191 603 lineto
214 715 265 771 346 771  curveto
339 740 lineto
321 740 308 734 300 722  curveto
291 710 284 686 276 650  curveto
269 614 lineto
closepath
461 614 moveto
507 614 lineto
483 494 lineto
362 494 lineto
384 603 lineto
406 715 458 771 538 771  curveto
532 740 lineto
514 740 501 734 492 722  curveto
484 710 476 686 469 650  curveto
461 614 lineto
closepath
fill
		} def

	/guillemotleft
		{
351 454 moveto
182 265 lineto
268 72 lineto
243 54 lineto
83 265 lineto
330 476 lineto
351 454 lineto
closepath
547 454 moveto
378 265 lineto
464 72 lineto
439 54 lineto
280 265 lineto
526 476 lineto
547 454 lineto
closepath
fill
		} def

	/guilsinglleft
		{
352 454 moveto
183 265 lineto
269 72 lineto
244 54 lineto
84 265 lineto
331 476 lineto
352 454 lineto
closepath
fill
		} def

	/guilsinglright
		{
82 76 moveto
250 265 lineto
165 458 lineto
190 476 lineto
349 265 lineto
103 54 lineto
82 76 lineto
closepath
fill
		} def

	/fi
		{
125 0 moveto
125 625 lineto
625 625 lineto
625 0 lineto
125 0 lineto
closepath
156 31 moveto
593 31 lineto
593 593 lineto
156 593 lineto
156 31 lineto
closepath
fill
		} def

	/fl
		{
125 0 moveto
125 625 lineto
625 625 lineto
625 0 lineto
125 0 lineto
closepath
156 31 moveto
593 31 lineto
593 593 lineto
156 593 lineto
156 31 lineto
closepath
fill
		} def

	/endash
		{
125 265 moveto
137 325 lineto
570 325 lineto
558 265 lineto
125 265 lineto
closepath
fill
		} def

	/dagger
		{
227 -144 moveto
363 418 lineto
166 397 lineto
180 469 lineto
369 448 lineto
399 722 lineto
496 722 lineto
417 448 lineto
614 469 lineto
600 397 lineto
411 418 lineto
323 -144 lineto
227 -144 lineto
closepath
fill
		} def

	/daggerdbl
		{
227 -144 moveto
305 126 lineto
108 105 lineto
122 177 lineto
311 156 lineto
363 418 lineto
166 397 lineto
180 469 lineto
369 448 lineto
399 722 lineto
496 722 lineto
417 448 lineto
614 469 lineto
600 397 lineto
411 418 lineto
359 156 lineto
556 177 lineto
542 105 lineto
353 126 lineto
323 -144 lineto
227 -144 lineto
closepath
fill
		} def

	/periodcentered
		{
120 239 moveto
144 360 lineto
264 360 lineto
240 239 lineto
120 239 lineto
closepath
fill
		} def

	/paragraph
		{
239 -144 moveto
338 355 lineto
283 365 239 388 207 424  curveto
174 460 157 504 157 555  curveto
157 612 172 654 201 683  curveto
230 711 273 726 331 726  curveto
379 724 lineto
452 722 lineto
580 722 lineto
408 -144 lineto
372 -144 lineto
534 674 lineto
438 674 lineto
275 -144 lineto
239 -144 lineto
closepath
fill
		} def

	/bullet
		{
369 108 moveto
311 108 261 129 219 172  curveto
177 215 156 266 156 325  curveto
156 385 177 436 219 478  curveto
262 520 313 542 373 542  curveto
433 542 484 520 526 478  curveto
568 435 589 384 589 323  curveto
589 263 568 212 525 171  curveto
482 129 430 108 369 108  curveto
closepath
fill
		} def

	/quotesinglbase
		{
117 0 moveto
71 0 lineto
97 120 lineto
217 120 lineto
195 11 lineto
173 -100 121 -156 39 -156  curveto
46 -126 lineto
80 -126 102 -96 111 -35  curveto
117 0 lineto
closepath
fill
		} def

	/quotedblbase
		{
309 0 moveto
264 0 lineto
288 120 lineto
409 120 lineto
387 11 lineto
365 -100 313 -156 233 -156  curveto
239 -126 lineto
257 -126 270 -120 279 -108  curveto
287 -95 295 -71 302 -35  curveto
309 0 lineto
closepath
117 0 moveto
72 0 lineto
96 120 lineto
216 120 lineto
194 11 lineto
172 -100 121 -156 41 -156  curveto
46 -126 lineto
64 -126 78 -120 86 -108  curveto
95 -95 103 -71 110 -35  curveto
117 0 lineto
closepath
fill
		} def

	/quotedblright
		{
438 650 moveto
394 650 lineto
417 771 lineto
538 771 lineto
516 662 lineto
494 550 443 494 362 494  curveto
368 523 lineto
386 523 399 530 408 542  curveto
417 554 424 578 432 614  curveto
438 650 lineto
closepath
246 650 moveto
201 650 lineto
225 771 lineto
346 771 lineto
324 662 lineto
302 550 250 494 170 494  curveto
176 523 lineto
194 523 207 530 216 542  curveto
224 554 232 578 239 614  curveto
246 650 lineto
closepath
fill
		} def

	/guillemotright
		{
279 76 moveto
448 265 lineto
362 458 lineto
387 476 lineto
546 265 lineto
300 54 lineto
279 76 lineto
closepath
83 76 moveto
251 265 lineto
166 458 lineto
191 476 lineto
350 265 lineto
104 54 lineto
83 76 lineto
closepath
fill
		} def

	/ellipsis
		{
120 0 moveto
139 96 lineto
236 96 lineto
216 0 lineto
120 0 lineto
closepath
454 0 moveto
473 96 lineto
569 96 lineto
550 0 lineto
454 0 lineto
closepath
787 0 moveto
806 96 lineto
902 96 lineto
883 0 lineto
787 0 lineto
closepath
fill
		} def

	/perthousand
		{
262 361 moveto
225 361 195 372 172 396  curveto
150 419 139 450 139 489  curveto
139 554 157 609 194 654  curveto
231 699 275 722 327 722  curveto
365 722 396 711 418 688  curveto
441 665 452 634 452 595  curveto
452 530 434 474 397 429  curveto
360 384 315 361 262 361  curveto
closepath
210 484 moveto
210 422 230 391 269 391  curveto
299 391 326 412 350 455  curveto
374 497 386 544 386 597  curveto
386 661 367 693 328 693  curveto
297 693 270 672 246 630  curveto
222 587 210 539 210 484  curveto
closepath
578 0 moveto
540 0 510 11 487 34  curveto
465 58 454 89 454 128  curveto
454 192 472 247 509 292  curveto
546 338 590 361 642 361  curveto
680 361 711 349 733 326  curveto
756 303 767 272 767 233  curveto
767 168 749 113 712 68  curveto
675 22 630 0 578 0  curveto
closepath
525 123 moveto
525 60 545 29 584 29  curveto
614 29 641 51 665 93  curveto
689 135 701 183 701 236  curveto
701 300 682 332 643 332  curveto
612 332 585 310 561 268  curveto
537 226 525 178 525 123  curveto
closepath
88 -18 moveto
753 740 lineto
817 740 lineto
152 -18 lineto
88 -18 lineto
closepath
934 0 moveto
896 0 866 11 844 34  curveto
821 58 810 89 810 128  curveto
810 192 828 247 865 292  curveto
902 338 946 361 999 361  curveto
1037 361 1067 349 1090 326  curveto
1112 303 1124 272 1124 233  curveto
1124 168 1105 113 1068 68  curveto
1032 22 987 0 934 0  curveto
closepath
882 123 moveto
882 61 902 29 941 29  curveto
971 29 997 51 1021 93  curveto
1046 135 1058 183 1058 235  curveto
1058 299 1038 332 1000 332  curveto
969 332 941 310 917 268  curveto
894 226 882 178 882 123  curveto
closepath
fill
		} def

	/questiondown
		{
430 530 moveto
411 433 lineto
314 433 lineto
334 530 lineto
430 530 lineto
closepath
392 337 moveto
390 328 lineto
384 297 375 272 363 252  curveto
351 233 328 207 295 173  curveto
254 133 lineto
215 94 186 58 167 24  curveto
148 -10 138 -42 138 -73  curveto
138 -105 148 -130 168 -150  curveto
188 -170 214 -180 247 -180  curveto
311 -180 348 -157 358 -112  curveto
363 -91 367 -75 370 -63  curveto
373 -54 lineto
421 -54 lineto
396 -177 lineto
329 -199 269 -210 215 -210  curveto
163 -210 119 -198 86 -173  curveto
52 -148 36 -116 36 -76  curveto
36 -44 44 -16 61 7  curveto
78 30 111 60 159 95  curveto
194 121 lineto
224 142 247 171 265 207  curveto
282 243 294 286 299 337  curveto
392 337 lineto
closepath
fill
		} def

	/grave
		{
513 626 moveto
467 626 lineto
311 783 lineto
434 783 lineto
513 626 lineto
closepath
fill
		} def

	/acute
		{
338 626 moveto
495 783 lineto
618 783 lineto
383 626 lineto
338 626 lineto
closepath
fill
		} def

	/circumflex
		{
253 626 moveto
410 783 lineto
519 783 lineto
597 626 lineto
555 626 lineto
451 729 lineto
296 626 lineto
253 626 lineto
closepath
fill
		} def

	/tilde
		{
266 626 moveto
280 664 298 693 320 712  curveto
343 731 369 741 400 741  curveto
420 741 438 735 454 722  curveto
468 710 lineto
483 698 499 692 516 692  curveto
532 692 546 696 557 704  curveto
569 712 577 724 584 740  curveto
614 740 lineto
599 702 581 674 559 655  curveto
536 635 510 626 479 626  curveto
459 626 442 632 426 645  curveto
412 656 lineto
396 669 380 675 364 675  curveto
349 675 336 671 324 663  curveto
313 654 303 642 296 626  curveto
266 626 lineto
closepath
fill
		} def

	/macron
		{
191 722 moveto
203 783 lineto
607 783 lineto
595 722 lineto
191 722 lineto
closepath
fill
		} def

	/breve
		{
293 783 moveto
325 783 lineto
326 753 337 732 356 717  curveto
375 703 403 695 439 695  curveto
475 695 505 703 530 717  curveto
555 732 574 753 587 783  curveto
619 783 lineto
603 734 577 696 542 668  curveto
507 640 468 626 423 626  curveto
386 626 355 638 330 663  curveto
305 688 292 719 292 756  curveto
292 763 293 772 293 783  curveto
closepath
fill
		} def

	/dotaccent
		{
377 626 moveto
396 722 lineto
493 722 lineto
474 626 lineto
377 626 lineto
closepath
fill
		} def

	/dieresis
		{
283 626 moveto
299 710 lineto
384 710 lineto
367 626 lineto
283 626 lineto
closepath
476 626 moveto
492 710 lineto
577 710 lineto
560 626 lineto
476 626 lineto
closepath
fill
		} def

	/ring
		{
430 626 moveto
399 626 374 637 352 658  curveto
331 680 320 706 320 737  curveto
320 767 331 794 353 815  curveto
374 837 400 848 431 848  curveto
462 848 488 837 510 815  curveto
531 794 542 768 542 737  curveto
542 706 531 679 510 658  curveto
488 637 461 626 430 626  curveto
closepath
430 659 moveto
452 659 471 667 486 682  curveto
501 697 509 715 509 737  curveto
509 759 501 777 486 792  curveto
471 807 453 814 431 814  curveto
410 814 391 807 376 792  curveto
361 777 354 758 354 737  curveto
354 716 361 697 376 682  curveto
391 667 409 659 430 659  curveto
closepath
fill
		} def

	/cedilla
		{
176 -200 moveto
183 -167 lineto
201 -172 216 -175 229 -175  curveto
271 -175 292 -158 292 -125  curveto
292 -98 264 -85 209 -85  curveto
273 0 lineto
312 0 lineto
268 -58 lineto
330 -62 361 -82 361 -118  curveto
361 -142 349 -164 326 -182  curveto
303 -201 276 -210 246 -210  curveto
222 -210 199 -207 176 -200  curveto
closepath
fill
		} def

	/hungarumlaut
		{
125 0 moveto
125 625 lineto
625 625 lineto
625 0 lineto
125 0 lineto
closepath
156 31 moveto
593 31 lineto
593 593 lineto
156 593 lineto
156 31 lineto
closepath
fill
		} def

	/ogonek
		{
365 -133 moveto
358 -166 lineto
334 -175 310 -180 284 -180  curveto
253 -180 229 -175 213 -165  curveto
197 -154 189 -139 189 -118  curveto
189 -94 198 -73 214 -53  curveto
231 -33 255 -15 289 0  curveto
341 0 lineto
313 -14 293 -29 280 -46  curveto
266 -63 259 -81 259 -101  curveto
259 -114 264 -124 273 -131  curveto
282 -137 296 -141 314 -141  curveto
332 -141 349 -138 365 -133  curveto
closepath
fill
		} def

	/caron
		{
628 783 moveto
479 626 lineto
371 626 lineto
285 783 lineto
327 783 lineto
435 674 lineto
586 783 lineto
628 783 lineto
closepath
fill
		} def

	/emdash
		{
125 265 moveto
137 325 lineto
570 325 lineto
558 265 lineto
125 265 lineto
closepath
fill
		} def

	/AE
		{
882 0 moveto
361 0 lineto
367 30 lineto
376 30 lineto
409 33 lineto
430 34 445 40 453 52  curveto
461 63 469 88 476 126  curveto
496 226 lineto
250 226 lineto
173 125 lineto
156 103 146 89 143 84  curveto
126 57 lineto
123 52 122 48 122 45  curveto
122 36 132 31 152 31  curveto
176 30 lineto
191 30 lineto
185 0 lineto
1 0 lineto
7 30 lineto
17 30 lineto
39 32 62 47 85 75  curveto
129 127 lineto
585 722 lineto
999 722 lineto
974 596 lineto
919 596 lineto
920 605 lineto
926 646 lineto
930 664 lineto
927 677 899 683 847 683  curveto
689 683 lineto
632 394 lineto
771 394 lineto
802 396 lineto
823 396 836 405 841 423  curveto
841 426 843 433 847 445  curveto
849 454 lineto
894 454 lineto
862 295 lineto
817 295 lineto
818 304 lineto
820 319 821 330 821 335  curveto
821 346 813 352 798 353  curveto
763 355 lineto
624 355 lineto
579 126 lineto
575 108 573 90 573 73  curveto
573 60 578 51 586 47  curveto
595 43 615 42 645 42  curveto
722 42 lineto
769 42 800 44 814 48  curveto
828 52 837 63 841 79  curveto
850 114 lineto
852 123 lineto
906 123 lineto
882 0 lineto
closepath
279 265 moveto
504 265 lineto
582 656 lineto
279 265 lineto
closepath
fill
		} def

	/ordfeminine
		{
364 355 moveto
399 502 lineto
388 502 lineto
350 451 316 413 285 387  curveto
254 361 227 349 202 349  curveto
160 349 139 377 139 435  curveto
139 511 162 578 209 638  curveto
255 698 308 729 367 729  curveto
376 729 392 727 415 725  curveto
421 724 430 723 442 722  curveto
523 722 lineto
475 480 lineto
467 433 lineto
464 420 462 413 462 413  curveto
463 397 479 388 511 386  curveto
520 385 lineto
514 355 lineto
364 355 lineto
closepath
406 566 moveto
426 667 lineto
401 678 376 684 353 684  curveto
318 684 287 661 261 614  curveto
235 568 222 514 222 451  curveto
222 428 230 417 245 417  curveto
260 417 281 429 308 454  curveto
335 479 368 516 406 566  curveto
closepath
fill
		} def

	/Lslash
		{
23 0 moveto
29 30 lineto
38 30 lineto
72 33 lineto
93 34 107 40 115 52  curveto
123 63 131 88 139 126  curveto
186 365 lineto
85 312 lineto
93 354 lineto
194 406 lineto
232 596 lineto
237 623 240 646 240 666  curveto
240 680 227 688 202 689  curveto
169 691 lineto
161 692 lineto
167 722 lineto
450 722 lineto
444 692 lineto
435 691 lineto
401 689 lineto
380 688 366 681 358 670  curveto
350 659 342 634 334 596  curveto
308 465 lineto
456 542 lineto
448 500 lineto
300 424 lineto
241 126 lineto
235 97 232 77 232 65  curveto
232 55 236 48 245 45  curveto
253 43 274 42 308 42  curveto
394 42 lineto
440 42 471 44 487 50  curveto
502 55 513 67 517 85  curveto
528 134 lineto
531 144 lineto
582 144 lineto
553 0 lineto
23 0 lineto
closepath
fill
		} def

	/Oslash
		{
104 -18 moveto
50 -18 lineto
157 85 lineto
126 127 110 185 110 260  curveto
110 387 154 499 243 596  curveto
331 692 434 740 552 740  curveto
630 740 696 715 750 664  curveto
830 740 lineto
882 740 lineto
775 636 lineto
805 584 820 527 820 465  curveto
820 336 776 223 688 126  curveto
600 30 497 -18 380 -18  curveto
298 -18 232 7 181 57  curveto
104 -18 lineto
closepath
230 156 moveto
688 602 lineto
656 672 605 707 534 707  curveto
451 707 378 660 315 567  curveto
252 474 220 367 220 246  curveto
220 208 223 178 230 156  curveto
closepath
701 563 moveto
245 119 lineto
280 52 332 19 399 19  curveto
479 19 551 64 616 156  curveto
681 248 713 351 713 464  curveto
713 494 709 527 701 563  curveto
closepath
fill
		} def

	/OE
		{
981 0 moveto
547 0 lineto
556 42 lineto
502 1 440 -18 372 -18  curveto
292 -18 228 5 181 54  curveto
134 103 111 169 111 252  curveto
111 385 154 499 240 596  curveto
327 692 429 741 547 741  curveto
600 741 646 724 687 691  curveto
692 722 lineto
1098 722 lineto
1072 596 lineto
1018 596 lineto
1020 605 lineto
1025 646 lineto
1029 664 lineto
1026 677 998 683 946 683  curveto
789 683 lineto
731 394 lineto
870 394 lineto
900 396 lineto
922 396 935 405 939 423  curveto
941 429 943 437 945 445  curveto
948 454 lineto
993 454 lineto
961 295 lineto
916 295 lineto
917 304 lineto
919 319 920 330 920 336  curveto
920 346 913 352 897 353  curveto
862 355 lineto
723 355 lineto
678 126 lineto
674 108 672 90 672 73  curveto
672 60 677 51 686 47  curveto
694 43 714 42 744 42  curveto
821 42 lineto
868 42 899 44 913 48  curveto
927 52 936 63 940 79  curveto
949 114 lineto
951 123 lineto
1005 123 lineto
981 0 lineto
closepath
602 263 moveto
657 548 lineto
660 562 661 576 661 589  curveto
661 624 650 652 627 673  curveto
604 694 574 705 536 705  curveto
450 705 375 658 313 565  curveto
250 472 219 362 219 234  curveto
219 169 235 116 269 76  curveto
302 36 346 16 399 16  curveto
455 16 499 34 529 72  curveto
560 109 584 173 602 263  curveto
closepath
fill
		} def

	/ordmasculine
		{
265 349 moveto
225 349 195 359 175 377  curveto
155 396 146 425 146 462  curveto
146 533 173 597 227 654  curveto
282 712 343 740 411 740  curveto
451 740 481 731 501 712  curveto
521 693 531 665 531 627  curveto
531 556 504 492 449 435  curveto
395 378 333 349 265 349  curveto
closepath
308 386 moveto
343 386 375 408 404 452  curveto
434 496 448 544 448 597  curveto
448 632 442 658 429 675  curveto
416 693 397 702 371 702  curveto
336 702 303 680 274 637  curveto
245 593 230 545 230 493  curveto
230 457 236 431 249 413  curveto
262 395 282 386 308 386  curveto
closepath
fill
		} def

	/ae
		{
869 82 moveto
773 19 687 -12 610 -12  curveto
559 -12 520 3 495 33  curveto
470 63 457 109 457 170  curveto
458 220 lineto
412 142 365 83 318 44  curveto
270 5 222 -14 174 -14  curveto
147 -14 124 -2 105 20  curveto
87 44 78 73 78 107  curveto
78 214 115 313 190 404  curveto
264 495 345 540 433 540  curveto
458 540 487 537 520 530  curveto
609 530 lineto
599 472 lineto
662 519 720 542 772 542  curveto
804 542 830 532 850 513  curveto
871 494 881 470 881 441  curveto
881 375 851 321 791 279  curveto
730 237 650 213 548 208  curveto
548 184 lineto
548 137 558 102 577 78  curveto
597 55 626 43 665 43  curveto
730 43 801 71 876 127  curveto
869 82 lineto
closepath
473 295 moveto
507 465 lineto
469 484 429 494 387 494  curveto
339 494 299 472 269 427  curveto
245 392 224 345 207 287  curveto
190 228 181 175 181 128  curveto
181 81 196 58 227 58  curveto
258 58 294 78 335 117  curveto
376 157 422 216 473 295  curveto
closepath
550 233 moveto
624 239 682 258 724 291  curveto
767 323 788 366 788 417  curveto
788 443 782 463 771 476  curveto
761 489 745 495 723 495  curveto
680 495 642 470 610 421  curveto
577 372 557 309 550 233  curveto
closepath
fill
		} def

	/dotlessi
		{
102 0 moveto
183 403 lineto
188 430 190 453 190 473  curveto
190 487 178 495 153 497  curveto
120 499 lineto
111 500 lineto
117 530 lineto
304 530 lineto
224 126 lineto
218 99 216 76 216 57  curveto
216 42 228 34 253 33  curveto
286 30 lineto
295 30 lineto
289 0 lineto
102 0 lineto
closepath
fill
		} def

	/lslash
		{
207 423 moveto
251 644 lineto
256 671 259 694 259 714  curveto
259 728 246 736 221 737  curveto
189 740 lineto
180 740 lineto
186 771 lineto
373 771 lineto
314 479 lineto
436 542 lineto
427 500 lineto
306 437 lineto
245 126 lineto
239 99 236 76 236 57  curveto
236 42 249 34 274 33  curveto
307 30 lineto
315 30 lineto
310 0 lineto
123 0 lineto
199 382 lineto
78 319 lineto
86 361 lineto
207 423 lineto
closepath
fill
		} def

	/oslash
		{
94 -12 moveto
42 -12 lineto
114 59 lineto
95 95 86 132 86 169  curveto
86 266 120 353 187 428  curveto
255 504 333 542 419 542  curveto
462 542 500 527 533 497  curveto
574 542 lineto
625 542 lineto
557 467 lineto
574 432 582 396 582 360  curveto
582 262 548 176 481 100  curveto
414 25 337 -12 250 -12  curveto
207 -12 169 1 136 29  curveto
94 -12 lineto
closepath
191 139 moveto
471 432 lineto
452 480 423 504 382 504  curveto
332 504 287 470 248 403  curveto
209 335 189 258 189 172  curveto
189 164 190 153 191 139  curveto
closepath
479 386 moveto
199 95 lineto
217 46 247 21 289 21  curveto
339 21 383 56 422 124  curveto
461 192 480 270 480 358  curveto
480 364 480 373 479 386  curveto
closepath
fill
		} def

	/oe
		{
879 82 moveto
786 19 699 -12 620 -12  curveto
547 -12 498 22 474 91  curveto
404 22 329 -12 250 -12  curveto
201 -12 161 4 131 36  curveto
101 69 86 112 86 166  curveto
86 265 120 353 187 428  curveto
254 504 332 542 419 542  curveto
493 542 542 507 568 438  curveto
638 507 709 542 782 542  curveto
814 542 840 532 861 513  curveto
882 494 892 470 892 441  curveto
892 375 862 321 802 279  curveto
741 237 660 213 559 208  curveto
559 184 lineto
559 90 598 43 676 43  curveto
741 43 811 71 887 127  curveto
879 82 lineto
closepath
188 172 moveto
188 73 221 23 287 23  curveto
337 23 382 57 420 125  curveto
459 193 479 271 479 360  curveto
479 457 446 505 382 505  curveto
331 505 286 471 247 404  curveto
208 336 188 259 188 172  curveto
closepath
562 235 moveto
635 240 693 260 736 292  curveto
778 325 799 367 799 419  curveto
799 471 777 497 734 497  curveto
691 497 654 472 621 423  curveto
589 374 569 311 562 235  curveto
closepath
fill
		} def

	/germandbls
		{
64 -192 moveto
213 555 lineto
228 631 255 687 293 726  curveto
331 764 381 783 442 783  curveto
483 783 517 772 543 750  curveto
569 729 582 701 582 668  curveto
582 634 564 601 527 570  curveto
483 534 lineto
459 514 lineto
427 486 410 461 410 438  curveto
410 419 425 395 454 368  curveto
532 293 lineto
579 249 602 205 602 162  curveto
602 114 583 73 545 39  curveto
506 4 461 -12 408 -12  curveto
372 -12 331 -3 285 13  curveto
306 120 lineto
354 120 lineto
353 111 lineto
350 85 lineto
348 69 347 59 347 55  curveto
347 29 368 16 412 16  curveto
441 16 467 27 488 49  curveto
509 72 520 98 520 129  curveto
520 159 503 190 470 221  curveto
389 297 lineto
349 334 330 367 330 396  curveto
330 425 349 457 387 491  curveto
409 510 lineto
436 534 456 558 469 583  curveto
483 608 490 633 490 660  curveto
490 689 484 710 473 725  curveto
461 739 444 746 421 746  curveto
393 746 371 734 356 711  curveto
341 688 327 644 314 579  curveto
161 -192 lineto
64 -192 lineto
closepath
fill
		} def

	/.notdef
		{
0 0 moveto
1000 0 lineto
1000 1000 lineto
0 1000 lineto
0 0 lineto
closepath
50 50 moveto
950 50 lineto
950 950 lineto
50 950 lineto
50 50 lineto
closepath
fill
		} def

	end				% close glyph dict. 
	currentdict			% actually put dict on the stack
	end			% close the dictionary now
	/LucidaBright-Italic exch definefont pop
/LucidaBright-Italic findfont 22.0 scalefont setfont
(3) show
Q
Q
newpath
0.0 0.0 m
0.0 520.0 l
556.0 520.0 l
556.0 0.0 l
h
W
Q
[ 1.0 0.0 0.0 1.0 5.0 5.0 ] defaultmatrix matrix concatmatrix setmatrix
-5.0 -5.0 translate
5.0 5.0 translate
Q
q
-5.0 -5.0 translate
5.0 5.0 translate
q
[ 1.0 0.0 0.0 1.0 0.0 0.0 ] concat
q
208 454 19 30 rc
212.0 478.0 moveto
q 1 -1 scale
9 dict begin
/FontType 3 def
/FontMatrix [0.0010 0 0 0.0010 0 0]def
/FontBBox [0 -293 1042 1010 ] def
	/Encoding 256 array def
			0 1 255 {Encoding exch /.notdef put}for
		Encoding 32 /space put
		Encoding 33 /exclam put
		Encoding 34 /quotedbl put
		Encoding 35 /numbersign put
		Encoding 36 /dollar put
		Encoding 37 /percent put
		Encoding 38 /ampersand put
		Encoding 39 /quoteright put
		Encoding 40 /parenleft put
		Encoding 41 /parenright put
		Encoding 42 /asterisk put
		Encoding 43 /plus put
		Encoding 44 /comma put
		Encoding 45 /hyphen put
		Encoding 46 /period put
		Encoding 47 /slash put
		Encoding 48 /zero put
		Encoding 49 /one put
		Encoding 50 /two put
		Encoding 51 /three put
		Encoding 52 /four put
		Encoding 53 /five put
		Encoding 54 /six put
		Encoding 55 /seven put
		Encoding 56 /eight put
		Encoding 57 /nine put
		Encoding 58 /colon put
		Encoding 59 /semicolon put
		Encoding 60 /less put
		Encoding 61 /equal put
		Encoding 62 /greater put
		Encoding 63 /question put
		Encoding 64 /at put
		Encoding 65 /A put
		Encoding 66 /B put
		Encoding 67 /C put
		Encoding 68 /D put
		Encoding 69 /E put
		Encoding 70 /F put
		Encoding 71 /G put
		Encoding 72 /H put
		Encoding 73 /I put
		Encoding 74 /J put
		Encoding 75 /K put
		Encoding 76 /L put
		Encoding 77 /M put
		Encoding 78 /N put
		Encoding 79 /O put
		Encoding 80 /P put
		Encoding 81 /Q put
		Encoding 82 /R put
		Encoding 83 /S put
		Encoding 84 /T put
		Encoding 85 /U put
		Encoding 86 /V put
		Encoding 87 /W put
		Encoding 88 /X put
		Encoding 89 /Y put
		Encoding 90 /Z put
		Encoding 91 /bracketleft put
		Encoding 92 /backslash put
		Encoding 93 /bracketright put
		Encoding 94 /asciicircum put
		Encoding 95 /underscore put
		Encoding 96 /quoteleft put
		Encoding 97 /a put
		Encoding 98 /b put
		Encoding 99 /c put
		Encoding 100 /d put
		Encoding 101 /e put
		Encoding 102 /f put
		Encoding 103 /g put
		Encoding 104 /h put
		Encoding 105 /i put
		Encoding 106 /j put
		Encoding 107 /k put
		Encoding 108 /l put
		Encoding 109 /m put
		Encoding 110 /n put
		Encoding 111 /o put
		Encoding 112 /p put
		Encoding 113 /q put
		Encoding 114 /r put
		Encoding 115 /s put
		Encoding 116 /t put
		Encoding 117 /u put
		Encoding 118 /v put
		Encoding 119 /w put
		Encoding 120 /x put
		Encoding 121 /y put
		Encoding 122 /z put
		Encoding 123 /braceleft put
		Encoding 124 /bar put
		Encoding 125 /braceright put
		Encoding 126 /asciitilde put
		Encoding 161 /exclamdown put
		Encoding 162 /cent put
		Encoding 163 /sterling put
		Encoding 164 /fraction put
		Encoding 165 /yen put
		Encoding 166 /florin put
		Encoding 167 /section put
		Encoding 168 /currency put
		Encoding 169 /quotesingle put
		Encoding 170 /quotedblleft put
		Encoding 171 /guillemotleft put
		Encoding 172 /guilsinglleft put
		Encoding 173 /guilsinglright put
		Encoding 174 /fi put
		Encoding 175 /fl put
		Encoding 177 /endash put
		Encoding 178 /dagger put
		Encoding 179 /daggerdbl put
		Encoding 180 /periodcentered put
		Encoding 182 /paragraph put
		Encoding 183 /bullet put
		Encoding 184 /quotesinglbase put
		Encoding 185 /quotedblbase put
		Encoding 186 /quotedblright put
		Encoding 187 /guillemotright put
		Encoding 188 /ellipsis put
		Encoding 189 /perthousand put
		Encoding 191 /questiondown put
		Encoding 193 /grave put
		Encoding 194 /acute put
		Encoding 195 /circumflex put
		Encoding 196 /tilde put
		Encoding 197 /macron put
		Encoding 198 /breve put
		Encoding 199 /dotaccent put
		Encoding 200 /dieresis put
		Encoding 202 /ring put
		Encoding 203 /cedilla put
		Encoding 205 /hungarumlaut put
		Encoding 206 /ogonek put
		Encoding 207 /caron put
		Encoding 208 /emdash put
		Encoding 225 /AE put
		Encoding 227 /ordfeminine put
		Encoding 232 /Lslash put
		Encoding 233 /Oslash put
		Encoding 234 /OE put
		Encoding 235 /ordmasculine put
		Encoding 241 /ae put
		Encoding 245 /dotlessi put
		Encoding 248 /lslash put
		Encoding 249 /oslash put
		Encoding 250 /oe put
		Encoding 251 /germandbls put
	/BuildGlyph
		{ 2 copy exch /Metrics get exch 
			2 copy known {get}{pop pop 1000.0} ifelse
			0
			0 -293 1042 1010
			setcachedevice
			exch /CharProcs get exch
			2 copy known not
					{pop /.notdef}
				if
			get exec
		} bind def

	/BuildChar
		{ 1 index /Encoding get exch get
		  1 index /BuildGlyph get exec
	  } bind def
	/Metrics 150 dict def
		Metrics begin
		/.notdef 1000 def
		/space 250.0 def
		/exclam 333.0 def
		/quotedbl 713.0 def
		/numbersign 500.0 def
		/dollar 549.0 def
		/percent 833.0 def
		/ampersand 778.0 def
		/quoteright 439.0 def
		/parenleft 333.0 def
		/parenright 333.0 def
		/asterisk 500.0 def
		/plus 549.0 def
		/comma 250.0 def
		/hyphen 584.0 def
		/period 250.0 def
		/slash 278.0 def
		/zero 500.0 def
		/one 500.0 def
		/two 500.0 def
		/three 500.0 def
		/four 500.0 def
		/five 500.0 def
		/six 500.0 def
		/seven 500.0 def
		/eight 500.0 def
		/nine 500.0 def
		/colon 278.0 def
		/semicolon 278.0 def
		/less 549.0 def
		/equal 549.0 def
		/greater 549.0 def
		/question 444.0 def
		/at 549.0 def
		/A 722.0 def
		/B 667.0 def
		/C 722.0 def
		/D 612.0 def
		/E 611.0 def
		/F 763.0 def
		/G 603.0 def
		/H 722.0 def
		/I 333.0 def
		/J 631.0 def
		/K 722.0 def
		/L 686.0 def
		/M 889.0 def
		/N 722.0 def
		/O 722.0 def
		/P 768.0 def
		/Q 741.0 def
		/R 556.0 def
		/S 592.0 def
		/T 611.0 def
		/U 690.0 def
		/V 439.0 def
		/W 768.0 def
		/X 645.0 def
		/Y 795.0 def
		/Z 611.0 def
		/bracketleft 333.0 def
		/backslash 863.0 def
		/bracketright 333.0 def
		/asciicircum 658.0 def
		/underscore 500.0 def
		/quoteleft 500.0 def
		/a 631.0 def
		/b 549.0 def
		/c 549.0 def
		/d 494.0 def
		/e 439.0 def
		/f 521.0 def
		/g 411.0 def
		/h 603.0 def
		/i 329.0 def
		/j 603.0 def
		/k 549.0 def
		/l 549.0 def
		/m 576.0 def
		/n 521.0 def
		/o 549.0 def
		/p 549.0 def
		/q 521.0 def
		/r 549.0 def
		/s 603.0 def
		/t 439.0 def
		/u 576.0 def
		/v 713.0 def
		/w 686.0 def
		/x 493.0 def
		/y 686.0 def
		/z 494.0 def
		/braceleft 480.0 def
		/bar 200.0 def
		/braceright 480.0 def
		/asciitilde 549.0 def
		/exclamdown 620.0 def
		/cent 247.0 def
		/sterling 549.0 def
		/fraction 584.0 def
		/yen 713.0 def
		/florin 584.0 def
		/section 753.0 def
		/currency 167.0 def
		/quotesingle 439.0 def
		/quotedblleft 584.0 def
		/guillemotleft 1042.0 def
		/guilsinglleft 584.0 def
		/guilsinglright 584.0 def
		/fi 584.0 def
		/fl 584.0 def
		/endash 584.0 def
		/dagger 584.0 def
		/daggerdbl 584.0 def
		/periodcentered 460.0 def
		/paragraph 494.0 def
		/bullet 584.0 def
		/quotesinglbase 584.0 def
		/quotedblbase 584.0 def
		/quotedblright 584.0 def
		/guillemotright 549.0 def
		/ellipsis 584.0 def
		/perthousand 584.0 def
		/questiondown 658.0 def
		/grave 500.0 def
		/acute 584.0 def
		/circumflex 584.0 def
		/tilde 584.0 def
		/macron 603.0 def
		/breve 584.0 def
		/dotaccent 584.0 def
		/dieresis 753.0 def
		/ring 584.0 def
		/cedilla 549.0 def
		/hungarumlaut 584.0 def
		/ogonek 584.0 def
		/caron 584.0 def
		/emdash 584.0 def
		/AE 823.0 def
		/ordfeminine 753.0 def
		/Lslash 584.0 def
		/Oslash 713.0 def
		/OE 584.0 def
		/ordmasculine 549.0 def
		/ae 384.0 def
		/dotlessi 584.0 def
		/lslash 584.0 def
		/oslash 384.0 def
		/oe 584.0 def
		/germandbls 603.0 def
	end
	/CharProcs 150 dict def
	CharProcs begin
			%define Glyph dictionary and start filling
	/space
		{
fill
		} def

	/exclam
		{
240 39 moveto
240 23 234 10 223 0  curveto
212 -11 199 -17 184 -17  curveto
168 -17 155 -11 144 0  curveto
133 10 128 23 128 39  curveto
128 54 133 67 144 78  curveto
155 89 168 95 184 95  curveto
199 95 212 89 223 78  curveto
234 67 240 54 240 39  curveto
closepath
240 580 moveto
240 571 239 562 238 552  curveto
237 542 236 532 234 523  curveto
232 513 231 504 230 496  curveto
228 488 227 481 227 476  curveto
194 209 lineto
193 205 192 200 191 196  curveto
189 192 187 190 184 190  curveto
180 190 178 192 177 196  curveto
175 200 174 205 174 209  curveto
141 475 lineto
140 479 139 486 138 494  curveto
136 502 135 511 133 521  curveto
131 531 130 541 129 551  curveto
128 561 128 570 128 579  curveto
128 604 131 626 139 644  curveto
147 662 162 672 184 672  curveto
200 672 214 665 224 651  curveto
234 637 240 614 240 580  curveto
closepath
fill
		} def

	/quotedbl
		{
199 447 moveto
361 70 lineto
517 447 lineto
199 447 lineto
closepath
388 0 moveto
329 0 lineto
31 705 lineto
88 705 lineto
175 502 lineto
540 502 lineto
624 705 lineto
681 705 lineto
388 0 lineto
closepath
fill
		} def

	/numbersign
		{
201 420 moveto
176 238 lineto
301 238 lineto
325 420 lineto
201 420 lineto
closepath
475 420 moveto
372 420 lineto
348 238 lineto
451 238 lineto
445 192 lineto
341 192 lineto
313 -16 lineto
266 -16 lineto
294 192 lineto
170 192 lineto
141 -16 lineto
94 -16 lineto
123 192 lineto
20 192 lineto
26 238 lineto
129 238 lineto
154 420 lineto
54 420 lineto
60 466 lineto
160 466 lineto
189 673 lineto
236 673 lineto
207 466 lineto
332 466 lineto
360 673 lineto
407 673 lineto
379 466 lineto
481 466 lineto
475 420 lineto
closepath
fill
		} def

	/dollar
		{
25 0 moveto
25 55 lineto
423 55 lineto
423 342 lineto
69 342 lineto
69 397 lineto
423 397 lineto
423 652 lineto
25 652 lineto
25 707 lineto
478 707 lineto
478 0 lineto
25 0 lineto
closepath
fill
		} def

	/percent
		{
741 212 moveto
741 222 739 233 736 244  curveto
732 254 727 264 721 272  curveto
715 280 707 287 698 292  curveto
688 297 678 300 666 300  curveto
652 300 641 297 632 291  curveto
622 285 613 277 603 267  curveto
599 263 595 258 591 254  curveto
587 249 583 244 579 238  curveto
575 232 570 224 566 215  curveto
561 206 555 195 549 183  curveto
539 163 531 144 525 125  curveto
518 105 515 88 515 74  curveto
515 46 521 26 533 16  curveto
545 5 559 0 575 0  curveto
591 0 605 2 617 8  curveto
628 14 639 22 651 34  curveto
666 49 679 66 691 85  curveto
702 103 711 121 719 138  curveto
726 155 731 170 735 184  curveto
739 197 741 206 741 212  curveto
closepath
365 536 moveto
365 542 364 549 363 557  curveto
362 565 361 572 360 579  curveto
340 587 325 595 317 601  curveto
308 607 301 611 296 615  curveto
294 615 293 615 291 615  curveto
289 615 288 616 287 616  curveto
280 616 273 614 267 612  curveto
260 609 252 603 243 594  curveto
238 589 233 583 227 576  curveto
221 568 215 560 209 552  curveto
203 544 198 535 193 526  curveto
187 517 183 509 179 501  curveto
169 478 160 457 153 438  curveto
146 419 143 399 143 379  curveto
143 355 148 339 158 329  curveto
168 319 183 314 201 314  curveto
217 314 232 317 246 325  curveto
260 332 272 341 284 353  curveto
296 364 306 376 315 390  curveto
323 403 331 415 337 427  curveto
347 448 355 469 359 490  curveto
363 510 365 526 365 536  curveto
closepath
771 226 moveto
771 207 768 188 763 168  curveto
757 148 750 128 741 109  curveto
732 90 722 72 710 55  curveto
698 38 686 23 674 11  curveto
656 -6 638 -18 620 -25  curveto
601 -32 581 -36 560 -36  curveto
523 -36 493 -24 469 -1  curveto
445 22 434 52 434 90  curveto
434 119 438 146 448 170  curveto
457 194 469 216 484 236  curveto
499 256 516 273 535 287  curveto
554 301 573 314 593 324  curveto
603 329 614 333 626 335  curveto
638 337 649 338 660 338  curveto
698 338 726 328 744 309  curveto
762 289 771 262 771 226  curveto
closepath
229 -28 moveto
174 -28 lineto
563 583 lineto
551 578 540 574 531 571  curveto
522 568 514 566 506 564  curveto
498 562 489 560 481 559  curveto
473 558 463 558 453 558  curveto
441 558 431 558 423 560  curveto
415 561 404 565 390 573  curveto
390 567 391 560 392 550  curveto
393 540 394 530 394 520  curveto
394 502 392 485 389 470  curveto
385 455 379 439 371 422  curveto
355 392 338 365 320 343  curveto
301 320 282 304 263 295  curveto
251 289 238 285 222 281  curveto
206 277 192 276 179 276  curveto
162 276 146 279 132 286  curveto
118 292 105 302 95 314  curveto
85 326 77 340 71 356  curveto
65 372 63 389 63 408  curveto
63 424 65 440 69 458  curveto
73 476 79 492 87 506  curveto
95 522 106 538 118 553  curveto
130 567 142 580 154 592  curveto
166 603 177 612 188 620  curveto
199 628 208 633 215 637  curveto
228 643 240 648 250 650  curveto
260 652 270 653 282 653  curveto
303 653 319 650 330 646  curveto
340 641 348 637 353 633  curveto
355 630 359 626 365 621  curveto
371 615 378 610 386 605  curveto
394 600 405 596 417 592  curveto
429 588 442 586 458 586  curveto
472 586 487 588 503 592  curveto
519 596 533 601 547 607  curveto
561 613 573 621 583 629  curveto
593 637 599 646 602 655  curveto
657 655 lineto
229 -28 lineto
closepath
fill
		} def

	/ampersand
		{
400 108 moveto
364 150 333 193 308 235  curveto
282 277 262 312 246 340  curveto
224 327 206 314 192 301  curveto
177 288 165 275 157 262  curveto
148 248 142 234 138 220  curveto
134 206 133 191 133 176  curveto
133 158 136 141 143 125  curveto
150 108 160 93 172 80  curveto
184 67 197 57 213 49  curveto
228 41 244 37 260 37  curveto
282 37 305 43 330 55  curveto
355 67 378 85 400 108  curveto
closepath
433 548 moveto
433 576 425 595 410 607  curveto
395 619 378 625 359 625  curveto
345 625 334 623 325 619  curveto
315 615 307 609 300 602  curveto
292 594 287 584 284 571  curveto
280 558 279 545 279 532  curveto
279 510 283 490 291 470  curveto
299 450 307 430 317 411  curveto
330 418 343 425 357 433  curveto
371 441 383 450 395 460  curveto
406 470 415 483 422 497  curveto
429 511 433 528 433 548  curveto
closepath
750 100 moveto
744 86 737 74 729 64  curveto
721 54 713 44 706 35  curveto
694 19 678 7 657 -3  curveto
635 -13 613 -18 589 -18  curveto
571 -18 553 -14 535 -6  curveto
517 1 501 10 487 21  curveto
472 31 459 42 448 53  curveto
436 63 428 72 422 78  curveto
409 64 394 52 378 41  curveto
362 29 345 19 327 10  curveto
309 1 290 -5 271 -10  curveto
252 -15 234 -18 216 -18  curveto
191 -18 166 -14 141 -6  curveto
116 2 97 12 84 26  curveto
70 39 60 56 52 76  curveto
44 96 41 119 41 143  curveto
41 174 48 202 64 227  curveto
79 252 97 274 118 293  curveto
138 312 159 328 181 342  curveto
202 355 219 366 232 374  curveto
228 387 224 399 220 409  curveto
216 419 212 429 209 438  curveto
206 447 204 456 202 466  curveto
200 475 199 485 199 497  curveto
199 523 203 547 212 567  curveto
220 587 231 604 245 618  curveto
259 632 275 643 293 650  curveto
310 657 330 661 354 661  curveto
378 661 398 658 416 652  curveto
433 646 450 635 466 619  curveto
474 611 480 601 484 590  curveto
488 578 491 567 491 555  curveto
491 539 486 521 477 499  curveto
468 477 456 458 440 442  curveto
427 429 412 418 396 410  curveto
379 401 358 391 332 380  curveto
336 372 342 361 351 345  curveto
359 329 369 312 381 293  curveto
393 274 406 255 420 235  curveto
434 215 448 198 462 182  curveto
472 194 483 207 494 221  curveto
505 235 515 249 524 264  curveto
533 279 540 294 546 310  curveto
551 325 554 340 554 354  curveto
554 368 550 379 543 388  curveto
535 397 519 402 495 402  curveto
495 420 lineto
706 420 lineto
706 402 lineto
681 402 663 397 651 388  curveto
639 378 629 365 619 349  curveto
609 333 600 317 590 299  curveto
580 281 569 264 558 246  curveto
547 228 536 210 524 192  curveto
512 174 500 158 487 144  curveto
493 136 502 128 514 118  curveto
526 108 538 98 552 89  curveto
566 80 579 73 593 67  curveto
606 61 618 58 630 58  curveto
646 58 662 62 677 71  curveto
691 80 710 94 734 114  curveto
750 100 lineto
750 100 lineto
closepath
fill
		} def

	/quoteright
		{
414 253 moveto
414 212 406 175 390 142  curveto
374 108 354 80 331 57  curveto
305 31 276 13 243 1  curveto
210 -11 176 -17 140 -17  curveto
123 -17 108 -15 94 -12  curveto
80 -9 64 -4 48 3  curveto
48 43 lineto
59 39 70 36 80 34  curveto
90 32 103 31 119 31  curveto
139 31 160 34 182 40  curveto
204 46 225 57 245 71  curveto
265 85 281 104 295 128  curveto
308 151 316 179 318 213  curveto
110 213 lineto
110 268 lineto
320 268 lineto
318 291 312 313 302 335  curveto
292 357 278 376 261 393  curveto
243 410 223 424 201 434  curveto
179 444 155 449 131 449  curveto
117 449 106 448 99 448  curveto
92 447 84 446 76 445  curveto
76 488 lineto
92 491 107 494 123 496  curveto
139 498 156 500 174 500  curveto
184 500 196 499 210 497  curveto
224 495 238 492 253 488  curveto
268 483 283 476 299 468  curveto
314 459 329 447 344 433  curveto
352 425 360 415 368 403  curveto
376 391 383 378 390 363  curveto
397 347 403 330 407 312  curveto
411 293 414 273 414 253  curveto
closepath
fill
		} def

	/parenleft
		{
290 -191 moveto
283 -191 272 -185 256 -173  curveto
240 -161 222 -146 204 -128  curveto
186 -110 168 -89 150 -67  curveto
132 -45 117 -23 107 -2  curveto
71 70 53 151 53 241  curveto
53 285 57 327 66 368  curveto
74 408 87 445 104 478  curveto
116 504 132 528 151 552  curveto
170 576 189 596 208 614  curveto
226 632 243 646 258 657  curveto
273 667 284 673 290 673  curveto
300 656 lineto
276 636 256 617 241 600  curveto
225 583 212 566 202 549  curveto
192 532 183 515 177 497  curveto
171 479 165 460 160 440  curveto
156 424 152 408 149 394  curveto
146 379 144 364 142 348  curveto
140 332 138 316 138 299  curveto
137 281 137 262 137 241  curveto
137 199 138 162 142 132  curveto
146 102 151 73 159 46  curveto
163 32 167 17 172 1  curveto
176 -15 183 -32 193 -50  curveto
202 -68 215 -88 232 -109  curveto
249 -129 272 -151 300 -174  curveto
290 -191 lineto
closepath
fill
		} def

	/parenright
		{
277 241 moveto
277 151 259 70 223 -2  curveto
212 -23 198 -45 180 -67  curveto
162 -89 143 -110 125 -128  curveto
107 -146 90 -161 74 -173  curveto
58 -185 46 -191 40 -191  curveto
30 -174 lineto
58 -151 80 -129 97 -109  curveto
114 -88 127 -68 137 -50  curveto
146 -32 153 -15 158 1  curveto
162 17 167 32 171 46  curveto
178 73 183 102 187 132  curveto
191 162 193 199 193 241  curveto
193 262 192 281 192 299  curveto
191 316 190 332 188 348  curveto
186 364 183 379 180 394  curveto
177 408 174 424 170 440  curveto
164 460 158 479 152 497  curveto
146 515 137 532 127 549  curveto
117 566 104 583 89 600  curveto
73 617 54 636 30 656  curveto
40 673 lineto
46 673 56 667 71 657  curveto
86 646 103 632 122 614  curveto
140 596 159 576 178 552  curveto
196 528 212 504 226 478  curveto
242 445 255 408 264 368  curveto
272 327 277 285 277 241  curveto
closepath
fill
		} def

	/asterisk
		{
427 253 moveto
427 244 424 237 418 231  curveto
412 225 404 223 392 223  curveto
380 223 370 226 363 234  curveto
358 238 353 244 348 252  curveto
342 259 335 267 326 277  curveto
314 289 301 299 287 309  curveto
273 319 265 324 261 324  curveto
256 324 254 318 254 308  curveto
254 289 255 274 258 263  curveto
261 251 264 241 268 233  curveto
272 224 275 216 278 208  curveto
281 200 283 190 283 178  curveto
283 164 278 153 270 146  curveto
261 138 253 135 246 135  curveto
239 135 231 138 222 145  curveto
213 151 209 162 209 177  curveto
209 189 210 200 213 208  curveto
216 216 219 224 223 232  curveto
227 240 230 250 233 262  curveto
236 273 238 288 238 308  curveto
238 311 237 314 237 318  curveto
236 322 234 324 231 324  curveto
229 324 225 322 221 320  curveto
216 317 211 313 205 309  curveto
199 305 192 300 185 294  curveto
178 288 172 283 166 277  curveto
156 267 149 259 144 252  curveto
138 244 133 238 129 234  curveto
121 226 112 223 100 223  curveto
88 223 79 225 73 231  curveto
67 237 65 244 65 253  curveto
65 259 66 266 69 274  curveto
72 282 78 288 87 292  curveto
90 294 97 296 109 299  curveto
120 302 132 305 146 309  curveto
159 313 172 316 184 320  curveto
196 324 204 327 210 330  curveto
212 331 215 333 219 335  curveto
222 337 224 340 224 344  curveto
224 348 220 352 214 355  curveto
195 364 179 370 167 374  curveto
155 378 144 380 135 382  curveto
126 383 118 384 112 385  curveto
105 386 98 388 92 392  curveto
88 394 82 398 76 405  curveto
69 412 66 420 66 429  curveto
66 437 68 445 73 452  curveto
77 459 86 463 100 463  curveto
106 463 114 461 122 458  curveto
130 455 137 450 144 444  curveto
148 439 153 433 157 426  curveto
161 418 168 410 178 401  curveto
186 392 196 384 208 378  curveto
220 371 228 368 232 368  curveto
236 368 238 372 238 381  curveto
238 400 236 416 233 428  curveto
230 440 227 451 224 461  curveto
220 471 217 480 214 488  curveto
211 496 210 506 210 518  curveto
210 526 212 533 216 540  curveto
220 547 230 551 246 551  curveto
261 551 271 547 275 540  curveto
279 532 282 525 282 517  curveto
282 506 280 496 277 488  curveto
274 480 271 471 268 462  curveto
264 452 261 441 258 429  curveto
255 416 254 400 254 381  curveto
254 372 256 368 260 368  curveto
264 368 271 371 283 378  curveto
295 384 305 392 314 401  curveto
323 410 330 418 334 426  curveto
338 433 343 439 348 444  curveto
354 450 362 455 370 458  curveto
378 461 385 463 392 463  curveto
405 463 414 459 419 452  curveto
423 445 426 437 426 429  curveto
426 420 422 412 416 405  curveto
409 398 404 394 400 392  curveto
392 388 385 386 379 385  curveto
373 384 365 383 356 382  curveto
347 380 336 378 324 374  curveto
312 370 296 364 278 355  curveto
271 352 268 348 268 344  curveto
268 340 269 337 273 335  curveto
276 333 279 331 282 330  curveto
286 327 295 324 307 320  curveto
319 316 332 313 346 309  curveto
359 305 371 302 383 299  curveto
394 296 401 294 405 292  curveto
413 288 419 282 422 274  curveto
425 266 427 259 427 253  curveto
closepath
fill
		} def

	/plus
		{
302 243 moveto
302 0 lineto
247 0 lineto
247 243 lineto
10 243 lineto
10 298 lineto
247 298 lineto
247 533 lineto
302 533 lineto
302 298 lineto
539 298 lineto
539 243 lineto
302 243 lineto
closepath
fill
		} def

	/comma
		{
194 20 moveto
194 0 190 -20 182 -41  curveto
174 -61 161 -81 142 -101  curveto
137 -105 131 -111 125 -117  curveto
118 -123 111 -128 104 -134  curveto
97 -139 90 -143 84 -147  curveto
77 -151 71 -153 67 -153  curveto
64 -153 61 -152 59 -151  curveto
57 -149 56 -147 56 -145  curveto
56 -139 57 -135 60 -132  curveto
62 -129 66 -126 71 -124  curveto
124 -91 151 -55 151 -16  curveto
151 -5 147 0 139 0  curveto
135 0 130 -1 124 -3  curveto
118 -5 112 -6 108 -6  curveto
91 -6 78 -1 69 8  curveto
60 17 56 30 56 46  curveto
56 62 61 76 72 87  curveto
83 98 97 104 115 104  curveto
127 104 137 101 146 97  curveto
155 92 164 86 172 78  curveto
180 70 185 62 189 54  curveto
192 46 194 34 194 20  curveto
closepath
fill
		} def

	/hyphen
		{
fill
		} def

	/period
		{
181 39 moveto
181 23 175 10 164 0  curveto
153 -11 140 -17 125 -17  curveto
109 -17 96 -11 85 0  curveto
74 10 69 23 69 39  curveto
69 54 74 67 85 78  curveto
96 89 109 95 125 95  curveto
140 95 153 89 164 78  curveto
175 67 181 54 181 39  curveto
closepath
fill
		} def

	/slash
		{
44 -18 moveto
0 -18 lineto
210 646 lineto
254 646 lineto
44 -18 lineto
closepath
fill
		} def

	/zero
		{
377 332 moveto
377 352 376 375 375 400  curveto
373 424 371 448 369 471  curveto
366 494 363 515 359 535  curveto
355 555 350 570 344 582  curveto
334 600 321 615 304 628  curveto
286 641 267 648 247 648  curveto
227 648 209 641 191 629  curveto
173 617 159 601 150 582  curveto
144 572 140 558 136 540  curveto
132 522 128 502 126 480  curveto
123 458 121 434 119 408  curveto
117 382 117 357 117 331  curveto
117 285 119 241 125 197  curveto
130 153 140 117 156 87  curveto
166 67 179 51 195 39  curveto
211 26 228 20 248 20  curveto
265 20 282 26 299 39  curveto
315 52 328 68 338 86  curveto
347 104 354 125 360 149  curveto
365 172 369 195 371 218  curveto
373 241 375 263 376 283  curveto
376 303 377 320 377 332  curveto
closepath
471 340 moveto
471 305 467 267 461 227  curveto
454 187 439 144 417 99  curveto
405 74 391 54 377 39  curveto
362 24 347 12 332 4  curveto
317 -3 302 -9 288 -12  curveto
273 -15 260 -17 248 -17  curveto
206 -17 171 -6 144 15  curveto
116 37 94 65 77 99  curveto
41 171 23 251 23 340  curveto
23 372 25 403 31 433  curveto
36 463 43 491 52 517  curveto
60 543 70 566 82 586  curveto
93 606 105 623 117 635  curveto
134 652 154 665 177 673  curveto
199 681 222 685 245 685  curveto
253 685 263 684 274 683  curveto
285 681 297 679 309 675  curveto
321 671 333 666 345 659  curveto
357 652 368 643 380 632  curveto
389 622 399 608 410 590  curveto
420 572 430 550 439 525  curveto
448 499 456 471 462 440  curveto
468 408 471 375 471 340  curveto
closepath
fill
		} def

	/one
		{
120 0 moveto
120 18 lineto
128 18 137 18 148 20  curveto
159 22 169 25 179 30  curveto
188 35 196 42 203 52  curveto
209 62 213 74 213 90  curveto
213 563 lineto
213 573 211 580 207 584  curveto
203 588 198 590 191 590  curveto
184 590 174 587 162 583  curveto
149 578 134 572 117 566  curveto
117 584 lineto
279 673 lineto
297 673 lineto
297 91 lineto
297 75 300 62 307 52  curveto
313 42 321 35 331 30  curveto
341 25 351 22 362 20  curveto
372 18 382 18 390 18  curveto
390 0 lineto
120 0 lineto
closepath
fill
		} def

	/two
		{
416 0 moveto
25 0 lineto
27 15 lineto
207 206 lineto
224 224 240 244 256 266  curveto
271 287 284 309 296 331  curveto
307 353 316 374 323 396  curveto
329 417 333 436 333 454  curveto
333 499 321 536 298 564  curveto
275 592 241 606 195 606  curveto
161 606 131 595 107 574  curveto
83 553 65 521 53 479  curveto
32 479 lineto
34 510 42 538 54 562  curveto
66 586 79 606 95 622  curveto
119 646 143 662 167 672  curveto
191 681 217 686 245 686  curveto
265 686 286 682 310 674  curveto
333 666 355 651 377 630  curveto
385 620 393 610 399 599  curveto
405 587 409 575 413 563  curveto
416 550 418 538 420 526  curveto
421 514 422 503 422 493  curveto
422 473 418 453 410 431  curveto
402 409 391 387 378 365  curveto
365 343 350 321 333 300  curveto
316 278 299 258 282 240  curveto
124 73 lineto
353 73 lineto
370 73 384 74 395 78  curveto
405 81 414 86 421 92  curveto
427 98 433 104 438 112  curveto
442 120 448 128 454 136  curveto
475 136 lineto
416 0 lineto
closepath
fill
		} def

	/three
		{
435 206 moveto
435 164 423 126 401 94  curveto
379 62 350 37 314 19  curveto
290 7 265 -1 237 -7  curveto
209 -13 178 -17 144 -17  curveto
124 -17 109 -14 97 -10  curveto
85 -5 75 0 69 7  curveto
62 14 57 21 55 28  curveto
53 35 52 41 52 47  curveto
52 55 55 62 61 70  curveto
67 77 78 81 94 81  curveto
105 81 115 78 124 72  curveto
133 66 141 60 149 54  curveto
158 46 167 38 177 32  curveto
186 26 202 23 226 23  curveto
246 23 264 26 280 34  curveto
296 41 310 51 322 63  curveto
334 75 343 90 349 107  curveto
355 123 359 141 359 161  curveto
359 173 357 185 355 198  curveto
352 211 348 224 344 236  curveto
339 248 333 260 327 271  curveto
320 281 313 290 306 298  curveto
296 308 285 316 275 322  curveto
264 328 253 332 242 335  curveto
231 338 220 340 208 342  curveto
196 343 183 344 171 345  curveto
165 345 159 347 155 349  curveto
151 351 149 354 149 358  curveto
149 361 150 364 154 366  curveto
157 368 161 370 165 372  curveto
211 387 247 407 272 432  curveto
288 448 299 463 304 477  curveto
309 491 312 507 312 526  curveto
312 538 309 550 305 562  curveto
300 574 293 584 284 594  curveto
274 603 262 610 248 616  curveto
234 622 217 625 198 625  curveto
169 625 144 617 123 601  curveto
102 585 80 560 58 524  curveto
39 524 lineto
45 548 53 569 64 589  curveto
75 609 89 626 106 640  curveto
122 654 142 665 165 673  curveto
188 681 215 685 245 685  curveto
267 685 288 681 306 675  curveto
324 668 339 659 352 648  curveto
365 636 375 623 382 608  curveto
389 592 393 576 393 559  curveto
393 536 386 512 372 488  curveto
358 464 335 440 302 418  curveto
316 412 328 405 339 399  curveto
349 393 359 386 367 378  curveto
375 370 382 362 389 352  curveto
395 342 402 330 409 317  curveto
426 282 435 245 435 206  curveto
closepath
fill
		} def

	/four
		{
298 562 moveto
60 229 lineto
298 229 lineto
298 562 lineto
closepath
382 159 moveto
382 0 lineto
298 0 lineto
298 159 lineto
16 159 lineto
16 230 lineto
332 685 lineto
382 685 lineto
382 229 lineto
469 229 lineto
469 159 lineto
382 159 lineto
closepath
fill
		} def

	/five
		{
401 583 moveto
183 583 lineto
143 501 lineto
216 487 lineto
244 481 270 472 294 458  curveto
318 444 339 428 359 409  curveto
378 389 394 364 407 333  curveto
419 302 426 261 426 211  curveto
426 193 424 178 421 166  curveto
418 153 412 138 404 121  curveto
396 105 385 89 371 73  curveto
357 57 340 42 320 29  curveto
299 15 274 4 246 -4  curveto
218 -12 186 -17 150 -17  curveto
133 -17 117 -15 102 -13  curveto
87 -11 74 -7 63 -2  curveto
52 2 43 8 37 16  curveto
31 24 28 33 28 45  curveto
28 55 31 64 38 72  curveto
44 80 55 85 69 85  curveto
82 85 95 81 107 75  curveto
119 69 132 62 144 54  curveto
156 46 168 38 181 32  curveto
194 26 208 23 224 23  curveto
246 23 267 30 287 46  curveto
307 62 322 81 334 103  curveto
340 116 345 129 348 143  curveto
350 157 352 172 352 188  curveto
352 229 341 265 321 297  curveto
300 328 272 353 236 371  curveto
212 383 186 392 159 398  curveto
131 404 98 409 59 413  curveto
180 673 lineto
369 673 lineto
372 673 376 672 381 672  curveto
385 672 390 672 396 672  curveto
404 672 410 673 415 676  curveto
419 678 425 681 431 685  curveto
443 680 lineto
401 583 lineto
closepath
fill
		} def

	/six
		{
376 186 moveto
376 223 371 256 363 285  curveto
354 314 343 336 329 350  curveto
316 362 303 371 289 375  curveto
275 379 262 381 249 381  curveto
223 381 201 376 182 368  curveto
162 359 148 350 139 342  curveto
137 331 136 316 134 296  curveto
132 276 132 256 132 236  curveto
132 226 132 214 133 199  curveto
134 183 137 167 141 150  curveto
145 132 150 115 157 98  curveto
164 81 174 67 186 55  curveto
197 43 210 34 226 28  curveto
241 22 256 19 271 19  curveto
288 19 304 23 319 33  curveto
334 42 347 57 357 77  curveto
362 88 366 103 370 123  curveto
374 142 376 163 376 186  curveto
closepath
467 211 moveto
467 165 459 128 444 99  curveto
429 69 411 46 389 29  curveto
367 11 343 0 319 -7  curveto
295 -14 274 -18 256 -18  curveto
242 -18 226 -16 210 -12  curveto
193 -8 176 -2 160 7  curveto
143 16 127 29 111 45  curveto
95 61 80 81 68 107  curveto
57 128 49 151 44 177  curveto
38 203 36 233 36 269  curveto
36 306 39 339 45 369  curveto
51 398 60 423 70 443  curveto
93 490 121 530 153 563  curveto
185 596 223 624 269 647  curveto
293 659 319 668 349 675  curveto
378 681 411 685 447 685  curveto
446 668 lineto
419 664 390 656 360 644  curveto
330 632 301 615 273 593  curveto
245 571 219 543 197 510  curveto
174 477 157 438 146 392  curveto
162 398 177 404 190 409  curveto
203 414 215 418 226 421  curveto
237 424 247 426 257 428  curveto
267 429 277 430 288 430  curveto
307 430 328 425 350 417  curveto
372 408 392 394 411 376  curveto
427 359 441 337 451 310  curveto
461 282 467 249 467 211  curveto
closepath
fill
		} def

	/seven
		{
234 -16 moveto
175 -16 lineto
370 583 lineto
143 583 lineto
129 583 117 580 107 576  curveto
97 571 89 565 82 558  curveto
74 550 68 542 63 533  curveto
57 523 52 514 46 504  curveto
24 513 lineto
85 673 lineto
448 673 lineto
448 641 lineto
234 -16 lineto
closepath
fill
		} def

	/eight
		{
364 128 moveto
364 149 360 169 352 187  curveto
344 205 334 220 322 233  curveto
314 240 307 246 300 252  curveto
292 258 284 264 276 270  curveto
267 276 258 282 248 288  curveto
238 294 228 302 216 312  curveto
204 306 193 298 183 288  curveto
172 277 163 265 155 252  curveto
147 238 140 224 136 210  curveto
131 195 129 181 129 168  curveto
129 150 131 132 136 114  curveto
141 96 149 80 159 66  curveto
169 52 182 40 198 31  curveto
213 22 231 18 253 18  curveto
269 18 284 20 299 26  curveto
313 31 325 38 335 48  curveto
344 57 351 68 356 81  curveto
361 94 364 110 364 128  curveto
closepath
352 548 moveto
352 562 349 575 345 586  curveto
341 596 335 606 327 615  curveto
307 637 278 648 242 648  curveto
222 648 206 645 195 640  curveto
183 635 173 628 164 619  curveto
152 608 145 597 141 586  curveto
137 575 135 564 135 552  curveto
135 534 141 512 154 488  curveto
167 464 187 443 215 425  curveto
257 397 lineto
282 412 304 432 323 458  curveto
342 484 352 514 352 548  curveto
closepath
441 153 moveto
441 131 437 110 430 90  curveto
422 70 411 52 397 38  curveto
379 20 357 7 330 -3  curveto
303 -13 275 -18 247 -18  curveto
221 -18 197 -14 174 -6  curveto
151 2 131 13 113 27  curveto
95 41 80 59 70 79  curveto
59 99 54 121 54 145  curveto
54 161 57 179 63 197  curveto
69 215 77 232 88 250  curveto
99 267 112 283 128 299  curveto
143 314 160 328 180 340  curveto
125 397 lineto
110 412 97 431 85 453  curveto
73 475 67 503 67 535  curveto
67 558 71 579 81 598  curveto
91 616 104 632 120 645  curveto
136 658 155 668 177 675  curveto
199 681 222 685 247 685  curveto
269 685 289 682 307 678  curveto
325 674 341 668 355 661  curveto
379 649 396 632 408 612  curveto
419 592 425 571 425 549  curveto
425 512 413 479 390 451  curveto
367 422 334 395 290 370  curveto
303 362 317 351 332 339  curveto
347 326 362 312 378 297  curveto
396 279 411 257 423 233  curveto
435 209 441 182 441 153  curveto
closepath
fill
		} def

	/nine
		{
361 377 moveto
361 387 360 400 360 417  curveto
359 433 357 451 355 470  curveto
353 489 349 508 345 528  curveto
341 547 335 564 328 580  curveto
318 598 304 614 286 628  curveto
267 642 247 650 226 650  curveto
207 650 190 644 175 634  curveto
159 623 148 610 141 595  curveto
133 581 128 566 126 548  curveto
124 530 123 509 123 486  curveto
123 416 134 364 156 332  curveto
178 299 206 283 241 283  curveto
257 283 276 286 298 294  curveto
320 301 340 314 359 334  curveto
360 339 361 345 361 352  curveto
361 359 361 367 361 377  curveto
closepath
460 393 moveto
460 358 456 325 448 293  curveto
440 261 430 232 416 204  curveto
383 138 336 85 276 46  curveto
215 7 144 -14 64 -18  curveto
62 1 lineto
97 9 131 21 164 37  curveto
197 52 226 72 251 98  curveto
261 109 272 122 284 138  curveto
296 153 306 169 316 187  curveto
326 204 334 222 341 240  curveto
347 258 352 275 354 291  curveto
330 275 305 263 279 253  curveto
252 243 228 239 207 239  curveto
183 239 160 244 139 254  curveto
117 264 99 278 83 296  curveto
67 314 54 335 45 361  curveto
35 386 31 414 31 444  curveto
31 480 37 514 51 547  curveto
64 579 81 606 102 627  curveto
121 646 141 660 162 670  curveto
183 680 207 685 235 685  curveto
255 685 279 680 306 671  curveto
333 661 359 644 385 619  curveto
396 607 406 593 416 576  curveto
425 558 433 539 439 519  curveto
445 498 450 477 454 455  curveto
458 433 460 413 460 393  curveto
closepath
fill
		} def

	/colon
		{
193 39 moveto
193 23 187 10 176 0  curveto
165 -11 152 -17 137 -17  curveto
121 -17 108 -11 97 0  curveto
86 10 81 23 81 39  curveto
81 54 86 67 97 78  curveto
108 89 121 95 137 95  curveto
152 95 165 89 176 78  curveto
187 67 193 54 193 39  curveto
closepath
193 404 moveto
193 388 187 375 176 364  curveto
165 353 152 348 137 348  curveto
121 348 108 353 97 364  curveto
86 375 81 388 81 404  curveto
81 419 86 432 97 443  curveto
108 454 121 460 137 460  curveto
152 460 165 454 176 443  curveto
187 432 193 419 193 404  curveto
closepath
fill
		} def

	/semicolon
		{
221 20 moveto
221 0 217 -20 209 -41  curveto
201 -61 188 -81 169 -101  curveto
164 -105 158 -111 152 -117  curveto
145 -123 138 -128 131 -134  curveto
124 -139 117 -143 111 -147  curveto
104 -151 98 -153 94 -153  curveto
91 -153 88 -152 86 -151  curveto
84 -149 83 -147 83 -145  curveto
83 -139 84 -135 87 -132  curveto
89 -129 93 -126 98 -124  curveto
151 -91 178 -55 178 -16  curveto
178 -5 174 0 166 0  curveto
162 0 157 -1 151 -3  curveto
145 -5 139 -6 135 -6  curveto
118 -6 105 -1 96 8  curveto
87 17 83 30 83 46  curveto
83 62 88 76 99 87  curveto
110 98 124 104 142 104  curveto
154 104 164 101 173 97  curveto
182 92 191 86 199 78  curveto
207 70 212 62 216 54  curveto
219 46 221 34 221 20  curveto
closepath
204 404 moveto
204 388 198 375 187 364  curveto
176 353 163 348 148 348  curveto
132 348 119 353 108 364  curveto
97 375 92 388 92 404  curveto
92 419 97 432 108 443  curveto
119 454 132 460 148 460  curveto
163 460 176 454 187 443  curveto
198 432 204 419 204 404  curveto
closepath
fill
		} def

	/less
		{
26 230 moveto
26 292 lineto
523 522 lineto
523 460 lineto
90 261 lineto
523 62 lineto
523 0 lineto
26 230 lineto
closepath
fill
		} def

	/equal
		{
11 141 moveto
11 196 lineto
537 196 lineto
537 141 lineto
11 141 lineto
closepath
11 335 moveto
11 390 lineto
537 390 lineto
537 335 lineto
11 335 lineto
closepath
fill
		} def

	/greater
		{
26 0 moveto
26 62 lineto
459 261 lineto
26 460 lineto
26 522 lineto
523 292 lineto
523 230 lineto
26 0 lineto
closepath
fill
		} def

	/question
		{
286 39 moveto
286 23 280 10 269 0  curveto
258 -11 245 -17 230 -17  curveto
214 -17 201 -11 190 0  curveto
179 10 174 23 174 39  curveto
174 54 179 67 190 78  curveto
201 89 214 95 230 95  curveto
245 95 258 89 269 78  curveto
280 67 286 54 286 39  curveto
closepath
412 514 moveto
412 488 403 462 387 434  curveto
370 406 351 379 330 355  curveto
324 347 316 339 308 329  curveto
299 319 291 307 283 293  curveto
275 278 267 260 260 240  curveto
253 220 248 195 245 167  curveto
224 167 lineto
229 211 237 249 247 282  curveto
257 314 268 344 278 372  curveto
288 400 296 426 304 451  curveto
312 475 316 501 316 529  curveto
316 545 313 560 308 576  curveto
303 591 296 604 287 616  curveto
278 627 267 636 254 643  curveto
241 650 227 654 211 654  curveto
201 654 190 652 179 648  curveto
168 644 158 640 149 634  curveto
139 628 132 621 126 613  curveto
120 605 117 596 117 587  curveto
117 579 119 573 123 568  curveto
127 563 131 558 136 553  curveto
141 548 146 543 150 538  curveto
154 533 157 527 157 520  curveto
157 506 152 495 144 486  curveto
135 477 126 473 117 473  curveto
103 473 92 478 83 488  curveto
74 498 70 515 70 538  curveto
70 558 73 577 81 595  curveto
88 613 98 629 112 643  curveto
140 671 179 686 228 686  curveto
284 686 331 668 367 632  curveto
376 622 386 608 396 588  curveto
406 568 412 544 412 514  curveto
closepath
fill
		} def

	/at
		{
11 0 moveto
11 55 lineto
537 55 lineto
537 0 lineto
11 0 lineto
closepath
11 194 moveto
11 249 lineto
537 249 lineto
537 194 lineto
11 194 lineto
closepath
530 451 moveto
526 440 519 430 510 421  curveto
501 411 491 403 479 396  curveto
467 389 454 384 440 380  curveto
426 376 411 374 397 374  curveto
375 374 354 376 334 382  curveto
314 387 294 393 275 400  curveto
255 406 236 412 218 418  curveto
199 423 180 426 161 426  curveto
137 426 118 421 104 412  curveto
90 402 74 388 58 370  curveto
18 396 lineto
30 414 43 428 56 438  curveto
69 448 82 456 95 462  curveto
108 467 121 470 133 472  curveto
145 473 157 474 168 474  curveto
188 474 208 471 226 465  curveto
244 459 263 453 281 447  curveto
299 441 316 435 334 429  curveto
352 423 371 421 391 421  curveto
413 421 432 425 448 434  curveto
464 443 479 457 493 475  curveto
530 451 lineto
530 451 lineto
closepath
fill
		} def

	/A
		{
317 528 moveto
204 260 lineto
430 260 lineto
317 528 lineto
closepath
434 0 moveto
434 18 lineto
451 18 466 20 479 25  curveto
492 29 499 40 499 58  curveto
499 65 497 74 493 86  curveto
444 218 lineto
185 218 lineto
140 94 lineto
134 78 131 66 131 58  curveto
131 44 136 34 146 28  curveto
156 21 172 18 196 18  curveto
196 0 lineto
4 0 lineto
4 18 lineto
18 18 29 19 37 23  curveto
45 26 52 30 58 36  curveto
63 42 67 49 71 57  curveto
74 65 78 74 82 84  curveto
330 673 lineto
356 673 lineto
606 84 lineto
610 74 613 66 617 58  curveto
620 50 624 43 630 37  curveto
635 31 642 26 650 23  curveto
658 19 670 18 684 18  curveto
684 0 lineto
434 0 lineto
closepath
fill
		} def

	/B
		{
478 177 moveto
478 198 475 216 470 231  curveto
465 245 459 258 451 268  curveto
443 278 435 287 425 293  curveto
415 299 405 305 395 311  curveto
379 318 364 323 348 325  curveto
332 327 316 328 301 328  curveto
223 328 lineto
223 84 lineto
223 72 225 62 230 54  curveto
234 46 245 42 263 42  curveto
327 42 lineto
353 42 376 45 395 53  curveto
414 61 430 71 442 84  curveto
454 96 463 111 469 127  curveto
475 143 478 159 478 177  curveto
closepath
460 497 moveto
460 521 455 542 445 560  curveto
435 577 421 591 403 602  curveto
385 612 365 620 341 625  curveto
317 629 292 632 265 632  curveto
245 632 233 631 229 630  curveto
225 628 223 626 223 622  curveto
223 370 lineto
305 370 lineto
327 370 347 372 366 377  curveto
384 381 401 389 415 399  curveto
429 409 440 422 448 438  curveto
456 454 460 473 460 497  curveto
closepath
592 185 moveto
592 168 589 152 583 136  curveto
577 120 570 105 561 91  curveto
552 77 542 64 531 53  curveto
519 42 508 34 496 28  curveto
488 24 478 20 468 17  curveto
457 13 446 10 435 8  curveto
423 5 412 3 401 2  curveto
390 0 380 0 371 0  curveto
29 0 lineto
29 18 lineto
59 18 82 22 97 31  curveto
111 39 119 57 119 84  curveto
119 590 lineto
119 612 112 629 100 639  curveto
88 649 64 655 29 655  curveto
29 673 lineto
300 673 lineto
389 673 455 659 498 631  curveto
541 603 563 559 563 497  curveto
563 463 552 434 532 410  curveto
512 386 480 367 436 354  curveto
436 352 lineto
486 340 525 320 552 290  curveto
578 260 592 225 592 185  curveto
closepath
fill
		} def

	/C
		{
404 0 moveto
404 18 lineto
434 18 454 20 465 26  curveto
476 32 482 38 482 46  curveto
482 53 479 60 474 68  curveto
469 76 464 84 459 93  curveto
332 292 lineto
170 83 lineto
166 77 162 72 160 67  curveto
157 62 156 57 156 51  curveto
156 41 160 33 169 27  curveto
178 21 195 18 221 18  curveto
221 0 lineto
-9 0 lineto
-9 18 lineto
6 18 19 19 30 22  curveto
40 24 50 28 58 33  curveto
66 37 73 43 80 50  curveto
86 57 93 65 101 75  curveto
305 333 lineto
108 609 lineto
96 625 84 636 70 644  curveto
56 651 38 655 15 655  curveto
15 673 lineto
315 673 lineto
315 655 lineto
285 655 264 652 253 648  curveto
242 643 237 636 237 627  curveto
237 621 238 617 240 613  curveto
242 609 244 604 248 599  curveto
369 413 lineto
506 590 lineto
511 596 516 603 520 610  curveto
524 616 526 622 526 628  curveto
526 636 521 643 511 648  curveto
501 652 482 655 455 655  curveto
455 673 lineto
687 673 lineto
687 655 lineto
669 655 655 653 643 650  curveto
631 647 621 643 613 637  curveto
605 631 597 623 590 615  curveto
582 607 574 597 566 587  curveto
396 375 lineto
607 70 lineto
617 54 629 42 643 32  curveto
656 22 676 18 704 18  curveto
704 0 lineto
404 0 lineto
closepath
fill
		} def

	/D
		{
290 517 moveto
72 49 lineto
484 49 lineto
290 517 lineto
closepath
6 0 moveto
326 688 lineto
608 0 lineto
6 0 lineto
closepath
fill
		} def

	/E
		{
571 0 moveto
32 0 lineto
32 18 lineto
46 18 58 18 70 20  curveto
81 22 90 25 98 30  curveto
106 34 112 41 116 50  curveto
120 58 122 70 122 84  curveto
122 590 lineto
122 614 115 631 102 641  curveto
88 650 65 655 32 655  curveto
32 673 lineto
563 673 lineto
563 525 lineto
536 525 lineto
532 537 529 550 527 562  curveto
525 574 521 584 515 594  curveto
509 603 500 610 489 616  curveto
477 622 461 625 439 625  curveto
226 625 lineto
226 375 lineto
385 375 lineto
405 375 421 377 434 382  curveto
446 386 456 393 464 401  curveto
472 409 477 419 480 431  curveto
482 442 484 455 484 469  curveto
507 469 lineto
507 239 lineto
484 239 lineto
484 253 482 265 480 277  curveto
477 289 472 299 464 307  curveto
456 315 446 321 433 326  curveto
420 330 404 333 384 333  curveto
226 333 lineto
226 87 lineto
226 71 229 60 235 53  curveto
241 45 251 42 267 42  curveto
270 42 276 42 284 42  curveto
292 42 299 43 304 43  curveto
430 46 lineto
453 46 473 50 490 57  curveto
506 64 521 73 533 85  curveto
545 96 555 109 563 124  curveto
571 138 578 154 586 170  curveto
617 170 lineto
571 0 lineto
closepath
fill
		} def

	/F
		{
334 534 moveto
306 534 281 528 258 518  curveto
235 508 215 494 199 477  curveto
183 459 170 439 161 417  curveto
151 394 147 370 147 346  curveto
147 302 153 267 165 241  curveto
177 215 192 194 211 180  curveto
229 165 250 155 272 150  curveto
294 145 314 143 334 143  curveto
334 534 lineto
closepath
623 343 moveto
623 371 618 396 608 420  curveto
598 443 584 463 567 480  curveto
550 497 530 510 508 520  curveto
485 529 461 534 436 534  curveto
436 143 lineto
458 143 481 146 503 152  curveto
525 158 545 168 563 184  curveto
581 199 595 219 606 245  curveto
617 271 623 303 623 343  curveto
closepath
741 331 moveto
741 285 730 247 708 217  curveto
686 187 658 163 624 146  curveto
588 128 554 117 524 113  curveto
493 109 464 108 436 108  curveto
436 74 444 51 460 38  curveto
476 25 502 18 538 18  curveto
538 0 lineto
232 0 lineto
232 18 lineto
267 18 293 25 309 38  curveto
325 50 334 74 334 108  curveto
308 108 286 108 268 110  curveto
249 112 232 114 218 118  curveto
203 121 190 125 178 130  curveto
166 134 154 140 143 146  curveto
103 165 74 191 55 223  curveto
35 255 26 292 26 333  curveto
26 358 30 385 40 413  curveto
50 441 65 465 87 487  curveto
106 506 126 521 148 532  curveto
169 542 190 550 212 555  curveto
234 560 255 563 276 564  curveto
296 564 316 565 334 565  curveto
334 597 326 620 310 634  curveto
294 647 269 654 233 655  curveto
233 673 lineto
537 673 lineto
537 655 lineto
501 654 475 647 459 634  curveto
443 620 436 597 436 565  curveto
454 565 474 564 495 563  curveto
516 562 537 559 558 554  curveto
579 549 600 541 621 531  curveto
641 520 661 505 681 486  curveto
701 466 716 442 726 415  curveto
736 388 741 360 741 331  curveto
closepath
fill
		} def

	/G
		{
584 511 moveto
581 535 576 555 568 570  curveto
560 585 545 598 522 610  curveto
508 616 493 621 477 624  curveto
460 626 440 628 417 628  curveto
229 628 lineto
229 80 lineto
229 66 231 55 236 47  curveto
240 39 247 32 255 28  curveto
263 24 273 21 284 20  curveto
295 18 307 18 319 18  curveto
319 0 lineto
35 0 lineto
35 18 lineto
47 18 58 18 69 19  curveto
79 20 89 23 97 27  curveto
105 31 112 38 117 46  curveto
122 54 125 66 125 81  curveto
125 550 lineto
125 570 122 586 117 600  curveto
112 613 105 623 96 631  curveto
87 639 76 644 64 648  curveto
52 651 38 653 24 653  curveto
24 673 lineto
592 673 lineto
609 511 lineto
584 511 lineto
closepath
fill
		} def

	/H
		{
445 0 moveto
445 18 lineto
459 18 471 18 483 20  curveto
494 22 503 25 511 30  curveto
519 34 525 41 529 49  curveto
533 57 535 68 535 82  curveto
535 323 lineto
233 323 lineto
233 83 lineto
233 57 240 39 255 31  curveto
269 22 292 18 323 18  curveto
323 0 lineto
39 0 lineto
39 18 lineto
69 18 91 22 106 30  curveto
121 38 129 55 129 83  curveto
129 590 lineto
129 614 122 631 109 641  curveto
95 650 72 655 39 655  curveto
39 673 lineto
323 673 lineto
323 655 lineto
289 655 265 650 252 640  curveto
239 630 233 613 233 589  curveto
233 365 lineto
535 365 lineto
535 591 lineto
535 616 528 633 514 642  curveto
500 650 477 655 445 655  curveto
445 673 lineto
729 673 lineto
729 655 lineto
697 655 674 650 660 641  curveto
646 632 639 615 639 590  curveto
639 84 lineto
639 56 646 38 662 30  curveto
677 22 699 18 729 18  curveto
729 0 lineto
445 0 lineto
closepath
fill
		} def

	/I
		{
32 0 moveto
32 18 lineto
50 18 65 19 77 22  curveto
89 24 98 28 105 34  curveto
111 40 116 47 118 55  curveto
120 63 122 73 122 85  curveto
122 593 lineto
122 607 119 618 114 626  curveto
109 634 102 641 94 645  curveto
85 649 75 652 65 653  curveto
54 654 43 655 32 655  curveto
32 673 lineto
316 673 lineto
316 655 lineto
283 655 260 650 246 641  curveto
232 631 226 615 226 591  curveto
226 85 lineto
226 61 232 44 244 34  curveto
256 23 280 18 316 18  curveto
316 0 lineto
32 0 lineto
closepath
fill
		} def

	/J
		{
470 380 moveto
468 394 466 409 464 427  curveto
462 445 460 463 458 481  curveto
455 499 452 517 448 533  curveto
444 549 440 563 435 575  curveto
423 597 410 614 395 628  curveto
380 642 363 649 344 649  curveto
334 649 325 646 318 641  curveto
310 636 304 630 299 623  curveto
293 615 289 607 287 598  curveto
284 588 283 579 283 571  curveto
283 557 287 541 295 523  curveto
303 505 318 485 340 464  curveto
359 444 380 428 402 414  curveto
424 400 447 389 470 380  curveto
closepath
549 309 moveto
547 279 543 247 538 212  curveto
533 177 523 144 508 113  curveto
494 87 480 65 466 48  curveto
452 31 436 18 420 8  curveto
403 -1 385 -8 367 -12  curveto
348 -16 328 -18 308 -18  curveto
290 -18 274 -17 261 -15  curveto
248 -13 237 -11 227 -7  curveto
217 -3 209 0 201 6  curveto
193 11 186 18 178 26  curveto
159 44 146 66 140 91  curveto
134 115 131 138 131 159  curveto
131 163 132 175 134 193  curveto
136 211 139 231 142 252  curveto
145 273 148 293 150 311  curveto
152 329 154 341 154 347  curveto
154 355 152 362 150 368  curveto
147 374 144 380 140 384  curveto
136 388 131 391 127 393  curveto
123 395 119 396 117 396  curveto
104 396 93 393 85 389  curveto
76 384 69 378 63 371  curveto
57 364 51 357 47 349  curveto
42 341 38 333 34 327  curveto
18 332 lineto
64 419 lineto
69 429 79 439 93 449  curveto
107 459 125 464 146 464  curveto
173 464 194 456 210 441  curveto
219 431 227 419 233 404  curveto
239 389 242 374 242 359  curveto
242 353 240 342 238 326  curveto
236 309 233 290 231 269  curveto
228 248 225 227 223 206  curveto
221 184 220 166 220 152  curveto
220 133 222 115 226 98  curveto
230 81 236 66 244 53  curveto
252 40 263 30 277 22  curveto
290 14 306 10 324 10  curveto
332 10 341 11 351 14  curveto
361 16 370 20 380 26  curveto
390 32 399 39 407 48  curveto
415 56 423 66 429 78  curveto
434 88 439 100 444 113  curveto
449 125 454 140 458 157  curveto
462 173 465 192 468 213  curveto
470 233 472 257 472 284  curveto
472 286 472 289 472 294  curveto
472 299 471 304 471 310  curveto
471 316 471 321 471 326  curveto
471 331 471 335 471 337  curveto
457 343 443 350 429 358  curveto
415 366 401 374 387 382  curveto
373 390 361 399 350 407  curveto
338 415 329 422 322 430  curveto
298 453 280 476 268 500  curveto
255 523 249 548 249 574  curveto
249 595 252 613 260 627  curveto
268 641 276 652 285 661  curveto
294 670 303 677 313 682  curveto
323 686 335 689 350 689  curveto
378 689 406 678 434 656  curveto
462 634 487 601 509 558  curveto
521 532 531 503 537 472  curveto
543 441 547 401 549 353  curveto
623 326 lineto
623 273 lineto
549 309 lineto
closepath
fill
		} def

	/K
		{
418 0 moveto
418 18 lineto
448 18 469 20 479 26  curveto
489 32 495 38 495 46  curveto
495 54 492 62 487 70  curveto
481 78 476 85 471 91  curveto
262 327 lineto
229 297 lineto
229 82 lineto
229 56 236 39 250 31  curveto
264 22 287 18 319 18  curveto
319 0 lineto
35 0 lineto
35 18 lineto
68 18 91 22 105 32  curveto
118 41 125 58 125 83  curveto
125 589 lineto
125 612 118 629 106 639  curveto
94 649 70 655 35 655  curveto
35 673 lineto
319 673 lineto
319 655 lineto
283 655 259 650 247 640  curveto
235 630 229 612 229 588  curveto
229 360 lineto
280 402 325 442 365 479  curveto
405 516 438 549 466 578  curveto
475 588 482 597 487 606  curveto
491 615 492 623 488 631  curveto
484 638 476 644 463 648  curveto
450 652 431 655 405 655  curveto
405 673 lineto
665 673 lineto
665 655 lineto
652 655 641 654 631 652  curveto
621 650 612 648 603 644  curveto
594 640 585 634 576 627  curveto
567 620 557 611 547 600  curveto
527 579 510 561 495 546  curveto
480 530 465 515 450 500  curveto
434 485 418 469 400 452  curveto
382 435 360 415 336 392  curveto
593 102 lineto
605 87 617 75 628 65  curveto
638 55 649 46 659 40  curveto
669 33 679 28 689 24  curveto
699 20 710 18 722 18  curveto
722 0 lineto
418 0 lineto
closepath
fill
		} def

	/L
		{
408 0 moveto
408 18 lineto
414 18 422 18 430 19  curveto
438 20 446 22 454 26  curveto
461 30 467 35 472 41  curveto
476 47 479 55 479 65  curveto
479 72 478 79 476 85  curveto
474 91 471 101 466 114  curveto
310 496 lineto
166 107 lineto
162 98 159 89 157 80  curveto
155 70 154 63 154 58  curveto
154 40 160 29 172 25  curveto
184 20 200 18 221 18  curveto
221 0 lineto
6 0 lineto
6 18 lineto
14 18 24 19 35 23  curveto
45 27 56 32 66 38  curveto
76 44 85 51 93 60  curveto
101 68 107 78 111 89  curveto
336 688 lineto
584 98 lineto
588 88 592 78 598 69  curveto
604 59 611 51 619 43  curveto
627 35 636 29 646 25  curveto
656 20 667 18 680 18  curveto
680 0 lineto
408 0 lineto
closepath
fill
		} def

	/M
		{
603 0 moveto
603 18 lineto
621 18 636 19 648 22  curveto
660 24 669 28 676 34  curveto
682 40 687 47 689 55  curveto
691 63 693 73 693 85  curveto
693 572 lineto
448 0 lineto
430 0 lineto
170 543 lineto
170 85 lineto
170 63 177 46 191 35  curveto
205 23 228 18 260 18  curveto
260 0 lineto
31 0 lineto
31 18 lineto
91 18 121 40 121 84  curveto
121 582 lineto
121 597 119 609 117 618  curveto
115 627 110 634 104 639  curveto
98 644 88 648 76 650  curveto
64 652 48 653 28 655  curveto
28 673 lineto
229 673 lineto
463 163 lineto
687 673 lineto
885 673 lineto
885 655 lineto
880 655 875 655 871 655  curveto
866 655 862 656 858 656  curveto
834 656 818 650 810 640  curveto
801 630 797 615 797 597  curveto
797 85 lineto
797 73 798 63 800 55  curveto
802 47 807 40 813 35  curveto
819 29 828 25 840 22  curveto
852 19 867 18 887 18  curveto
887 0 lineto
603 0 lineto
closepath
fill
		} def

	/N
		{
720 655 moveto
700 655 685 653 673 650  curveto
661 647 651 643 645 637  curveto
639 631 635 623 633 615  curveto
631 606 630 596 630 586  curveto
630 -8 lineto
608 -8 lineto
168 539 lineto
168 84 lineto
168 60 175 43 191 33  curveto
207 23 229 18 258 18  curveto
258 0 lineto
29 0 lineto
29 18 lineto
58 18 80 23 96 34  curveto
111 44 119 61 119 84  curveto
119 602 lineto
111 613 104 622 98 629  curveto
92 636 86 642 81 646  curveto
75 650 70 652 64 654  curveto
58 655 52 656 46 656  curveto
44 656 41 655 39 655  curveto
37 655 34 655 31 655  curveto
31 673 lineto
198 673 lineto
581 185 lineto
581 590 lineto
581 613 574 630 562 640  curveto
549 650 525 655 491 655  curveto
491 673 lineto
720 673 lineto
720 655 lineto
720 655 lineto
closepath
fill
		} def

	/O
		{
599 328 moveto
599 370 595 408 588 444  curveto
580 479 571 508 560 530  curveto
541 567 516 596 485 616  curveto
454 636 419 646 379 646  curveto
339 646 303 636 271 616  curveto
239 596 215 569 198 533  curveto
188 513 179 485 171 448  curveto
162 411 158 371 158 328  curveto
158 292 160 258 165 227  curveto
170 195 180 164 196 133  curveto
203 118 213 104 225 91  curveto
237 77 250 65 266 55  curveto
281 45 298 37 317 31  curveto
336 25 356 22 378 22  curveto
396 22 414 24 432 29  curveto
450 34 466 41 482 50  curveto
498 59 512 70 525 83  curveto
538 96 549 111 557 127  curveto
569 151 579 179 587 209  curveto
595 239 599 278 599 328  curveto
closepath
715 335 moveto
715 287 707 241 691 199  curveto
675 156 653 119 624 87  curveto
594 55 559 29 517 11  curveto
475 -7 429 -17 378 -17  curveto
326 -17 280 -7 239 10  curveto
197 28 162 54 133 86  curveto
103 118 81 155 65 198  curveto
49 240 41 286 41 334  curveto
41 386 49 434 66 477  curveto
83 520 107 557 139 589  curveto
167 617 202 640 244 658  curveto
285 676 330 685 378 685  curveto
425 685 469 676 511 659  curveto
552 641 588 617 619 587  curveto
649 557 672 520 689 477  curveto
706 433 715 386 715 335  curveto
closepath
fill
		} def

	/P
		{
461 0 moveto
461 18 lineto
497 18 521 23 533 33  curveto
545 43 551 60 551 84  curveto
551 632 lineto
218 632 lineto
219 90 lineto
219 78 220 67 222 58  curveto
224 49 228 42 234 36  curveto
240 30 249 25 261 22  curveto
273 19 289 18 309 18  curveto
309 0 lineto
25 0 lineto
25 18 lineto
45 18 61 19 73 22  curveto
85 25 94 30 100 36  curveto
106 42 110 49 112 58  curveto
114 66 115 76 115 88  curveto
115 576 lineto
115 585 113 594 111 604  curveto
109 613 104 621 98 629  curveto
91 637 82 643 71 648  curveto
59 652 45 655 27 655  curveto
27 673 lineto
742 673 lineto
742 655 lineto
724 655 709 652 698 648  curveto
686 643 677 637 671 630  curveto
665 623 660 615 658 606  curveto
655 596 654 587 654 578  curveto
655 89 lineto
655 76 656 65 658 56  curveto
660 47 665 40 672 34  curveto
678 28 687 24 699 22  curveto
711 19 726 18 745 18  curveto
745 0 lineto
461 0 lineto
closepath
fill
		} def

	/Q
		{
508 251 moveto
501 271 492 285 480 293  curveto
468 300 456 304 442 304  curveto
317 304 lineto
301 304 288 300 276 293  curveto
264 286 255 272 248 251  curveto
233 252 lineto
234 263 235 276 237 292  curveto
238 307 239 322 239 338  curveto
239 353 238 368 237 382  curveto
235 396 234 410 233 423  curveto
248 424 lineto
254 402 264 388 276 381  curveto
288 374 300 371 314 371  curveto
442 371 lineto
474 371 496 388 508 424  curveto
523 423 lineto
521 413 520 400 519 384  curveto
517 368 517 353 517 338  curveto
517 322 517 307 519 292  curveto
520 276 521 263 523 252  curveto
508 251 lineto
closepath
599 328 moveto
599 370 595 408 588 444  curveto
580 479 571 508 560 530  curveto
541 567 516 596 485 616  curveto
454 636 419 646 379 646  curveto
339 646 303 636 271 616  curveto
239 596 215 569 198 533  curveto
188 513 179 487 170 453  curveto
161 419 157 377 157 328  curveto
157 292 159 258 165 226  curveto
170 194 181 162 197 130  curveto
205 114 215 100 227 87  curveto
239 73 253 62 269 52  curveto
285 42 302 35 320 30  curveto
338 24 358 22 378 22  curveto
396 22 414 24 432 29  curveto
450 34 466 41 482 50  curveto
498 59 512 70 525 83  curveto
538 96 549 111 557 127  curveto
569 151 579 179 587 209  curveto
595 239 599 278 599 328  curveto
closepath
715 335 moveto
715 287 707 241 691 199  curveto
675 156 653 119 624 87  curveto
594 55 559 29 517 11  curveto
475 -7 429 -17 378 -17  curveto
326 -17 280 -7 239 10  curveto
197 28 162 54 133 86  curveto
103 118 81 155 65 198  curveto
49 240 41 286 41 334  curveto
41 386 49 434 66 477  curveto
83 520 107 557 139 589  curveto
167 617 202 640 244 658  curveto
285 676 330 685 378 685  curveto
425 685 469 676 511 659  curveto
552 641 588 617 619 587  curveto
649 557 672 520 689 477  curveto
706 433 715 386 715 335  curveto
closepath
fill
		} def

	/R
		{
455 477 moveto
455 502 452 525 447 545  curveto
441 565 432 581 420 594  curveto
406 607 388 617 366 624  curveto
343 631 320 635 298 635  curveto
281 635 268 634 258 633  curveto
248 632 240 630 235 628  curveto
229 626 226 623 224 619  curveto
222 615 222 611 222 607  curveto
222 353 lineto
226 349 233 347 243 345  curveto
252 343 265 342 282 342  curveto
286 342 293 342 303 343  curveto
313 343 325 344 337 346  curveto
349 347 361 349 373 351  curveto
385 353 394 356 402 360  curveto
417 367 430 380 440 399  curveto
450 418 455 444 455 477  curveto
closepath
563 486 moveto
563 474 561 460 559 446  curveto
556 432 551 417 543 403  curveto
535 389 525 375 512 361  curveto
498 347 481 335 460 325  curveto
422 306 374 297 316 297  curveto
303 297 288 297 271 298  curveto
253 298 237 299 222 300  curveto
222 81 lineto
222 56 229 39 243 31  curveto
257 22 280 18 312 18  curveto
312 0 lineto
28 0 lineto
28 18 lineto
46 18 62 19 74 22  curveto
86 25 95 29 101 35  curveto
107 41 112 48 114 56  curveto
116 64 118 74 118 86  curveto
118 588 lineto
118 614 111 631 97 641  curveto
83 650 60 655 28 655  curveto
28 673 lineto
303 673 lineto
340 673 373 670 403 665  curveto
433 660 459 652 481 641  curveto
508 627 528 606 542 577  curveto
556 548 563 518 563 486  curveto
closepath
fill
		} def

	/S
		{
552 0 moveto
5 0 lineto
286 327 lineto
17 673 lineto
535 673 lineto
545 522 lineto
526 522 lineto
517 560 502 587 482 603  curveto
462 619 435 627 402 627  curveto
180 627 lineto
381 369 lineto
145 94 lineto
446 94 lineto
478 94 503 102 522 118  curveto
541 134 557 163 569 205  curveto
589 205 lineto
552 0 lineto
closepath
fill
		} def

	/T
		{
581 500 moveto
581 526 576 547 568 564  curveto
559 580 548 594 535 604  curveto
521 614 506 621 489 625  curveto
471 629 454 631 438 632  curveto
372 634 lineto
372 85 lineto
372 59 378 41 392 32  curveto
406 22 429 18 462 18  curveto
462 0 lineto
178 0 lineto
178 18 lineto
210 18 233 22 247 31  curveto
261 40 268 58 268 85  curveto
268 634 lineto
202 632 lineto
176 631 154 627 136 620  curveto
118 613 103 604 91 592  curveto
79 580 71 567 66 551  curveto
61 535 59 518 59 500  curveto
33 502 lineto
38 673 lineto
602 673 lineto
607 502 lineto
581 500 lineto
closepath
fill
		} def

	/U
		{
694 655 moveto
678 655 665 654 655 652  curveto
644 650 635 648 627 644  curveto
619 640 612 634 606 628  curveto
600 622 594 614 588 605  curveto
398 313 lineto
398 83 lineto
398 57 405 40 419 31  curveto
433 22 456 18 488 18  curveto
488 0 lineto
204 0 lineto
204 18 lineto
235 18 258 22 272 31  curveto
286 39 294 57 294 83  curveto
294 300 lineto
86 603 lineto
70 625 55 639 40 645  curveto
25 651 9 655 -8 655  curveto
-8 673 lineto
289 673 lineto
289 655 lineto
267 655 249 653 234 649  curveto
218 645 211 637 211 626  curveto
211 621 212 616 215 611  curveto
217 605 222 597 230 587  curveto
376 363 lineto
517 596 lineto
521 603 524 609 526 613  curveto
528 617 529 623 529 629  curveto
529 639 523 645 513 649  curveto
502 653 485 655 462 655  curveto
462 673 lineto
694 673 lineto
694 655 lineto
694 655 lineto
closepath
fill
		} def

	/V
		{
437 -52 moveto
437 -63 435 -75 433 -87  curveto
430 -99 426 -112 421 -124  curveto
416 -136 410 -147 403 -159  curveto
395 -170 387 -180 379 -189  curveto
365 -202 349 -213 331 -221  curveto
313 -229 294 -233 275 -233  curveto
247 -233 226 -226 213 -214  curveto
199 -201 193 -188 193 -174  curveto
193 -164 195 -156 199 -150  curveto
203 -144 209 -140 215 -137  curveto
221 -134 228 -132 235 -132  curveto
241 -131 247 -131 253 -131  curveto
266 -131 279 -133 291 -139  curveto
303 -144 314 -147 325 -147  curveto
343 -147 359 -140 373 -127  curveto
387 -114 395 -96 395 -73  curveto
395 -53 390 -39 381 -30  curveto
372 -21 360 -17 345 -17  curveto
317 -17 295 -17 279 -17  curveto
262 -17 249 -18 239 -18  curveto
229 -18 222 -19 218 -19  curveto
213 -19 209 -20 206 -20  curveto
183 -20 161 -14 141 -4  curveto
121 6 103 21 88 41  curveto
73 61 61 85 52 113  curveto
43 141 39 172 39 207  curveto
39 245 46 282 62 320  curveto
77 358 100 392 130 422  curveto
157 449 184 469 212 481  curveto
240 493 273 500 312 500  curveto
326 500 340 498 352 495  curveto
364 491 375 487 384 482  curveto
393 477 400 471 405 465  curveto
410 458 413 451 413 445  curveto
413 430 407 420 397 414  curveto
387 408 374 405 358 405  curveto
338 405 319 407 300 413  curveto
280 419 260 422 239 422  curveto
210 422 185 415 165 401  curveto
145 387 128 370 115 350  curveto
102 330 93 308 87 286  curveto
81 263 78 243 78 227  curveto
78 205 82 184 91 162  curveto
100 140 112 122 126 108  curveto
135 98 146 92 158 88  curveto
170 84 183 82 197 82  curveto
216 82 236 82 257 84  curveto
277 86 295 87 311 87  curveto
327 87 341 84 355 80  curveto
369 75 381 67 393 56  curveto
406 42 417 25 425 5  curveto
433 -15 437 -34 437 -52  curveto
closepath
fill
		} def

	/W
		{
441 0 moveto
457 152 lineto
469 156 482 162 495 169  curveto
507 175 519 184 529 194  curveto
552 217 569 247 581 283  curveto
593 319 599 360 599 404  curveto
599 450 592 489 579 523  curveto
566 557 551 582 534 600  curveto
516 617 496 631 473 641  curveto
450 651 421 656 385 656  curveto
348 656 318 651 296 641  curveto
273 631 253 617 236 600  curveto
216 580 200 552 188 517  curveto
176 481 171 445 171 407  curveto
171 359 177 317 189 281  curveto
201 245 219 215 242 193  curveto
251 183 261 175 273 169  curveto
285 163 298 157 313 152  curveto
329 0 lineto
34 0 lineto
34 162 lineto
49 162 lineto
55 134 63 117 73 111  curveto
83 104 97 101 115 101  curveto
273 101 lineto
271 129 lineto
236 139 209 150 189 160  curveto
169 170 151 184 135 201  curveto
107 228 87 259 74 294  curveto
60 329 54 365 54 401  curveto
54 435 60 470 74 504  curveto
87 538 106 567 132 593  curveto
160 621 195 643 239 661  curveto
282 679 331 688 385 688  curveto
437 688 484 679 528 662  curveto
572 645 609 622 639 592  curveto
663 568 681 538 695 504  curveto
709 469 716 434 716 400  curveto
716 367 709 333 697 298  curveto
685 262 664 230 634 200  curveto
618 184 599 170 578 159  curveto
557 148 531 138 499 129  curveto
497 101 lineto
654 101 lineto
666 101 676 102 684 105  curveto
692 107 698 111 703 117  curveto
707 122 711 128 713 136  curveto
715 143 718 152 721 162  curveto
736 162 lineto
736 0 lineto
441 0 lineto
closepath
fill
		} def

	/X
		{
40 0 moveto
40 194 lineto
58 194 lineto
60 172 63 155 67 142  curveto
71 128 76 118 83 111  curveto
90 103 99 98 110 96  curveto
120 94 134 93 150 93  curveto
485 93 lineto
501 93 514 94 525 96  curveto
536 98 545 102 553 109  curveto
561 116 567 126 571 140  curveto
575 153 579 171 581 194  curveto
599 194 lineto
599 0 lineto
40 0 lineto
closepath
474 250 moveto
472 271 468 286 462 294  curveto
455 302 442 306 423 306  curveto
217 306 lineto
195 306 181 301 176 293  curveto
170 284 167 270 165 250  curveto
147 250 lineto
147 457 lineto
165 457 lineto
166 435 170 421 177 413  curveto
183 405 196 401 216 401  curveto
422 401 lineto
437 401 449 403 458 409  curveto
467 415 472 431 474 457  curveto
492 457 lineto
492 250 lineto
474 250 lineto
closepath
561 522 moveto
559 545 553 561 542 570  curveto
530 578 514 583 494 583  curveto
146 583 lineto
119 583 101 577 93 566  curveto
84 554 79 540 79 522  curveto
62 522 lineto
62 673 lineto
577 673 lineto
577 522 lineto
561 522 lineto
closepath
fill
		} def

	/Y
		{
781 666 moveto
770 662 762 657 756 653  curveto
750 649 745 644 742 638  curveto
738 632 736 625 735 617  curveto
733 609 732 599 732 588  curveto
725 464 lineto
723 436 714 410 697 388  curveto
680 366 659 348 635 336  curveto
621 329 609 323 597 319  curveto
585 315 573 311 559 308  curveto
545 305 529 303 512 302  curveto
494 300 474 300 450 300  curveto
450 86 lineto
450 61 456 43 468 33  curveto
480 23 504 18 540 18  curveto
540 0 lineto
256 0 lineto
256 18 lineto
291 18 315 23 327 33  curveto
339 43 346 60 346 85  curveto
346 300 lineto
322 300 301 300 284 302  curveto
266 303 251 305 237 308  curveto
223 311 210 315 198 319  curveto
186 323 173 329 161 336  curveto
136 348 115 366 98 388  curveto
81 410 72 436 71 464  curveto
64 588 lineto
63 599 62 609 61 617  curveto
59 625 57 632 54 638  curveto
50 644 46 649 40 653  curveto
34 657 25 662 15 666  curveto
15 684 lineto
32 682 47 681 59 679  curveto
71 677 81 675 90 672  curveto
98 669 106 665 112 661  curveto
118 657 125 652 131 646  curveto
143 634 153 618 162 600  curveto
171 582 176 567 178 555  curveto
186 469 lineto
188 441 194 418 203 402  curveto
211 385 223 372 237 363  curveto
251 353 267 347 285 344  curveto
303 341 324 340 346 340  curveto
346 587 lineto
346 612 339 630 326 640  curveto
313 650 290 655 256 655  curveto
256 673 lineto
540 673 lineto
540 655 lineto
505 655 481 650 469 640  curveto
456 630 450 612 450 588  curveto
450 340 lineto
472 340 492 341 510 344  curveto
528 347 545 353 559 363  curveto
573 372 584 385 593 402  curveto
601 418 607 441 610 469  curveto
618 555 lineto
619 567 624 582 633 600  curveto
642 618 653 634 665 646  curveto
671 652 677 657 683 661  curveto
689 665 697 669 706 672  curveto
714 675 725 677 737 679  curveto
749 681 763 682 781 684  curveto
781 666 lineto
781 666 lineto
closepath
fill
		} def

	/Z
		{
611 0 moveto
44 0 lineto
44 19 lineto
473 631 lineto
243 631 lineto
211 631 187 627 169 619  curveto
151 611 137 601 127 589  curveto
117 577 110 563 106 547  curveto
102 531 97 514 93 498  curveto
68 498 lineto
83 673 lineto
605 673 lineto
605 646 lineto
192 42 lineto
440 42 lineto
469 42 493 45 513 52  curveto
532 58 548 68 560 80  curveto
572 92 582 106 589 123  curveto
595 140 601 159 607 181  curveto
636 181 lineto
611 0 lineto
closepath
fill
		} def

	/bracketleft
		{
86 -155 moveto
86 674 lineto
299 674 lineto
299 649 lineto
221 649 lineto
199 649 184 645 176 637  curveto
167 629 163 616 163 598  curveto
163 -81 lineto
163 -96 167 -108 175 -117  curveto
183 -125 198 -130 220 -130  curveto
299 -130 lineto
299 -155 lineto
86 -155 lineto
closepath
fill
		} def

	/backslash
		{
293 65 moveto
293 47 286 31 274 19  curveto
261 6 246 0 228 0  curveto
210 0 194 6 182 19  curveto
169 31 163 47 163 65  curveto
163 82 169 97 181 110  curveto
193 123 209 130 228 130  curveto
247 130 263 123 275 110  curveto
287 97 293 82 293 65  curveto
closepath
701 65 moveto
701 47 694 31 681 19  curveto
668 6 653 0 636 0  curveto
618 0 603 6 590 19  curveto
577 31 571 47 571 65  curveto
571 82 577 97 589 110  curveto
601 123 617 130 636 130  curveto
655 130 671 123 683 110  curveto
695 97 701 82 701 65  curveto
closepath
497 413 moveto
497 395 490 379 477 367  curveto
464 354 449 348 432 348  curveto
414 348 399 354 386 367  curveto
373 379 367 395 367 413  curveto
367 430 373 445 385 458  curveto
397 471 413 478 432 478  curveto
451 478 467 471 479 458  curveto
491 445 497 430 497 413  curveto
closepath
fill
		} def

	/bracketright
		{
33 -155 moveto
33 -130 lineto
112 -130 lineto
133 -130 148 -125 156 -117  curveto
164 -108 169 -96 169 -81  curveto
169 598 lineto
169 616 164 629 156 637  curveto
147 645 132 649 111 649  curveto
33 649 lineto
33 674 lineto
246 674 lineto
246 -155 lineto
33 -155 lineto
closepath
fill
		} def

	/asciicircum
		{
15 0 moveto
15 55 lineto
306 55 lineto
306 674 lineto
361 674 lineto
361 55 lineto
652 55 lineto
652 0 lineto
15 0 lineto
closepath
fill
		} def

	/underscore
		{
-2 -252 moveto
-2 -206 lineto
502 -206 lineto
502 -252 lineto
-2 -252 lineto
closepath
fill
		} def

	/quoteleft
		{
480 881 moveto
480 917 lineto
1090 917 lineto
1090 881 lineto
480 881 lineto
closepath
fill
		} def

	/a
		{
407 223 moveto
403 249 399 273 395 294  curveto
391 314 387 332 382 348  curveto
377 363 371 377 365 389  curveto
358 401 350 412 340 422  curveto
326 436 311 446 296 452  curveto
280 458 265 461 249 461  curveto
232 461 217 454 205 442  curveto
193 430 183 416 176 401  curveto
165 379 157 354 152 326  curveto
147 298 145 269 145 241  curveto
145 209 147 179 151 149  curveto
155 119 162 95 172 77  curveto
181 57 193 42 209 32  curveto
224 21 240 16 256 16  curveto
266 16 277 18 289 24  curveto
301 29 312 37 322 47  curveto
332 57 343 72 353 91  curveto
363 110 372 129 380 149  curveto
407 223 lineto
407 223 lineto
closepath
620 79 moveto
620 69 618 58 614 47  curveto
610 36 605 26 599 17  curveto
593 7 585 0 577 -6  curveto
568 -12 559 -15 549 -15  curveto
537 -15 527 -10 517 -1  curveto
507 7 499 18 491 32  curveto
483 46 475 61 469 77  curveto
462 93 456 109 451 124  curveto
445 113 438 100 431 86  curveto
423 71 412 56 396 40  curveto
378 22 355 8 327 -2  curveto
298 -12 270 -18 243 -18  curveto
217 -18 192 -13 168 -3  curveto
144 7 123 20 107 37  curveto
63 81 41 145 41 229  curveto
41 274 46 313 56 347  curveto
66 380 83 409 109 435  curveto
121 447 132 457 144 465  curveto
155 473 167 479 179 485  curveto
191 490 203 494 217 496  curveto
231 498 246 500 263 500  curveto
283 500 302 496 320 488  curveto
338 480 355 468 370 452  curveto
385 436 398 416 409 392  curveto
420 368 428 341 433 309  curveto
435 309 lineto
499 487 lineto
587 487 lineto
472 170 lineto
474 157 477 144 481 130  curveto
485 116 491 104 498 93  curveto
504 82 512 73 521 66  curveto
530 59 540 56 552 56  curveto
556 56 561 57 566 60  curveto
571 63 575 66 579 70  curveto
584 75 589 82 594 92  curveto
598 101 602 116 604 137  curveto
622 137 lineto
620 79 lineto
closepath
fill
		} def

	/b
		{
412 188 moveto
412 232 405 271 392 305  curveto
378 339 363 366 345 384  curveto
337 392 330 397 325 399  curveto
319 401 313 402 307 402  curveto
301 402 294 401 286 400  curveto
277 398 269 398 261 398  curveto
245 398 234 401 228 407  curveto
221 413 218 419 218 425  curveto
218 433 221 441 229 449  curveto
236 457 247 461 263 461  curveto
271 461 280 459 291 457  curveto
302 455 310 454 314 454  curveto
320 454 327 457 335 465  curveto
342 473 348 482 354 494  curveto
358 502 361 512 364 526  curveto
366 539 368 552 368 565  curveto
368 587 364 607 358 625  curveto
351 643 342 658 332 670  curveto
322 682 310 691 296 697  curveto
282 703 269 707 255 707  curveto
239 707 225 703 213 695  curveto
201 687 190 678 182 667  curveto
173 656 166 644 162 632  curveto
157 620 155 609 155 599  curveto
155 93 lineto
158 89 161 86 164 84  curveto
167 81 170 78 174 75  curveto
188 60 206 49 228 41  curveto
250 33 271 30 293 30  curveto
307 30 322 32 336 38  curveto
350 44 361 51 371 61  curveto
382 72 392 87 400 106  curveto
408 124 412 152 412 188  curveto
closepath
515 199 moveto
515 167 510 137 500 111  curveto
490 85 477 62 460 43  curveto
443 23 422 8 398 -2  curveto
374 -12 347 -18 319 -18  curveto
291 -18 264 -14 240 -6  curveto
215 1 188 15 158 37  curveto
156 -149 lineto
156 -160 155 -172 153 -185  curveto
151 -197 149 -210 148 -223  curveto
61 -223 lineto
63 -199 67 -173 71 -147  curveto
75 -121 77 -94 77 -67  curveto
77 588 lineto
77 614 84 638 99 660  curveto
114 682 140 703 176 721  curveto
188 727 201 731 215 735  curveto
229 739 245 741 263 741  curveto
298 741 332 732 366 716  curveto
394 702 418 683 436 659  curveto
454 635 463 609 463 580  curveto
463 566 460 551 456 537  curveto
452 522 447 510 442 501  curveto
438 493 433 486 427 479  curveto
421 471 416 465 410 459  curveto
404 453 398 447 392 443  curveto
386 438 382 434 379 432  curveto
425 412 459 381 481 339  curveto
503 297 515 250 515 199  curveto
closepath
fill
		} def

	/c
		{
522 -50 moveto
518 -84 511 -114 503 -140  curveto
495 -165 483 -185 468 -201  curveto
458 -210 447 -217 435 -223  curveto
423 -228 410 -231 396 -231  curveto
363 -231 336 -209 315 -167  curveto
310 -157 305 -145 301 -129  curveto
296 -113 291 -96 287 -76  curveto
283 -56 279 -34 275 -12  curveto
271 10 268 33 265 57  curveto
263 57 lineto
115 -216 lineto
13 -216 lineto
232 185 lineto
220 229 211 267 205 298  curveto
198 329 191 352 184 368  curveto
176 383 166 395 154 405  curveto
141 415 126 420 110 420  curveto
86 420 68 410 56 390  curveto
44 370 35 347 30 321  curveto
12 321 lineto
19 379 31 423 49 454  curveto
67 484 90 500 119 500  curveto
145 500 167 490 184 472  curveto
201 453 213 429 221 399  curveto
259 236 lineto
392 480 lineto
494 479 lineto
290 105 lineto
294 89 298 70 304 47  curveto
310 24 316 1 323 -21  curveto
329 -43 336 -64 344 -83  curveto
351 -101 358 -114 365 -121  curveto
374 -130 382 -136 389 -138  curveto
396 -140 404 -142 414 -142  curveto
436 -142 455 -134 471 -118  curveto
478 -110 484 -101 489 -91  curveto
494 -81 499 -67 503 -50  curveto
522 -50 lineto
522 -50 lineto
closepath
fill
		} def

	/d
		{
385 194 moveto
385 216 382 239 378 262  curveto
373 285 366 306 357 324  curveto
347 342 337 358 326 374  curveto
314 389 301 404 286 418  curveto
258 412 236 402 218 390  curveto
200 378 186 363 176 346  curveto
165 329 157 310 153 289  curveto
149 268 147 246 147 222  curveto
147 202 149 180 153 158  curveto
157 136 163 116 171 100  curveto
175 90 179 81 185 73  curveto
191 65 197 57 205 50  curveto
213 43 222 38 232 34  curveto
242 30 254 28 268 28  curveto
282 28 295 30 308 36  curveto
320 42 331 49 341 59  curveto
355 73 365 92 373 116  curveto
381 140 385 166 385 194  curveto
closepath
481 228 moveto
481 199 477 173 469 150  curveto
461 126 451 105 438 86  curveto
424 67 409 50 391 36  curveto
373 22 355 10 335 0  curveto
321 -6 307 -11 292 -14  curveto
276 -17 262 -19 248 -19  curveto
238 -19 226 -17 211 -15  curveto
195 -13 182 -9 170 -3  curveto
150 6 131 18 113 34  curveto
95 49 78 71 64 101  curveto
54 120 48 138 45 156  curveto
41 173 40 189 40 203  curveto
40 232 46 261 58 290  curveto
70 319 86 344 107 365  curveto
142 400 191 427 255 447  curveto
141 551 lineto
126 564 115 579 108 597  curveto
101 614 98 629 98 643  curveto
98 653 99 662 102 670  curveto
105 678 111 686 121 696  curveto
125 700 132 706 140 712  curveto
148 718 155 722 162 726  curveto
173 731 185 735 199 737  curveto
213 739 227 740 243 740  curveto
247 740 252 739 260 739  curveto
268 739 276 738 285 737  curveto
293 736 302 735 311 734  curveto
319 733 327 732 333 730  curveto
371 718 398 705 415 690  curveto
431 674 440 657 440 639  curveto
440 627 435 618 425 610  curveto
415 602 405 599 395 599  curveto
385 599 376 601 368 606  curveto
360 610 352 616 344 623  curveto
336 629 329 636 322 644  curveto
314 652 308 659 302 665  curveto
287 679 271 689 255 693  curveto
239 697 227 700 219 700  curveto
206 700 195 697 185 693  curveto
175 688 167 682 160 675  curveto
150 665 146 654 146 640  curveto
146 630 148 621 153 613  curveto
158 605 164 597 172 590  curveto
187 574 203 561 221 549  curveto
239 537 257 525 277 513  curveto
287 507 296 501 306 495  curveto
316 489 326 483 336 476  curveto
346 469 356 461 367 452  curveto
378 443 390 433 402 421  curveto
425 397 444 369 459 337  curveto
473 304 481 268 481 228  curveto
closepath
fill
		} def

	/e
		{
427 107 moveto
425 83 418 63 405 46  curveto
391 29 375 16 356 7  curveto
346 2 336 -1 325 -5  curveto
314 -8 303 -11 292 -13  curveto
280 -15 269 -17 258 -18  curveto
247 -19 238 -20 230 -20  curveto
194 -20 160 -14 129 -3  curveto
98 7 75 20 60 36  curveto
34 61 22 91 22 126  curveto
22 154 31 180 49 203  curveto
67 226 95 242 133 252  curveto
120 257 108 263 96 269  curveto
84 275 74 282 65 290  curveto
56 298 49 308 44 320  curveto
38 332 36 346 36 363  curveto
36 385 42 405 55 425  curveto
67 445 88 462 118 477  curveto
133 484 151 490 171 495  curveto
191 499 215 502 241 502  curveto
260 502 277 500 292 498  curveto
307 496 324 490 342 481  curveto
360 471 373 460 382 448  curveto
391 435 396 423 396 412  curveto
396 398 391 387 382 378  curveto
373 369 363 365 351 365  curveto
331 365 318 370 311 382  curveto
303 394 297 407 293 422  curveto
289 433 281 443 269 452  curveto
257 461 241 466 222 466  curveto
208 466 196 463 184 458  curveto
172 452 162 445 154 437  curveto
136 419 127 393 127 361  curveto
127 335 134 314 148 297  curveto
162 280 184 272 215 272  curveto
225 272 238 273 254 275  curveto
270 277 283 278 293 278  curveto
306 278 316 275 322 271  curveto
328 266 331 261 331 256  curveto
331 249 325 242 315 235  curveto
305 228 293 225 279 225  curveto
269 225 259 226 247 228  curveto
235 230 225 232 215 232  curveto
189 232 167 223 151 206  curveto
135 188 127 164 127 132  curveto
127 115 128 102 132 93  curveto
136 83 142 74 152 65  curveto
163 53 179 44 200 37  curveto
220 29 244 26 272 26  curveto
302 26 329 31 352 43  curveto
374 55 391 78 401 114  curveto
427 107 lineto
427 107 lineto
closepath
fill
		} def

	/f
		{
235 464 moveto
214 460 196 452 182 440  curveto
167 428 155 414 146 396  curveto
136 378 129 358 125 335  curveto
121 312 119 287 119 261  curveto
119 235 121 208 127 182  curveto
132 156 140 131 152 109  curveto
157 98 163 88 170 78  curveto
177 68 184 60 192 52  curveto
200 44 208 37 216 32  curveto
224 26 232 23 240 23  curveto
235 464 lineto
closepath
402 214 moveto
402 242 399 270 393 298  curveto
387 326 380 351 370 371  curveto
359 391 347 409 335 423  curveto
322 437 303 450 279 464  curveto
282 24 lineto
309 27 330 36 344 50  curveto
358 64 370 82 380 102  curveto
387 117 392 134 396 154  curveto
400 173 402 193 402 214  curveto
closepath
490 244 moveto
490 197 482 156 467 122  curveto
451 88 434 61 414 41  curveto
396 23 377 11 355 4  curveto
333 -3 309 -9 282 -13  curveto
283 -224 lineto
243 -212 lineto
241 -14 lineto
217 -8 192 -1 167 8  curveto
141 17 119 31 101 50  curveto
77 73 59 101 46 134  curveto
33 167 27 201 27 236  curveto
27 254 29 272 33 292  curveto
37 311 42 330 49 348  curveto
56 366 64 384 74 400  curveto
84 416 95 430 107 442  curveto
142 477 185 497 235 501  curveto
233 671 lineto
278 656 lineto
279 498 lineto
309 492 334 485 355 477  curveto
376 468 396 454 415 436  curveto
441 410 460 380 472 348  curveto
484 315 490 280 490 244  curveto
closepath
fill
		} def

	/g
		{
280 58 moveto
284 31 288 5 292 -19  curveto
296 -43 298 -69 298 -95  curveto
298 -115 296 -133 293 -149  curveto
289 -165 285 -178 280 -190  curveto
274 -202 267 -210 260 -216  curveto
252 -222 243 -225 231 -225  curveto
213 -225 200 -218 192 -204  curveto
183 -190 179 -174 179 -155  curveto
179 -137 181 -119 185 -99  curveto
189 -79 195 -60 201 -41  curveto
207 -21 214 -3 221 14  curveto
227 32 233 47 239 60  curveto
235 93 230 125 224 157  curveto
218 188 212 217 205 245  curveto
198 272 191 297 183 319  curveto
175 341 168 361 160 377  curveto
152 392 142 403 130 410  curveto
117 417 105 421 95 421  curveto
78 421 63 414 49 400  curveto
38 389 31 377 28 364  curveto
24 351 22 335 22 317  curveto
5 317 lineto
5 344 lineto
5 370 7 392 12 412  curveto
17 431 22 445 27 454  curveto
34 469 44 480 58 488  curveto
72 495 87 499 105 499  curveto
125 499 142 494 156 485  curveto
169 476 181 461 192 440  curveto
201 420 208 401 214 381  curveto
219 361 225 337 232 307  curveto
237 283 243 257 249 227  curveto
255 197 261 169 265 142  curveto
267 142 lineto
380 494 lineto
484 494 lineto
280 58 lineto
closepath
fill
		} def

	/h
		{
438 -202 moveto
435 -186 432 -172 429 -158  curveto
426 -144 424 -126 424 -103  curveto
411 347 lineto
410 380 402 404 387 420  curveto
378 428 368 435 356 439  curveto
344 443 333 445 322 445  curveto
308 445 296 442 285 438  curveto
273 433 263 427 254 420  curveto
244 412 236 404 228 395  curveto
220 385 212 376 206 366  curveto
206 0 lineto
121 0 lineto
121 349 lineto
121 358 120 369 119 383  curveto
117 397 114 409 109 421  curveto
104 430 98 437 92 443  curveto
85 449 77 452 68 452  curveto
60 452 54 450 48 447  curveto
42 443 37 437 33 428  curveto
29 420 26 411 24 399  curveto
21 387 19 374 18 360  curveto
0 360 lineto
0 383 2 400 5 412  curveto
8 423 12 434 18 446  curveto
28 467 42 482 59 492  curveto
76 501 94 506 114 506  curveto
130 506 144 502 158 495  curveto
172 487 182 477 189 464  curveto
193 456 196 448 199 439  curveto
201 430 204 420 207 408  curveto
227 438 250 464 274 484  curveto
298 504 328 514 364 514  curveto
376 514 388 512 401 510  curveto
413 507 425 502 435 495  curveto
440 491 446 486 454 480  curveto
461 474 468 467 475 458  curveto
481 448 487 437 492 423  curveto
496 409 499 391 500 371  curveto
511 -126 lineto
511 -141 514 -155 518 -169  curveto
522 -182 525 -193 527 -202  curveto
438 -202 lineto
closepath
fill
		} def

	/i
		{
301 101 moveto
297 77 292 58 285 43  curveto
278 28 270 16 260 7  curveto
250 -1 239 -7 227 -11  curveto
215 -15 204 -17 192 -17  curveto
175 -17 161 -14 150 -10  curveto
138 -5 128 1 119 11  curveto
110 19 103 30 97 42  curveto
91 54 88 66 88 78  curveto
88 309 lineto
88 335 86 357 82 373  curveto
78 389 73 401 67 409  curveto
60 417 52 423 44 426  curveto
36 428 27 430 19 430  curveto
0 430 lineto
0 450 lineto
27 455 55 462 83 471  curveto
111 479 141 490 173 503  curveto
173 118 lineto
173 102 174 88 178 78  curveto
182 67 186 59 191 54  curveto
198 45 203 39 207 36  curveto
211 32 216 31 223 31  curveto
229 31 235 31 241 33  curveto
247 35 253 38 259 43  curveto
264 48 268 55 272 64  curveto
276 73 279 85 281 101  curveto
301 101 lineto
301 101 lineto
closepath
fill
		} def

	/j
		{
502 214 moveto
502 242 499 267 494 291  curveto
488 314 482 334 474 350  curveto
470 357 465 365 459 374  curveto
453 382 446 390 438 398  curveto
430 405 423 411 415 416  curveto
407 421 399 424 392 424  curveto
386 424 379 422 373 420  curveto
367 418 362 415 358 411  curveto
351 404 345 392 341 374  curveto
337 356 335 335 335 310  curveto
335 305 335 298 335 290  curveto
335 282 336 277 336 275  curveto
347 23 lineto
383 27 411 38 433 58  curveto
455 77 471 97 481 117  curveto
488 132 493 147 497 163  curveto
500 179 502 196 502 214  curveto
closepath
587 247 moveto
587 213 580 179 566 146  curveto
552 112 535 86 515 66  curveto
505 56 495 47 483 38  curveto
471 29 459 21 445 13  curveto
431 5 417 0 403 -5  curveto
388 -9 374 -12 360 -12  curveto
347 -12 lineto
347 -224 lineto
284 -224 lineto
284 -13 lineto
272 -11 258 -8 244 -5  curveto
230 -2 215 1 200 7  curveto
185 13 170 20 155 29  curveto
139 37 125 49 111 63  curveto
101 73 91 85 82 100  curveto
72 114 64 130 58 147  curveto
51 164 46 182 42 202  curveto
38 221 36 241 36 261  curveto
36 291 41 321 52 350  curveto
62 378 77 402 97 422  curveto
116 441 138 457 162 471  curveto
186 485 215 492 248 492  curveto
248 474 lineto
227 464 210 453 196 439  curveto
182 425 171 409 163 391  curveto
155 373 149 353 146 332  curveto
142 310 141 288 141 265  curveto
141 234 143 205 149 179  curveto
155 152 162 130 171 113  curveto
185 85 202 63 223 49  curveto
243 35 264 27 284 26  curveto
275 311 lineto
275 315 274 321 274 329  curveto
274 336 274 343 274 350  curveto
274 363 276 378 280 395  curveto
284 412 290 428 300 444  curveto
310 459 322 472 338 483  curveto
354 493 373 499 397 499  curveto
415 499 433 495 451 489  curveto
469 482 489 468 511 446  curveto
532 424 550 396 565 362  curveto
579 327 587 289 587 247  curveto
closepath
fill
		} def

	/k
		{
323 0 moveto
323 18 lineto
340 18 352 19 358 23  curveto
364 26 368 30 368 36  curveto
368 42 365 47 361 52  curveto
356 57 351 63 346 71  curveto
194 258 lineto
194 0 lineto
119 0 lineto
119 344 lineto
119 362 117 378 114 390  curveto
110 402 105 411 98 417  curveto
91 423 82 428 71 430  curveto
60 432 47 434 33 434  curveto
33 455 lineto
43 457 54 459 65 461  curveto
76 463 88 465 101 468  curveto
113 471 127 475 142 481  curveto
157 486 174 493 194 501  curveto
194 284 lineto
215 305 236 326 258 346  curveto
280 366 300 385 319 402  curveto
338 419 355 434 370 446  curveto
385 458 397 467 406 473  curveto
411 478 421 484 436 490  curveto
450 496 466 500 484 500  curveto
508 500 527 494 539 482  curveto
551 470 557 459 557 447  curveto
557 435 552 423 543 411  curveto
534 399 520 394 501 394  curveto
491 394 483 395 477 399  curveto
470 403 464 407 458 411  curveto
452 415 447 418 442 422  curveto
437 426 432 428 426 428  curveto
418 428 407 424 395 416  curveto
383 408 370 397 356 385  curveto
342 373 328 359 314 345  curveto
300 331 286 317 274 305  curveto
461 70 lineto
478 48 494 34 508 28  curveto
522 21 538 18 558 18  curveto
558 0 lineto
323 0 lineto
closepath
fill
		} def

	/l
		{
547 153 moveto
547 127 545 105 542 88  curveto
538 70 533 55 527 42  curveto
515 20 502 4 487 -4  curveto
471 -12 457 -17 444 -17  curveto
425 -17 408 -10 393 1  curveto
377 13 365 28 357 46  curveto
353 53 349 64 345 79  curveto
340 94 335 111 331 130  curveto
326 149 321 170 317 192  curveto
313 214 309 235 305 256  curveto
301 277 298 297 295 316  curveto
292 335 290 351 289 365  curveto
287 365 lineto
116 0 lineto
24 0 lineto
255 498 lineto
249 524 243 547 237 568  curveto
231 589 224 607 217 623  curveto
210 636 201 646 189 653  curveto
177 659 166 663 154 663  curveto
142 663 132 660 122 656  curveto
112 651 103 645 96 638  curveto
86 628 80 617 77 605  curveto
74 593 71 581 68 570  curveto
49 570 lineto
54 622 64 664 79 694  curveto
93 724 116 739 146 739  curveto
168 739 187 732 205 719  curveto
222 705 235 691 243 675  curveto
252 656 261 631 271 600  curveto
280 569 289 536 299 501  curveto
303 484 307 462 313 436  curveto
319 410 325 382 331 352  curveto
337 322 343 293 349 264  curveto
355 234 360 208 366 186  curveto
370 169 375 152 382 135  curveto
388 118 397 104 408 94  curveto
423 78 440 71 460 71  curveto
470 71 481 73 491 79  curveto
501 85 509 94 516 108  curveto
519 114 522 121 524 131  curveto
526 140 527 147 529 153  curveto
547 153 lineto
547 153 lineto
closepath
fill
		} def

	/m
		{
566 101 moveto
563 79 557 61 549 46  curveto
540 31 530 19 518 10  curveto
506 0 494 -6 482 -10  curveto
469 -14 457 -17 446 -17  curveto
428 -17 413 -12 399 -4  curveto
385 4 374 16 367 32  curveto
363 38 361 46 360 54  curveto
358 62 357 71 355 81  curveto
349 73 345 68 343 64  curveto
340 60 335 55 329 49  curveto
307 27 286 11 265 0  curveto
243 -11 219 -17 193 -17  curveto
174 -17 158 -12 144 -4  curveto
130 3 115 15 97 31  curveto
97 10 lineto
97 -5 98 -19 102 -32  curveto
105 -45 109 -58 113 -70  curveto
117 -82 120 -95 124 -108  curveto
127 -121 129 -135 129 -151  curveto
129 -172 124 -189 115 -203  curveto
106 -216 95 -223 81 -223  curveto
69 -223 58 -217 48 -205  curveto
38 -193 33 -176 33 -153  curveto
33 -137 34 -123 37 -111  curveto
40 -99 43 -87 47 -75  curveto
50 -63 53 -51 56 -38  curveto
59 -25 61 -10 61 7  curveto
61 500 lineto
147 500 lineto
147 164 lineto
147 125 157 96 177 76  curveto
185 67 196 61 208 57  curveto
220 53 231 51 243 51  curveto
252 51 262 53 273 57  curveto
284 61 295 67 306 74  curveto
316 81 326 89 334 99  curveto
342 108 349 118 354 128  curveto
354 500 lineto
440 500 lineto
440 116 lineto
440 92 444 72 454 56  curveto
464 40 477 32 494 32  curveto
512 32 526 41 536 61  curveto
538 66 540 72 542 79  curveto
543 86 544 93 546 101  curveto
566 101 lineto
566 101 lineto
closepath
fill
		} def

	/n
		{
475 439 moveto
475 435 473 428 471 418  curveto
468 408 464 397 460 385  curveto
456 372 451 358 445 344  curveto
439 330 433 316 427 304  curveto
412 274 396 243 379 210  curveto
361 177 345 146 330 116  curveto
314 86 301 59 290 35  curveto
278 11 271 -5 269 -16  curveto
232 -16 lineto
64 414 lineto
60 424 56 432 53 437  curveto
50 442 46 446 41 449  curveto
34 452 25 454 15 455  curveto
4 455 -3 456 -9 457  curveto
-9 476 lineto
9 478 23 479 34 480  curveto
45 481 55 483 64 485  curveto
72 487 81 489 89 493  curveto
97 496 108 501 122 507  curveto
280 103 lineto
358 253 lineto
364 265 369 276 373 285  curveto
377 294 379 302 381 309  curveto
383 315 384 321 384 326  curveto
384 330 385 334 385 338  curveto
385 357 382 376 376 396  curveto
370 416 368 433 368 448  curveto
368 452 369 457 371 463  curveto
373 469 376 474 380 480  curveto
384 486 389 490 395 494  curveto
401 498 409 500 419 500  curveto
431 500 443 495 456 485  curveto
468 475 475 460 475 439  curveto
closepath
fill
		} def

	/o
		{
404 223 moveto
404 258 401 289 395 316  curveto
389 342 381 365 372 385  curveto
358 412 341 433 320 447  curveto
299 461 277 469 255 469  curveto
225 469 199 457 175 433  curveto
163 421 152 401 144 375  curveto
135 349 131 315 131 273  curveto
131 249 133 222 138 192  curveto
143 162 154 131 170 99  curveto
181 76 197 57 217 43  curveto
237 29 259 22 283 22  curveto
307 22 329 29 347 45  curveto
365 61 378 82 388 110  curveto
393 125 397 142 400 161  curveto
402 180 404 201 404 223  curveto
closepath
501 241 moveto
501 229 499 215 497 199  curveto
495 183 491 167 485 150  curveto
479 132 470 114 459 96  curveto
448 77 434 59 417 42  curveto
399 24 378 10 353 -1  curveto
328 -13 300 -19 268 -19  curveto
246 -19 226 -16 207 -10  curveto
188 -4 171 1 156 9  curveto
117 37 87 70 66 110  curveto
45 149 35 194 35 244  curveto
35 274 40 305 51 336  curveto
61 366 76 394 96 418  curveto
116 442 140 461 168 476  curveto
196 491 228 499 264 499  curveto
294 499 323 492 352 480  curveto
380 467 407 448 433 423  curveto
449 407 464 383 479 353  curveto
493 323 501 285 501 241  curveto
closepath
fill
		} def

	/p
		{
530 151 moveto
530 131 527 112 522 92  curveto
516 72 509 54 499 38  curveto
489 22 476 9 461 -1  curveto
446 -11 429 -16 410 -16  curveto
391 -16 374 -8 359 8  curveto
343 24 331 48 322 80  curveto
320 84 319 90 318 98  curveto
317 105 316 113 316 121  curveto
315 129 314 136 314 144  curveto
314 152 314 158 314 164  curveto
314 202 316 241 322 281  curveto
327 321 331 361 335 401  curveto
222 401 lineto
215 326 208 263 202 212  curveto
195 160 188 114 181 74  curveto
179 63 177 53 175 44  curveto
173 34 170 26 167 20  curveto
159 4 150 -5 140 -11  curveto
129 -16 119 -19 110 -19  curveto
94 -19 82 -13 72 -2  curveto
62 8 57 20 57 33  curveto
57 47 60 58 68 68  curveto
75 77 83 87 93 99  curveto
101 109 109 119 117 130  curveto
125 141 130 155 132 172  curveto
161 401 lineto
114 401 lineto
103 401 91 398 79 393  curveto
66 387 55 379 47 367  curveto
27 338 lineto
10 338 lineto
24 384 43 421 65 447  curveto
87 473 116 487 152 487  curveto
522 487 lineto
522 401 lineto
396 401 lineto
394 381 392 361 390 340  curveto
388 318 387 297 386 276  curveto
385 255 384 235 384 217  curveto
384 198 384 182 384 169  curveto
384 157 385 146 387 135  curveto
389 124 393 114 399 106  curveto
404 97 411 90 419 84  curveto
427 78 438 76 450 76  curveto
457 76 466 78 476 84  curveto
486 89 494 98 500 110  curveto
502 115 504 121 505 128  curveto
506 135 507 143 508 151  curveto
530 151 lineto
530 151 lineto
closepath
fill
		} def

	/q
		{
144 316 moveto
150 212 lineto
151 187 155 163 162 140  curveto
169 117 178 97 188 79  curveto
198 61 210 47 224 37  curveto
237 26 251 21 265 21  curveto
279 21 292 26 306 38  curveto
319 50 331 65 341 83  curveto
351 101 359 121 366 144  curveto
372 166 376 189 378 211  curveto
384 316 lineto
144 316 lineto
closepath
379 463 moveto
378 471 377 481 375 493  curveto
373 504 370 515 367 527  curveto
364 538 361 549 358 560  curveto
354 570 351 579 347 587  curveto
337 607 324 623 308 636  curveto
292 649 277 656 263 656  curveto
252 656 238 650 222 638  curveto
206 626 193 611 184 593  curveto
179 583 175 573 171 562  curveto
167 550 163 539 160 527  curveto
157 515 155 504 153 493  curveto
151 481 149 472 149 464  curveto
143 368 lineto
385 368 lineto
379 463 lineto
closepath
485 351 moveto
485 296 481 248 473 208  curveto
465 168 455 135 443 110  curveto
435 93 424 77 412 62  curveto
400 46 386 33 370 21  curveto
354 9 338 0 320 -6  curveto
302 -13 284 -17 265 -17  curveto
230 -17 196 -6 164 16  curveto
132 38 106 69 86 109  curveto
72 137 61 170 54 210  curveto
46 250 43 297 43 351  curveto
43 396 46 434 52 465  curveto
58 495 68 523 81 549  curveto
91 569 102 588 116 605  curveto
130 622 145 637 161 650  curveto
177 662 193 672 211 679  curveto
229 686 247 690 265 690  curveto
279 690 294 687 310 681  curveto
326 675 343 667 359 655  curveto
375 643 391 628 407 610  curveto
422 592 436 570 449 546  curveto
461 520 470 491 476 459  curveto
482 427 485 391 485 351  curveto
closepath
fill
		} def

	/r
		{
401 214 moveto
401 248 394 281 382 313  curveto
370 345 353 371 332 393  curveto
298 427 262 444 224 444  curveto
212 444 202 442 194 439  curveto
186 435 179 430 172 423  curveto
158 409 148 395 144 381  curveto
140 367 138 354 138 343  curveto
138 336 138 328 138 320  curveto
138 312 139 305 139 300  curveto
144 116 lineto
144 110 146 102 151 92  curveto
155 82 162 72 172 62  curveto
182 52 194 43 208 36  curveto
222 28 238 25 258 25  curveto
302 25 336 42 362 76  curveto
388 110 401 156 401 214  curveto
closepath
490 252 moveto
490 226 486 201 479 176  curveto
471 151 463 129 454 110  curveto
442 88 429 68 414 52  curveto
399 36 383 22 367 12  curveto
351 2 334 -5 317 -11  curveto
299 -16 283 -19 269 -19  curveto
246 -19 223 -13 199 -3  curveto
175 6 158 21 147 40  curveto
147 -134 lineto
147 -147 146 -162 145 -179  curveto
143 -196 141 -213 137 -230  curveto
50 -230 lineto
51 -217 53 -203 57 -189  curveto
60 -175 62 -157 62 -137  curveto
62 -121 61 -106 61 -92  curveto
61 -78 61 -69 61 -67  curveto
58 200 lineto
58 203 58 208 58 215  curveto
58 221 57 228 57 236  curveto
57 244 57 251 57 259  curveto
57 267 57 274 57 280  curveto
57 308 61 333 70 357  curveto
78 380 92 401 112 421  curveto
123 432 135 442 148 452  curveto
160 462 176 471 194 481  curveto
210 489 223 494 235 496  curveto
247 498 258 499 270 499  curveto
312 499 349 489 383 469  curveto
417 449 445 417 467 373  curveto
474 358 480 340 484 320  curveto
488 300 490 277 490 252  curveto
closepath
fill
		} def

	/s
		{
430 199 moveto
430 239 421 277 405 311  curveto
388 345 359 380 318 414  curveto
288 414 lineto
267 414 247 410 227 402  curveto
207 394 190 383 176 369  curveto
164 357 154 340 146 319  curveto
138 297 134 274 134 248  curveto
134 212 140 177 153 145  curveto
165 113 184 85 208 61  curveto
217 51 229 42 245 33  curveto
261 23 277 19 295 19  curveto
325 19 348 25 366 39  curveto
383 52 397 69 407 89  curveto
415 105 420 121 424 139  curveto
428 156 430 176 430 199  curveto
closepath
371 414 moveto
371 412 lineto
383 408 397 400 411 390  curveto
425 380 439 368 453 355  curveto
466 342 478 328 489 314  curveto
500 300 509 287 515 275  curveto
521 261 526 248 528 236  curveto
530 224 532 211 532 199  curveto
532 179 529 160 523 141  curveto
517 122 509 104 499 87  curveto
488 70 475 54 459 40  curveto
443 26 426 14 407 4  curveto
397 0 387 -4 376 -7  curveto
364 -10 353 -13 341 -15  curveto
329 -17 318 -18 307 -19  curveto
296 -20 287 -21 279 -21  curveto
249 -21 220 -14 193 -2  curveto
165 10 142 26 123 46  curveto
91 78 67 112 52 149  curveto
37 186 30 223 30 261  curveto
30 289 36 317 48 344  curveto
60 370 75 392 93 410  curveto
107 424 124 437 143 448  curveto
162 459 182 468 203 476  curveto
224 484 245 490 267 494  curveto
288 498 308 500 327 500  curveto
588 500 lineto
588 414 lineto
371 414 lineto
closepath
fill
		} def

	/t
		{
264 408 moveto
262 384 261 360 259 334  curveto
257 308 255 284 253 262  curveto
251 239 250 219 249 202  curveto
247 185 247 174 247 170  curveto
247 158 248 147 251 136  curveto
254 124 258 114 264 105  curveto
270 96 277 89 285 83  curveto
293 77 302 74 312 74  curveto
329 74 342 79 352 91  curveto
361 103 367 123 371 152  curveto
390 152 lineto
390 130 389 112 387 98  curveto
385 83 382 70 379 60  curveto
375 49 371 40 366 32  curveto
360 24 355 18 349 12  curveto
337 0 325 -8 312 -12  curveto
299 -16 288 -19 279 -19  curveto
270 -19 261 -17 251 -14  curveto
241 -10 233 -5 226 2  curveto
206 21 194 44 189 72  curveto
184 100 182 127 182 153  curveto
182 187 183 224 187 264  curveto
190 304 195 351 203 407  curveto
113 407 lineto
97 407 82 398 67 381  curveto
52 363 39 340 28 311  curveto
10 311 lineto
19 349 29 379 41 402  curveto
53 425 66 444 82 460  curveto
97 475 114 485 133 491  curveto
151 497 168 500 183 500  curveto
418 500 lineto
418 408 lineto
264 408 lineto
closepath
fill
		} def

	/u
		{
535 243 moveto
535 225 533 208 531 190  curveto
528 172 524 154 518 136  curveto
512 118 505 100 496 84  curveto
486 68 475 53 462 40  curveto
444 22 422 8 395 -2  curveto
368 -12 340 -18 311 -18  curveto
291 -18 271 -15 252 -10  curveto
233 -5 215 5 199 22  curveto
193 27 188 33 184 40  curveto
180 46 175 53 171 61  curveto
160 78 152 96 148 116  curveto
144 136 141 157 141 180  curveto
141 192 141 206 141 224  curveto
141 242 140 260 140 279  curveto
139 298 138 317 137 335  curveto
136 353 135 368 133 382  curveto
128 411 116 426 97 426  curveto
82 426 69 420 58 409  curveto
52 403 47 395 42 384  curveto
36 372 32 363 30 356  curveto
7 356 lineto
9 366 12 377 16 389  curveto
20 401 24 412 28 423  curveto
32 433 37 443 41 452  curveto
45 460 50 467 56 473  curveto
64 481 74 488 86 494  curveto
98 500 111 503 126 503  curveto
134 503 142 501 152 498  curveto
161 495 170 491 178 485  curveto
186 479 192 472 198 464  curveto
204 456 207 446 209 436  curveto
211 422 213 405 215 385  curveto
217 364 219 342 221 318  curveto
223 294 224 269 225 243  curveto
226 217 227 193 227 171  curveto
227 158 228 144 231 130  curveto
233 115 238 101 246 87  curveto
253 71 264 57 278 43  curveto
292 29 307 23 324 23  curveto
335 23 347 25 359 30  curveto
371 35 381 42 390 51  curveto
400 61 410 75 418 91  curveto
426 107 432 124 438 143  curveto
443 162 447 182 450 203  curveto
452 223 454 243 454 263  curveto
454 281 453 300 451 321  curveto
449 341 444 362 436 382  curveto
428 402 417 422 402 441  curveto
386 459 365 476 339 490  curveto
345 507 lineto
371 497 396 484 419 470  curveto
442 455 462 437 479 416  curveto
496 395 510 370 520 342  curveto
530 314 535 281 535 243  curveto
closepath
fill
		} def

	/v
		{
573 221 moveto
573 243 571 262 569 279  curveto
567 296 564 311 560 324  curveto
556 336 552 347 548 357  curveto
544 367 540 376 536 384  curveto
526 402 517 416 508 427  curveto
498 437 489 446 479 453  curveto
469 460 459 466 449 471  curveto
439 476 428 482 418 490  curveto
294 489 lineto
289 486 283 483 276 480  curveto
269 476 262 473 254 469  curveto
246 465 238 460 230 455  curveto
222 449 214 443 208 437  curveto
200 429 192 418 184 406  curveto
176 394 168 379 162 361  curveto
156 343 151 322 147 298  curveto
143 274 141 246 141 214  curveto
141 186 143 161 147 137  curveto
151 113 156 93 164 78  curveto
171 64 180 51 190 40  curveto
200 29 215 24 233 24  curveto
249 24 264 29 279 39  curveto
294 49 306 63 315 81  curveto
319 90 323 101 325 113  curveto
327 125 329 137 331 147  curveto
322 167 315 188 311 209  curveto
307 230 305 254 305 280  curveto
305 308 307 333 311 355  curveto
313 369 319 381 329 392  curveto
339 403 348 409 358 409  curveto
366 409 372 406 378 400  curveto
384 394 388 386 392 376  curveto
396 366 398 356 400 344  curveto
402 332 403 321 403 309  curveto
403 294 402 280 401 268  curveto
399 255 397 243 395 231  curveto
392 219 389 206 386 194  curveto
383 181 380 167 378 152  curveto
378 147 380 138 382 124  curveto
384 110 388 96 395 82  curveto
401 68 411 55 423 44  curveto
435 32 453 27 475 27  curveto
483 27 492 28 502 32  curveto
512 36 520 41 526 47  curveto
530 51 535 58 541 68  curveto
547 77 552 89 557 103  curveto
561 117 565 133 568 153  curveto
571 173 573 195 573 221  curveto
closepath
491 490 moveto
511 483 528 475 543 467  curveto
558 459 571 450 583 440  curveto
594 430 604 418 613 406  curveto
621 393 629 379 637 365  curveto
648 341 656 317 661 291  curveto
666 265 669 240 669 218  curveto
669 193 666 168 661 143  curveto
655 118 648 96 638 76  curveto
629 58 618 44 606 32  curveto
593 20 580 11 566 4  curveto
552 -3 539 -8 525 -12  curveto
511 -15 498 -17 487 -17  curveto
469 -17 452 -13 435 -6  curveto
417 1 403 10 392 22  curveto
385 28 379 37 373 48  curveto
367 58 361 69 356 80  curveto
345 60 334 44 322 32  curveto
310 19 297 9 285 2  curveto
272 -5 260 -10 248 -13  curveto
236 -16 226 -18 216 -18  curveto
196 -18 176 -14 157 -6  curveto
137 1 121 12 107 26  curveto
81 51 63 80 52 113  curveto
40 145 35 184 35 228  curveto
35 242 36 259 38 277  curveto
40 295 44 313 49 331  curveto
54 349 61 366 70 383  curveto
78 400 89 415 101 427  curveto
112 438 125 448 139 458  curveto
153 468 166 477 180 487  curveto
158 485 140 484 127 482  curveto
113 480 101 478 91 475  curveto
81 471 71 467 62 461  curveto
52 455 41 447 28 437  curveto
12 436 lineto
18 455 27 473 38 490  curveto
48 506 60 521 72 534  curveto
84 546 98 556 112 564  curveto
126 571 140 575 154 575  curveto
670 583 lineto
671 495 lineto
491 490 lineto
closepath
fill
		} def

	/w
		{
683 216 moveto
683 187 680 162 675 142  curveto
669 121 662 102 653 84  curveto
637 52 616 27 590 9  curveto
564 -8 536 -17 505 -17  curveto
495 -17 486 -16 476 -14  curveto
466 -12 457 -9 448 -4  curveto
428 5 412 16 399 30  curveto
386 44 374 61 363 82  curveto
350 57 336 38 321 25  curveto
305 12 291 2 278 -4  curveto
267 -9 258 -12 251 -14  curveto
244 -16 234 -17 222 -17  curveto
194 -17 168 -10 146 2  curveto
124 15 105 33 90 55  curveto
74 77 62 102 54 130  curveto
46 158 42 188 42 220  curveto
42 232 42 244 44 258  curveto
45 271 47 284 49 298  curveto
51 312 55 325 59 338  curveto
63 350 67 362 73 373  curveto
84 395 99 416 117 436  curveto
135 455 154 470 176 481  curveto
192 489 210 494 231 496  curveto
252 498 274 500 297 500  curveto
297 483 lineto
280 477 266 471 254 465  curveto
242 459 231 452 222 445  curveto
213 438 205 430 198 421  curveto
191 411 184 400 178 388  curveto
169 370 161 349 155 323  curveto
148 297 145 265 145 227  curveto
145 215 145 203 146 189  curveto
147 175 149 162 151 148  curveto
153 134 155 121 159 109  curveto
162 96 166 85 171 77  curveto
178 61 187 49 199 41  curveto
210 32 224 28 240 28  curveto
256 28 271 32 285 41  curveto
299 50 310 62 318 78  curveto
323 87 327 98 330 110  curveto
333 122 336 135 339 151  curveto
334 165 330 178 326 190  curveto
322 201 319 212 317 222  curveto
315 232 313 243 312 254  curveto
311 264 311 276 311 290  curveto
311 305 311 320 313 335  curveto
315 349 318 362 322 374  curveto
326 386 331 395 338 402  curveto
344 409 353 413 363 413  curveto
373 413 381 409 388 402  curveto
394 395 400 386 404 375  curveto
408 363 410 350 412 336  curveto
414 322 415 307 415 293  curveto
415 279 414 267 413 256  curveto
412 245 410 234 408 223  curveto
406 212 403 201 399 189  curveto
395 177 391 165 387 151  curveto
389 136 392 121 396 107  curveto
400 92 406 79 414 67  curveto
421 55 431 46 443 39  curveto
455 31 471 28 489 28  curveto
501 28 512 31 524 39  curveto
536 47 546 59 554 75  curveto
563 93 570 115 574 143  curveto
578 170 581 199 581 231  curveto
581 283 574 326 560 360  curveto
546 394 531 419 517 434  curveto
504 446 489 457 471 465  curveto
453 473 439 479 429 483  curveto
429 500 lineto
453 500 473 499 490 497  curveto
507 495 522 491 535 487  curveto
548 482 560 476 571 468  curveto
582 460 594 450 606 438  curveto
630 414 648 384 662 350  curveto
676 315 683 270 683 216  curveto
closepath
fill
		} def

	/x
		{
469 -35 moveto
469 -48 467 -63 464 -80  curveto
460 -96 455 -112 448 -126  curveto
430 -160 410 -185 386 -201  curveto
362 -217 337 -225 313 -225  curveto
309 -225 302 -224 293 -223  curveto
283 -222 274 -220 264 -216  curveto
254 -212 246 -207 239 -199  curveto
231 -191 228 -181 228 -168  curveto
228 -160 229 -153 232 -148  curveto
235 -143 239 -139 243 -136  curveto
247 -133 252 -131 257 -130  curveto
261 -129 265 -129 269 -129  curveto
273 -129 279 -129 287 -130  curveto
294 -131 302 -132 310 -133  curveto
318 -134 326 -135 334 -136  curveto
342 -137 350 -138 358 -138  curveto
370 -138 381 -135 391 -129  curveto
401 -123 408 -115 413 -106  curveto
417 -96 420 -85 420 -72  curveto
420 -64 419 -56 417 -48  curveto
415 -40 411 -32 406 -26  curveto
401 -19 394 -14 385 -10  curveto
375 -6 364 -4 350 -4  curveto
342 -4 328 -4 306 -5  curveto
284 -5 259 -6 231 -6  curveto
199 -6 171 -1 146 8  curveto
121 18 102 29 89 43  curveto
69 62 54 86 43 114  curveto
32 142 27 169 27 196  curveto
27 218 30 240 37 262  curveto
44 284 53 306 65 330  curveto
74 348 87 364 103 378  curveto
119 392 136 406 153 420  curveto
137 437 125 454 115 470  curveto
105 486 100 503 100 523  curveto
100 545 103 564 109 579  curveto
115 594 124 607 137 618  curveto
128 620 119 623 111 627  curveto
103 631 95 635 89 641  curveto
82 646 76 653 72 661  curveto
68 669 66 679 66 691  curveto
66 703 69 713 75 722  curveto
81 731 88 739 97 745  curveto
106 751 116 756 126 760  curveto
136 763 145 765 153 765  curveto
156 765 159 765 162 765  curveto
165 765 168 764 171 764  curveto
173 748 lineto
151 740 137 732 129 724  curveto
121 716 117 706 117 695  curveto
117 685 122 675 132 666  curveto
142 657 155 652 171 652  curveto
197 673 222 692 244 708  curveto
266 724 290 732 318 732  curveto
332 732 342 729 349 724  curveto
355 718 359 711 359 702  curveto
359 688 353 676 343 666  curveto
333 656 320 647 304 639  curveto
294 634 285 630 277 627  curveto
269 624 260 622 252 620  curveto
243 618 234 617 225 616  curveto
215 615 205 614 193 614  curveto
171 599 156 583 148 567  curveto
139 550 135 533 135 517  curveto
135 505 138 493 146 482  curveto
154 470 168 456 190 440  curveto
217 453 242 463 265 471  curveto
288 479 312 483 338 483  curveto
358 483 375 480 389 475  curveto
402 470 409 461 409 448  curveto
409 438 405 430 399 424  curveto
392 417 383 411 371 407  curveto
359 403 346 399 331 397  curveto
315 395 299 394 283 394  curveto
267 394 254 395 242 397  curveto
230 399 216 402 202 406  curveto
188 399 175 391 162 381  curveto
148 371 137 362 127 352  curveto
111 336 98 315 88 291  curveto
78 267 73 244 73 223  curveto
73 212 74 202 77 192  curveto
79 182 83 173 88 164  curveto
96 146 109 131 127 118  curveto
144 104 170 97 204 96  curveto
347 91 lineto
369 90 387 86 403 78  curveto
418 70 431 60 441 48  curveto
451 36 458 22 462 8  curveto
466 -6 469 -21 469 -35  curveto
closepath
fill
		} def

	/y
		{
701 470 moveto
687 467 676 464 668 462  curveto
659 459 652 456 647 453  curveto
642 450 638 447 635 444  curveto
632 440 630 436 628 432  curveto
622 422 619 404 619 380  curveto
619 355 617 324 613 286  curveto
611 274 610 260 608 245  curveto
606 230 604 215 601 200  curveto
598 185 595 170 591 156  curveto
587 141 582 128 577 118  curveto
560 84 536 56 505 32  curveto
473 8 434 -7 388 -17  curveto
388 -228 lineto
325 -228 lineto
325 -17 lineto
234 2 171 47 136 118  curveto
128 132 122 149 118 168  curveto
113 187 109 207 106 227  curveto
103 247 101 268 99 289  curveto
97 310 96 330 95 348  curveto
93 368 92 386 92 400  curveto
91 414 89 425 85 433  curveto
80 442 73 449 63 454  curveto
53 459 36 464 12 470  curveto
12 488 lineto
24 493 35 496 47 498  curveto
58 499 69 500 79 500  curveto
105 500 127 493 144 479  curveto
160 465 173 449 182 432  curveto
186 423 189 411 193 397  curveto
196 383 199 367 201 351  curveto
203 334 206 317 208 299  curveto
210 281 212 265 214 250  curveto
218 210 222 177 224 151  curveto
226 125 230 105 238 90  curveto
245 74 256 60 271 48  curveto
285 36 303 27 325 22  curveto
325 487 lineto
388 487 lineto
388 22 lineto
411 28 429 37 443 49  curveto
456 61 466 74 474 88  curveto
482 104 487 123 489 147  curveto
491 171 494 201 498 237  curveto
500 253 502 270 504 289  curveto
506 308 508 327 511 345  curveto
513 363 516 380 520 396  curveto
523 411 527 423 531 432  curveto
541 451 554 467 572 480  curveto
589 493 610 500 634 500  curveto
644 500 654 499 666 498  curveto
677 496 689 493 701 488  curveto
701 470 lineto
701 470 lineto
closepath
fill
		} def

	/z
		{
468 -51 moveto
468 -64 465 -80 461 -100  curveto
456 -120 447 -139 435 -157  curveto
422 -175 405 -191 384 -205  curveto
362 -218 335 -225 303 -225  curveto
293 -225 284 -224 276 -223  curveto
267 -221 259 -219 252 -216  curveto
242 -211 234 -205 227 -197  curveto
220 -189 217 -181 217 -173  curveto
217 -161 221 -150 230 -140  curveto
239 -130 252 -125 270 -125  curveto
276 -125 283 -126 291 -128  curveto
299 -130 308 -132 317 -134  curveto
325 -136 333 -138 341 -140  curveto
349 -142 355 -143 360 -143  curveto
380 -143 396 -134 408 -118  curveto
419 -102 425 -84 425 -66  curveto
425 -50 419 -35 407 -23  curveto
395 -10 376 -4 351 -4  curveto
339 -4 325 -5 308 -7  curveto
291 -9 270 -11 245 -11  curveto
226 -11 208 -7 191 -1  curveto
174 5 159 13 145 23  curveto
131 33 119 43 109 54  curveto
99 65 92 75 88 84  curveto
83 93 79 104 75 116  curveto
71 128 68 141 66 154  curveto
64 166 62 178 61 190  curveto
60 202 60 212 60 220  curveto
60 240 60 258 62 275  curveto
63 291 65 307 68 322  curveto
71 337 75 352 79 366  curveto
83 380 88 395 94 411  curveto
100 430 107 447 114 462  curveto
120 476 128 490 136 503  curveto
144 516 152 529 161 543  curveto
170 556 181 571 193 587  curveto
185 589 176 592 165 596  curveto
154 600 145 603 138 607  curveto
126 612 117 619 111 629  curveto
105 639 102 650 102 664  curveto
102 676 104 687 110 698  curveto
116 708 124 718 134 727  curveto
144 735 155 742 169 747  curveto
182 752 196 755 212 756  curveto
214 738 lineto
194 730 181 720 173 709  curveto
165 698 161 687 161 676  curveto
161 660 165 647 175 636  curveto
185 625 199 618 219 614  curveto
232 626 244 638 255 648  curveto
265 658 276 668 286 676  curveto
296 684 307 691 317 698  curveto
327 704 339 711 352 717  curveto
362 722 370 725 376 727  curveto
382 729 388 730 395 730  curveto
404 730 413 727 421 722  curveto
429 717 433 709 433 697  curveto
433 683 425 669 411 654  curveto
396 638 379 626 359 616  curveto
351 612 344 608 338 605  curveto
331 602 324 599 316 597  curveto
308 595 299 593 289 591  curveto
279 589 268 587 254 586  curveto
238 572 221 552 203 528  curveto
185 504 169 478 155 450  curveto
141 422 129 391 121 359  curveto
112 327 108 292 108 254  curveto
108 233 108 216 110 203  curveto
112 190 116 178 122 166  curveto
133 142 148 124 168 112  curveto
187 100 206 94 226 94  curveto
234 94 244 94 258 95  curveto
272 95 285 96 299 96  curveto
329 96 354 92 376 84  curveto
398 76 416 65 431 51  curveto
445 37 454 20 460 2  curveto
465 -15 468 -33 468 -51  curveto
closepath
fill
		} def

	/braceleft
		{
279 -183 moveto
249 -183 226 -176 210 -163  curveto
194 -150 186 -124 186 -84  curveto
186 121 lineto
186 143 182 161 175 175  curveto
168 188 159 198 147 206  curveto
135 213 122 218 107 222  curveto
91 226 75 229 58 232  curveto
58 258 lineto
76 260 92 263 108 267  curveto
124 271 137 276 149 284  curveto
160 292 169 302 176 316  curveto
182 329 186 347 186 370  curveto
186 571 lineto
186 591 188 608 192 622  curveto
196 635 202 645 210 653  curveto
218 661 228 666 240 669  curveto
252 671 266 673 282 673  curveto
397 673 lineto
397 648 lineto
346 648 lineto
320 648 300 643 284 633  curveto
268 623 261 603 261 574  curveto
261 370 lineto
261 344 254 324 242 309  curveto
229 294 214 282 198 273  curveto
182 264 165 257 149 253  curveto
133 249 121 245 114 242  curveto
124 239 137 236 154 232  curveto
170 228 186 221 202 213  curveto
218 205 231 193 243 179  curveto
255 164 261 144 261 120  curveto
261 -83 lineto
261 -112 268 -132 284 -142  curveto
299 -152 319 -158 345 -158  curveto
397 -158 lineto
397 -183 lineto
279 -183 lineto
closepath
fill
		} def

	/bar
		{
65 -177 moveto
65 673 lineto
135 673 lineto
135 -177 lineto
65 -177 lineto
closepath
fill
		} def

	/braceright
		{
418 232 moveto
400 229 384 226 369 222  curveto
353 218 340 213 328 206  curveto
316 198 307 188 300 175  curveto
293 161 290 143 290 121  curveto
290 -84 lineto
290 -124 282 -150 266 -163  curveto
250 -176 227 -183 197 -183  curveto
79 -183 lineto
79 -158 lineto
131 -158 lineto
156 -158 176 -152 192 -142  curveto
207 -132 215 -112 215 -83  curveto
215 120 lineto
215 144 220 164 232 179  curveto
244 193 257 205 273 213  curveto
289 221 305 228 322 232  curveto
338 236 352 239 362 242  curveto
354 245 342 249 326 253  curveto
310 257 293 264 277 273  curveto
261 282 246 294 234 309  curveto
221 324 215 344 215 370  curveto
215 574 lineto
215 603 207 623 191 633  curveto
175 643 155 648 130 648  curveto
79 648 lineto
79 673 lineto
194 673 lineto
210 673 224 671 236 669  curveto
248 666 258 661 266 653  curveto
274 645 280 635 284 622  curveto
288 608 290 591 290 571  curveto
290 370 lineto
290 347 293 329 300 316  curveto
306 302 315 292 327 284  curveto
338 276 351 271 367 267  curveto
383 263 400 260 418 258  curveto
418 232 lineto
418 232 lineto
closepath
fill
		} def

	/asciitilde
		{
529 283 moveto
516 259 498 241 475 227  curveto
452 213 426 206 396 206  curveto
374 206 353 208 333 214  curveto
313 219 293 225 274 232  curveto
254 238 235 244 217 250  curveto
198 255 179 258 160 258  curveto
148 258 137 256 128 254  curveto
119 252 111 248 103 244  curveto
95 240 88 234 81 227  curveto
74 220 66 212 58 203  curveto
17 228 lineto
29 246 41 260 54 270  curveto
67 280 80 288 93 294  curveto
106 299 119 302 132 304  curveto
144 305 156 306 167 306  curveto
187 306 207 303 225 297  curveto
243 291 262 285 280 279  curveto
298 273 315 267 333 261  curveto
351 255 370 253 390 253  curveto
412 253 431 257 447 266  curveto
463 275 478 289 492 307  curveto
529 283 lineto
529 283 lineto
closepath
fill
		} def

	/exclamdown
		{
610 587 moveto
610 572 608 559 604 549  curveto
600 538 594 529 588 522  curveto
581 515 574 510 566 506  curveto
558 502 551 501 545 501  curveto
537 501 531 502 525 506  curveto
519 510 514 514 510 519  curveto
506 524 502 530 500 536  curveto
498 542 497 547 497 552  curveto
497 562 498 570 502 576  curveto
506 582 510 587 515 592  curveto
519 596 523 601 527 605  curveto
531 609 533 615 533 622  curveto
533 630 528 635 518 639  curveto
508 642 499 644 490 644  curveto
475 644 458 636 438 622  curveto
418 607 401 586 387 558  curveto
379 543 373 528 368 512  curveto
362 496 358 478 354 458  curveto
350 438 348 415 346 391  curveto
344 366 344 338 344 307  curveto
344 297 344 282 344 264  curveto
344 245 344 225 344 203  curveto
344 181 345 160 345 139  curveto
345 117 345 99 345 85  curveto
345 59 351 41 365 32  curveto
378 22 401 18 435 18  curveto
435 0 lineto
151 0 lineto
151 18 lineto
185 18 209 23 222 33  curveto
234 43 241 60 241 84  curveto
241 105 241 125 241 143  curveto
241 161 240 178 240 196  curveto
240 214 240 232 240 251  curveto
240 269 240 290 240 313  curveto
240 325 239 340 238 359  curveto
236 378 234 398 231 419  curveto
228 439 224 460 219 480  curveto
214 500 208 517 201 532  curveto
190 553 177 572 161 589  curveto
145 606 124 619 99 627  curveto
15 654 lineto
3 658 -2 662 -2 667  curveto
-2 667 -1 669 -1 671  curveto
0 673 1 674 5 676  curveto
8 678 13 679 21 681  curveto
29 682 39 683 53 683  curveto
88 683 122 676 155 663  curveto
187 649 218 628 247 600  curveto
260 586 272 567 284 541  curveto
295 515 306 481 318 438  curveto
322 455 327 474 332 494  curveto
336 514 344 536 356 560  curveto
364 576 373 591 383 606  curveto
393 621 404 634 418 646  curveto
431 658 446 667 463 674  curveto
479 681 499 685 521 685  curveto
532 685 543 682 553 676  curveto
563 670 574 662 584 652  curveto
592 644 598 634 603 624  curveto
607 613 610 601 610 587  curveto
closepath
fill
		} def

	/cent
		{
229 679 moveto
229 675 226 671 222 665  curveto
67 469 lineto
65 467 63 464 60 462  curveto
57 459 54 458 51 458  curveto
45 458 39 459 34 463  curveto
29 467 27 471 27 477  curveto
27 481 29 487 33 495  curveto
134 720 lineto
136 724 138 727 142 730  curveto
145 733 152 735 164 735  curveto
172 735 180 733 188 731  curveto
196 729 203 725 209 719  curveto
213 714 217 708 222 700  curveto
226 692 229 685 229 679  curveto
closepath
fill
		} def

	/sterling
		{
29 0 moveto
29 55 lineto
526 55 lineto
526 0 lineto
29 0 lineto
closepath
29 347 moveto
29 409 lineto
526 639 lineto
526 577 lineto
93 378 lineto
526 179 lineto
526 117 lineto
29 347 lineto
closepath
fill
		} def

	/fraction
		{
fill
		} def

	/yen
		{
324 264 moveto
296 287 270 307 244 325  curveto
218 343 192 352 166 352  curveto
151 352 138 349 127 343  curveto
115 337 106 329 99 320  curveto
91 310 86 300 82 290  curveto
78 279 76 269 76 261  curveto
76 235 85 214 103 198  curveto
121 181 144 173 170 173  curveto
181 173 192 174 202 177  curveto
212 179 223 184 237 191  curveto
252 198 267 209 281 223  curveto
295 237 310 250 324 264  curveto
closepath
638 261 moveto
638 271 635 282 631 293  curveto
627 303 621 313 613 322  curveto
605 330 596 337 585 343  curveto
574 349 562 352 550 352  curveto
534 352 519 349 505 343  curveto
491 337 477 330 464 322  curveto
451 313 438 303 426 293  curveto
414 283 402 273 390 264  curveto
407 246 423 231 437 219  curveto
451 206 466 196 480 189  curveto
489 184 499 180 510 177  curveto
520 174 531 173 543 173  curveto
569 173 591 181 610 198  curveto
628 214 638 235 638 261  curveto
closepath
688 267 moveto
688 248 684 230 677 213  curveto
670 195 661 180 649 167  curveto
637 154 622 144 606 136  curveto
590 128 572 125 554 125  curveto
540 125 525 126 511 129  curveto
496 132 481 138 465 146  curveto
449 154 432 164 414 178  curveto
396 192 377 209 357 231  curveto
344 217 333 206 323 197  curveto
313 188 303 180 295 174  curveto
286 168 278 162 270 158  curveto
262 153 255 149 247 145  curveto
235 139 221 134 205 130  curveto
189 126 174 124 161 124  curveto
141 124 123 128 107 136  curveto
91 144 77 154 65 168  curveto
53 181 43 196 36 213  curveto
29 229 26 247 26 265  curveto
26 285 29 303 37 320  curveto
45 336 55 351 68 364  curveto
80 376 95 386 112 393  curveto
129 400 147 404 166 404  curveto
194 404 222 395 252 379  curveto
282 363 317 335 357 297  curveto
369 307 379 317 389 326  curveto
399 334 408 342 417 349  curveto
426 356 435 362 444 368  curveto
452 374 462 379 473 385  curveto
498 397 523 404 548 404  curveto
568 404 586 400 604 392  curveto
621 384 636 374 648 362  curveto
660 349 670 334 677 318  curveto
684 302 688 285 688 267  curveto
closepath
fill
		} def

	/florin
		{
fill
		} def

	/section
		{
660 179 moveto
660 141 650 112 632 91  curveto
613 69 588 59 556 59  curveto
537 59 519 63 503 71  curveto
487 79 473 90 463 102  curveto
453 112 444 121 436 130  curveto
428 138 420 143 414 143  curveto
408 143 403 138 401 129  curveto
399 120 398 108 398 93  curveto
398 79 398 68 399 58  curveto
400 48 402 38 405 29  curveto
408 20 412 11 417 3  curveto
422 -5 429 -15 437 -26  curveto
309 -26 lineto
317 -15 323 -5 328 3  curveto
333 11 337 20 340 29  curveto
343 38 345 48 346 58  curveto
347 68 348 79 348 93  curveto
348 106 347 117 345 127  curveto
343 137 340 142 334 142  curveto
328 142 320 137 310 129  curveto
300 120 292 111 285 103  curveto
275 91 262 81 246 72  curveto
229 63 210 59 190 59  curveto
160 59 135 69 115 89  curveto
95 109 86 139 86 177  curveto
86 195 88 215 94 235  curveto
99 255 107 270 118 281  curveto
126 289 136 296 149 302  curveto
161 308 176 311 194 311  curveto
210 311 224 308 236 304  curveto
248 299 259 294 269 288  curveto
279 282 288 276 296 272  curveto
304 267 313 265 321 265  curveto
326 265 330 266 333 268  curveto
335 270 337 274 337 282  curveto
337 288 335 293 331 297  curveto
327 301 323 304 318 308  curveto
312 312 307 315 301 319  curveto
295 323 289 327 284 333  curveto
274 343 264 356 256 372  curveto
248 388 244 404 244 422  curveto
244 434 246 447 251 461  curveto
256 474 264 486 275 497  curveto
285 507 299 516 315 523  curveto
331 529 351 533 374 533  curveto
396 533 416 529 432 522  curveto
448 515 462 506 472 495  curveto
482 484 490 472 495 459  curveto
499 446 502 434 502 423  curveto
502 413 500 403 498 394  curveto
495 385 492 377 488 369  curveto
484 361 479 355 475 349  curveto
471 343 467 338 464 335  curveto
457 328 450 322 444 318  curveto
437 314 431 310 426 307  curveto
421 303 417 300 414 296  curveto
410 292 409 286 409 280  curveto
409 270 414 265 425 265  curveto
433 265 441 267 450 272  curveto
458 276 467 282 477 288  curveto
487 294 498 299 510 304  curveto
522 308 535 311 551 311  curveto
567 311 582 308 595 302  curveto
608 296 619 289 628 281  curveto
638 270 646 255 652 235  curveto
657 215 660 196 660 179  curveto
closepath
fill
		} def

	/currency
		{
-124 -12 moveto
-180 -12 lineto
284 677 lineto
340 677 lineto
-124 -12 lineto
closepath
fill
		} def

	/quotesingle
		{
414 253 moveto
414 212 406 175 390 142  curveto
374 108 354 80 331 57  curveto
305 31 276 13 243 1  curveto
210 -11 176 -17 140 -17  curveto
123 -17 108 -15 94 -12  curveto
80 -9 64 -4 48 3  curveto
48 43 lineto
59 39 70 36 80 34  curveto
90 32 103 31 119 31  curveto
139 31 160 34 182 40  curveto
204 46 225 57 245 71  curveto
265 85 281 104 295 128  curveto
308 151 316 179 318 213  curveto
110 213 lineto
110 268 lineto
320 268 lineto
318 291 312 313 302 335  curveto
292 357 278 376 261 393  curveto
243 410 223 424 201 434  curveto
179 444 155 449 131 449  curveto
117 449 106 448 99 448  curveto
92 447 84 446 76 445  curveto
76 488 lineto
92 491 107 494 123 496  curveto
139 498 156 500 174 500  curveto
184 500 196 499 210 497  curveto
224 495 238 492 253 488  curveto
268 483 283 476 299 468  curveto
314 459 329 447 344 433  curveto
352 425 360 415 368 403  curveto
376 391 383 378 390 363  curveto
397 347 403 330 407 312  curveto
411 293 414 273 414 253  curveto
closepath
fill
		} def

	/quotedblleft
		{
fill
		} def

	/guillemotleft
		{
1024 248 moveto
984 212 944 174 904 132  curveto
864 90 821 41 775 -15  curveto
738 17 lineto
756 43 773 66 789 86  curveto
805 106 820 125 834 141  curveto
848 157 861 172 873 185  curveto
885 198 897 210 909 222  curveto
139 222 lineto
161 200 179 180 195 163  curveto
210 146 224 130 236 115  curveto
248 99 260 84 272 68  curveto
283 52 296 35 310 17  curveto
273 -15 lineto
241 23 204 64 164 110  curveto
124 156 77 202 24 248  curveto
56 276 84 303 108 327  curveto
132 351 153 373 172 394  curveto
191 415 209 435 225 454  curveto
241 473 257 492 273 511  curveto
310 479 lineto
296 458 282 440 270 424  curveto
258 408 245 392 233 377  curveto
220 361 206 345 191 329  curveto
176 313 159 294 139 274  curveto
909 274 lineto
897 286 885 299 873 311  curveto
861 323 848 337 834 353  curveto
820 369 806 387 790 407  curveto
774 427 757 451 738 479  curveto
775 511 lineto
795 486 815 462 834 440  curveto
853 418 872 396 892 375  curveto
912 354 932 333 954 312  curveto
975 291 998 270 1024 248  curveto
closepath
fill
		} def

	/guilsinglleft
		{
fill
		} def

	/guilsinglright
		{
fill
		} def

	/fi
		{
fill
		} def

	/fl
		{
fill
		} def

	/endash
		{
fill
		} def

	/dagger
		{
fill
		} def

	/daggerdbl
		{
fill
		} def

	/periodcentered
		{
411 293 moveto
411 267 406 244 397 222  curveto
387 200 374 181 358 165  curveto
342 149 323 136 301 127  curveto
279 117 255 113 231 113  curveto
205 113 182 117 160 127  curveto
138 136 119 149 103 165  curveto
87 181 74 200 65 222  curveto
55 244 51 267 51 293  curveto
51 317 55 341 65 363  curveto
74 385 87 404 103 420  curveto
119 436 138 449 160 459  curveto
182 468 205 473 231 473  curveto
255 473 279 468 301 459  curveto
323 449 342 436 358 420  curveto
374 404 387 385 397 363  curveto
406 341 411 317 411 293  curveto
closepath
fill
		} def

	/paragraph
		{
366 299 moveto
352 316 338 331 322 344  curveto
306 356 285 363 261 363  curveto
233 363 210 354 190 338  curveto
170 322 153 300 140 273  curveto
128 249 121 227 117 206  curveto
113 185 112 164 112 144  curveto
112 127 113 112 115 98  curveto
117 84 121 71 127 60  curveto
134 44 144 32 158 23  curveto
171 13 186 9 204 9  curveto
221 9 240 15 261 29  curveto
281 42 299 63 313 91  curveto
325 115 335 145 344 181  curveto
353 217 360 256 366 299  curveto
closepath
462 395 moveto
462 379 461 359 459 336  curveto
457 313 453 289 448 263  curveto
443 237 437 212 429 186  curveto
421 160 412 136 402 114  curveto
393 96 385 81 377 69  curveto
369 56 360 45 350 35  curveto
335 20 316 7 292 -4  curveto
268 -15 243 -21 215 -21  curveto
196 -21 178 -18 161 -13  curveto
144 -7 128 0 114 9  curveto
99 18 86 29 75 41  curveto
63 53 54 67 48 81  curveto
33 110 26 141 26 174  curveto
26 204 32 235 44 267  curveto
56 298 74 325 98 349  curveto
114 365 132 378 151 388  curveto
169 397 192 402 219 402  curveto
239 402 257 399 273 395  curveto
288 390 301 384 313 377  curveto
325 370 335 363 345 355  curveto
355 347 364 340 374 334  curveto
377 351 380 370 382 391  curveto
384 412 385 432 385 451  curveto
385 462 384 475 382 491  curveto
380 506 377 521 374 537  curveto
370 553 366 567 362 581  curveto
358 595 354 606 350 615  curveto
344 626 336 638 325 652  curveto
313 666 299 677 281 687  curveto
271 691 260 695 248 697  curveto
236 699 223 700 210 700  curveto
188 700 170 696 154 689  curveto
138 681 122 674 104 667  curveto
65 717 lineto
97 730 124 738 147 741  curveto
169 743 186 745 196 745  curveto
239 745 280 733 320 709  curveto
360 685 394 646 422 591  curveto
428 579 433 566 438 550  curveto
442 534 446 518 450 501  curveto
454 483 457 465 459 447  curveto
461 429 462 411 462 395  curveto
closepath
fill
		} def

	/bullet
		{
fill
		} def

	/quotesinglbase
		{
fill
		} def

	/quotedblbase
		{
fill
		} def

	/quotedblright
		{
fill
		} def

	/guillemotright
		{
527 219 moveto
519 205 509 193 498 183  curveto
486 173 474 164 462 158  curveto
449 152 436 147 424 144  curveto
411 141 399 140 387 140  curveto
373 140 359 142 345 146  curveto
206 186 lineto
195 189 187 191 181 192  curveto
175 193 166 194 156 194  curveto
131 194 112 189 98 179  curveto
84 169 71 154 57 135  curveto
14 162 lineto
32 185 52 204 76 219  curveto
99 233 127 241 160 241  curveto
168 241 177 240 187 238  curveto
197 236 205 235 213 233  curveto
356 193 lineto
362 191 366 190 370 190  curveto
373 189 378 189 385 189  curveto
405 189 425 193 444 203  curveto
463 213 478 226 490 243  curveto
527 219 lineto
527 219 lineto
closepath
527 370 moveto
519 356 509 344 498 334  curveto
486 324 474 315 462 309  curveto
449 303 436 298 424 295  curveto
411 292 399 291 387 291  curveto
373 291 359 293 345 297  curveto
206 337 lineto
195 340 187 342 181 343  curveto
175 344 166 345 156 345  curveto
131 345 112 340 98 330  curveto
84 320 71 305 57 286  curveto
14 313 lineto
32 336 52 355 76 370  curveto
99 384 127 392 160 392  curveto
168 392 177 391 187 389  curveto
197 387 205 386 213 384  curveto
356 344 lineto
362 342 366 341 370 341  curveto
373 340 378 340 385 340  curveto
405 340 425 344 444 354  curveto
463 364 478 377 490 394  curveto
527 370 lineto
527 370 lineto
closepath
fill
		} def

	/ellipsis
		{
fill
		} def

	/perthousand
		{
fill
		} def

	/questiondown
		{
181 68 moveto
181 -16 lineto
15 96 lineto
181 207 lineto
181 123 lineto
547 123 lineto
547 629 lineto
602 629 lineto
602 68 lineto
181 68 lineto
closepath
fill
		} def

	/grave
		{
480 881 moveto
480 917 lineto
1090 917 lineto
1090 881 lineto
480 881 lineto
closepath
fill
		} def

	/acute
		{
fill
		} def

	/circumflex
		{
fill
		} def

	/tilde
		{
fill
		} def

	/macron
		{
571 229 moveto
523 189 476 147 432 104  curveto
388 60 346 18 308 -22  curveto
267 20 224 63 180 107  curveto
135 150 90 191 45 229  curveto
80 264 lineto
92 253 108 240 126 226  curveto
144 211 163 196 182 180  curveto
201 164 219 148 237 133  curveto
254 117 268 104 280 93  curveto
280 888 lineto
336 888 lineto
336 93 lineto
346 104 360 117 378 133  curveto
395 148 413 164 432 180  curveto
451 196 470 211 488 226  curveto
506 240 522 253 536 264  curveto
571 229 lineto
571 229 lineto
closepath
fill
		} def

	/breve
		{
fill
		} def

	/dotaccent
		{
fill
		} def

	/dieresis
		{
374 -36 moveto
142 257 lineto
374 550 lineto
600 257 lineto
374 -36 lineto
closepath
fill
		} def

	/ring
		{
fill
		} def

	/cedilla
		{
324 127 moveto
324 111 318 98 307 87  curveto
296 76 283 71 268 71  curveto
252 71 239 76 228 87  curveto
217 98 212 111 212 127  curveto
212 142 217 155 228 166  curveto
239 177 252 183 268 183  curveto
283 183 296 177 307 166  curveto
318 155 324 142 324 127  curveto
closepath
10 236 moveto
10 291 lineto
536 291 lineto
536 236 lineto
10 236 lineto
closepath
324 400 moveto
324 384 318 371 307 360  curveto
296 349 283 344 268 344  curveto
252 344 239 349 228 360  curveto
217 371 212 384 212 400  curveto
212 415 217 428 228 439  curveto
239 450 252 456 268 456  curveto
283 456 296 450 307 439  curveto
318 428 324 415 324 400  curveto
closepath
fill
		} def

	/hungarumlaut
		{
fill
		} def

	/ogonek
		{
fill
		} def

	/caron
		{
fill
		} def

	/emdash
		{
fill
		} def

	/AE
		{
726 350 moveto
726 388 719 425 706 460  curveto
692 494 674 526 650 554  curveto
212 112 lineto
239 88 270 70 304 57  curveto
338 44 374 38 414 38  curveto
456 38 497 46 535 62  curveto
573 78 606 101 634 129  curveto
662 157 685 190 701 228  curveto
717 266 726 306 726 350  curveto
closepath
614 589 moveto
587 611 556 629 522 642  curveto
488 655 452 662 414 662  curveto
370 662 330 653 292 637  curveto
254 621 221 598 193 570  curveto
165 542 142 509 126 471  curveto
110 433 102 392 102 350  curveto
102 312 108 276 121 242  curveto
133 208 151 178 175 150  curveto
614 589 lineto
614 589 lineto
closepath
781 350 moveto
781 299 771 251 752 207  curveto
732 162 706 123 673 90  curveto
640 57 601 31 557 12  curveto
512 -7 464 -17 414 -17  curveto
367 -17 323 -9 283 7  curveto
242 23 205 45 173 74  curveto
76 -24 lineto
39 13 lineto
136 111 lineto
108 143 86 180 70 220  curveto
54 260 47 304 47 350  curveto
47 400 56 448 76 493  curveto
95 537 121 576 155 609  curveto
188 642 227 668 271 688  curveto
315 707 363 717 414 717  curveto
464 717 508 708 548 692  curveto
587 675 622 654 654 628  curveto
744 719 lineto
780 684 lineto
689 593 lineto
717 561 740 524 756 482  curveto
772 440 781 396 781 350  curveto
closepath
fill
		} def

	/ordfeminine
		{
629 134 moveto
629 121 627 108 623 95  curveto
619 81 614 69 606 59  curveto
598 48 588 39 576 32  curveto
564 25 549 22 533 22  curveto
513 22 497 27 486 39  curveto
474 50 465 63 458 77  curveto
451 91 445 103 441 115  curveto
436 126 430 132 422 132  curveto
416 132 410 127 405 118  curveto
400 109 398 95 398 76  curveto
398 57 400 38 406 20  curveto
411 1 421 -17 437 -36  curveto
305 -36 lineto
320 -17 330 1 336 20  curveto
341 38 344 57 344 76  curveto
344 95 341 109 336 118  curveto
331 127 326 132 320 132  curveto
312 132 305 126 301 115  curveto
296 103 290 91 283 77  curveto
276 63 267 50 256 39  curveto
244 27 229 22 209 22  curveto
192 22 178 25 166 32  curveto
154 39 144 48 136 59  curveto
128 69 122 81 118 95  curveto
114 108 113 121 113 134  curveto
113 147 114 160 118 174  curveto
122 188 126 200 132 212  curveto
137 222 147 238 163 258  curveto
178 278 197 302 219 331  curveto
241 359 265 392 291 428  curveto
317 464 343 504 371 548  curveto
397 504 424 464 450 428  curveto
476 392 501 359 523 331  curveto
545 302 563 278 579 258  curveto
594 238 604 222 610 212  curveto
615 200 619 188 623 174  curveto
627 160 629 147 629 134  curveto
closepath
fill
		} def

	/Lslash
		{
fill
		} def

	/Oslash
		{
625 0 moveto
625 233 lineto
15 233 lineto
15 288 lineto
680 288 lineto
680 0 lineto
625 0 lineto
closepath
fill
		} def

	/OE
		{
fill
		} def

	/ordmasculine
		{
14 82 moveto
14 137 lineto
538 137 lineto
538 82 lineto
14 82 lineto
closepath
14 235 moveto
14 290 lineto
538 290 lineto
538 235 lineto
14 235 lineto
closepath
14 388 moveto
14 443 lineto
538 443 lineto
538 388 lineto
14 388 lineto
closepath
fill
		} def

	/ae
		{
436 916 moveto
416 904 397 890 378 874  curveto
358 858 341 843 325 827  curveto
309 811 293 792 277 771  curveto
261 750 245 727 231 703  curveto
216 678 202 652 189 625  curveto
176 597 165 569 156 541  curveto
145 509 136 475 128 440  curveto
120 405 113 370 108 335  curveto
102 300 98 266 96 232  curveto
93 198 92 166 92 136  curveto
92 -293 lineto
40 -293 lineto
40 134 lineto
40 192 42 245 47 294  curveto
52 343 59 388 68 430  curveto
77 471 88 509 100 544  curveto
112 578 126 611 142 642  curveto
160 678 178 710 198 738  curveto
218 766 239 792 262 815  curveto
284 837 309 858 336 876  curveto
362 894 391 910 423 926  curveto
436 916 lineto
436 916 lineto
closepath
fill
		} def

	/dotlessi
		{
fill
		} def

	/lslash
		{
fill
		} def

	/oslash
		{
450 503 moveto
450 441 447 386 442 336  curveto
437 286 430 240 421 199  curveto
412 157 401 120 389 86  curveto
376 52 362 20 348 -9  curveto
326 -52 304 -89 282 -119  curveto
259 -149 236 -174 212 -196  curveto
188 -218 164 -236 140 -251  curveto
116 -266 91 -280 67 -293  curveto
54 -283 lineto
72 -271 91 -257 111 -242  curveto
131 -226 151 -208 171 -187  curveto
191 -166 210 -142 230 -114  curveto
250 -86 269 -54 288 -17  curveto
306 21 321 56 333 90  curveto
344 124 354 161 364 203  curveto
368 225 373 248 377 273  curveto
381 298 385 323 388 349  curveto
391 374 393 399 395 424  curveto
397 448 398 472 398 494  curveto
398 926 lineto
450 926 lineto
450 503 lineto
450 503 lineto
closepath
fill
		} def

	/oe
		{
fill
		} def

	/germandbls
		{
572 230 moveto
540 205 513 182 489 161  curveto
465 139 442 119 422 99  curveto
402 79 382 60 364 41  curveto
346 21 327 1 308 -19  curveto
268 23 228 65 187 105  curveto
146 145 98 186 44 230  curveto
77 271 lineto
175 194 lineto
175 890 lineto
228 890 lineto
228 146 lineto
308 65 lineto
388 146 lineto
388 890 lineto
441 890 lineto
441 194 lineto
539 271 lineto
572 230 lineto
572 230 lineto
closepath
fill
		} def

	/.notdef
		{
0 0 moveto
1000 0 lineto
1000 1000 lineto
0 1000 lineto
0 0 lineto
closepath
50 50 moveto
950 50 lineto
950 950 lineto
50 950 lineto
50 50 lineto
closepath
fill
		} def

	end				% close glyph dict. 
	currentdict			% actually put dict on the stack
	end			% close the dictionary now
	/MaplePi exch definefont pop
/MaplePi findfont 22.0 scalefont setfont
(q) show
Q
Q
newpath
0.0 0.0 m
0.0 520.0 l
556.0 520.0 l
556.0 0.0 l
h
W
Q
[ 1.0 0.0 0.0 1.0 5.0 5.0 ] defaultmatrix matrix concatmatrix setmatrix
-5.0 -5.0 translate
5.0 5.0 translate
Q
q
-5.0 -5.0 translate
5.0 5.0 translate
q
[ 1.0 0.0 0.0 1.0 0.0 0.0 ] concat
q
267 374 55 30 rc
271.0 398.0 moveto
q 1 -1 scale
/LucidaBright-Italic findfont 22.0 scalefont setfont
(f) show
Q
295.0 398.0 moveto
q 1 -1 scale
/MaplePi findfont 22.0 scalefont setfont
(q) show
Q
286.0 379.0 translate
newpath
5.536912 24.362417 m
5.134228 25.0 l
1.711409 22.874720 0.0 18.624720 0.0 12.25  c
0.0 12.5 l
0.0 12.75 l
0.0 6.352908 1.711409 2.102908 5.134228 0.0  c
5.536912 0.604026 l
4.015660 1.901566 2.997763 3.724832 2.483221 6.073825  c
2.170022 7.527964 2.013422 9.586688 2.013422 12.25  c
2.013422 12.5 l
2.013422 12.75 l
2.013422 15.390939 2.170022 17.438478 2.483221 18.892618  c
2.997763 21.241612 4.015660 23.064878 5.536912 24.362417  c
h
f
-286.0 -379.0 translate
309.0 379.0 translate
newpath
0.0 0.637582 m
0.402684 0.0 l
3.825503 2.125279 5.536912 6.375279 5.536912 12.75  c
5.536912 12.5 l
5.536912 12.25 l
5.536912 18.647092 3.825503 22.897092 0.402684 25.0  c
0.0 24.395973 l
1.521252 23.098434 2.539149 21.275168 3.053691 18.926174  c
3.366890 17.472035 3.523489 15.413311 3.523489 12.75  c
3.523489 12.5 l
3.523489 12.25 l
3.523489 9.609060 3.366890 7.561521 3.053691 6.107381  c
2.539149 3.758387 1.521252 1.935121 0.0 0.637582  c
h
f
-309.0 -379.0 translate
Q
newpath
0.0 0.0 m
0.0 520.0 l
556.0 520.0 l
556.0 0.0 l
h
W
Q
[ 1.0 0.0 0.0 1.0 5.0 5.0 ] defaultmatrix matrix concatmatrix setmatrix
-5.0 -5.0 translate
5.0 5.0 translate
Q
Q
q
1.0 w
q
Q
q
Q
q
Q
q
Q
Q
Q
0 0 566 530 rc
0.0 0.0 translate
0.0 0.0 translate
1.0 w
2 J
0 j
end end restore showpage

%%Trailer
%%EOF
