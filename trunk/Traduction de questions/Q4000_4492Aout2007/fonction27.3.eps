%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 20 118 575 673
%%Creator: FreeHEP Graphics2D Driver
%%Producer: com.maplesoft.mathdoc.view.plot.paint.PlotPSGraphics2D Revision: 1.20 
%%For: 
%%Title: 
%%CreationDate: vendredi 1 juin 2007 10 h 16 EDT
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Draw a line. (x0 y0 x1 y1 line)
/L {bias n m l S unbias} def

% Polyline primitive.
/polyline  {n m 1 exch 1 exch
           {pop currentfile token pop currentfile token pop l} for
           } def

% Draw a polyline (n x0 y0 OPL x1 y1 x2 y2 ... ... xn yn)
/OPL {bias polyline S unbias} def

% Draw a closed polyline (n x0 y0 CPL x1 y1 x2 y2 ... ... xn yn)
/CPL {bias polyline s unbias} def

% Draw a filled polyline (n x0 y0 FPL x1 y1 x2 y2 ... ... xn yn)
/FPL {polyline h f*} def

% Draw an oval. (x y w h OVL)
/OVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width currentlinewidth sub 2 div
      height currentlinewidth sub 2 div neg
      scale n 0 0 1 5 -2 roll arc
      smatrix setmatrix S} def

% Draw a filled oval. (x y w h FOVL)
/FOVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width 2 div
      height 2 div neg
      scale n 0 0 m 0 0 1 5 -2 roll arc
      h smatrix setmatrix f} def

% Draw a rounded rectangle. (x y w h arcwidth archeight RREC)
/RREC {matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      s} def

% Draw a filled rounded rectangle. (x y w h arcwidth archeight FRREC)
/FRREC{matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      h f} def

% Draw a string.  (string x y STR)
/STR {q m 1 -1 scale recshow Q} def

% Define basic plot symbols.
/xys   {/siz exch def /yv exch def /xv exch def} def
/hline {xys n xv siz 2. div sub yv m siz 0 rlineto S} def
/vline {xys n xv yv siz 2. div sub m 0 siz rlineto S} def
/plus  {xys n xv yv siz 2. div sub m 0 siz rlineto
                    xv siz 2. div sub yv m siz 0 rlineto S} def
/dot   {n 2. div 0 360 arc s} def
/fdot  {n 2. div 0 360 arc h f} def
/box   {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                    siz 2 sqrt div dup rs} def
/fbox  {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                       siz 2 sqrt div dup rf} def
/tridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto s} def
/ftridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto h f} def

% Symbols defined in terms of the others.
/star     {3 copy cross plus} def
/cross    {xys q xv yv translate 45 rotate 0 0 siz plus Q} def
/diamond  {xys q xv yv translate 45 rotate 0 0 siz box Q} def
/fdiamond {xys q xv yv translate 45 rotate 0 0 siz fbox Q} def
/triup    {xys q xv yv translate 180 rotate 0 0 siz tridn Q} def
/ftriup   {xys q xv yv translate 180 rotate 0 0 siz ftridn Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Helvetica 16#00 vg&newcompositefont
/DialogInput-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
595 791 setpagesize
20 20 20 20 setmargins
0 0 setorigin
400 400 setsize
fittopage
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0.0 0.0 0.0 RG
[ 1.0 0.0 0.0 1.0 0.0 0.0 ] defaultmatrix matrix concatmatrix setmatrix
1.0 w
2 J
0 j
10.0 M
[ ] 0.0 d
1.0 1.0 1.0 RG
0.0 0.0 400.0 400.0 rf
0.0 0.0 0.0 RG
0 J
1 j
0.0 0.0 translate
0.0 0.0 translate
q
5.0 26.0 translate
0 0 390 369 rc
q
0.647059 0.647059 0.647059 RG
1 90 319 OPL
90 11
1 158 319 OPL
158 11
1 226 319 OPL
226 11
1 294 319 OPL
294 11
1 362 319 OPL
362 11
0.913725 0.913725 0.913725 RG
1 124 319 OPL
124 11
1 192 319 OPL
192 11
1 260 319 OPL
260 11
1 328 319 OPL
328 11
0.647059 0.647059 0.647059 RG
Q
q
0.647059 0.647059 0.647059 RG
1 90 319 OPL
362 319
1 90 257 OPL
362 257
1 90 196 OPL
362 196
1 90 134 OPL
362 134
1 90 73 OPL
362 73
1 90 11 OPL
362 11
0.913725 0.913725 0.913725 RG
1 90 288 OPL
362 288
1 90 227 OPL
362 227
1 90 165 OPL
362 165
1 90 103 OPL
362 103
1 90 42 OPL
362 42
0.647059 0.647059 0.647059 RG
Q
q
q
2.0 w
1.0 0.0 0.0 RG
88.0 8.028302 276.931946 312.97171 rc
48 90 257 OPL
96 257
101 257
107 256
113 256
119 255
124 254
129 252
135 251
141 249
147 247
152 245
158 242
164 239
170 236
175 233
181 230
186 227
192 223
197 219
203 215
209 210
215 206
220 201
226 196
232 190
237 185
243 180
249 174
254 168
260 161
266 154
271 148
277 141
283 134
288 126
294 119
300 111
305 103
311 95
317 86
322 77
328 68
333 60
339 50
345 41
351 31
356 22
362 11
newpath
0.0 0.0 m
0.0 369.0 l
390.0 369.0 l
390.0 0.0 l
h
W
Q
Q
q
q
1 328 319 OPL
328 321
1 260 319 OPL
260 321
1 192 319 OPL
192 321
1 124 319 OPL
124 321
1 90 319 OPL
362 319
Q
0.0 0.0 translate
q
[ 1.0 0.0 0.0 1.0 0.0 0.0 ] concat
q
216 348 19 21 rc
220.0 366.0 moveto
q 1 -1 scale
9 dict begin
/FontType 3 def
/FontMatrix [0.0010 0 0 0.0010 0 0]def
/FontBBox [0 -213 1628 950 ] def
	/Encoding 256 array def
			0 1 255 {Encoding exch /.notdef put}for
		Encoding 32 /space put
		Encoding 33 /exclam put
		Encoding 34 /quotedbl put
		Encoding 35 /numbersign put
		Encoding 36 /dollar put
		Encoding 37 /percent put
		Encoding 38 /ampersand put
		Encoding 39 /quoteright put
		Encoding 40 /parenleft put
		Encoding 41 /parenright put
		Encoding 42 /asterisk put
		Encoding 43 /plus put
		Encoding 44 /comma put
		Encoding 45 /hyphen put
		Encoding 46 /period put
		Encoding 47 /slash put
		Encoding 48 /zero put
		Encoding 49 /one put
		Encoding 50 /two put
		Encoding 51 /three put
		Encoding 52 /four put
		Encoding 53 /five put
		Encoding 54 /six put
		Encoding 55 /seven put
		Encoding 56 /eight put
		Encoding 57 /nine put
		Encoding 58 /colon put
		Encoding 59 /semicolon put
		Encoding 60 /less put
		Encoding 61 /equal put
		Encoding 62 /greater put
		Encoding 63 /question put
		Encoding 64 /at put
		Encoding 65 /A put
		Encoding 66 /B put
		Encoding 67 /C put
		Encoding 68 /D put
		Encoding 69 /E put
		Encoding 70 /F put
		Encoding 71 /G put
		Encoding 72 /H put
		Encoding 73 /I put
		Encoding 74 /J put
		Encoding 75 /K put
		Encoding 76 /L put
		Encoding 77 /M put
		Encoding 78 /N put
		Encoding 79 /O put
		Encoding 80 /P put
		Encoding 81 /Q put
		Encoding 82 /R put
		Encoding 83 /S put
		Encoding 84 /T put
		Encoding 85 /U put
		Encoding 86 /V put
		Encoding 87 /W put
		Encoding 88 /X put
		Encoding 89 /Y put
		Encoding 90 /Z put
		Encoding 91 /bracketleft put
		Encoding 92 /backslash put
		Encoding 93 /bracketright put
		Encoding 94 /asciicircum put
		Encoding 95 /underscore put
		Encoding 96 /quoteleft put
		Encoding 97 /a put
		Encoding 98 /b put
		Encoding 99 /c put
		Encoding 100 /d put
		Encoding 101 /e put
		Encoding 102 /f put
		Encoding 103 /g put
		Encoding 104 /h put
		Encoding 105 /i put
		Encoding 106 /j put
		Encoding 107 /k put
		Encoding 108 /l put
		Encoding 109 /m put
		Encoding 110 /n put
		Encoding 111 /o put
		Encoding 112 /p put
		Encoding 113 /q put
		Encoding 114 /r put
		Encoding 115 /s put
		Encoding 116 /t put
		Encoding 117 /u put
		Encoding 118 /v put
		Encoding 119 /w put
		Encoding 120 /x put
		Encoding 121 /y put
		Encoding 122 /z put
		Encoding 123 /braceleft put
		Encoding 124 /bar put
		Encoding 125 /braceright put
		Encoding 126 /asciitilde put
		Encoding 161 /exclamdown put
		Encoding 162 /cent put
		Encoding 163 /sterling put
		Encoding 164 /fraction put
		Encoding 165 /yen put
		Encoding 166 /florin put
		Encoding 167 /section put
		Encoding 168 /currency put
		Encoding 169 /quotesingle put
		Encoding 170 /quotedblleft put
		Encoding 171 /guillemotleft put
		Encoding 172 /guilsinglleft put
		Encoding 173 /guilsinglright put
		Encoding 174 /fi put
		Encoding 175 /fl put
		Encoding 177 /endash put
		Encoding 178 /dagger put
		Encoding 179 /daggerdbl put
		Encoding 180 /periodcentered put
		Encoding 182 /paragraph put
		Encoding 183 /bullet put
		Encoding 184 /quotesinglbase put
		Encoding 185 /quotedblbase put
		Encoding 186 /quotedblright put
		Encoding 187 /guillemotright put
		Encoding 188 /ellipsis put
		Encoding 189 /perthousand put
		Encoding 191 /questiondown put
		Encoding 193 /grave put
		Encoding 194 /acute put
		Encoding 195 /circumflex put
		Encoding 196 /tilde put
		Encoding 197 /macron put
		Encoding 198 /breve put
		Encoding 199 /dotaccent put
		Encoding 200 /dieresis put
		Encoding 202 /ring put
		Encoding 203 /cedilla put
		Encoding 205 /hungarumlaut put
		Encoding 206 /ogonek put
		Encoding 207 /caron put
		Encoding 208 /emdash put
		Encoding 225 /AE put
		Encoding 227 /ordfeminine put
		Encoding 232 /Lslash put
		Encoding 233 /Oslash put
		Encoding 234 /OE put
		Encoding 235 /ordmasculine put
		Encoding 241 /ae put
		Encoding 245 /dotlessi put
		Encoding 248 /lslash put
		Encoding 249 /oslash put
		Encoding 250 /oe put
		Encoding 251 /germandbls put
	/BuildGlyph
		{ 2 copy exch /Metrics get exch 
			2 copy known {get}{pop pop 1000.0} ifelse
			0
			0 -213 1628 950
			setcachedevice
			exch /CharProcs get exch
			2 copy known not
					{pop /.notdef}
				if
			get exec
		} bind def

	/BuildChar
		{ 1 index /Encoding get exch get
		  1 index /BuildGlyph get exec
	  } bind def
	/Metrics 150 dict def
		Metrics begin
		/.notdef 1000 def
		/space 316.40625 def
		/exclam 316.40625 def
		/quotedbl 373.53515625 def
		/numbersign 632.32421875 def
		/dollar 632.32421875 def
		/percent 668.45703125 def
		/ampersand 697.265625 def
		/quoteright 229.00390625 def
		/parenleft 325.1953125 def
		/parenright 325.1953125 def
		/asterisk 481.93359375 def
		/plus 794.921875 def
		/comma 316.40625 def
		/hyphen 578.61328125 def
		/period 316.40625 def
		/slash 524.4140625 def
		/zero 632.32421875 def
		/one 632.32421875 def
		/two 632.32421875 def
		/three 632.32421875 def
		/four 632.32421875 def
		/five 632.32421875 def
		/six 632.32421875 def
		/seven 632.32421875 def
		/eight 632.32421875 def
		/nine 632.32421875 def
		/colon 316.40625 def
		/semicolon 316.40625 def
		/less 794.921875 def
		/equal 794.921875 def
		/greater 794.921875 def
		/question 421.875 def
		/at 858.3984375 def
		/A 689.94140625 def
		/B 575.1953125 def
		/C 691.89453125 def
		/D 749.0234375 def
		/E 541.9921875 def
		/F 536.1328125 def
		/G 722.65625 def
		/H 734.86328125 def
		/I 288.0859375 def
		/J 311.03515625 def
		/K 652.83203125 def
		/L 533.203125 def
		/M 861.328125 def
		/N 738.76953125 def
		/O 776.85546875 def
		/P 552.734375 def
		/Q 776.85546875 def
		/R 632.32421875 def
		/S 538.57421875 def
		/T 632.32421875 def
		/U 692.87109375 def
		/V 653.80859375 def
		/W 855.46875 def
		/X 625.9765625 def
		/Y 623.046875 def
		/Z 604.4921875 def
		/bracketleft 325.1953125 def
		/backslash 524.4140625 def
		/bracketright 325.1953125 def
		/asciicircum 632.32421875 def
		/underscore 500.0 def
		/quoteleft 614.2578125 def
		/a 552.24609375 def
		/b 629.39453125 def
		/c 512.20703125 def
		/d 629.39453125 def
		/e 557.12890625 def
		/f 367.67578125 def
		/g 623.53515625 def
		/h 620.60546875 def
		/i 289.0625 def
		/j 304.19921875 def
		/k 584.47265625 def
		/l 289.0625 def
		/m 933.59375 def
		/n 620.60546875 def
		/o 614.2578125 def
		/p 629.39453125 def
		/q 629.39453125 def
		/r 409.1796875 def
		/s 509.765625 def
		/t 374.0234375 def
		/u 620.60546875 def
		/v 517.578125 def
		/w 770.5078125 def
		/x 613.28125 def
		/y 522.4609375 def
		/z 573.2421875 def
		/braceleft 325.1953125 def
		/bar 373.53515625 def
		/braceright 325.1953125 def
		/asciitilde 632.32421875 def
		/exclamdown 316.40625 def
		/cent 632.32421875 def
		/sterling 632.32421875 def
		/fraction 0.0 def
		/yen 632.32421875 def
		/florin 632.32421875 def
		/section 632.32421875 def
		/currency 632.8125 def
		/quotesingle 229.00390625 def
		/quotedblleft 397.4609375 def
		/guillemotleft 523.92578125 def
		/guilsinglleft 331.54296875 def
		/guilsinglright 331.54296875 def
		/fi 644.53125 def
		/fl 647.4609375 def
		/endash 578.61328125 def
		/dagger 632.32421875 def
		/daggerdbl 632.32421875 def
		/periodcentered 316.40625 def
		/paragraph 632.32421875 def
		/bullet 608.3984375 def
		/quotesinglbase 316.40625 def
		/quotedblbase 397.4609375 def
		/quotedblright 397.4609375 def
		/guillemotright 523.92578125 def
		/ellipsis 1000.0 def
		/perthousand 1012.20703125 def
		/questiondown 421.875 def
		/grave 614.2578125 def
		/acute 614.2578125 def
		/circumflex 614.2578125 def
		/tilde 614.2578125 def
		/macron 500.0 def
		/breve 614.2578125 def
		/dotaccent 614.2578125 def
		/dieresis 614.2578125 def
		/ring 614.2578125 def
		/cedilla 614.2578125 def
		/hungarumlaut 505.859375 def
		/ogonek 614.2578125 def
		/caron 614.2578125 def
		/emdash 578.61328125 def
		/AE 906.73828125 def
		/ordfeminine 469.7265625 def
		/Lslash 548.33984375 def
		/Oslash 776.85546875 def
		/OE 1000.0 def
		/ordmasculine 469.7265625 def
		/ae 851.07421875 def
		/dotlessi 289.0625 def
		/lslash 328.125 def
		/oslash 614.2578125 def
		/oe 928.22265625 def
		/germandbls 598.14453125 def
	end
	/CharProcs 150 dict def
	CharProcs begin
			%define Glyph dictionary and start filling
	/space
		{
fill
		} def

	/exclam
		{
109 0 moveto
109 96 lineto
206 96 lineto
206 0 lineto
109 0 lineto
closepath
122 192 moveto
109 578 lineto
109 722 lineto
206 722 lineto
206 578 lineto
194 192 lineto
122 192 lineto
closepath
fill
		} def

	/quotedbl
		{
66 530 moveto
54 771 lineto
150 771 lineto
138 530 lineto
66 530 lineto
closepath
234 530 moveto
222 771 lineto
319 771 lineto
307 530 lineto
234 530 lineto
closepath
fill
		} def

	/numbersign
		{
99 0 moveto
153 216 lineto
7 216 lineto
19 277 lineto
168 277 lineto
210 445 lineto
52 445 lineto
64 505 lineto
225 505 lineto
280 722 lineto
342 722 lineto
288 505 lineto
416 505 lineto
470 722 lineto
533 722 lineto
479 505 lineto
625 505 lineto
613 445 lineto
463 445 lineto
421 277 lineto
579 277 lineto
567 216 lineto
406 216 lineto
352 0 lineto
290 0 lineto
344 216 lineto
215 216 lineto
161 0 lineto
99 0 lineto
closepath
230 277 moveto
359 277 lineto
401 445 lineto
272 445 lineto
230 277 lineto
closepath
fill
		} def

	/dollar
		{
298 -60 moveto
298 0 lineto
241 0 176 13 105 40  curveto
105 123 lineto
179 89 243 72 298 72  curveto
298 331 lineto
232 371 187 407 162 438  curveto
138 469 126 506 126 549  curveto
126 597 142 637 173 669  curveto
204 700 246 718 298 722  curveto
298 783 lineto
346 783 lineto
346 722 lineto
393 722 445 711 502 689  curveto
502 611 lineto
440 638 388 653 346 656  curveto
346 399 lineto
363 388 376 380 385 375  curveto
435 345 469 317 487 293  curveto
506 269 515 238 515 202  curveto
515 151 500 107 469 71  curveto
439 34 398 11 346 0  curveto
346 -60 lineto
298 -60 lineto
closepath
346 78 moveto
402 98 430 134 430 187  curveto
430 211 425 230 414 244  curveto
403 259 381 279 346 303  curveto
346 78 lineto
closepath
298 431 moveto
298 653 lineto
240 635 210 601 210 551  curveto
210 526 216 505 229 489  curveto
241 472 264 452 298 431  curveto
closepath
fill
		} def

	/percent
		{
11 -18 moveto
581 740 lineto
656 740 lineto
87 -18 lineto
11 -18 lineto
closepath
157 361 moveto
111 361 74 377 47 410  curveto
19 443 5 487 5 542  curveto
5 597 19 641 47 674  curveto
75 706 112 722 159 722  curveto
206 722 243 706 271 674  curveto
299 641 312 597 312 542  curveto
312 486 299 442 271 409  curveto
243 377 205 361 157 361  curveto
closepath
158 409 moveto
213 409 240 454 240 542  curveto
240 583 233 614 218 638  curveto
204 662 184 674 159 674  curveto
134 674 114 662 100 638  curveto
85 614 78 582 78 542  curveto
78 502 85 469 100 445  curveto
114 421 134 409 158 409  curveto
closepath
506 0 moveto
460 0 423 16 396 49  curveto
369 81 355 125 355 180  curveto
355 236 369 279 396 312  curveto
424 345 461 361 508 361  curveto
555 361 593 345 620 312  curveto
648 280 662 236 662 181  curveto
662 125 648 80 621 48  curveto
593 16 555 0 506 0  curveto
closepath
507 48 moveto
562 48 590 92 590 181  curveto
590 221 582 253 568 277  curveto
553 301 533 313 508 313  curveto
484 313 464 301 449 277  curveto
435 253 427 221 427 180  curveto
427 140 434 108 449 84  curveto
463 60 483 48 507 48  curveto
closepath
fill
		} def

	/ampersand
		{
518 0 moveto
482 42 lineto
429 2 366 -18 295 -18  curveto
219 -18 157 3 109 47  curveto
60 91 36 147 36 214  curveto
36 326 94 401 212 441  curveto
179 500 163 549 163 588  curveto
163 631 180 667 214 696  curveto
248 725 289 740 338 740  curveto
385 740 423 726 454 699  curveto
484 671 500 637 500 594  curveto
500 522 447 459 341 406  curveto
389 320 446 240 510 165  curveto
540 208 555 269 555 348  curveto
554 384 lineto
650 384 lineto
650 277 618 185 554 107  curveto
583 70 617 34 654 0  curveto
518 0 lineto
closepath
440 98 moveto
372 182 306 277 245 384  curveto
169 354 132 305 132 238  curveto
132 187 149 143 184 107  curveto
218 72 261 54 311 54  curveto
356 54 399 69 440 98  curveto
closepath
306 467 moveto
375 498 409 540 409 593  curveto
409 643 384 668 334 668  curveto
284 668 260 643 260 592  curveto
260 559 275 517 306 467  curveto
closepath
fill
		} def

	/quoteright
		{
78 505 moveto
54 771 lineto
174 771 lineto
150 505 lineto
78 505 lineto
closepath
fill
		} def

	/parenleft
		{
289 -78 moveto
289 -144 lineto
218 -96 163 -31 121 50  curveto
80 132 60 220 60 313  curveto
60 406 80 493 121 575  curveto
163 658 218 723 289 771  curveto
289 704 lineto
241 652 207 596 186 536  curveto
166 476 156 402 156 313  curveto
156 224 166 149 186 89  curveto
207 29 241 -26 289 -78  curveto
closepath
fill
		} def

	/parenright
		{
35 -78 moveto
35 -144 lineto
106 -96 161 -31 203 50  curveto
244 132 264 220 264 313  curveto
264 406 244 493 203 575  curveto
161 658 106 723 35 771  curveto
35 704 lineto
83 652 117 596 138 536  curveto
158 476 168 402 168 313  curveto
168 224 158 149 138 89  curveto
117 29 83 -26 35 -78  curveto
closepath
fill
		} def

	/asterisk
		{
406 629 moveto
428 560 lineto
280 528 lineto
281 531 281 534 281 535  curveto
281 548 277 559 267 568  curveto
406 629 lineto
closepath
379 409 moveto
320 366 lineto
244 497 lineto
260 499 272 507 278 521  curveto
379 409 lineto
closepath
161 366 moveto
103 409 lineto
203 521 lineto
210 507 221 499 237 497  curveto
161 366 lineto
closepath
53 560 moveto
76 629 lineto
214 568 lineto
205 560 200 549 200 535  curveto
200 534 201 531 201 528  curveto
53 560 lineto
closepath
205 722 moveto
277 722 lineto
262 572 lineto
256 575 249 577 241 577  curveto
233 577 226 575 220 572  curveto
205 722 lineto
closepath
fill
		} def

	/plus
		{
361 0 moveto
361 252 lineto
108 252 lineto
108 325 lineto
361 325 lineto
361 578 lineto
433 578 lineto
433 325 lineto
686 325 lineto
686 252 lineto
433 252 lineto
433 0 lineto
361 0 lineto
closepath
fill
		} def

	/comma
		{
97 -156 moveto
97 -120 lineto
128 -111 144 -74 144 -9  curveto
144 0 lineto
97 0 lineto
97 120 lineto
218 120 lineto
218 16 lineto
218 -90 178 -148 97 -156  curveto
closepath
fill
		} def

	/hyphen
		{
72 252 moveto
72 325 lineto
505 325 lineto
505 252 lineto
72 252 lineto
closepath
fill
		} def

	/period
		{
97 0 moveto
97 120 lineto
218 120 lineto
218 0 lineto
97 0 lineto
closepath
fill
		} def

	/slash
		{
94 -144 moveto
354 722 lineto
430 722 lineto
169 -144 lineto
94 -144 lineto
closepath
fill
		} def

	/zero
		{
313 -18 moveto
238 -18 178 17 132 87  curveto
86 157 63 248 63 361  curveto
63 475 86 567 133 636  curveto
179 706 240 740 316 740  curveto
392 740 453 706 499 636  curveto
546 567 569 476 569 363  curveto
569 247 546 154 499 85  curveto
453 16 391 -18 313 -18  curveto
closepath
314 54 moveto
416 54 467 157 467 364  curveto
467 567 416 668 316 668  curveto
216 668 166 566 166 361  curveto
166 156 215 54 314 54  curveto
closepath
fill
		} def

	/one
		{
150 0 moveto
150 72 lineto
294 72 lineto
294 642 lineto
150 606 lineto
150 680 lineto
391 740 lineto
391 72 lineto
536 72 lineto
536 0 lineto
150 0 lineto
closepath
fill
		} def

	/two
		{
83 0 moveto
83 84 lineto
111 149 167 221 252 298  curveto
308 347 lineto
379 411 414 475 414 538  curveto
414 578 402 610 378 633  curveto
353 656 320 668 278 668  curveto
228 668 169 649 101 610  curveto
101 695 lineto
165 725 228 740 292 740  curveto
359 740 414 722 455 686  curveto
496 649 516 601 516 541  curveto
516 497 506 459 485 425  curveto
464 392 426 351 370 303  curveto
333 271 lineto
255 206 211 144 199 84  curveto
513 84 lineto
513 0 lineto
83 0 lineto
closepath
fill
		} def

	/three
		{
101 5 moveto
101 95 lineto
170 67 224 54 264 54  curveto
310 54 347 67 376 94  curveto
405 121 419 156 419 198  curveto
419 300 348 351 206 351  curveto
168 351 lineto
168 416 lineto
202 416 lineto
335 416 402 463 402 557  curveto
402 631 358 668 270 668  curveto
222 668 169 654 111 627  curveto
111 711 lineto
168 731 223 740 277 740  curveto
425 740 499 684 499 573  curveto
499 488 448 427 348 391  curveto
464 364 522 300 522 200  curveto
522 132 500 78 455 40  curveto
410 1 348 -18 270 -18  curveto
225 -18 169 -10 101 5  curveto
closepath
fill
		} def

	/four
		{
376 0 moveto
376 204 lineto
51 204 lineto
51 277 lineto
376 722 lineto
466 722 lineto
466 283 lineto
563 283 lineto
563 204 lineto
466 204 lineto
466 0 lineto
376 0 lineto
closepath
145 283 moveto
382 283 lineto
382 604 lineto
145 283 lineto
closepath
fill
		} def

	/five
		{
121 -2 moveto
121 83 lineto
169 63 215 54 258 54  curveto
305 54 343 68 370 96  curveto
397 124 411 162 411 211  curveto
411 320 336 374 187 374  curveto
170 374 152 373 133 371  curveto
133 722 lineto
499 722 lineto
499 638 lineto
218 638 lineto
218 448 lineto
311 448 383 426 435 384  curveto
487 341 513 282 513 207  curveto
513 136 489 81 442 41  curveto
395 1 329 -18 245 -18  curveto
209 -18 167 -13 121 -2  curveto
closepath
fill
		} def

	/six
		{
171 374 moveto
217 434 275 463 345 463  curveto
408 463 460 442 500 401  curveto
540 359 560 305 560 240  curveto
560 165 538 103 492 54  curveto
447 6 390 -18 321 -18  curveto
241 -18 179 14 134 78  curveto
89 142 66 231 66 345  curveto
66 470 92 567 144 637  curveto
195 706 268 741 362 741  curveto
405 741 458 732 523 713  curveto
523 629 lineto
455 655 399 668 356 668  curveto
233 668 171 570 171 374  curveto
closepath
463 218 moveto
463 273 451 316 427 347  curveto
402 378 368 394 324 394  curveto
284 394 249 380 219 353  curveto
190 326 175 293 175 254  curveto
175 194 189 145 217 109  curveto
245 72 282 54 328 54  curveto
369 54 402 69 427 98  curveto
451 128 463 168 463 218  curveto
closepath
fill
		} def

	/seven
		{
150 0 moveto
159 56 173 104 190 145  curveto
208 187 238 243 283 314  curveto
480 632 lineto
108 632 lineto
108 722 lineto
572 722 lineto
572 632 lineto
387 359 283 148 261 0  curveto
150 0 lineto
closepath
fill
		} def

	/eight
		{
229 393 moveto
159 442 124 497 124 556  curveto
124 611 144 655 184 689  curveto
224 724 276 741 340 741  curveto
400 741 448 726 485 697  curveto
522 668 541 631 541 584  curveto
541 514 496 451 406 393  curveto
515 340 569 271 569 187  curveto
569 126 546 77 501 39  curveto
455 0 396 -18 324 -18  curveto
253 -18 195 0 152 35  curveto
108 71 86 119 86 177  curveto
86 264 134 336 229 393  curveto
closepath
352 423 moveto
419 468 453 517 453 571  curveto
453 600 442 624 419 641  curveto
397 659 367 668 331 668  curveto
295 668 266 659 244 642  curveto
222 624 211 602 211 574  curveto
211 547 221 523 241 502  curveto
261 480 298 454 352 423  curveto
closepath
282 354 moveto
243 324 217 298 203 276  curveto
189 253 182 226 182 192  curveto
182 151 195 118 222 92  curveto
249 66 284 54 328 54  curveto
370 54 404 65 430 86  curveto
457 108 470 137 470 171  curveto
470 199 462 223 446 242  curveto
429 262 397 285 350 313  curveto
282 354 lineto
closepath
fill
		} def

	/nine
		{
113 4 moveto
113 85 lineto
174 64 227 54 270 54  curveto
329 54 376 79 410 130  curveto
444 181 460 252 460 343  curveto
412 283 356 252 294 252  curveto
233 252 181 275 139 320  curveto
97 364 76 419 76 483  curveto
76 557 98 619 143 667  curveto
188 716 245 740 313 740  curveto
392 740 454 709 499 646  curveto
544 583 567 497 567 387  curveto
567 263 539 164 484 91  curveto
429 18 354 -18 260 -18  curveto
222 -18 173 -10 113 4  curveto
closepath
172 502 moveto
172 446 184 402 209 370  curveto
234 338 268 322 312 322  curveto
352 322 387 336 416 363  curveto
445 391 459 424 459 463  curveto
459 525 445 574 417 612  curveto
389 650 353 668 308 668  curveto
266 668 232 654 208 624  curveto
184 594 172 554 172 502  curveto
closepath
fill
		} def

	/colon
		{
109 0 moveto
109 96 lineto
206 96 lineto
206 0 lineto
109 0 lineto
closepath
109 433 moveto
109 530 lineto
206 530 lineto
206 433 lineto
109 433 lineto
closepath
fill
		} def

	/semicolon
		{
109 -156 moveto
109 -120 lineto
132 -108 144 -72 144 -11  curveto
144 0 lineto
109 0 lineto
109 96 lineto
206 96 lineto
206 15 lineto
206 -83 173 -140 109 -156  curveto
closepath
109 433 moveto
109 530 lineto
206 530 lineto
206 433 lineto
109 433 lineto
closepath
fill
		} def

	/less
		{
686 0 moveto
108 289 lineto
686 578 lineto
686 497 lineto
270 289 lineto
686 81 lineto
686 0 lineto
closepath
fill
		} def

	/equal
		{
108 162 moveto
108 234 lineto
686 234 lineto
686 162 lineto
108 162 lineto
closepath
108 343 moveto
108 415 lineto
686 415 lineto
686 343 lineto
108 343 lineto
closepath
fill
		} def

	/greater
		{
108 0 moveto
686 289 lineto
108 578 lineto
108 497 lineto
524 289 lineto
108 81 lineto
108 0 lineto
closepath
fill
		} def

	/question
		{
122 0 moveto
122 96 lineto
218 96 lineto
218 0 lineto
122 0 lineto
closepath
122 192 moveto
122 219 lineto
122 281 146 339 193 394  curveto
224 430 lineto
275 488 301 536 301 574  curveto
301 603 290 626 267 643  curveto
245 659 214 668 176 668  curveto
126 668 74 656 18 632  curveto
18 713 lineto
78 732 134 741 187 741  curveto
253 741 306 726 345 696  curveto
384 666 403 626 403 575  curveto
403 547 398 522 386 501  curveto
375 481 354 455 322 425  curveto
292 396 lineto
261 368 241 344 232 324  curveto
222 305 218 279 218 246  curveto
218 192 lineto
122 192 lineto
closepath
fill
		} def

	/at
		{
533 21 moveto
475 -4 417 -18 361 -18  curveto
269 -18 194 10 134 66  curveto
75 123 45 194 45 281  curveto
45 391 85 492 164 583  curveto
206 632 258 670 318 698  curveto
378 726 440 740 501 740  curveto
592 740 668 711 730 652  curveto
791 594 822 521 822 434  curveto
822 353 797 285 748 229  curveto
699 172 639 144 569 144  curveto
515 144 488 163 488 200  curveto
488 214 491 231 498 251  curveto
518 313 lineto
512 313 lineto
453 200 390 144 323 144  curveto
260 144 229 180 229 252  curveto
229 299 240 348 264 400  curveto
287 452 316 493 351 523  curveto
390 557 435 575 485 575  curveto
495 575 508 574 523 573  curveto
539 572 552 572 562 572  curveto
628 572 lineto
567 261 lineto
565 251 564 241 564 231  curveto
564 209 576 198 601 198  curveto
644 198 683 221 717 268  curveto
751 314 768 367 768 426  curveto
768 501 742 563 690 612  curveto
638 662 573 687 494 687  curveto
391 687 299 646 219 565  curveto
139 483 99 391 99 286  curveto
99 213 124 152 175 106  curveto
225 59 290 36 369 36  curveto
420 36 469 47 516 71  curveto
533 21 lineto
closepath
523 406 moveto
542 501 lineto
513 512 486 518 464 518  curveto
418 518 380 494 350 448  curveto
319 401 304 343 304 273  curveto
304 227 317 204 344 204  curveto
364 204 390 222 423 259  curveto
455 296 489 345 523 406  curveto
closepath
fill
		} def

	/A
		{
459 276 moveto
336 587 lineto
212 276 lineto
459 276 lineto
closepath
567 0 moveto
489 200 lineto
183 200 lineto
103 0 lineto
8 0 lineto
294 722 lineto
396 722 lineto
678 0 lineto
567 0 lineto
closepath
fill
		} def

	/B
		{
93 0 moveto
93 722 lineto
280 722 lineto
353 722 408 708 447 681  curveto
485 654 504 614 504 563  curveto
504 475 455 413 356 376  curveto
474 340 533 275 533 180  curveto
533 122 514 77 475 46  curveto
436 15 379 0 306 0  curveto
93 0 lineto
closepath
194 76 moveto
215 76 lineto
291 76 339 81 361 90  curveto
404 108 425 141 425 190  curveto
425 233 406 269 367 297  curveto
329 326 281 340 223 340  curveto
194 340 lineto
194 76 lineto
closepath
194 405 moveto
227 405 lineto
282 405 324 417 354 440  curveto
384 463 399 496 399 539  curveto
399 610 344 646 234 646  curveto
194 646 lineto
194 405 lineto
closepath
fill
		} def

	/C
		{
402 -18 moveto
290 -18 203 14 142 80  curveto
81 146 50 240 50 360  curveto
50 481 81 574 144 641  curveto
206 707 294 740 407 740  curveto
472 740 548 730 635 708  curveto
635 612 lineto
536 646 459 664 406 664  curveto
327 664 267 637 224 584  curveto
181 531 159 456 159 359  curveto
159 267 182 195 228 141  curveto
274 88 337 62 416 62  curveto
484 62 558 83 636 125  curveto
636 37 lineto
564 0 487 -18 402 -18  curveto
closepath
fill
		} def

	/D
		{
93 0 moveto
93 722 lineto
333 722 lineto
405 722 462 714 507 698  curveto
551 682 589 655 621 617  curveto
672 557 698 477 698 378  curveto
698 258 666 165 603 99  curveto
539 33 450 0 334 0  curveto
93 0 lineto
closepath
195 76 moveto
327 76 lineto
420 76 487 101 526 152  curveto
568 206 589 278 589 368  curveto
589 453 568 520 527 568  curveto
502 598 472 618 437 629  curveto
402 640 350 646 280 646  curveto
195 646 lineto
195 76 lineto
closepath
fill
		} def

	/E
		{
93 0 moveto
93 722 lineto
497 722 lineto
497 646 lineto
195 646 lineto
195 414 lineto
448 414 lineto
448 338 lineto
195 338 lineto
195 76 lineto
518 76 lineto
518 0 lineto
93 0 lineto
closepath
fill
		} def

	/F
		{
93 0 moveto
93 722 lineto
497 722 lineto
497 646 lineto
195 646 lineto
195 403 lineto
448 403 lineto
448 328 lineto
195 328 lineto
195 0 lineto
93 0 lineto
closepath
fill
		} def

	/G
		{
636 19 moveto
548 -5 472 -18 407 -18  curveto
292 -18 204 14 142 80  curveto
81 145 50 239 50 361  curveto
50 481 81 574 144 640  curveto
206 707 293 740 405 740  curveto
479 740 555 729 635 708  curveto
635 613 lineto
535 647 459 664 406 664  curveto
328 664 267 637 224 584  curveto
181 531 159 456 159 360  curveto
159 264 182 190 229 137  curveto
275 85 340 58 423 58  curveto
457 58 494 64 534 76  curveto
534 312 lineto
636 312 lineto
636 19 lineto
closepath
fill
		} def

	/H
		{
93 0 moveto
93 722 lineto
195 722 lineto
195 417 lineto
539 417 lineto
539 722 lineto
642 722 lineto
642 0 lineto
539 0 lineto
539 341 lineto
195 341 lineto
195 0 lineto
93 0 lineto
closepath
fill
		} def

	/I
		{
92 0 moveto
92 722 lineto
195 722 lineto
195 0 lineto
92 0 lineto
closepath
fill
		} def

	/J
		{
-89 -134 moveto
-89 -43 lineto
-50 -56 -16 -62 13 -62  curveto
52 -62 79 -51 95 -29  curveto
110 -6 118 32 118 87  curveto
118 722 lineto
221 722 lineto
221 91 lineto
221 -65 146 -144 -1 -144  curveto
-24 -144 -54 -141 -89 -134  curveto
closepath
fill
		} def

	/K
		{
93 0 moveto
93 722 lineto
189 722 lineto
189 367 lineto
481 722 lineto
584 722 lineto
301 377 lineto
635 0 lineto
505 0 lineto
189 366 lineto
189 0 lineto
93 0 lineto
closepath
fill
		} def

	/L
		{
93 0 moveto
93 722 lineto
195 722 lineto
195 76 lineto
521 76 lineto
521 0 lineto
93 0 lineto
closepath
fill
		} def

	/M
		{
93 0 moveto
93 722 lineto
235 722 lineto
435 163 lineto
641 722 lineto
768 722 lineto
768 0 lineto
672 0 lineto
672 587 lineto
473 48 lineto
374 48 lineto
181 589 lineto
181 0 lineto
93 0 lineto
closepath
fill
		} def

	/N
		{
93 0 moveto
93 722 lineto
193 722 lineto
557 164 lineto
557 722 lineto
645 722 lineto
645 0 lineto
545 0 lineto
181 558 lineto
181 0 lineto
93 0 lineto
closepath
fill
		} def

	/O
		{
384 -18 moveto
284 -18 203 16 142 86  curveto
81 155 50 247 50 361  curveto
50 476 81 568 142 637  curveto
204 706 286 740 388 740  curveto
490 740 572 706 634 637  curveto
695 569 726 477 726 362  curveto
726 245 695 153 634 84  curveto
572 16 489 -18 384 -18  curveto
closepath
385 58 moveto
459 58 516 85 557 138  curveto
597 191 617 266 617 363  curveto
617 457 597 531 556 584  curveto
516 637 460 664 388 664  curveto
316 664 260 637 220 584  curveto
179 531 159 457 159 362  curveto
159 267 179 193 219 139  curveto
259 85 315 58 385 58  curveto
closepath
fill
		} def

	/P
		{
93 0 moveto
93 722 lineto
290 722 lineto
377 722 439 707 478 678  curveto
516 649 535 600 535 533  curveto
535 456 509 396 457 352  curveto
404 308 332 287 240 287  curveto
194 287 lineto
194 0 lineto
93 0 lineto
closepath
194 364 moveto
236 364 lineto
297 364 344 378 377 406  curveto
410 434 427 474 427 525  curveto
427 568 414 599 388 618  curveto
362 636 318 646 257 646  curveto
194 646 lineto
194 364 lineto
closepath
fill
		} def

	/Q
		{
734 -144 moveto
621 -107 526 -63 449 -13  curveto
418 -16 395 -18 378 -18  curveto
281 -18 202 17 141 87  curveto
81 157 50 249 50 361  curveto
50 476 81 568 142 637  curveto
204 706 286 740 388 740  curveto
491 740 573 706 634 637  curveto
695 568 726 475 726 359  curveto
726 193 664 78 541 15  curveto
624 -21 710 -47 799 -62  curveto
734 -144 lineto
closepath
385 58 moveto
459 58 516 85 557 138  curveto
597 191 617 266 617 363  curveto
617 457 597 531 557 584  curveto
516 637 460 664 388 664  curveto
316 664 260 637 220 584  curveto
179 531 159 457 159 362  curveto
159 267 179 193 219 139  curveto
259 85 315 58 385 58  curveto
closepath
fill
		} def

	/R
		{
93 0 moveto
93 722 lineto
312 722 lineto
381 722 434 707 471 676  curveto
508 646 526 601 526 543  curveto
526 447 478 378 380 338  curveto
622 0 lineto
496 0 lineto
290 305 lineto
194 305 lineto
194 0 lineto
93 0 lineto
closepath
194 382 moveto
228 382 lineto
356 382 421 432 421 534  curveto
421 608 367 646 259 646  curveto
194 646 lineto
194 382 lineto
closepath
fill
		} def

	/S
		{
234 -18 moveto
186 -18 124 -7 48 13  curveto
48 115 lineto
130 77 197 58 249 58  curveto
289 58 322 69 346 90  curveto
371 111 383 139 383 173  curveto
383 202 375 226 359 246  curveto
343 265 313 288 270 312  curveto
220 341 lineto
159 376 115 409 90 440  curveto
65 471 52 507 52 549  curveto
52 604 72 650 113 686  curveto
153 722 205 740 267 740  curveto
323 740 382 731 443 712  curveto
443 619 lineto
367 649 310 664 273 664  curveto
237 664 208 654 185 635  curveto
162 616 150 593 150 564  curveto
150 540 159 519 176 500  curveto
193 481 224 459 269 434  curveto
320 404 lineto
383 369 426 335 451 304  curveto
476 272 488 234 488 190  curveto
488 127 465 77 419 39  curveto
372 0 311 -18 234 -18  curveto
closepath
fill
		} def

	/T
		{
265 0 moveto
265 646 lineto
8 646 lineto
8 722 lineto
624 722 lineto
624 646 lineto
367 646 lineto
367 0 lineto
265 0 lineto
closepath
fill
		} def

	/U
		{
87 722 moveto
189 722 lineto
189 266 lineto
189 194 203 141 230 108  curveto
257 75 299 58 358 58  curveto
415 58 456 74 480 105  curveto
504 136 516 188 516 263  curveto
516 722 lineto
605 722 lineto
605 264 lineto
605 166 585 94 545 49  curveto
504 4 440 -18 351 -18  curveto
261 -18 194 5 151 51  curveto
108 98 87 170 87 267  curveto
87 722 lineto
closepath
fill
		} def

	/V
		{
290 0 moveto
17 722 lineto
120 722 lineto
343 130 lineto
559 722 lineto
649 722 lineto
387 0 lineto
290 0 lineto
closepath
fill
		} def

	/W
		{
187 0 moveto
0 722 lineto
99 722 lineto
247 151 lineto
383 722 lineto
482 722 lineto
611 159 lineto
770 722 lineto
854 722 lineto
651 0 lineto
549 0 lineto
421 557 lineto
288 0 lineto
187 0 lineto
closepath
fill
		} def

	/X
		{
7 0 moveto
247 362 lineto
19 722 lineto
140 722 lineto
314 450 lineto
497 722 lineto
593 722 lineto
362 373 lineto
599 0 lineto
478 0 lineto
294 286 lineto
104 0 lineto
7 0 lineto
closepath
fill
		} def

	/Y
		{
249 0 moveto
249 301 lineto
8 722 lineto
125 722 lineto
312 396 lineto
515 722 lineto
610 722 lineto
352 303 lineto
352 0 lineto
249 0 lineto
closepath
fill
		} def

	/Z
		{
46 0 moveto
46 82 lineto
434 646 lineto
70 646 lineto
70 722 lineto
557 722 lineto
557 646 lineto
169 82 lineto
557 82 lineto
557 0 lineto
46 0 lineto
closepath
fill
		} def

	/bracketleft
		{
96 -144 moveto
96 771 lineto
289 771 lineto
289 698 lineto
180 698 lineto
180 -72 lineto
289 -72 lineto
289 -144 lineto
96 -144 lineto
closepath
fill
		} def

	/backslash
		{
429 -144 moveto
169 722 lineto
93 722 lineto
354 -144 lineto
429 -144 lineto
closepath
fill
		} def

	/bracketright
		{
228 -144 moveto
228 771 lineto
35 771 lineto
35 698 lineto
144 698 lineto
144 -72 lineto
35 -72 lineto
35 -144 lineto
228 -144 lineto
closepath
fill
		} def

	/asciicircum
		{
316 561 moveto
132 192 lineto
51 192 lineto
316 722 lineto
581 192 lineto
500 192 lineto
316 561 lineto
closepath
fill
		} def

	/underscore
		{
42 -72 moveto
42 0 lineto
457 0 lineto
457 -72 lineto
42 -72 lineto
closepath
fill
		} def

	/quoteleft
		{
421 626 moveto
349 626 lineto
192 783 lineto
304 783 lineto
421 626 lineto
closepath
fill
		} def

	/a
		{
369 67 moveto
312 14 256 -12 203 -12  curveto
159 -12 122 1 93 29  curveto
64 56 50 91 50 133  curveto
50 191 74 235 123 266  curveto
171 297 241 313 332 313  curveto
355 313 lineto
355 377 lineto
355 438 323 469 260 469  curveto
209 469 155 454 96 422  curveto
96 502 lineto
160 528 221 542 278 542  curveto
337 542 381 528 409 501  curveto
437 475 451 433 451 377  curveto
451 137 lineto
451 82 468 54 502 54  curveto
506 54 512 55 521 56  curveto
527 3 lineto
506 -6 481 -12 455 -12  curveto
410 -12 382 14 369 67  curveto
closepath
355 119 moveto
355 256 lineto
323 257 lineto
270 257 227 247 195 227  curveto
162 207 146 181 146 148  curveto
146 125 154 106 170 90  curveto
187 74 207 66 230 66  curveto
270 66 312 84 355 119  curveto
closepath
fill
		} def

	/b
		{
96 -5 moveto
96 771 lineto
192 771 lineto
192 430 lineto
231 504 290 542 369 542  curveto
433 542 483 518 520 472  curveto
556 425 575 361 575 281  curveto
575 193 554 122 512 68  curveto
471 14 416 -12 349 -12  curveto
286 -12 234 11 192 60  curveto
180 -5 lineto
96 -5 lineto
closepath
192 126 moveto
241 82 289 60 333 60  curveto
426 60 472 130 472 271  curveto
472 395 431 458 349 458  curveto
295 458 243 428 192 370  curveto
192 126 lineto
closepath
fill
		} def

	/c
		{
303 -12 moveto
231 -12 172 14 125 67  curveto
77 120 54 187 54 268  curveto
54 354 77 421 124 469  curveto
170 517 236 542 319 542  curveto
361 542 407 536 458 524  curveto
458 444 lineto
404 460 359 468 325 468  curveto
276 468 237 449 207 412  curveto
177 375 162 326 162 265  curveto
162 205 177 157 208 120  curveto
239 83 279 65 328 65  curveto
372 65 417 76 464 99  curveto
464 16 lineto
402 -2 348 -12 303 -12  curveto
closepath
fill
		} def

	/d
		{
436 0 moveto
436 99 lineto
397 25 338 -12 259 -12  curveto
195 -12 145 11 109 57  curveto
72 104 54 167 54 248  curveto
54 336 74 407 116 461  curveto
157 515 212 542 280 542  curveto
343 542 395 517 436 469  curveto
436 771 lineto
533 771 lineto
533 0 lineto
436 0 lineto
closepath
436 403 moveto
386 447 339 469 294 469  curveto
202 469 156 399 156 258  curveto
156 134 197 72 279 72  curveto
333 72 385 101 436 159  curveto
436 403 lineto
closepath
fill
		} def

	/e
		{
484 17 moveto
420 -2 365 -12 319 -12  curveto
241 -12 177 13 128 65  curveto
78 117 54 184 54 267  curveto
54 347 75 413 119 465  curveto
162 516 218 542 286 542  curveto
350 542 399 519 434 474  curveto
469 428 487 363 487 279  curveto
486 250 lineto
152 250 lineto
166 124 228 61 337 61  curveto
377 61 426 71 484 93  curveto
484 17 lineto
closepath
156 322 moveto
390 322 lineto
390 420 353 470 280 470  curveto
206 470 165 420 156 322  curveto
closepath
fill
		} def

	/f
		{
210 458 moveto
210 0 lineto
114 0 lineto
114 458 lineto
39 458 lineto
39 530 lineto
114 530 lineto
114 593 lineto
114 720 171 783 287 783  curveto
319 783 355 777 396 767  curveto
396 690 lineto
353 704 319 710 292 710  curveto
261 710 239 703 228 688  curveto
216 673 210 645 210 604  curveto
210 530 lineto
343 530 lineto
343 458 lineto
210 458 lineto
closepath
fill
		} def

	/g
		{
98 -176 moveto
109 -92 lineto
165 -119 219 -132 273 -132  curveto
382 -132 436 -74 436 40  curveto
436 123 lineto
401 49 342 12 261 12  curveto
198 12 147 35 110 81  curveto
72 127 54 190 54 268  curveto
54 349 75 415 118 465  curveto
160 516 215 542 283 542  curveto
342 542 393 517 436 469  curveto
436 530 lineto
533 530 lineto
533 144 lineto
533 61 528 0 520 -39  curveto
511 -79 495 -112 471 -137  curveto
429 -182 364 -204 275 -204  curveto
214 -204 154 -195 98 -176  curveto
closepath
436 183 moveto
436 403 lineto
394 447 348 469 298 469  curveto
254 469 219 451 194 416  curveto
169 381 156 332 156 270  curveto
156 154 197 96 279 96  curveto
334 96 387 125 436 183  curveto
closepath
fill
		} def

	/h
		{
96 0 moveto
96 771 lineto
192 771 lineto
192 430 lineto
243 504 305 542 378 542  curveto
424 542 461 527 488 498  curveto
516 469 529 430 529 380  curveto
529 0 lineto
433 0 lineto
433 349 lineto
433 388 427 417 416 433  curveto
404 450 385 458 358 458  curveto
299 458 244 420 192 343  curveto
192 0 lineto
96 0 lineto
closepath
fill
		} def

	/i
		{
96 0 moveto
96 530 lineto
192 530 lineto
192 0 lineto
96 0 lineto
closepath
96 626 moveto
96 722 lineto
192 722 lineto
192 626 lineto
96 626 lineto
closepath
fill
		} def

	/j
		{
-75 -180 moveto
-75 -104 lineto
-30 -122 3 -132 27 -132  curveto
61 -132 83 -123 94 -105  curveto
105 -88 111 -53 111 0  curveto
111 530 lineto
208 530 lineto
208 0 lineto
208 -136 150 -204 35 -204  curveto
0 -204 -35 -196 -75 -180  curveto
closepath
111 626 moveto
111 722 lineto
208 722 lineto
208 626 lineto
111 626 lineto
closepath
fill
		} def

	/k
		{
96 0 moveto
96 771 lineto
192 771 lineto
192 272 lineto
417 530 lineto
520 530 lineto
306 282 lineto
564 0 lineto
441 0 lineto
192 271 lineto
192 0 lineto
96 0 lineto
closepath
fill
		} def

	/l
		{
96 0 moveto
96 771 lineto
192 771 lineto
192 0 lineto
96 0 lineto
closepath
fill
		} def

	/m
		{
96 0 moveto
96 530 lineto
192 530 lineto
192 430 lineto
239 504 299 542 373 542  curveto
444 542 492 504 518 430  curveto
563 505 622 542 695 542  curveto
742 542 778 528 804 501  curveto
830 473 843 435 843 385  curveto
843 0 lineto
746 0 lineto
746 370 lineto
746 431 722 461 674 461  curveto
625 461 572 426 518 355  curveto
518 0 lineto
421 0 lineto
421 370 lineto
421 431 396 461 348 461  curveto
299 461 247 426 192 355  curveto
192 0 lineto
96 0 lineto
closepath
fill
		} def

	/n
		{
96 0 moveto
96 530 lineto
192 530 lineto
192 430 lineto
243 504 305 542 378 542  curveto
424 542 461 527 488 498  curveto
516 469 529 430 529 380  curveto
529 0 lineto
433 0 lineto
433 349 lineto
433 388 427 417 416 433  curveto
404 450 385 458 358 458  curveto
299 458 244 420 192 343  curveto
192 0 lineto
96 0 lineto
closepath
fill
		} def

	/o
		{
303 -12 moveto
227 -12 167 12 122 63  curveto
76 113 54 180 54 265  curveto
54 350 76 417 122 467  curveto
167 517 229 542 307 542  curveto
384 542 446 517 491 467  curveto
537 417 560 350 560 266  curveto
560 179 537 111 491 62  curveto
446 12 383 -12 303 -12  curveto
closepath
305 60 moveto
407 60 458 128 458 266  curveto
458 401 407 469 307 469  curveto
206 469 156 401 156 265  curveto
156 128 206 60 305 60  curveto
closepath
fill
		} def

	/p
		{
96 -192 moveto
96 530 lineto
192 530 lineto
192 430 lineto
231 504 290 542 369 542  curveto
433 542 483 518 520 472  curveto
556 425 575 361 575 281  curveto
575 193 554 122 512 68  curveto
471 14 416 -12 349 -12  curveto
286 -12 234 11 192 60  curveto
192 -192 lineto
96 -192 lineto
closepath
192 126 moveto
241 82 289 60 333 60  curveto
426 60 472 130 472 271  curveto
472 395 431 458 349 458  curveto
295 458 243 428 192 370  curveto
192 126 lineto
closepath
fill
		} def

	/q
		{
436 -192 moveto
436 99 lineto
397 25 338 -12 259 -12  curveto
195 -12 145 11 109 57  curveto
72 104 54 167 54 248  curveto
54 336 74 407 116 461  curveto
157 515 212 542 280 542  curveto
343 542 395 517 436 469  curveto
436 530 lineto
533 530 lineto
533 -192 lineto
436 -192 lineto
closepath
436 403 moveto
386 447 339 469 294 469  curveto
202 469 156 399 156 258  curveto
156 134 197 72 279 72  curveto
333 72 385 101 436 159  curveto
436 403 lineto
closepath
fill
		} def

	/r
		{
96 0 moveto
96 530 lineto
192 530 lineto
192 430 lineto
230 504 285 542 358 542  curveto
368 542 378 541 389 539  curveto
389 449 lineto
372 455 357 458 345 458  curveto
284 458 233 421 192 349  curveto
192 0 lineto
96 0 lineto
closepath
fill
		} def

	/s
		{
236 -12 moveto
192 -12 139 -1 76 18  curveto
76 106 lineto
139 75 194 60 240 60  curveto
268 60 291 67 309 82  curveto
327 97 336 116 336 138  curveto
336 171 311 198 260 220  curveto
204 244 lineto
121 278 79 328 79 393  curveto
79 439 95 475 128 502  curveto
161 528 206 542 263 542  curveto
292 542 329 537 373 529  curveto
393 525 lineto
393 445 lineto
339 461 296 469 265 469  curveto
203 469 172 447 172 402  curveto
172 373 195 348 242 329  curveto
289 309 lineto
341 287 378 264 400 239  curveto
422 214 433 184 433 147  curveto
433 100 414 62 377 32  curveto
341 2 294 -12 236 -12  curveto
closepath
fill
		} def

	/t
		{
255 -12 moveto
206 -12 168 1 141 29  curveto
113 57 100 96 100 146  curveto
100 458 lineto
33 458 lineto
33 530 lineto
100 530 lineto
100 626 lineto
196 635 lineto
196 530 lineto
334 530 lineto
334 458 lineto
196 458 lineto
196 164 lineto
196 94 226 60 286 60  curveto
298 60 314 62 332 66  curveto
332 0 lineto
302 -8 277 -12 255 -12  curveto
closepath
fill
		} def

	/u
		{
427 0 moveto
427 99 lineto
376 25 314 -12 241 -12  curveto
195 -12 158 2 131 31  curveto
104 60 90 99 90 149  curveto
90 530 lineto
186 530 lineto
186 180 lineto
186 140 192 112 203 95  curveto
215 79 234 70 261 70  curveto
320 70 375 109 427 186  curveto
427 530 lineto
523 530 lineto
523 0 lineto
427 0 lineto
closepath
fill
		} def

	/v
		{
206 0 moveto
8 530 lineto
104 530 lineto
259 117 lineto
421 530 lineto
511 530 lineto
302 0 lineto
206 0 lineto
closepath
fill
		} def

	/w
		{
157 0 moveto
5 530 lineto
100 530 lineto
216 119 lineto
341 530 lineto
437 530 lineto
547 119 lineto
681 530 lineto
763 530 lineto
590 0 lineto
494 0 lineto
381 410 lineto
254 0 lineto
157 0 lineto
closepath
fill
		} def

	/x
		{
42 0 moveto
244 273 lineto
48 530 lineto
163 530 lineto
317 326 lineto
458 530 lineto
551 530 lineto
368 261 lineto
567 0 lineto
453 0 lineto
293 209 lineto
139 0 lineto
42 0 lineto
closepath
fill
		} def

	/y
		{
126 -192 moveto
212 0 lineto
7 530 lineto
111 530 lineto
263 130 lineto
425 530 lineto
516 530 lineto
227 -192 lineto
126 -192 lineto
closepath
fill
		} def

	/z
		{
60 0 moveto
60 72 lineto
388 458 lineto
75 458 lineto
75 530 lineto
506 530 lineto
506 458 lineto
178 72 lineto
513 72 lineto
513 0 lineto
60 0 lineto
closepath
fill
		} def

	/braceleft
		{
12 349 moveto
36 349 lineto
85 349 110 375 110 428  curveto
110 450 107 473 103 496  curveto
93 539 lineto
87 567 84 594 84 621  curveto
84 664 100 699 131 726  curveto
162 752 204 767 259 771  curveto
259 698 lineto
245 698 lineto
223 698 205 692 190 681  curveto
175 669 168 655 168 638  curveto
168 630 170 614 174 591  curveto
183 542 lineto
186 520 188 494 188 465  curveto
188 404 164 353 116 313  curveto
164 272 188 221 188 160  curveto
188 131 186 105 183 84  curveto
174 34 lineto
170 11 168 -4 168 -12  curveto
168 -29 175 -43 190 -54  curveto
205 -66 223 -72 245 -72  curveto
259 -72 lineto
259 -144 lineto
204 -141 161 -126 130 -99  curveto
99 -72 84 -37 84 5  curveto
84 32 87 59 93 87  curveto
103 129 lineto
107 153 110 176 110 199  curveto
110 251 85 277 36 277  curveto
12 277 lineto
12 349 lineto
closepath
fill
		} def

	/bar
		{
150 -144 moveto
150 771 lineto
222 771 lineto
222 -144 lineto
150 -144 lineto
closepath
fill
		} def

	/braceright
		{
313 349 moveto
289 349 lineto
240 349 215 375 215 428  curveto
215 450 218 473 222 496  curveto
232 539 lineto
238 567 241 594 241 621  curveto
241 664 225 699 194 726  curveto
163 752 121 767 66 771  curveto
66 698 lineto
80 698 lineto
102 698 120 692 135 681  curveto
150 669 157 655 157 638  curveto
157 630 155 614 151 591  curveto
142 542 lineto
139 520 137 494 137 465  curveto
137 404 161 353 209 313  curveto
161 272 137 221 137 160  curveto
137 131 139 105 142 84  curveto
151 34 lineto
155 11 157 -4 157 -12  curveto
157 -29 150 -43 135 -54  curveto
120 -66 102 -72 80 -72  curveto
66 -72 lineto
66 -144 lineto
121 -141 164 -126 195 -99  curveto
226 -72 241 -37 241 5  curveto
241 32 238 59 232 87  curveto
222 129 lineto
218 153 215 176 215 199  curveto
215 251 240 277 289 277  curveto
313 277 lineto
313 349 lineto
closepath
fill
		} def

	/asciitilde
		{
51 216 moveto
51 263 63 302 88 332  curveto
113 362 146 377 186 377  curveto
212 377 247 365 291 342  curveto
343 315 lineto
405 281 lineto
420 274 435 271 450 271  curveto
489 271 509 301 509 361  curveto
581 361 lineto
574 252 530 198 450 198  curveto
422 198 382 211 332 237  curveto
277 266 lineto
219 296 lineto
207 302 195 305 184 305  curveto
143 305 123 275 123 216  curveto
51 216 lineto
closepath
fill
		} def

	/exclamdown
		{
206 530 moveto
206 433 lineto
109 433 lineto
109 530 lineto
206 530 lineto
closepath
194 337 moveto
206 -48 lineto
206 -192 lineto
109 -192 lineto
109 -48 lineto
122 337 lineto
194 337 lineto
closepath
fill
		} def

	/cent
		{
323 0 moveto
323 84 lineto
257 90 203 119 162 170  curveto
120 222 100 285 100 360  curveto
100 437 119 499 158 546  curveto
197 594 252 622 323 632  curveto
323 722 lineto
372 722 lineto
372 632 lineto
415 630 461 622 510 609  curveto
510 528 lineto
453 548 406 559 372 562  curveto
372 152 lineto
416 152 462 163 510 186  curveto
510 112 lineto
462 93 416 84 372 84  curveto
372 0 lineto
323 0 lineto
closepath
323 158 moveto
323 558 lineto
284 554 254 535 235 502  curveto
215 468 205 420 205 357  curveto
205 303 215 260 235 227  curveto
254 193 284 170 323 158  curveto
closepath
fill
		} def

	/sterling
		{
120 0 moveto
120 84 lineto
154 95 180 113 197 139  curveto
214 164 223 198 223 238  curveto
223 349 lineto
135 349 lineto
135 421 lineto
223 421 lineto
223 526 lineto
223 596 239 649 272 685  curveto
305 722 353 740 415 740  curveto
448 740 485 735 525 726  curveto
525 644 lineto
485 660 446 668 409 668  curveto
379 668 356 659 341 640  curveto
326 621 319 593 319 556  curveto
319 421 lineto
424 421 lineto
424 349 lineto
319 349 lineto
319 287 lineto
319 236 313 196 301 167  curveto
290 139 267 111 234 84  curveto
533 84 lineto
533 0 lineto
120 0 lineto
closepath
fill
		} def

	/fraction
		{
-301 -18 moveto
229 740 lineto
295 740 lineto
-235 -18 lineto
-301 -18 lineto
closepath
fill
		} def

	/yen
		{
265 0 moveto
265 168 lineto
120 168 lineto
120 229 lineto
265 229 lineto
265 301 lineto
120 301 lineto
120 361 lineto
265 361 lineto
39 722 lineto
152 722 lineto
328 441 lineto
518 722 lineto
605 722 lineto
361 361 lineto
505 361 lineto
505 301 lineto
361 301 lineto
361 229 lineto
505 229 lineto
505 168 lineto
361 168 lineto
361 0 lineto
265 0 lineto
closepath
fill
		} def

	/florin
		{
115 -144 moveto
213 349 lineto
117 349 lineto
117 421 lineto
228 421 lineto
238 473 lineto
256 562 285 629 325 673  curveto
366 718 417 740 480 740  curveto
516 740 553 736 592 726  curveto
577 650 lineto
543 662 511 668 480 668  curveto
445 668 416 656 394 631  curveto
371 605 355 568 345 517  curveto
326 421 lineto
471 421 lineto
471 349 lineto
312 349 lineto
213 -144 lineto
115 -144 lineto
closepath
fill
		} def

	/section
		{
107 -126 moveto
107 -39 lineto
186 -73 253 -90 307 -90  curveto
350 -90 384 -82 410 -66  curveto
437 -50 450 -28 450 -2  curveto
450 19 443 36 429 49  curveto
415 62 384 78 337 98  curveto
251 135 lineto
204 155 168 179 145 206  curveto
122 233 110 264 110 299  curveto
110 348 134 397 181 445  curveto
135 475 112 515 112 562  curveto
112 616 133 659 175 691  curveto
217 724 273 740 342 740  curveto
391 740 447 733 510 717  curveto
510 639 lineto
444 658 388 668 341 668  curveto
299 668 265 660 239 643  curveto
213 626 200 605 200 578  curveto
200 560 207 544 221 530  curveto
235 515 256 502 285 491  curveto
352 464 lineto
419 437 466 410 491 385  curveto
517 359 530 326 530 285  curveto
530 239 506 189 458 135  curveto
511 104 538 60 538 4  curveto
538 -46 516 -87 472 -117  curveto
429 -147 370 -163 297 -163  curveto
247 -163 184 -151 107 -126  curveto
closepath
410 166 moveto
434 198 446 230 446 261  curveto
446 284 438 303 423 319  curveto
407 334 379 350 338 367  curveto
230 413 lineto
206 383 194 353 194 322  curveto
194 300 203 280 222 261  curveto
240 243 268 226 306 210  curveto
410 166 lineto
closepath
fill
		} def

	/currency
		{
185 188 moveto
90 93 lineto
47 135 lineto
143 230 lineto
113 269 99 313 99 361  curveto
99 409 113 452 143 491  curveto
47 587 lineto
90 629 lineto
185 534 lineto
226 563 269 578 315 578  curveto
362 578 405 563 446 534  curveto
541 629 lineto
584 587 lineto
489 491 lineto
518 452 532 409 532 361  curveto
532 313 518 269 489 230  curveto
584 135 lineto
541 93 lineto
446 188 lineto
405 159 362 144 315 144  curveto
269 144 226 159 185 188  curveto
closepath
313 216 moveto
355 216 390 230 418 258  curveto
446 285 460 320 460 361  curveto
460 402 446 436 418 464  curveto
390 491 356 505 315 505  curveto
275 505 240 491 213 464  curveto
185 436 171 402 171 361  curveto
171 321 185 287 212 259  curveto
240 230 274 216 313 216  curveto
closepath
fill
		} def

	/quotesingle
		{
78 505 moveto
54 771 lineto
174 771 lineto
150 505 lineto
78 505 lineto
closepath
fill
		} def

	/quotedblleft
		{
331 771 moveto
331 734 lineto
319 728 311 717 305 701  curveto
299 685 296 664 296 637  curveto
296 626 lineto
343 626 lineto
343 518 lineto
234 518 lineto
234 599 lineto
234 648 242 687 258 715  curveto
274 744 298 762 331 771  curveto
closepath
150 771 moveto
150 734 lineto
138 728 130 717 124 701  curveto
119 685 116 664 116 637  curveto
116 626 lineto
162 626 lineto
162 518 lineto
54 518 lineto
54 599 lineto
54 648 62 687 78 715  curveto
94 744 118 762 150 771  curveto
closepath
fill
		} def

	/guillemotleft
		{
487 445 moveto
343 265 lineto
487 84 lineto
439 48 lineto
247 265 lineto
439 481 lineto
487 445 lineto
closepath
294 445 moveto
150 265 lineto
294 84 lineto
247 48 lineto
54 265 lineto
247 481 lineto
294 445 lineto
closepath
fill
		} def

	/guilsinglleft
		{
294 445 moveto
150 265 lineto
294 84 lineto
247 48 lineto
54 265 lineto
247 481 lineto
294 445 lineto
closepath
fill
		} def

	/guilsinglright
		{
36 445 moveto
180 265 lineto
36 84 lineto
83 48 lineto
276 265 lineto
83 481 lineto
36 445 lineto
closepath
fill
		} def

	/fi
		{
114 0 moveto
114 458 lineto
39 458 lineto
39 530 lineto
114 530 lineto
114 593 lineto
114 720 171 783 287 783  curveto
319 783 355 777 396 767  curveto
396 690 lineto
353 704 319 710 292 710  curveto
261 710 239 703 228 688  curveto
216 673 210 645 210 604  curveto
210 530 lineto
547 530 lineto
547 0 lineto
451 0 lineto
451 458 lineto
210 458 lineto
210 0 lineto
114 0 lineto
closepath
451 626 moveto
451 722 lineto
547 722 lineto
547 626 lineto
451 626 lineto
closepath
fill
		} def

	/fl
		{
117 0 moveto
117 458 lineto
39 458 lineto
39 530 lineto
117 530 lineto
117 584 lineto
117 716 184 783 317 783  curveto
348 783 390 779 446 771  curveto
551 771 lineto
551 0 lineto
454 0 lineto
454 688 lineto
392 703 345 710 313 710  curveto
277 710 252 702 236 687  curveto
221 671 213 644 213 606  curveto
213 530 lineto
346 530 lineto
346 458 lineto
213 458 lineto
213 0 lineto
117 0 lineto
closepath
fill
		} def

	/endash
		{
72 252 moveto
72 325 lineto
505 325 lineto
505 252 lineto
72 252 lineto
closepath
fill
		} def

	/dagger
		{
268 -144 moveto
279 409 lineto
111 397 lineto
111 469 lineto
279 458 lineto
268 722 lineto
364 722 lineto
352 458 lineto
521 469 lineto
521 397 lineto
352 409 lineto
364 -144 lineto
268 -144 lineto
closepath
fill
		} def

	/daggerdbl
		{
268 -144 moveto
279 120 lineto
111 108 lineto
111 180 lineto
279 168 lineto
279 409 lineto
111 397 lineto
111 469 lineto
279 458 lineto
268 722 lineto
364 722 lineto
352 458 lineto
521 469 lineto
521 397 lineto
352 409 lineto
352 168 lineto
521 180 lineto
521 108 lineto
352 120 lineto
364 -144 lineto
268 -144 lineto
closepath
fill
		} def

	/periodcentered
		{
97 239 moveto
97 360 lineto
218 360 lineto
218 239 lineto
97 239 lineto
closepath
fill
		} def

	/paragraph
		{
310 -144 moveto
310 361 lineto
245 365 195 385 159 421  curveto
123 457 105 504 105 563  curveto
105 621 121 662 152 686  curveto
183 710 236 722 310 722  curveto
502 722 lineto
502 -144 lineto
442 -144 lineto
442 662 lineto
370 662 lineto
370 -144 lineto
310 -144 lineto
closepath
fill
		} def

	/bullet
		{
300 108 moveto
242 108 192 129 150 172  curveto
108 215 87 266 87 325  curveto
87 385 108 436 150 478  curveto
193 520 244 542 304 542  curveto
364 542 415 520 457 478  curveto
499 435 521 384 521 323  curveto
521 263 499 212 456 171  curveto
413 129 361 108 300 108  curveto
closepath
fill
		} def

	/quotesinglbase
		{
97 -144 moveto
97 -108 lineto
113 -103 125 -93 132 -76  curveto
140 -60 144 -38 144 -9  curveto
144 0 lineto
97 0 lineto
97 120 lineto
218 120 lineto
218 16 lineto
218 -33 208 -71 187 -97  curveto
167 -124 137 -140 97 -144  curveto
closepath
fill
		} def

	/quotedblbase
		{
66 -144 moveto
66 -108 lineto
77 -102 86 -91 92 -74  curveto
97 -58 100 -37 100 -11  curveto
100 0 lineto
54 0 lineto
54 108 lineto
162 108 lineto
162 27 lineto
162 -21 154 -60 138 -89  curveto
122 -118 98 -136 66 -144  curveto
closepath
247 -144 moveto
247 -108 lineto
258 -102 267 -91 272 -74  curveto
278 -58 281 -37 281 -11  curveto
281 0 lineto
234 0 lineto
234 108 lineto
343 108 lineto
343 27 lineto
343 -21 335 -60 319 -89  curveto
302 -118 278 -136 247 -144  curveto
closepath
fill
		} def

	/quotedblright
		{
66 518 moveto
66 554 lineto
77 560 86 571 92 587  curveto
97 603 100 625 100 651  curveto
100 662 lineto
54 662 lineto
54 771 lineto
162 771 lineto
162 689 lineto
162 640 154 601 138 572  curveto
122 544 98 525 66 518  curveto
closepath
247 518 moveto
247 554 lineto
258 560 267 571 272 587  curveto
278 603 281 625 281 651  curveto
281 662 lineto
234 662 lineto
234 771 lineto
343 771 lineto
343 689 lineto
343 640 335 601 319 572  curveto
302 544 278 525 247 518  curveto
closepath
fill
		} def

	/guillemotright
		{
36 445 moveto
180 265 lineto
36 84 lineto
84 48 lineto
276 265 lineto
84 481 lineto
36 445 lineto
closepath
229 445 moveto
373 265 lineto
229 84 lineto
276 48 lineto
469 265 lineto
276 481 lineto
229 445 lineto
closepath
fill
		} def

	/ellipsis
		{
118 0 moveto
118 96 lineto
214 96 lineto
214 0 lineto
118 0 lineto
closepath
452 0 moveto
452 96 lineto
548 96 lineto
548 0 lineto
452 0 lineto
closepath
785 0 moveto
785 96 lineto
881 96 lineto
881 0 lineto
785 0 lineto
closepath
fill
		} def

	/perthousand
		{
11 -18 moveto
581 740 lineto
656 740 lineto
87 -18 lineto
11 -18 lineto
closepath
157 361 moveto
111 361 74 377 47 410  curveto
19 443 5 487 5 542  curveto
5 597 19 641 47 674  curveto
75 706 112 722 159 722  curveto
206 722 243 706 271 674  curveto
299 641 312 597 312 542  curveto
312 486 299 442 271 409  curveto
243 377 205 361 157 361  curveto
closepath
158 409 moveto
186 409 206 420 220 442  curveto
233 465 240 498 240 542  curveto
240 583 233 614 218 638  curveto
204 662 184 674 159 674  curveto
134 674 114 662 100 638  curveto
85 614 78 582 78 542  curveto
78 502 85 469 100 445  curveto
114 421 134 409 158 409  curveto
closepath
506 0 moveto
460 0 423 16 396 49  curveto
369 81 355 125 355 180  curveto
355 236 369 279 396 312  curveto
424 345 461 361 508 361  curveto
555 361 593 345 620 312  curveto
648 280 662 236 662 181  curveto
662 125 648 80 621 48  curveto
593 16 555 0 506 0  curveto
closepath
507 48 moveto
535 48 555 59 569 81  curveto
583 103 590 137 590 181  curveto
590 221 582 253 568 277  curveto
553 301 533 313 508 313  curveto
484 313 464 301 449 277  curveto
435 253 427 221 427 180  curveto
427 140 434 108 449 84  curveto
463 60 483 48 507 48  curveto
closepath
850 0 moveto
804 0 767 16 739 49  curveto
712 81 698 125 698 180  curveto
698 236 712 279 740 312  curveto
767 345 805 361 852 361  curveto
899 361 936 345 964 312  curveto
992 280 1005 236 1005 181  curveto
1005 125 992 80 964 48  curveto
936 16 898 0 850 0  curveto
closepath
851 48 moveto
878 48 899 59 912 81  curveto
926 103 933 137 933 181  curveto
933 221 926 253 911 277  curveto
896 301 876 313 852 313  curveto
827 313 807 301 792 277  curveto
778 253 771 221 771 180  curveto
771 140 778 108 792 84  curveto
807 60 826 48 851 48  curveto
closepath
fill
		} def

	/questiondown
		{
300 529 moveto
300 433 lineto
204 433 lineto
204 529 lineto
300 529 lineto
closepath
300 336 moveto
300 310 lineto
300 248 276 189 228 135  curveto
197 99 lineto
146 41 121 -7 121 -44  curveto
121 -73 132 -96 154 -113  curveto
177 -130 207 -138 245 -138  curveto
295 -138 348 -126 404 -102  curveto
404 -184 lineto
344 -202 287 -211 235 -211  curveto
168 -211 116 -196 77 -166  curveto
38 -136 18 -96 18 -45  curveto
18 -17 24 7 35 28  curveto
46 48 68 74 100 104  curveto
130 132 lineto
160 161 180 185 189 204  curveto
199 224 204 250 204 283  curveto
204 336 lineto
300 336 lineto
closepath
fill
		} def

	/grave
		{
421 626 moveto
349 626 lineto
192 783 lineto
304 783 lineto
421 626 lineto
closepath
fill
		} def

	/acute
		{
192 626 moveto
310 783 lineto
421 783 lineto
265 626 lineto
192 626 lineto
closepath
fill
		} def

	/circumflex
		{
136 626 moveto
253 783 lineto
360 783 lineto
478 626 lineto
405 626 lineto
307 725 lineto
306 725 lineto
208 626 lineto
136 626 lineto
closepath
fill
		} def

	/tilde
		{
144 626 moveto
146 664 154 693 169 712  curveto
184 731 206 740 234 740  curveto
258 740 280 734 300 722  curveto
330 704 lineto
348 692 362 687 372 687  curveto
383 687 391 691 398 700  curveto
404 709 408 722 409 740  curveto
469 740 lineto
467 702 459 674 444 655  curveto
429 635 407 626 379 626  curveto
355 626 333 632 313 645  curveto
284 663 lineto
265 674 251 680 242 680  curveto
231 680 222 675 216 666  curveto
209 657 205 644 204 626  curveto
144 626 lineto
closepath
fill
		} def

	/macron
		{
42 710 moveto
42 783 lineto
457 783 lineto
457 710 lineto
42 710 lineto
closepath
fill
		} def

	/breve
		{
144 783 moveto
204 783 lineto
209 754 220 733 238 719  curveto
255 705 278 698 307 698  curveto
336 698 359 705 376 719  curveto
393 733 404 754 409 783  curveto
469 783 lineto
464 735 447 697 417 669  curveto
388 640 351 626 307 626  curveto
262 626 225 640 196 669  curveto
167 697 149 735 144 783  curveto
closepath
fill
		} def

	/dotaccent
		{
258 626 moveto
258 722 lineto
354 722 lineto
354 626 lineto
258 626 lineto
closepath
fill
		} def

	/dieresis
		{
168 626 moveto
168 710 lineto
252 710 lineto
252 626 lineto
168 626 lineto
closepath
361 626 moveto
361 710 lineto
445 710 lineto
445 626 lineto
361 626 lineto
closepath
fill
		} def

	/ring
		{
305 626 moveto
275 626 249 637 228 658  curveto
206 680 196 706 196 737  curveto
196 767 207 794 228 815  curveto
250 837 276 848 307 848  curveto
337 848 363 837 385 815  curveto
407 794 417 768 417 737  curveto
417 706 407 679 385 658  curveto
363 637 337 626 305 626  curveto
closepath
306 668 moveto
325 668 342 675 355 688  curveto
369 701 375 718 375 737  curveto
375 756 369 772 355 786  curveto
342 799 326 806 307 806  curveto
287 806 271 799 258 786  curveto
244 772 238 756 238 737  curveto
238 718 244 702 258 688  curveto
271 675 287 668 306 668  curveto
closepath
fill
		} def

	/cedilla
		{
305 0 moveto
353 0 lineto
323 -53 lineto
349 -53 371 -60 390 -76  curveto
409 -91 418 -110 418 -130  curveto
418 -153 408 -172 389 -187  curveto
370 -203 347 -210 320 -210  curveto
296 -210 273 -207 249 -200  curveto
249 -161 lineto
264 -166 281 -168 300 -168  curveto
316 -168 329 -165 337 -159  curveto
346 -153 350 -144 350 -132  curveto
350 -116 342 -104 327 -97  curveto
312 -89 289 -85 259 -85  curveto
305 0 lineto
closepath
fill
		} def

	/hungarumlaut
		{
60 481 moveto
156 771 lineto
264 771 lineto
120 481 lineto
60 481 lineto
closepath
276 481 moveto
373 771 lineto
481 771 lineto
336 481 lineto
276 481 lineto
closepath
fill
		} def

	/ogonek
		{
321 0 moveto
373 0 lineto
352 -12 336 -25 326 -40  curveto
315 -55 310 -70 310 -87  curveto
310 -103 315 -114 324 -122  curveto
333 -130 347 -134 366 -134  curveto
384 -134 399 -131 411 -126  curveto
411 -166 lineto
391 -175 369 -180 343 -180  curveto
310 -180 285 -174 269 -161  curveto
252 -148 244 -128 244 -103  curveto
244 -82 250 -63 263 -46  curveto
276 -29 295 -14 321 0  curveto
closepath
fill
		} def

	/caron
		{
478 783 moveto
360 626 lineto
253 626 lineto
136 783 lineto
208 783 lineto
306 684 lineto
307 684 lineto
405 783 lineto
478 783 lineto
closepath
fill
		} def

	/emdash
		{
72 252 moveto
72 325 lineto
505 325 lineto
505 252 lineto
72 252 lineto
closepath
fill
		} def

	/AE
		{
8 0 moveto
429 722 lineto
860 722 lineto
860 646 lineto
558 646 lineto
558 414 lineto
811 414 lineto
811 338 lineto
558 338 lineto
558 76 lineto
882 76 lineto
882 0 lineto
456 0 lineto
456 202 lineto
220 202 lineto
102 0 lineto
8 0 lineto
closepath
263 277 moveto
456 277 lineto
456 605 lineto
263 277 lineto
closepath
fill
		} def

	/ordfeminine
		{
295 453 moveto
260 420 224 403 187 403  curveto
157 403 132 413 113 431  curveto
94 450 84 473 84 502  curveto
84 540 100 570 132 591  curveto
163 612 208 622 265 622  curveto
290 622 lineto
290 660 lineto
290 679 285 693 274 703  curveto
264 712 248 717 227 717  curveto
191 717 154 707 115 686  curveto
115 745 lineto
158 762 200 771 241 771  curveto
283 771 315 761 337 743  curveto
358 725 369 698 369 661  curveto
369 504 lineto
369 488 371 476 376 468  curveto
381 460 389 456 399 456  curveto
402 456 406 456 412 457  curveto
415 413 lineto
397 407 380 403 364 403  curveto
346 403 331 407 320 416  curveto
309 424 302 436 297 453  curveto
295 453 lineto
closepath
290 496 moveto
290 576 lineto
270 577 lineto
234 577 207 571 189 561  curveto
171 550 162 534 162 512  curveto
162 495 166 483 175 474  curveto
184 466 197 461 214 461  curveto
238 461 264 473 290 496  curveto
closepath
fill
		} def

	/Lslash
		{
108 0 moveto
108 337 lineto
12 285 lineto
12 368 lineto
108 420 lineto
108 722 lineto
210 722 lineto
210 476 lineto
331 542 lineto
331 459 lineto
210 394 lineto
210 76 lineto
536 76 lineto
536 0 lineto
108 0 lineto
closepath
fill
		} def

	/Oslash
		{
535 608 moveto
496 645 447 664 388 664  curveto
316 664 260 637 220 584  curveto
179 531 159 457 159 362  curveto
159 286 173 222 200 170  curveto
535 608 lineto
closepath
241 114 moveto
280 77 329 58 389 58  curveto
460 58 516 85 557 138  curveto
597 192 617 266 617 360  curveto
617 437 604 501 577 552  curveto
241 114 lineto
closepath
56 -18 moveto
138 89 lineto
80 160 50 251 50 361  curveto
50 476 81 568 142 637  curveto
204 706 285 740 388 740  curveto
465 740 532 720 589 679  curveto
637 740 lineto
721 740 lineto
638 633 lineto
697 562 726 472 726 360  curveto
726 246 695 154 634 85  curveto
573 16 491 -18 390 -18  curveto
310 -18 242 2 187 43  curveto
140 -18 lineto
56 -18 lineto
closepath
fill
		} def

	/OE
		{
551 28 moveto
500 -2 444 -18 381 -18  curveto
282 -18 202 16 142 86  curveto
81 156 50 248 50 361  curveto
50 476 81 568 142 637  curveto
203 706 285 740 387 740  curveto
446 740 500 725 551 694  curveto
551 722 lineto
955 722 lineto
955 646 lineto
653 646 lineto
653 414 lineto
906 414 lineto
906 338 lineto
653 341 lineto
653 76 lineto
976 76 lineto
976 0 lineto
551 0 lineto
551 28 lineto
closepath
551 277 moveto
551 444 lineto
551 520 538 576 511 611  curveto
485 646 444 664 387 664  curveto
315 664 260 637 219 583  curveto
179 530 159 456 159 361  curveto
159 266 179 192 220 138  curveto
260 85 316 58 388 58  curveto
442 58 483 76 510 113  curveto
537 149 551 204 551 277  curveto
closepath
fill
		} def

	/ordmasculine
		{
232 403 moveto
179 403 137 420 106 453  curveto
75 486 60 531 60 587  curveto
60 644 75 688 106 721  curveto
138 754 180 771 234 771  curveto
288 771 330 754 362 721  curveto
393 688 409 644 409 587  curveto
409 530 393 485 362 452  curveto
330 420 287 403 232 403  curveto
closepath
233 457 moveto
264 457 286 468 302 490  curveto
317 512 325 544 325 588  curveto
325 631 317 663 302 685  curveto
287 706 264 717 234 717  curveto
204 717 181 706 166 684  curveto
152 663 144 630 144 587  curveto
144 544 151 511 166 489  curveto
181 468 203 457 233 457  curveto
closepath
fill
		} def

	/ae
		{
395 94 moveto
333 23 269 -12 203 -12  curveto
159 -12 122 1 93 29  curveto
64 56 50 91 50 133  curveto
50 191 74 235 123 266  curveto
171 297 241 313 332 313  curveto
355 313 lineto
355 377 lineto
355 408 347 431 331 446  curveto
316 462 292 469 260 469  curveto
209 469 155 454 96 422  curveto
96 502 lineto
160 528 221 542 278 542  curveto
341 542 391 522 428 482  curveto
468 522 517 542 576 542  curveto
644 542 695 517 729 469  curveto
763 420 780 347 780 250  curveto
452 250 lineto
456 186 473 138 503 107  curveto
533 75 575 60 630 60  curveto
675 60 725 71 780 94  curveto
780 18 lineto
717 -2 659 -12 604 -12  curveto
558 -12 517 -3 482 14  curveto
447 32 418 58 395 94  curveto
closepath
355 119 moveto
355 256 lineto
323 257 lineto
270 257 227 247 195 227  curveto
162 207 146 181 146 148  curveto
146 125 154 106 170 90  curveto
187 74 207 66 230 66  curveto
270 66 312 84 355 119  curveto
closepath
455 316 moveto
677 316 lineto
677 367 669 405 651 431  curveto
634 457 608 470 573 470  curveto
537 470 510 457 490 431  curveto
470 405 458 367 455 316  curveto
closepath
fill
		} def

	/dotlessi
		{
96 0 moveto
96 530 lineto
192 530 lineto
192 0 lineto
96 0 lineto
closepath
fill
		} def

	/lslash
		{
120 0 moveto
120 352 lineto
12 294 lineto
12 375 lineto
120 434 lineto
120 771 lineto
216 771 lineto
216 487 lineto
325 542 lineto
325 462 lineto
216 405 lineto
216 0 lineto
120 0 lineto
closepath
fill
		} def

	/oslash
		{
54 -12 moveto
117 68 lineto
116 70 lineto
74 117 54 182 54 263  curveto
54 349 76 417 122 467  curveto
167 517 229 542 307 542  curveto
365 542 414 528 455 500  curveto
488 542 lineto
560 542 lineto
497 461 lineto
498 459 lineto
539 407 560 343 560 265  curveto
560 180 537 112 492 62  curveto
446 12 385 -12 307 -12  curveto
250 -12 201 1 159 29  curveto
126 -12 lineto
54 -12 lineto
closepath
437 384 moveto
210 95 lineto
236 71 267 60 306 60  curveto
407 60 458 127 458 262  curveto
458 306 451 347 437 384  curveto
closepath
177 145 moveto
403 433 lineto
377 457 345 469 308 469  curveto
207 469 156 402 156 267  curveto
156 219 163 179 177 145  curveto
closepath
fill
		} def

	/oe
		{
478 84 moveto
435 20 377 -12 302 -12  curveto
227 -12 166 13 121 63  curveto
76 113 54 181 54 265  curveto
54 349 76 416 121 466  curveto
166 516 227 542 303 542  curveto
374 542 431 509 475 444  curveto
515 509 574 542 653 542  curveto
721 542 772 517 806 469  curveto
840 420 857 347 857 250  curveto
528 250 lineto
533 186 550 138 580 107  curveto
610 75 652 60 707 60  curveto
752 60 802 71 857 94  curveto
857 18 lineto
794 -2 737 -12 686 -12  curveto
595 -12 525 20 478 84  curveto
closepath
302 60 moveto
344 60 376 76 398 110  curveto
419 144 430 195 430 263  curveto
430 331 420 383 399 417  curveto
378 452 346 469 304 469  curveto
258 469 221 451 195 415  curveto
169 379 156 329 156 265  curveto
156 201 169 151 195 114  curveto
221 78 257 60 302 60  curveto
closepath
532 316 moveto
754 316 lineto
754 367 746 405 728 431  curveto
711 457 685 470 650 470  curveto
614 470 587 457 567 431  curveto
547 405 536 367 532 316  curveto
closepath
fill
		} def

	/germandbls
		{
96 0 moveto
96 562 lineto
96 642 109 699 137 733  curveto
164 766 211 783 276 783  curveto
329 783 372 771 404 747  curveto
437 724 453 693 453 654  curveto
453 614 431 566 389 510  curveto
364 477 351 454 351 440  curveto
351 421 369 396 405 365  curveto
483 299 lineto
540 251 568 200 568 146  curveto
568 97 553 58 522 30  curveto
491 1 450 -12 397 -12  curveto
352 -12 306 -2 260 16  curveto
260 98 lineto
320 72 366 60 398 60  curveto
422 60 441 67 456 81  curveto
470 95 477 113 477 137  curveto
477 165 458 195 421 227  curveto
328 307 lineto
287 342 267 377 267 414  curveto
267 441 283 480 315 530  curveto
342 571 356 607 356 636  curveto
356 661 349 680 335 692  curveto
321 704 301 710 273 710  curveto
246 710 226 701 212 683  curveto
199 665 192 638 192 602  curveto
192 0 lineto
96 0 lineto
closepath
fill
		} def

	/.notdef
		{
0 0 moveto
1000 0 lineto
1000 1000 lineto
0 1000 lineto
0 0 lineto
closepath
50 50 moveto
950 50 lineto
950 950 lineto
50 950 lineto
50 50 lineto
closepath
fill
		} def

	end				% close glyph dict. 
	currentdict			% actually put dict on the stack
	end			% close the dictionary now
	/LucidaSans exch definefont pop
/LucidaSans findfont 18.0 scalefont setfont
(x) show
Q
Q
newpath
0.0 0.0 m
0.0 369.0 l
390.0 369.0 l
390.0 0.0 l
h
W
Q
[ 1.0 0.0 0.0 1.0 5.0 26.0 ] defaultmatrix matrix concatmatrix setmatrix
0.0 0.0 translate
q
q
1 90 319 OPL
90 324
-5.0 -26.0 translate
89.0 370.0 moveto
q 1 -1 scale
9 dict begin
/FontType 3 def
/FontMatrix [0.0010 0 0 0.0010 0 0]def
/FontBBox [0 -210 1652 952 ] def
	/Encoding 256 array def
			0 1 255 {Encoding exch /.notdef put}for
		Encoding 32 /space put
		Encoding 33 /exclam put
		Encoding 34 /quotedbl put
		Encoding 35 /numbersign put
		Encoding 36 /dollar put
		Encoding 37 /percent put
		Encoding 38 /ampersand put
		Encoding 39 /quoteright put
		Encoding 40 /parenleft put
		Encoding 41 /parenright put
		Encoding 42 /asterisk put
		Encoding 43 /plus put
		Encoding 44 /comma put
		Encoding 45 /hyphen put
		Encoding 46 /period put
		Encoding 47 /slash put
		Encoding 48 /zero put
		Encoding 49 /one put
		Encoding 50 /two put
		Encoding 51 /three put
		Encoding 52 /four put
		Encoding 53 /five put
		Encoding 54 /six put
		Encoding 55 /seven put
		Encoding 56 /eight put
		Encoding 57 /nine put
		Encoding 58 /colon put
		Encoding 59 /semicolon put
		Encoding 60 /less put
		Encoding 61 /equal put
		Encoding 62 /greater put
		Encoding 63 /question put
		Encoding 64 /at put
		Encoding 65 /A put
		Encoding 66 /B put
		Encoding 67 /C put
		Encoding 68 /D put
		Encoding 69 /E put
		Encoding 70 /F put
		Encoding 71 /G put
		Encoding 72 /H put
		Encoding 73 /I put
		Encoding 74 /J put
		Encoding 75 /K put
		Encoding 76 /L put
		Encoding 77 /M put
		Encoding 78 /N put
		Encoding 79 /O put
		Encoding 80 /P put
		Encoding 81 /Q put
		Encoding 82 /R put
		Encoding 83 /S put
		Encoding 84 /T put
		Encoding 85 /U put
		Encoding 86 /V put
		Encoding 87 /W put
		Encoding 88 /X put
		Encoding 89 /Y put
		Encoding 90 /Z put
		Encoding 91 /bracketleft put
		Encoding 92 /backslash put
		Encoding 93 /bracketright put
		Encoding 94 /asciicircum put
		Encoding 95 /underscore put
		Encoding 96 /quoteleft put
		Encoding 97 /a put
		Encoding 98 /b put
		Encoding 99 /c put
		Encoding 100 /d put
		Encoding 101 /e put
		Encoding 102 /f put
		Encoding 103 /g put
		Encoding 104 /h put
		Encoding 105 /i put
		Encoding 106 /j put
		Encoding 107 /k put
		Encoding 108 /l put
		Encoding 109 /m put
		Encoding 110 /n put
		Encoding 111 /o put
		Encoding 112 /p put
		Encoding 113 /q put
		Encoding 114 /r put
		Encoding 115 /s put
		Encoding 116 /t put
		Encoding 117 /u put
		Encoding 118 /v put
		Encoding 119 /w put
		Encoding 120 /x put
		Encoding 121 /y put
		Encoding 122 /z put
		Encoding 123 /braceleft put
		Encoding 124 /bar put
		Encoding 125 /braceright put
		Encoding 126 /asciitilde put
		Encoding 161 /exclamdown put
		Encoding 162 /cent put
		Encoding 163 /sterling put
		Encoding 164 /fraction put
		Encoding 165 /yen put
		Encoding 166 /florin put
		Encoding 167 /section put
		Encoding 168 /currency put
		Encoding 169 /quotesingle put
		Encoding 170 /quotedblleft put
		Encoding 171 /guillemotleft put
		Encoding 172 /guilsinglleft put
		Encoding 173 /guilsinglright put
		Encoding 174 /fi put
		Encoding 175 /fl put
		Encoding 177 /endash put
		Encoding 178 /dagger put
		Encoding 179 /daggerdbl put
		Encoding 180 /periodcentered put
		Encoding 182 /paragraph put
		Encoding 183 /bullet put
		Encoding 184 /quotesinglbase put
		Encoding 185 /quotedblbase put
		Encoding 186 /quotedblright put
		Encoding 187 /guillemotright put
		Encoding 188 /ellipsis put
		Encoding 189 /perthousand put
		Encoding 191 /questiondown put
		Encoding 193 /grave put
		Encoding 194 /acute put
		Encoding 195 /circumflex put
		Encoding 196 /tilde put
		Encoding 197 /macron put
		Encoding 198 /breve put
		Encoding 199 /dotaccent put
		Encoding 200 /dieresis put
		Encoding 202 /ring put
		Encoding 203 /cedilla put
		Encoding 205 /hungarumlaut put
		Encoding 206 /ogonek put
		Encoding 207 /caron put
		Encoding 208 /emdash put
		Encoding 225 /AE put
		Encoding 227 /ordfeminine put
		Encoding 232 /Lslash put
		Encoding 233 /Oslash put
		Encoding 234 /OE put
		Encoding 235 /ordmasculine put
		Encoding 241 /ae put
		Encoding 245 /dotlessi put
		Encoding 248 /lslash put
		Encoding 249 /oslash put
		Encoding 250 /oe put
		Encoding 251 /germandbls put
	/BuildGlyph
		{ 2 copy exch /Metrics get exch 
			2 copy known {get}{pop pop 1000.0} ifelse
			0
			0 -210 1652 952
			setcachedevice
			exch /CharProcs get exch
			2 copy known not
					{pop /.notdef}
				if
			get exec
		} bind def

	/BuildChar
		{ 1 index /Encoding get exch get
		  1 index /BuildGlyph get exec
	  } bind def
	/Metrics 150 dict def
		Metrics begin
		/.notdef 1000 def
		/space 329.58984375 def
		/exclam 313.4765625 def
		/quotedbl 451.66015625 def
		/numbersign 659.66796875 def
		/dollar 659.66796875 def
		/percent 783.203125 def
		/ampersand 744.62890625 def
		/quoteright 247.0703125 def
		/parenleft 370.60546875 def
		/parenright 370.60546875 def
		/asterisk 466.30859375 def
		/plus 795.41015625 def
		/comma 247.0703125 def
		/hyphen 638.671875 def
		/period 247.0703125 def
		/slash 565.4296875 def
		/zero 659.66796875 def
		/one 659.66796875 def
		/two 659.66796875 def
		/three 659.66796875 def
		/four 659.66796875 def
		/five 659.66796875 def
		/six 659.66796875 def
		/seven 659.66796875 def
		/eight 659.66796875 def
		/nine 659.66796875 def
		/colon 247.0703125 def
		/semicolon 247.0703125 def
		/less 795.41015625 def
		/equal 795.41015625 def
		/greater 795.41015625 def
		/question 497.0703125 def
		/at 844.23828125 def
		/A 736.328125 def
		/B 629.8828125 def
		/C 712.40234375 def
		/D 792.96875 def
		/E 600.5859375 def
		/F 574.21875 def
		/G 745.60546875 def
		/H 780.2734375 def
		/I 331.54296875 def
		/J 418.45703125 def
		/K 709.9609375 def
		/L 581.54296875 def
		/M 907.71484375 def
		/N 768.5546875 def
		/O 823.2421875 def
		/P 613.28125 def
		/Q 823.73046875 def
		/R 689.94140625 def
		/S 571.2890625 def
		/T 689.94140625 def
		/U 736.328125 def
		/V 698.73046875 def
		/W 903.80859375 def
		/X 666.9921875 def
		/Y 686.5234375 def
		/Z 644.53125 def
		/bracketleft 370.60546875 def
		/backslash 565.4296875 def
		/bracketright 370.60546875 def
		/asciicircum 659.66796875 def
		/underscore 500.0 def
		/quoteleft 638.671875 def
		/a 587.890625 def
		/b 662.59765625 def
		/c 532.2265625 def
		/d 662.59765625 def
		/e 585.9375 def
		/f 414.55078125 def
		/g 659.66796875 def
		/h 656.73828125 def
		/i 325.1953125 def
		/j 333.0078125 def
		/k 632.8125 def
		/l 325.1953125 def
		/m 969.7265625 def
		/n 656.73828125 def
		/o 638.671875 def
		/p 662.59765625 def
		/q 662.59765625 def
		/r 454.58984375 def
		/s 565.4296875 def
		/t 405.2734375 def
		/u 656.73828125 def
		/v 593.26171875 def
		/w 862.79296875 def
		/x 590.8203125 def
		/y 583.0078125 def
		/z 590.8203125 def
		/braceleft 370.60546875 def
		/bar 385.7421875 def
		/braceright 370.60546875 def
		/asciitilde 794.921875 def
		/exclamdown 313.4765625 def
		/cent 659.66796875 def
		/sterling 659.66796875 def
		/fraction 0.0 def
		/yen 659.66796875 def
		/florin 659.66796875 def
		/section 659.66796875 def
		/currency 659.66796875 def
		/quotesingle 247.0703125 def
		/quotedblleft 451.66015625 def
		/guillemotleft 569.3359375 def
		/guilsinglleft 346.19140625 def
		/guilsinglright 346.19140625 def
		/fi 677.734375 def
		/fl 677.734375 def
		/endash 638.671875 def
		/dagger 659.66796875 def
		/daggerdbl 659.66796875 def
		/periodcentered 638.671875 def
		/paragraph 659.66796875 def
		/bullet 623.53515625 def
		/quotesinglbase 247.0703125 def
		/quotedblbase 451.66015625 def
		/quotedblright 451.66015625 def
		/guillemotright 569.3359375 def
		/ellipsis 1000.0 def
		/perthousand 1162.59765625 def
		/questiondown 497.0703125 def
		/grave 638.671875 def
		/acute 638.671875 def
		/circumflex 638.671875 def
		/tilde 638.671875 def
		/macron 500.0 def
		/breve 638.671875 def
		/dotaccent 638.671875 def
		/dieresis 638.671875 def
		/ring 638.671875 def
		/cedilla 638.671875 def
		/hungarumlaut 750.0 def
		/ogonek 638.671875 def
		/caron 638.671875 def
		/emdash 638.671875 def
		/AE 957.51953125 def
		/ordfeminine 481.93359375 def
		/Lslash 587.40234375 def
		/Oslash 823.2421875 def
		/OE 1059.08203125 def
		/ordmasculine 481.93359375 def
		/ae 882.8125 def
		/dotlessi 325.1953125 def
		/lslash 355.46875 def
		/oslash 638.671875 def
		/oe 959.9609375 def
		/germandbls 661.1328125 def
	end
	/CharProcs 150 dict def
	CharProcs begin
			%define Glyph dictionary and start filling
	/space
		{
fill
		} def

	/exclam
		{
84 0 moveto
84 120 lineto
229 120 lineto
229 0 lineto
84 0 lineto
closepath
108 204 moveto
84 578 lineto
84 722 lineto
229 722 lineto
229 578 lineto
205 204 lineto
108 204 lineto
closepath
fill
		} def

	/quotedbl
		{
72 481 moveto
48 771 lineto
192 771 lineto
162 481 lineto
72 481 lineto
closepath
289 481 moveto
265 771 lineto
409 771 lineto
379 481 lineto
289 481 lineto
closepath
fill
		} def

	/numbersign
		{
100 0 moveto
152 208 lineto
19 208 lineto
33 280 lineto
170 280 lineto
211 442 lineto
65 442 lineto
80 515 lineto
229 515 lineto
281 722 lineto
355 722 lineto
304 515 lineto
432 515 lineto
483 722 lineto
558 722 lineto
506 515 lineto
640 515 lineto
625 442 lineto
488 442 lineto
447 280 lineto
593 280 lineto
579 208 lineto
429 208 lineto
377 0 lineto
303 0 lineto
355 208 lineto
227 208 lineto
175 0 lineto
100 0 lineto
closepath
245 280 moveto
373 280 lineto
414 442 lineto
286 442 lineto
245 280 lineto
closepath
fill
		} def

	/dollar
		{
296 -78 moveto
296 1 lineto
242 1 176 14 99 38  curveto
99 144 lineto
171 111 237 93 296 90  curveto
296 322 lineto
271 339 lineto
212 379 171 413 150 441  curveto
130 469 119 503 119 542  curveto
119 591 135 631 167 664  curveto
198 696 242 715 296 722  curveto
296 801 lineto
375 801 lineto
375 722 lineto
426 719 478 709 530 691  curveto
530 593 lineto
477 618 425 633 375 637  curveto
375 418 lineto
397 404 lineto
458 364 500 331 522 303  curveto
543 275 554 241 554 200  curveto
554 147 538 103 506 68  curveto
474 32 430 10 375 1  curveto
375 -78 lineto
296 -78 lineto
closepath
360 96 moveto
406 110 430 139 430 182  curveto
430 214 406 247 360 280  curveto
360 96 lineto
closepath
312 459 moveto
312 633 lineto
267 618 244 592 244 553  curveto
244 519 267 488 312 459  curveto
closepath
fill
		} def

	/percent
		{
58 -18 moveto
626 740 lineto
724 740 lineto
156 -18 lineto
58 -18 lineto
closepath
182 361 moveto
129 361 88 377 57 409  curveto
27 442 12 486 12 542  curveto
12 598 27 642 58 674  curveto
88 706 130 722 184 722  curveto
237 722 278 706 309 674  curveto
340 642 355 598 355 542  curveto
355 485 340 441 309 409  curveto
278 377 236 361 182 361  curveto
closepath
183 433 moveto
225 433 247 469 247 542  curveto
247 614 226 650 184 650  curveto
141 650 120 614 120 542  curveto
120 469 141 433 183 433  curveto
closepath
597 0 moveto
545 0 503 16 473 48  curveto
442 80 427 125 427 180  curveto
427 236 443 281 473 313  curveto
504 345 546 361 599 361  curveto
652 361 694 345 725 313  curveto
755 281 771 237 771 181  curveto
771 124 755 79 725 47  curveto
694 15 652 0 597 0  curveto
closepath
598 72 moveto
641 72 662 108 662 181  curveto
662 253 641 289 599 289  curveto
557 289 536 252 536 180  curveto
536 108 556 72 598 72  curveto
closepath
fill
		} def

	/ampersand
		{
691 0 moveto
521 0 lineto
489 38 lineto
432 0 370 -18 301 -18  curveto
223 -18 159 3 109 47  curveto
58 90 33 146 33 213  curveto
33 312 93 387 213 437  curveto
178 497 161 547 161 585  curveto
161 629 180 666 219 696  curveto
257 726 304 741 361 741  curveto
415 741 460 726 495 698  curveto
530 669 548 632 548 587  curveto
548 518 495 459 388 409  curveto
430 333 478 260 535 192  curveto
568 240 584 306 584 391  curveto
584 402 lineto
706 402 lineto
706 296 667 201 590 119  curveto
622 78 656 38 691 0  curveto
closepath
262 362 moveto
203 335 173 294 173 239  curveto
173 193 188 154 218 123  curveto
247 91 284 75 327 75  curveto
364 75 399 86 432 109  curveto
378 177 327 251 280 332  curveto
262 362 lineto
closepath
343 477 moveto
399 506 427 542 427 584  curveto
427 628 406 650 363 650  curveto
320 650 298 629 298 587  curveto
298 559 313 522 343 477  curveto
closepath
fill
		} def

	/quoteright
		{
78 469 moveto
48 771 lineto
205 771 lineto
168 469 lineto
78 469 lineto
closepath
fill
		} def

	/parenleft
		{
322 776 moveto
322 683 lineto
235 596 192 472 192 313  curveto
192 153 235 30 322 -57  curveto
322 -150 lineto
243 -107 179 -44 131 40  curveto
83 125 60 216 60 313  curveto
60 410 83 501 130 584  curveto
177 667 241 731 322 776  curveto
closepath
fill
		} def

	/parenright
		{
48 776 moveto
48 683 lineto
135 596 178 472 178 313  curveto
178 153 135 30 48 -57  curveto
48 -150 lineto
127 -107 191 -44 239 40  curveto
287 125 310 216 310 313  curveto
310 410 287 501 240 584  curveto
193 667 129 731 48 776  curveto
closepath
fill
		} def

	/asterisk
		{
266 576 moveto
391 646 lineto
423 545 lineto
281 528 lineto
282 532 282 535 282 538  curveto
282 552 277 564 266 576  curveto
closepath
279 519 moveto
383 421 lineto
298 359 lineto
237 489 lineto
256 492 269 502 279 519  curveto
closepath
228 489 moveto
167 359 lineto
82 421 lineto
187 519 lineto
196 502 209 492 228 489  curveto
closepath
184 528 moveto
42 545 lineto
74 646 lineto
199 576 lineto
188 564 183 552 183 538  curveto
183 535 183 532 184 528  curveto
closepath
180 722 moveto
285 722 lineto
258 582 lineto
250 586 241 588 232 588  curveto
224 588 215 586 207 582  curveto
180 722 lineto
closepath
fill
		} def

	/plus
		{
355 0 moveto
355 247 lineto
108 247 lineto
108 331 lineto
355 331 lineto
355 578 lineto
439 578 lineto
439 331 lineto
686 331 lineto
686 247 lineto
439 247 lineto
439 0 lineto
355 0 lineto
closepath
fill
		} def

	/comma
		{
105 0 moveto
45 0 lineto
45 156 lineto
202 156 lineto
202 35 lineto
202 -92 149 -156 45 -156  curveto
45 -102 lineto
85 -102 105 -73 105 -15  curveto
105 0 lineto
closepath
fill
		} def

	/hyphen
		{
96 265 moveto
96 355 lineto
542 355 lineto
542 265 lineto
96 265 lineto
closepath
fill
		} def

	/period
		{
45 0 moveto
45 156 lineto
202 156 lineto
202 0 lineto
45 0 lineto
closepath
fill
		} def

	/slash
		{
108 -144 moveto
368 722 lineto
456 722 lineto
196 -144 lineto
108 -144 lineto
closepath
fill
		} def

	/zero
		{
326 -18 moveto
244 -18 177 17 126 87  curveto
75 157 49 249 49 361  curveto
49 474 75 566 126 636  curveto
178 705 246 740 330 740  curveto
413 740 480 705 532 636  curveto
584 566 609 475 609 363  curveto
609 247 584 155 532 85  curveto
480 16 412 -18 326 -18  curveto
closepath
328 72 moveto
413 72 456 168 456 361  curveto
456 554 414 650 330 650  curveto
245 650 203 554 203 361  curveto
203 168 245 72 328 72  curveto
closepath
fill
		} def

	/one
		{
140 0 moveto
140 84 lineto
285 84 lineto
285 617 lineto
140 581 lineto
140 668 lineto
430 740 lineto
430 84 lineto
574 84 lineto
574 0 lineto
140 0 lineto
closepath
fill
		} def

	/two
		{
71 0 moveto
71 114 lineto
79 125 lineto
118 176 158 220 198 255  curveto
257 308 lineto
355 394 403 469 403 534  curveto
403 609 360 647 274 647  curveto
221 647 160 629 90 593  curveto
90 699 lineto
163 727 235 740 303 740  curveto
380 740 442 722 488 686  curveto
534 649 557 601 557 540  curveto
557 498 546 460 523 425  curveto
501 391 461 351 405 305  curveto
356 266 lineto
288 211 248 161 235 114  curveto
554 114 lineto
554 0 lineto
71 0 lineto
closepath
fill
		} def

	/three
		{
98 5 moveto
98 113 lineto
170 86 229 72 275 72  curveto
319 72 353 83 380 105  curveto
406 127 419 157 419 193  curveto
419 289 349 336 209 336  curveto
165 336 lineto
165 423 lineto
203 423 lineto
333 423 399 466 399 552  curveto
399 617 359 650 278 650  curveto
225 650 168 636 108 609  curveto
108 708 lineto
171 730 238 741 309 741  curveto
383 741 441 725 484 695  curveto
526 664 547 622 547 568  curveto
547 483 494 422 387 387  curveto
509 359 570 294 570 192  curveto
570 127 545 76 497 38  curveto
448 0 381 -18 297 -18  curveto
226 -18 160 -10 98 5  curveto
closepath
fill
		} def

	/four
		{
384 0 moveto
384 192 lineto
46 192 lineto
46 301 lineto
378 722 lineto
510 722 lineto
510 301 lineto
595 301 lineto
595 192 lineto
510 192 lineto
510 0 lineto
384 0 lineto
closepath
162 301 moveto
387 301 lineto
387 584 lineto
162 301 lineto
closepath
fill
		} def

	/five
		{
124 2 moveto
124 107 lineto
185 84 236 72 277 72  curveto
319 72 351 84 376 109  curveto
400 133 412 166 412 208  curveto
412 312 338 364 189 364  curveto
171 364 154 362 136 359  curveto
136 722 lineto
551 722 lineto
551 608 lineto
242 608 lineto
234 452 lineto
339 452 420 431 478 388  curveto
537 346 566 286 566 209  curveto
566 139 540 83 489 42  curveto
438 2 368 -18 279 -18  curveto
242 -18 190 -11 124 2  curveto
closepath
fill
		} def

	/six
		{
200 383 moveto
245 437 303 465 374 465  curveto
438 465 492 444 534 401  curveto
576 359 598 305 598 240  curveto
598 164 573 102 524 54  curveto
476 6 413 -18 336 -18  curveto
246 -18 176 13 125 77  curveto
75 141 50 230 50 344  curveto
50 470 79 567 136 636  curveto
193 706 274 741 378 741  curveto
427 741 487 732 560 714  curveto
560 609 lineto
494 637 435 650 383 650  curveto
325 650 280 627 248 580  curveto
216 533 200 467 200 383  curveto
closepath
453 216 moveto
453 265 442 304 421 333  curveto
399 362 370 376 333 376  curveto
297 376 267 363 243 337  curveto
219 311 207 279 207 240  curveto
207 190 218 149 242 118  curveto
266 87 297 72 335 72  curveto
371 72 400 85 421 111  curveto
442 137 453 172 453 216  curveto
closepath
fill
		} def

	/seven
		{
149 0 moveto
156 54 170 102 190 143  curveto
210 184 255 255 325 357  curveto
495 605 lineto
119 605 lineto
119 722 lineto
613 722 lineto
613 605 lineto
518 486 444 372 390 265  curveto
336 158 310 69 310 0  curveto
149 0 lineto
closepath
fill
		} def

	/eight
		{
213 387 moveto
144 433 109 488 109 553  curveto
109 609 131 654 175 689  curveto
219 723 276 741 348 741  curveto
415 741 468 726 509 696  curveto
549 667 569 627 569 578  curveto
569 514 528 453 447 396  curveto
550 343 601 275 601 194  curveto
601 130 576 79 526 40  curveto
476 1 410 -18 329 -18  curveto
251 -18 188 0 140 35  curveto
93 71 69 118 69 177  curveto
69 262 117 332 213 387  curveto
closepath
372 437 moveto
420 475 444 515 444 558  curveto
444 586 434 608 414 625  curveto
394 642 368 650 335 650  curveto
305 650 281 643 262 628  curveto
243 613 234 594 234 570  curveto
234 547 243 526 262 509  curveto
280 491 317 467 372 437  curveto
closepath
285 338 moveto
232 295 206 249 206 200  curveto
206 162 219 131 245 107  curveto
272 83 305 70 345 70  curveto
381 70 410 80 434 99  curveto
458 118 470 142 470 171  curveto
470 196 462 217 446 234  curveto
430 252 399 274 352 300  curveto
285 338 lineto
closepath
fill
		} def

	/nine
		{
101 5 moveto
101 109 lineto
163 84 220 72 273 72  curveto
330 72 375 95 408 143  curveto
441 190 458 255 458 336  curveto
412 281 355 254 288 254  curveto
225 254 171 276 128 320  curveto
85 364 63 418 63 482  curveto
63 558 87 619 136 668  curveto
185 716 248 740 324 740  curveto
413 740 483 708 534 645  curveto
585 582 610 494 610 382  curveto
610 257 580 159 521 88  curveto
461 17 379 -18 274 -18  curveto
229 -18 172 -10 101 5  curveto
closepath
208 505 moveto
208 455 218 415 240 386  curveto
262 357 291 343 328 343  curveto
363 343 393 356 417 382  curveto
441 409 453 441 453 479  curveto
453 531 441 572 418 603  curveto
394 634 363 650 325 650  curveto
289 650 260 637 239 611  curveto
218 585 208 549 208 505  curveto
closepath
fill
		} def

	/colon
		{
51 0 moveto
51 144 lineto
195 144 lineto
195 0 lineto
51 0 lineto
closepath
51 391 moveto
51 536 lineto
195 536 lineto
195 391 lineto
51 391 lineto
closepath
fill
		} def

	/semicolon
		{
105 0 moveto
51 0 lineto
51 144 lineto
195 144 lineto
195 35 lineto
195 -84 147 -148 51 -156  curveto
51 -102 lineto
87 -92 105 -62 105 -15  curveto
105 0 lineto
closepath
51 391 moveto
51 536 lineto
195 536 lineto
195 391 lineto
51 391 lineto
closepath
fill
		} def

	/less
		{
686 0 moveto
108 289 lineto
686 578 lineto
686 483 lineto
297 289 lineto
297 288 lineto
686 94 lineto
686 0 lineto
closepath
fill
		} def

	/equal
		{
108 150 moveto
108 234 lineto
686 234 lineto
686 150 lineto
108 150 lineto
closepath
108 343 moveto
108 427 lineto
686 427 lineto
686 343 lineto
108 343 lineto
closepath
fill
		} def

	/greater
		{
108 0 moveto
686 289 lineto
108 578 lineto
108 483 lineto
497 289 lineto
497 288 lineto
108 94 lineto
108 0 lineto
closepath
fill
		} def

	/question
		{
136 0 moveto
136 120 lineto
281 120 lineto
281 0 lineto
136 0 lineto
closepath
281 204 moveto
136 204 lineto
136 218 lineto
136 270 160 323 208 376  curveto
243 415 lineto
290 466 313 513 313 553  curveto
313 614 275 644 199 644  curveto
150 644 93 630 30 601  curveto
30 711 lineto
95 730 158 740 220 740  curveto
297 740 358 725 403 696  curveto
447 666 470 626 470 575  curveto
470 528 443 479 389 428  curveto
356 397 lineto
326 368 306 343 296 323  curveto
286 303 281 278 281 246  curveto
281 204 lineto
closepath
fill
		} def

	/at
		{
518 21 moveto
461 -4 404 -18 347 -18  curveto
254 -18 178 10 118 66  curveto
59 123 29 194 29 282  curveto
29 391 69 492 148 583  curveto
239 688 351 740 485 740  curveto
576 740 653 711 714 653  curveto
775 595 806 522 806 435  curveto
806 353 781 284 731 228  curveto
681 172 620 144 547 144  curveto
494 144 467 162 467 197  curveto
467 213 476 250 495 310  curveto
484 310 lineto
459 261 428 221 392 190  curveto
355 159 321 144 289 144  curveto
230 144 201 182 201 257  curveto
201 334 227 406 280 472  curveto
333 539 389 572 451 572  curveto
458 572 469 571 482 569  curveto
502 566 523 565 546 565  curveto
612 565 lineto
558 292 lineto
554 276 552 260 552 245  curveto
552 223 565 212 590 212  curveto
629 212 664 234 695 280  curveto
727 325 743 375 743 430  curveto
743 500 718 559 668 606  curveto
619 654 557 677 484 677  curveto
372 677 276 633 198 545  curveto
127 466 92 378 92 283  curveto
92 214 116 156 163 112  curveto
211 67 272 44 346 44  curveto
396 44 446 56 497 80  curveto
518 21 lineto
closepath
493 402 moveto
512 493 lineto
486 505 463 511 442 511  curveto
400 511 364 488 334 442  curveto
304 397 289 342 289 279  curveto
289 239 300 219 323 219  curveto
340 219 366 237 400 274  curveto
434 310 465 353 493 402  curveto
closepath
fill
		} def

	/A
		{
11 0 moveto
292 722 lineto
442 722 lineto
724 0 lineto
569 0 lineto
494 192 lineto
195 192 lineto
120 0 lineto
11 0 lineto
closepath
232 289 moveto
457 289 lineto
345 577 lineto
232 289 lineto
closepath
fill
		} def

	/B
		{
90 0 moveto
90 722 lineto
335 722 lineto
408 722 463 708 501 681  curveto
539 654 558 614 558 562  curveto
558 475 500 413 385 377  curveto
520 344 587 278 587 178  curveto
587 121 568 76 528 46  curveto
489 15 432 0 358 0  curveto
90 0 lineto
closepath
231 421 moveto
267 421 lineto
309 421 343 432 368 453  curveto
393 473 405 502 405 538  curveto
405 571 395 593 375 605  curveto
355 617 317 623 262 623  curveto
231 623 lineto
231 421 lineto
closepath
231 102 moveto
264 102 lineto
327 102 370 109 394 122  curveto
418 136 430 160 430 196  curveto
430 233 414 264 382 288  curveto
350 312 310 325 261 325  curveto
231 325 lineto
231 102 lineto
closepath
fill
		} def

	/C
		{
671 28 moveto
601 -2 518 -18 421 -18  curveto
302 -18 210 15 144 82  curveto
78 148 45 241 45 361  curveto
45 483 78 576 145 642  curveto
211 707 306 740 430 740  curveto
508 740 587 731 665 712  curveto
665 595 lineto
576 626 502 641 443 641  curveto
367 641 308 617 267 569  curveto
225 520 205 452 205 363  curveto
205 276 227 208 271 159  curveto
316 110 377 85 457 85  curveto
528 85 599 103 671 139  curveto
671 28 lineto
closepath
fill
		} def

	/D
		{
90 0 moveto
90 722 lineto
401 722 lineto
513 722 599 692 658 633  curveto
718 574 748 488 748 376  curveto
748 257 716 164 653 98  curveto
590 32 501 0 388 0  curveto
90 0 lineto
closepath
240 102 moveto
353 102 lineto
432 102 491 124 530 168  curveto
568 212 588 278 588 367  curveto
588 436 572 494 541 540  curveto
520 571 494 593 463 605  curveto
433 617 389 623 331 623  curveto
240 623 lineto
240 102 lineto
closepath
fill
		} def

	/E
		{
90 0 moveto
90 722 lineto
542 722 lineto
542 623 lineto
240 623 lineto
240 421 lineto
487 421 lineto
487 325 lineto
240 325 lineto
240 102 lineto
564 102 lineto
564 0 lineto
90 0 lineto
closepath
fill
		} def

	/F
		{
90 0 moveto
90 722 lineto
544 722 lineto
544 623 lineto
240 623 lineto
240 403 lineto
490 403 lineto
490 304 lineto
240 304 lineto
240 0 lineto
90 0 lineto
closepath
fill
		} def

	/G
		{
667 17 moveto
576 -6 498 -18 433 -18  curveto
308 -18 212 14 145 80  curveto
78 145 45 239 45 362  curveto
45 483 78 577 145 642  curveto
212 708 307 740 431 740  curveto
510 740 589 731 667 712  curveto
667 595 lineto
576 626 502 641 444 641  curveto
368 641 309 617 267 568  curveto
225 519 205 450 205 360  curveto
205 274 227 206 271 156  curveto
316 107 378 83 456 83  curveto
473 83 493 85 517 90  curveto
517 328 lineto
667 328 lineto
667 17 lineto
closepath
fill
		} def

	/H
		{
90 0 moveto
90 722 lineto
240 722 lineto
240 429 lineto
539 429 lineto
539 722 lineto
689 722 lineto
689 0 lineto
539 0 lineto
539 329 lineto
240 329 lineto
240 0 lineto
90 0 lineto
closepath
fill
		} def

	/I
		{
90 0 moveto
90 722 lineto
240 722 lineto
240 0 lineto
90 0 lineto
closepath
fill
		} def

	/J
		{
-33 -126 moveto
-34 -19 lineto
4 -34 45 -42 86 -42  curveto
120 -42 144 -32 157 -13  curveto
170 5 177 40 177 89  curveto
177 722 lineto
328 722 lineto
328 105 lineto
328 17 310 -46 273 -85  curveto
237 -125 178 -144 96 -144  curveto
55 -144 12 -138 -33 -126  curveto
closepath
fill
		} def

	/K
		{
90 0 moveto
90 722 lineto
234 722 lineto
234 372 lineto
511 722 lineto
636 722 lineto
385 398 lineto
696 0 lineto
508 0 lineto
234 355 lineto
234 0 lineto
90 0 lineto
closepath
fill
		} def

	/L
		{
90 0 moveto
90 722 lineto
240 722 lineto
240 102 lineto
566 102 lineto
566 0 lineto
90 0 lineto
closepath
fill
		} def

	/M
		{
90 0 moveto
90 722 lineto
289 722 lineto
463 214 lineto
642 722 lineto
817 722 lineto
817 0 lineto
678 0 lineto
678 545 lineto
502 48 lineto
381 48 lineto
208 552 lineto
208 0 lineto
90 0 lineto
closepath
fill
		} def

	/N
		{
90 0 moveto
90 722 lineto
222 722 lineto
557 229 lineto
557 722 lineto
678 722 lineto
678 0 lineto
543 0 lineto
210 493 lineto
210 0 lineto
90 0 lineto
closepath
fill
		} def

	/O
		{
407 -18 moveto
297 -18 209 16 144 85  curveto
78 154 45 246 45 361  curveto
45 477 78 569 144 638  curveto
210 706 299 740 412 740  curveto
523 740 612 706 678 638  curveto
745 569 778 478 778 362  curveto
778 244 745 152 678 83  curveto
612 15 522 -18 407 -18  curveto
closepath
409 81 moveto
473 81 524 106 562 157  curveto
599 208 618 276 618 363  curveto
618 447 599 514 562 565  curveto
524 616 474 641 412 641  curveto
349 641 299 616 261 565  curveto
223 514 205 446 205 361  curveto
205 277 223 209 261 158  curveto
298 107 347 81 409 81  curveto
closepath
fill
		} def

	/P
		{
90 0 moveto
90 722 lineto
342 722 lineto
430 722 492 707 530 678  curveto
568 649 586 599 586 530  curveto
586 452 561 391 511 348  curveto
461 304 390 283 300 283  curveto
237 283 lineto
237 0 lineto
90 0 lineto
closepath
237 382 moveto
267 382 lineto
318 382 359 394 388 418  curveto
418 442 433 474 433 515  curveto
433 587 387 623 296 623  curveto
237 623 lineto
237 382 lineto
closepath
fill
		} def

	/Q
		{
775 -144 moveto
646 -110 540 -67 459 -15  curveto
435 -17 418 -18 406 -18  curveto
297 -18 209 16 144 85  curveto
78 154 45 246 45 361  curveto
45 477 78 569 144 638  curveto
210 706 299 740 412 740  curveto
524 740 613 706 679 637  curveto
745 569 778 476 778 359  curveto
778 195 714 81 585 16  curveto
680 -15 776 -37 873 -47  curveto
775 -144 lineto
closepath
409 81 moveto
473 81 524 106 562 157  curveto
599 207 618 276 618 362  curveto
618 447 599 514 562 565  curveto
524 616 474 641 412 641  curveto
349 641 299 616 261 565  curveto
223 514 205 446 205 361  curveto
205 277 223 209 261 158  curveto
298 107 348 81 409 81  curveto
closepath
fill
		} def

	/R
		{
90 0 moveto
90 722 lineto
360 722 lineto
507 722 581 662 581 543  curveto
581 498 568 458 543 421  curveto
518 385 484 356 440 337  curveto
677 0 lineto
494 0 lineto
314 295 lineto
231 295 lineto
231 0 lineto
90 0 lineto
closepath
231 394 moveto
266 394 lineto
375 394 430 438 430 526  curveto
430 591 381 623 284 623  curveto
231 623 lineto
231 394 lineto
closepath
fill
		} def

	/S
		{
49 6 moveto
49 130 lineto
127 97 194 81 249 81  curveto
288 81 318 90 341 107  curveto
363 124 374 148 374 177  curveto
374 201 367 220 353 237  curveto
339 253 312 272 273 294  curveto
225 321 lineto
160 357 115 392 88 426  curveto
61 459 48 498 48 542  curveto
48 602 70 650 114 686  curveto
157 722 215 740 287 740  curveto
345 740 410 732 482 715  curveto
482 600 lineto
408 627 350 641 307 641  curveto
273 641 247 634 227 619  curveto
207 604 197 585 197 561  curveto
197 541 204 523 218 508  curveto
232 493 258 475 297 453  curveto
349 424 lineto
418 385 466 349 493 316  curveto
519 284 532 243 532 196  curveto
532 129 507 77 458 39  curveto
408 0 339 -18 251 -18  curveto
194 -18 126 -9 49 6  curveto
closepath
fill
		} def

	/T
		{
269 0 moveto
269 623 lineto
10 623 lineto
10 722 lineto
679 722 lineto
679 623 lineto
420 623 lineto
420 0 lineto
269 0 lineto
closepath
fill
		} def

	/U
		{
84 722 moveto
234 722 lineto
234 279 lineto
234 209 246 159 269 128  curveto
292 97 329 81 381 81  curveto
430 81 466 96 488 125  curveto
510 155 521 203 521 269  curveto
521 722 lineto
651 722 lineto
651 278 lineto
651 212 645 161 632 126  curveto
620 91 597 60 563 35  curveto
517 0 455 -18 378 -18  curveto
295 -18 228 0 178 38  curveto
143 64 119 95 105 131  curveto
91 166 84 216 84 280  curveto
84 722 lineto
closepath
fill
		} def

	/V
		{
279 0 moveto
12 722 lineto
172 722 lineto
379 163 lineto
580 722 lineto
688 722 lineto
430 0 lineto
279 0 lineto
closepath
fill
		} def

	/W
		{
190 0 moveto
10 722 lineto
152 722 lineto
284 193 lineto
408 722 lineto
534 722 lineto
652 196 lineto
791 722 lineto
895 722 lineto
705 0 lineto
562 0 lineto
450 495 lineto
333 0 lineto
190 0 lineto
closepath
fill
		} def

	/X
		{
23 0 moveto
255 355 lineto
34 722 lineto
209 722 lineto
356 479 lineto
515 722 lineto
637 722 lineto
415 381 lineto
645 0 lineto
470 0 lineto
313 258 lineto
145 0 lineto
23 0 lineto
closepath
fill
		} def

	/Y
		{
262 0 moveto
262 302 lineto
19 722 lineto
185 722 lineto
361 417 lineto
545 722 lineto
665 722 lineto
412 303 lineto
412 0 lineto
262 0 lineto
closepath
fill
		} def

	/Z
		{
51 0 moveto
51 102 lineto
411 623 lineto
72 623 lineto
72 722 lineto
585 722 lineto
585 623 lineto
226 102 lineto
585 102 lineto
585 0 lineto
51 0 lineto
closepath
fill
		} def

	/bracketleft
		{
96 -144 moveto
96 771 lineto
322 771 lineto
322 686 lineto
216 686 lineto
216 -60 lineto
322 -60 lineto
322 -144 lineto
96 -144 lineto
closepath
fill
		} def

	/backslash
		{
456 -144 moveto
196 722 lineto
108 722 lineto
368 -144 lineto
456 -144 lineto
closepath
fill
		} def

	/bracketright
		{
274 -144 moveto
274 771 lineto
48 771 lineto
48 686 lineto
154 686 lineto
154 -60 lineto
48 -60 lineto
48 -144 lineto
274 -144 lineto
closepath
fill
		} def

	/asciicircum
		{
618 192 moveto
524 192 lineto
330 581 lineto
329 581 lineto
134 192 lineto
40 192 lineto
329 771 lineto
618 192 lineto
closepath
fill
		} def

	/underscore
		{
42 -78 moveto
42 0 lineto
457 0 lineto
457 -78 lineto
42 -78 lineto
closepath
fill
		} def

	/quoteleft
		{
423 626 moveto
330 626 lineto
173 783 lineto
305 783 lineto
423 626 lineto
closepath
fill
		} def

	/a
		{
353 57 moveto
304 11 253 -12 198 -12  curveto
151 -12 113 2 83 30  curveto
54 59 40 96 40 142  curveto
40 201 63 246 111 279  curveto
158 311 226 327 314 327  curveto
353 327 lineto
353 375 lineto
353 431 321 459 257 459  curveto
201 459 144 443 86 411  curveto
86 511 lineto
152 535 217 548 281 548  curveto
421 548 491 492 491 380  curveto
491 143 lineto
491 101 505 80 532 80  curveto
537 80 543 81 551 82  curveto
554 1 lineto
524 -7 497 -12 473 -12  curveto
414 -12 376 11 359 57  curveto
353 57 lineto
closepath
353 135 moveto
353 244 lineto
318 244 lineto
225 244 178 214 178 156  curveto
178 136 185 119 198 106  curveto
212 92 229 85 249 85  curveto
282 85 317 102 353 135  curveto
closepath
fill
		} def

	/b
		{
90 0 moveto
90 771 lineto
234 771 lineto
234 435 lineto
271 510 330 548 410 548  curveto
474 548 525 524 562 477  curveto
599 430 617 365 617 282  curveto
617 193 596 121 555 68  curveto
513 14 457 -12 388 -12  curveto
328 -12 277 9 234 54  curveto
208 0 lineto
90 0 lineto
closepath
234 140 moveto
270 101 307 81 347 81  curveto
382 81 410 98 432 133  curveto
453 167 463 213 463 270  curveto
463 380 428 435 357 435  curveto
315 435 274 407 234 352  curveto
234 140 lineto
closepath
fill
		} def

	/c
		{
485 11 moveto
425 -4 370 -12 319 -12  curveto
233 -12 166 12 116 63  curveto
66 113 42 181 42 268  curveto
42 356 67 424 118 474  curveto
169 523 240 548 330 548  curveto
374 548 424 541 481 527  curveto
481 422 lineto
422 442 374 451 339 451  curveto
296 451 261 435 234 401  curveto
208 368 195 324 195 269  curveto
195 213 209 168 238 134  curveto
266 100 304 83 352 83  curveto
395 83 439 92 485 111  curveto
485 11 lineto
closepath
fill
		} def

	/d
		{
427 0 moveto
427 101 lineto
390 25 332 -12 252 -12  curveto
187 -12 137 11 100 58  curveto
63 105 45 170 45 253  curveto
45 343 66 414 107 468  curveto
149 521 204 548 274 548  curveto
330 548 381 526 427 481  curveto
427 771 lineto
572 771 lineto
572 0 lineto
427 0 lineto
closepath
427 396 moveto
392 435 355 454 315 454  curveto
280 454 252 437 230 403  curveto
209 369 199 323 199 265  curveto
199 155 234 101 304 101  curveto
347 101 388 128 427 183  curveto
427 396 lineto
closepath
fill
		} def

	/e
		{
526 18 moveto
458 -2 393 -12 331 -12  curveto
242 -12 171 13 119 63  curveto
67 114 42 184 42 271  curveto
42 354 65 421 113 472  curveto
160 523 222 548 300 548  curveto
379 548 436 523 472 474  curveto
508 424 526 346 526 239  curveto
194 239 lineto
204 137 260 85 362 85  curveto
411 85 465 97 526 119  curveto
526 18 lineto
closepath
192 320 moveto
384 320 lineto
384 412 355 458 296 458  curveto
236 458 201 412 192 320  curveto
closepath
fill
		} def

	/f
		{
105 0 moveto
105 445 lineto
31 445 lineto
31 536 lineto
105 536 lineto
105 574 lineto
105 713 171 783 303 783  curveto
345 783 389 777 435 764  curveto
435 667 lineto
394 684 357 692 324 692  curveto
274 692 250 655 250 580  curveto
250 536 lineto
385 536 lineto
385 445 lineto
250 445 lineto
250 0 lineto
105 0 lineto
closepath
fill
		} def

	/g
		{
94 -166 moveto
105 -61 lineto
165 -88 222 -102 276 -102  curveto
329 -102 368 -91 392 -68  curveto
415 -45 427 -8 427 42  curveto
427 115 lineto
392 38 334 0 253 0  curveto
189 0 139 23 101 71  curveto
64 119 45 183 45 265  curveto
45 350 66 419 108 470  curveto
150 522 206 548 275 548  curveto
330 548 381 526 427 481  curveto
442 536 lineto
572 536 lineto
572 126 lineto
572 45 567 -13 557 -49  curveto
547 -85 528 -116 500 -142  curveto
451 -183 383 -204 296 -204  curveto
234 -204 166 -191 94 -166  curveto
closepath
427 199 moveto
427 397 lineto
392 436 356 456 318 456  curveto
281 456 252 439 231 406  curveto
209 373 199 328 199 272  curveto
199 168 232 115 300 115  curveto
346 115 389 143 427 199  curveto
closepath
fill
		} def

	/h
		{
90 0 moveto
90 771 lineto
234 771 lineto
234 435 lineto
282 510 342 548 417 548  curveto
465 548 503 533 530 502  curveto
558 472 572 431 572 378  curveto
572 0 lineto
427 0 lineto
427 343 lineto
427 404 407 434 367 434  curveto
321 434 277 402 234 337  curveto
234 0 lineto
90 0 lineto
closepath
fill
		} def

	/i
		{
90 0 moveto
90 536 lineto
234 536 lineto
234 0 lineto
90 0 lineto
closepath
90 626 moveto
90 747 lineto
234 747 lineto
234 626 lineto
90 626 lineto
closepath
fill
		} def

	/j
		{
-87 -182 moveto
-87 -85 lineto
-45 -104 -9 -114 20 -114  curveto
48 -114 68 -105 80 -88  curveto
92 -70 98 -41 98 0  curveto
98 536 lineto
242 536 lineto
242 9 lineto
242 -65 225 -119 192 -153  curveto
159 -187 105 -205 32 -205  curveto
0 -205 -39 -197 -87 -182  curveto
closepath
98 626 moveto
98 747 lineto
242 747 lineto
242 626 lineto
98 626 lineto
closepath
fill
		} def

	/k
		{
90 0 moveto
90 771 lineto
234 771 lineto
234 286 lineto
244 286 lineto
435 536 lineto
555 536 lineto
378 306 lineto
610 0 lineto
434 0 lineto
244 268 lineto
234 268 lineto
234 0 lineto
90 0 lineto
closepath
fill
		} def

	/l
		{
90 0 moveto
90 771 lineto
234 771 lineto
234 0 lineto
90 0 lineto
closepath
fill
		} def

	/m
		{
90 0 moveto
90 536 lineto
229 536 lineto
229 435 lineto
271 510 331 548 409 548  curveto
450 548 483 538 509 518  curveto
535 498 551 470 557 435  curveto
607 510 667 548 738 548  curveto
836 548 885 494 885 386  curveto
885 0 lineto
747 0 lineto
747 338 lineto
747 402 725 434 683 434  curveto
640 434 598 402 557 340  curveto
557 0 lineto
418 0 lineto
418 338 lineto
418 402 397 434 354 434  curveto
311 434 270 403 229 340  curveto
229 0 lineto
90 0 lineto
closepath
fill
		} def

	/n
		{
90 0 moveto
90 536 lineto
234 536 lineto
234 435 lineto
282 510 342 548 417 548  curveto
465 548 503 533 530 502  curveto
558 472 572 431 572 378  curveto
572 0 lineto
427 0 lineto
427 343 lineto
427 404 407 434 367 434  curveto
321 434 277 402 234 337  curveto
234 0 lineto
90 0 lineto
closepath
fill
		} def

	/o
		{
315 -12 moveto
231 -12 165 13 115 63  curveto
66 114 42 182 42 268  curveto
42 354 66 423 116 473  curveto
166 523 233 548 318 548  curveto
404 548 472 523 521 473  curveto
571 423 596 354 596 269  curveto
596 181 571 112 521 62  curveto
471 12 403 -12 315 -12  curveto
closepath
317 78 moveto
400 78 442 141 442 269  curveto
442 327 431 373 409 407  curveto
387 441 357 458 318 458  curveto
280 458 250 441 228 407  curveto
206 373 195 326 195 268  curveto
195 209 206 163 228 129  curveto
250 95 280 78 317 78  curveto
closepath
fill
		} def

	/p
		{
90 -192 moveto
90 536 lineto
234 536 lineto
234 435 lineto
271 510 330 548 410 548  curveto
474 548 525 524 562 477  curveto
599 430 617 365 617 282  curveto
617 192 596 121 555 67  curveto
513 14 457 -12 387 -12  curveto
331 -12 280 9 234 54  curveto
234 -192 lineto
90 -192 lineto
closepath
234 140 moveto
270 101 307 81 347 81  curveto
382 81 410 98 432 133  curveto
453 167 463 213 463 270  curveto
463 380 428 435 357 435  curveto
315 435 274 407 234 352  curveto
234 140 lineto
closepath
fill
		} def

	/q
		{
427 -192 moveto
427 101 lineto
390 25 332 -12 252 -12  curveto
187 -12 137 11 100 58  curveto
63 105 45 170 45 253  curveto
45 343 66 414 107 468  curveto
149 521 204 548 274 548  curveto
330 548 381 526 427 481  curveto
445 536 lineto
572 536 lineto
572 -192 lineto
427 -192 lineto
closepath
427 396 moveto
392 435 355 454 315 454  curveto
280 454 252 437 230 403  curveto
209 369 199 323 199 265  curveto
199 155 234 101 304 101  curveto
347 101 388 128 427 183  curveto
427 396 lineto
closepath
fill
		} def

	/r
		{
90 0 moveto
90 536 lineto
234 536 lineto
234 435 lineto
272 510 329 548 405 548  curveto
414 548 423 547 432 545  curveto
432 416 lineto
412 423 393 427 375 427  curveto
317 427 270 398 234 340  curveto
234 0 lineto
90 0 lineto
closepath
fill
		} def

	/s
		{
76 17 moveto
76 123 lineto
147 93 208 78 259 78  curveto
319 78 348 98 348 138  curveto
348 164 324 187 275 207  curveto
226 226 lineto
173 248 135 271 112 295  curveto
90 320 78 351 78 387  curveto
78 438 97 477 136 506  curveto
175 534 229 548 299 548  curveto
342 548 394 541 455 529  curveto
455 427 lineto
397 447 349 458 311 458  curveto
251 458 221 439 221 402  curveto
221 377 243 357 287 340  curveto
329 324 lineto
392 300 436 276 460 251  curveto
485 227 497 196 497 157  curveto
497 107 476 66 434 34  curveto
392 3 338 -12 271 -12  curveto
207 -12 141 -2 76 17  curveto
closepath
fill
		} def

	/t
		{
366 2 moveto
332 -7 305 -12 285 -12  curveto
159 -12 97 46 97 163  curveto
97 445 lineto
37 445 lineto
37 536 lineto
97 536 lineto
97 626 lineto
241 643 lineto
241 536 lineto
356 536 lineto
356 445 lineto
241 445 lineto
241 182 lineto
241 116 268 83 322 83  curveto
334 83 349 86 366 90  curveto
366 2 lineto
closepath
fill
		} def

	/u
		{
421 0 moveto
421 101 lineto
375 25 314 -12 239 -12  curveto
191 -12 153 2 125 33  curveto
98 63 84 104 84 157  curveto
84 536 lineto
229 536 lineto
229 192 lineto
229 132 249 101 290 101  curveto
335 101 379 133 421 198  curveto
421 536 lineto
566 536 lineto
566 0 lineto
421 0 lineto
closepath
fill
		} def

	/v
		{
222 0 moveto
18 536 lineto
170 536 lineto
320 149 lineto
469 536 lineto
573 536 lineto
367 0 lineto
222 0 lineto
closepath
fill
		} def

	/w
		{
185 0 moveto
36 536 lineto
170 536 lineto
275 160 lineto
388 536 lineto
513 536 lineto
614 158 lineto
728 536 lineto
828 536 lineto
669 0 lineto
530 0 lineto
433 367 lineto
323 0 lineto
185 0 lineto
closepath
fill
		} def

	/x
		{
33 0 moveto
217 269 lineto
41 536 lineto
205 536 lineto
320 366 lineto
431 536 lineto
548 536 lineto
380 272 lineto
560 0 lineto
396 0 lineto
275 177 lineto
152 0 lineto
33 0 lineto
closepath
fill
		} def

	/y
		{
92 -192 moveto
213 0 lineto
15 536 lineto
170 536 lineto
303 177 lineto
460 536 lineto
570 536 lineto
239 -192 lineto
92 -192 lineto
closepath
fill
		} def

	/z
		{
60 0 moveto
60 96 lineto
359 445 lineto
73 445 lineto
73 536 lineto
530 536 lineto
530 445 lineto
230 96 lineto
536 96 lineto
536 0 lineto
60 0 lineto
closepath
fill
		} def

	/braceleft
		{
48 361 moveto
72 361 lineto
117 361 139 382 139 424  curveto
139 447 136 470 130 494  curveto
119 539 lineto
111 568 108 596 108 622  curveto
108 668 126 705 162 731  curveto
197 757 247 771 310 771  curveto
310 686 lineto
256 683 229 662 229 624  curveto
229 614 231 599 234 580  curveto
241 538 lineto
245 516 247 493 247 469  curveto
247 402 215 350 150 313  curveto
215 275 247 223 247 157  curveto
247 133 245 110 241 87  curveto
234 46 lineto
231 26 229 11 229 2  curveto
229 -35 256 -56 310 -60  curveto
310 -144 lineto
247 -144 197 -131 162 -104  curveto
126 -78 108 -42 108 3  curveto
108 30 111 57 119 86  curveto
130 131 lineto
136 155 139 179 139 202  curveto
139 244 117 265 72 265  curveto
48 265 lineto
48 361 lineto
closepath
fill
		} def

	/bar
		{
150 -144 moveto
150 771 lineto
234 771 lineto
234 -144 lineto
150 -144 lineto
closepath
fill
		} def

	/braceright
		{
310 361 moveto
286 361 lineto
241 361 219 382 219 424  curveto
219 447 222 470 228 494  curveto
239 539 lineto
247 568 250 596 250 622  curveto
250 668 232 705 196 731  curveto
161 757 111 771 48 771  curveto
48 686 lineto
102 683 129 662 129 624  curveto
129 614 127 599 124 580  curveto
117 538 lineto
113 516 111 493 111 469  curveto
111 402 143 350 208 313  curveto
143 275 111 223 111 157  curveto
111 133 113 110 117 87  curveto
124 46 lineto
127 26 129 11 129 2  curveto
129 -35 102 -56 48 -60  curveto
48 -144 lineto
111 -144 161 -131 196 -104  curveto
232 -78 250 -42 250 3  curveto
250 30 247 57 239 86  curveto
228 131 lineto
222 155 219 179 219 202  curveto
219 244 241 265 286 265  curveto
310 265 lineto
310 361 lineto
closepath
fill
		} def

	/asciitilde
		{
163 216 moveto
108 216 lineto
108 329 154 386 248 386  curveto
284 386 334 372 397 344  curveto
440 325 lineto
498 299 538 286 560 286  curveto
608 286 631 310 631 356  curveto
631 361 lineto
686 361 lineto
686 248 639 191 546 191  curveto
510 191 460 205 397 233  curveto
354 253 lineto
296 278 256 291 234 291  curveto
187 291 163 268 163 221  curveto
163 216 lineto
closepath
fill
		} def

	/exclamdown
		{
229 536 moveto
229 415 lineto
84 415 lineto
84 536 lineto
229 536 lineto
closepath
205 331 moveto
229 -42 lineto
229 -186 lineto
84 -186 lineto
84 -42 lineto
108 331 lineto
205 331 lineto
closepath
fill
		} def

	/cent
		{
342 0 moveto
342 85 lineto
261 90 197 117 151 167  curveto
105 217 82 283 82 367  curveto
82 451 104 517 149 565  curveto
193 613 258 640 342 647  curveto
342 722 lineto
420 722 lineto
420 646 lineto
463 644 504 637 543 627  curveto
543 521 lineto
499 540 458 551 420 553  curveto
420 182 lineto
462 185 503 194 543 209  curveto
543 110 lineto
502 98 461 90 420 87  curveto
420 0 lineto
342 0 lineto
closepath
342 190 moveto
342 552 lineto
272 531 237 471 237 374  curveto
237 277 272 216 342 190  curveto
closepath
fill
		} def

	/sterling
		{
120 0 moveto
120 114 lineto
156 122 181 137 195 157  curveto
209 177 216 209 216 251  curveto
216 340 lineto
137 340 lineto
137 430 lineto
216 430 lineto
216 513 lineto
216 665 289 741 436 741  curveto
475 741 518 737 566 729  curveto
566 630 lineto
527 643 489 650 453 650  curveto
392 650 361 615 361 545  curveto
361 430 lineto
456 430 lineto
456 340 lineto
361 340 lineto
361 276 354 229 341 201  curveto
327 172 299 143 255 114  curveto
573 114 lineto
573 0 lineto
120 0 lineto
closepath
fill
		} def

	/fraction
		{
-304 -18 moveto
226 740 lineto
304 740 lineto
-226 -18 lineto
-304 -18 lineto
closepath
fill
		} def

	/yen
		{
253 0 moveto
253 147 lineto
126 147 lineto
126 219 lineto
253 219 lineto
253 292 lineto
126 292 lineto
126 364 lineto
249 364 lineto
30 722 lineto
192 722 lineto
354 457 lineto
527 722 lineto
634 722 lineto
402 364 lineto
524 364 lineto
524 292 lineto
398 292 lineto
398 219 lineto
524 219 lineto
524 147 lineto
398 147 lineto
398 0 lineto
253 0 lineto
closepath
fill
		} def

	/florin
		{
115 -144 moveto
211 340 lineto
121 340 lineto
121 430 lineto
229 430 lineto
239 474 lineto
277 652 370 740 518 740  curveto
557 740 595 737 629 730  curveto
622 632 lineto
582 644 547 650 517 650  curveto
451 650 410 606 393 517  curveto
376 430 lineto
499 430 lineto
499 340 lineto
358 340 lineto
262 -144 lineto
115 -144 lineto
closepath
fill
		} def

	/section
		{
106 -135 moveto
106 -28 lineto
188 -57 257 -72 311 -72  curveto
392 -72 433 -49 433 -3  curveto
433 13 427 26 416 36  curveto
404 47 380 60 343 76  curveto
268 108 lineto
209 134 167 160 142 188  curveto
117 215 104 249 104 289  curveto
104 339 128 389 177 437  curveto
126 470 101 511 101 562  curveto
101 616 123 659 168 692  curveto
212 724 271 741 344 741  curveto
403 741 466 734 533 721  curveto
533 621 lineto
469 640 410 650 356 650  curveto
276 650 235 628 235 583  curveto
235 556 261 532 313 511  curveto
378 484 lineto
445 457 492 429 519 401  curveto
545 373 559 338 559 294  curveto
559 246 535 196 488 145  curveto
540 111 566 66 566 10  curveto
566 -45 543 -88 497 -118  curveto
450 -148 383 -163 296 -163  curveto
243 -163 179 -153 106 -135  curveto
closepath
420 183 moveto
439 208 449 232 449 254  curveto
449 275 442 292 428 306  curveto
415 319 389 334 350 352  curveto
245 399 lineto
226 375 217 352 217 331  curveto
217 292 251 258 319 228  curveto
420 183 lineto
closepath
fill
		} def

	/currency
		{
449 541 moveto
546 638 lineto
606 578 lineto
509 481 lineto
534 443 546 403 546 361  curveto
546 319 534 279 509 241  curveto
605 144 lineto
546 84 lineto
449 181 lineto
449 181 lineto
410 156 370 144 329 144  curveto
288 144 248 156 208 181  curveto
208 181 lineto
112 84 lineto
52 144 lineto
149 241 lineto
125 279 112 319 112 361  curveto
112 403 125 443 149 481  curveto
52 578 lineto
112 638 lineto
208 541 lineto
248 565 288 578 329 578  curveto
370 578 410 565 449 541  curveto
closepath
330 469 moveto
299 469 274 459 252 437  curveto
231 416 220 391 220 360  curveto
220 331 231 305 252 284  curveto
274 263 299 252 329 252  curveto
359 252 384 263 406 284  curveto
427 305 437 331 437 361  curveto
437 390 427 416 406 437  curveto
385 459 359 469 330 469  curveto
closepath
fill
		} def

	/quotesingle
		{
78 469 moveto
48 771 lineto
205 771 lineto
168 469 lineto
78 469 lineto
closepath
fill
		} def

	/quotedblleft
		{
135 614 moveto
189 614 lineto
189 469 lineto
45 469 lineto
45 579 lineto
45 698 93 762 189 771  curveto
189 716 lineto
153 706 135 677 135 629  curveto
135 614 lineto
closepath
352 614 moveto
406 614 lineto
406 469 lineto
262 469 lineto
262 579 lineto
262 698 310 762 406 771  curveto
406 716 lineto
370 706 352 677 352 629  curveto
352 614 lineto
closepath
fill
		} def

	/guillemotleft
		{
536 433 moveto
407 268 lineto
536 102 lineto
468 51 lineto
264 268 lineto
468 484 lineto
536 433 lineto
closepath
312 432 moveto
185 268 lineto
312 102 lineto
245 51 lineto
42 268 lineto
245 484 lineto
312 432 lineto
closepath
fill
		} def

	/guilsinglleft
		{
312 433 moveto
185 268 lineto
312 102 lineto
245 51 lineto
42 268 lineto
245 484 lineto
312 433 lineto
closepath
fill
		} def

	/guilsinglright
		{
33 433 moveto
160 268 lineto
33 102 lineto
100 51 lineto
304 268 lineto
100 484 lineto
33 433 lineto
closepath
fill
		} def

	/fi
		{
105 0 moveto
105 445 lineto
31 445 lineto
31 536 lineto
105 536 lineto
105 573 lineto
105 640 121 692 153 728  curveto
185 765 231 783 290 783  curveto
326 783 365 776 406 763  curveto
406 664 lineto
366 682 336 691 316 691  curveto
272 691 250 650 250 569  curveto
250 536 lineto
587 536 lineto
587 0 lineto
442 0 lineto
442 445 lineto
250 445 lineto
250 0 lineto
105 0 lineto
closepath
466 626 moveto
466 747 lineto
587 747 lineto
587 626 lineto
466 626 lineto
closepath
fill
		} def

	/fl
		{
373 445 moveto
250 445 lineto
250 0 lineto
105 0 lineto
105 445 lineto
31 445 lineto
31 536 lineto
105 536 lineto
105 569 lineto
105 712 173 783 309 783  curveto
344 783 387 779 438 771  curveto
587 771 lineto
587 0 lineto
442 0 lineto
442 677 lineto
414 688 387 693 359 693  curveto
286 693 250 656 250 581  curveto
250 536 lineto
373 536 lineto
373 445 lineto
closepath
fill
		} def

	/endash
		{
96 265 moveto
96 355 lineto
542 355 lineto
542 265 lineto
96 265 lineto
closepath
fill
		} def

	/dagger
		{
257 -144 moveto
269 391 lineto
97 379 lineto
97 487 lineto
269 476 lineto
257 722 lineto
401 722 lineto
389 476 lineto
561 487 lineto
561 379 lineto
389 391 lineto
401 -144 lineto
257 -144 lineto
closepath
fill
		} def

	/daggerdbl
		{
257 -144 moveto
269 102 lineto
97 90 lineto
97 198 lineto
269 186 lineto
269 391 lineto
97 379 lineto
97 487 lineto
269 476 lineto
257 722 lineto
401 722 lineto
389 476 lineto
561 487 lineto
561 379 lineto
389 391 lineto
389 186 lineto
561 198 lineto
561 90 lineto
389 102 lineto
401 -144 lineto
257 -144 lineto
closepath
fill
		} def

	/periodcentered
		{
241 229 moveto
241 385 lineto
397 385 lineto
397 229 lineto
241 229 lineto
closepath
fill
		} def

	/paragraph
		{
275 -144 moveto
275 361 lineto
147 378 83 445 83 561  curveto
83 619 98 660 129 685  curveto
161 710 212 722 284 722  curveto
504 722 lineto
504 -144 lineto
426 -144 lineto
426 656 lineto
354 656 lineto
354 -144 lineto
275 -144 lineto
closepath
fill
		} def

	/bullet
		{
307 72 moveto
243 72 187 96 140 143  curveto
94 191 70 247 70 312  curveto
70 379 94 436 141 483  curveto
188 530 245 554 311 554  curveto
378 554 435 530 482 483  curveto
529 436 552 378 552 311  curveto
552 245 528 188 481 142  curveto
433 95 375 72 307 72  curveto
closepath
fill
		} def

	/quotesinglbase
		{
105 0 moveto
45 0 lineto
45 156 lineto
202 156 lineto
202 35 lineto
202 -92 149 -156 45 -156  curveto
45 -102 lineto
85 -102 105 -73 105 -15  curveto
105 0 lineto
closepath
fill
		} def

	/quotedblbase
		{
99 0 moveto
45 0 lineto
45 144 lineto
189 144 lineto
189 35 lineto
189 -84 141 -148 45 -156  curveto
45 -102 lineto
81 -92 99 -62 99 -15  curveto
99 0 lineto
closepath
316 0 moveto
262 0 lineto
262 144 lineto
406 144 lineto
406 35 lineto
406 -84 358 -148 262 -156  curveto
262 -102 lineto
298 -92 316 -62 316 -15  curveto
316 0 lineto
closepath
fill
		} def

	/quotedblright
		{
99 626 moveto
45 626 lineto
45 771 lineto
189 771 lineto
189 662 lineto
189 542 141 478 45 469  curveto
45 523 lineto
81 534 99 563 99 611  curveto
99 626 lineto
closepath
316 626 moveto
262 626 lineto
262 771 lineto
406 771 lineto
406 662 lineto
406 542 358 478 262 469  curveto
262 523 lineto
298 534 316 563 316 611  curveto
316 626 lineto
closepath
fill
		} def

	/guillemotright
		{
32 433 moveto
161 268 lineto
32 102 lineto
100 51 lineto
304 268 lineto
100 484 lineto
32 433 lineto
closepath
256 432 moveto
383 268 lineto
256 102 lineto
323 51 lineto
527 268 lineto
323 484 lineto
256 432 lineto
closepath
fill
		} def

	/ellipsis
		{
112 0 moveto
112 108 lineto
220 108 lineto
220 0 lineto
112 0 lineto
closepath
445 0 moveto
445 108 lineto
554 108 lineto
554 0 lineto
445 0 lineto
closepath
778 0 moveto
778 108 lineto
887 108 lineto
887 0 lineto
778 0 lineto
closepath
fill
		} def

	/perthousand
		{
58 -18 moveto
626 740 lineto
724 740 lineto
156 -18 lineto
58 -18 lineto
closepath
182 361 moveto
129 361 88 377 57 409  curveto
27 442 12 486 12 542  curveto
12 598 27 642 58 674  curveto
88 706 130 722 184 722  curveto
237 722 278 706 309 674  curveto
340 642 355 598 355 542  curveto
355 485 340 441 309 409  curveto
278 377 236 361 182 361  curveto
closepath
183 433 moveto
225 433 247 469 247 542  curveto
247 614 226 650 184 650  curveto
141 650 120 614 120 542  curveto
120 469 141 433 183 433  curveto
closepath
597 0 moveto
545 0 503 16 473 48  curveto
442 80 427 125 427 180  curveto
427 236 443 281 473 313  curveto
504 345 546 361 599 361  curveto
652 361 694 345 725 313  curveto
755 281 771 237 771 181  curveto
771 124 755 79 725 47  curveto
694 15 652 0 597 0  curveto
closepath
598 72 moveto
641 72 662 108 662 181  curveto
662 253 641 289 599 289  curveto
557 289 536 252 536 180  curveto
536 108 556 72 598 72  curveto
closepath
977 0 moveto
924 0 883 16 853 48  curveto
822 80 807 125 807 180  curveto
807 236 822 281 853 313  curveto
883 345 925 361 979 361  curveto
1032 361 1074 345 1104 313  curveto
1135 281 1150 237 1150 181  curveto
1150 124 1135 79 1104 47  curveto
1073 15 1031 0 977 0  curveto
closepath
978 72 moveto
1021 72 1042 108 1042 181  curveto
1042 253 1021 289 979 289  curveto
937 289 916 252 916 180  curveto
916 108 936 72 978 72  curveto
closepath
fill
		} def

	/questiondown
		{
360 536 moveto
360 415 lineto
216 415 lineto
216 536 lineto
360 536 lineto
closepath
216 331 moveto
360 331 lineto
360 317 lineto
360 265 336 212 288 159  curveto
254 121 lineto
207 69 184 23 184 -17  curveto
184 -78 222 -108 298 -108  curveto
347 -108 403 -93 467 -64  curveto
467 -175 lineto
402 -194 338 -204 276 -204  curveto
199 -204 138 -189 94 -160  curveto
49 -130 27 -90 27 -39  curveto
27 7 54 56 107 107  curveto
140 138 lineto
170 167 191 192 201 212  curveto
211 232 216 258 216 290  curveto
216 331 lineto
closepath
fill
		} def

	/grave
		{
423 626 moveto
330 626 lineto
173 783 lineto
305 783 lineto
423 626 lineto
closepath
fill
		} def

	/acute
		{
226 626 moveto
343 783 lineto
476 783 lineto
319 626 lineto
226 626 lineto
closepath
fill
		} def

	/circumflex
		{
134 626 moveto
252 783 lineto
385 783 lineto
503 626 lineto
416 626 lineto
319 722 lineto
318 722 lineto
222 626 lineto
134 626 lineto
closepath
fill
		} def

	/tilde
		{
219 626 moveto
147 626 lineto
147 678 155 717 171 743  curveto
188 770 212 783 245 783  curveto
266 783 287 776 307 762  curveto
326 749 lineto
341 738 lineto
362 724 376 716 385 716  curveto
396 716 404 722 410 733  curveto
415 744 418 761 418 783  curveto
490 783 lineto
490 730 482 691 466 665  curveto
449 639 425 626 392 626  curveto
371 626 350 633 330 647  curveto
312 660 lineto
304 665 299 669 296 670  curveto
277 685 262 692 252 692  curveto
241 692 233 687 227 676  curveto
222 665 219 648 219 626  curveto
closepath
fill
		} def

	/macron
		{
42 704 moveto
42 783 lineto
457 783 lineto
457 704 lineto
42 704 lineto
closepath
fill
		} def

	/breve
		{
146 783 moveto
218 783 lineto
225 760 237 742 254 731  curveto
270 719 292 713 319 713  curveto
346 713 367 719 384 731  curveto
400 742 412 760 419 783  curveto
491 783 lineto
486 735 467 697 436 668  curveto
405 640 366 626 319 626  curveto
271 626 232 640 201 668  curveto
170 696 152 735 146 783  curveto
closepath
fill
		} def

	/dotaccent
		{
247 626 moveto
247 771 lineto
391 771 lineto
391 626 lineto
247 626 lineto
closepath
fill
		} def

	/dieresis
		{
162 626 moveto
162 734 lineto
271 734 lineto
271 626 lineto
162 626 lineto
closepath
367 626 moveto
367 734 lineto
475 734 lineto
475 626 lineto
367 626 lineto
closepath
fill
		} def

	/ring
		{
317 626 moveto
286 626 260 637 238 660  curveto
216 682 205 709 205 740  curveto
205 772 216 799 238 822  curveto
260 844 287 855 319 855  curveto
350 855 377 844 400 822  curveto
422 799 433 772 433 741  curveto
433 708 422 681 400 659  curveto
377 637 350 626 317 626  curveto
closepath
318 680 moveto
335 680 350 686 361 698  curveto
373 709 379 724 379 741  curveto
379 757 373 771 361 783  curveto
350 795 335 801 319 801  curveto
302 801 288 795 276 783  curveto
265 771 259 757 259 741  curveto
259 724 265 710 276 698  curveto
288 686 302 680 318 680  curveto
closepath
fill
		} def

	/cedilla
		{
303 0 moveto
369 0 lineto
332 -55 lineto
408 -63 445 -88 445 -131  curveto
445 -153 434 -172 410 -187  curveto
387 -203 358 -210 324 -210  curveto
297 -210 266 -206 232 -196  curveto
232 -151 lineto
255 -156 274 -159 289 -159  curveto
329 -159 349 -149 349 -129  curveto
349 -102 317 -88 253 -88  curveto
244 -88 lineto
303 0 lineto
closepath
fill
		} def

	/hungarumlaut
		{
125 0 moveto
125 625 lineto
625 625 lineto
625 0 lineto
125 0 lineto
closepath
156 31 moveto
593 31 lineto
593 593 lineto
156 593 lineto
156 31 lineto
closepath
fill
		} def

	/ogonek
		{
326 0 moveto
404 0 lineto
374 -14 351 -28 336 -42  curveto
321 -57 313 -72 313 -87  curveto
313 -103 320 -114 333 -122  curveto
346 -130 366 -134 392 -134  curveto
419 -134 441 -131 458 -126  curveto
458 -166 lineto
430 -175 397 -180 360 -180  curveto
312 -180 276 -174 252 -161  curveto
228 -148 216 -128 216 -103  curveto
216 -83 225 -65 244 -48  curveto
262 -31 289 -14 326 0  curveto
closepath
fill
		} def

	/caron
		{
503 783 moveto
385 626 lineto
252 626 lineto
134 783 lineto
222 783 lineto
318 686 lineto
319 686 lineto
416 783 lineto
503 783 lineto
closepath
fill
		} def

	/emdash
		{
96 265 moveto
96 355 lineto
542 355 lineto
542 265 lineto
96 265 lineto
closepath
fill
		} def

	/AE
		{
10 0 moveto
419 722 lineto
899 722 lineto
899 623 lineto
595 623 lineto
595 421 lineto
845 421 lineto
845 322 lineto
595 322 lineto
595 102 lineto
921 102 lineto
921 0 lineto
447 0 lineto
447 186 lineto
233 186 lineto
127 0 lineto
10 0 lineto
closepath
286 280 moveto
447 280 lineto
447 563 lineto
286 280 lineto
closepath
fill
		} def

	/ordfeminine
		{
276 439 moveto
251 414 223 401 191 401  curveto
162 401 137 410 118 429  curveto
99 447 90 470 90 499  curveto
90 573 146 611 258 611  curveto
281 611 lineto
281 634 lineto
281 664 262 680 224 680  curveto
187 680 152 670 119 650  curveto
119 719 lineto
158 734 198 741 240 741  curveto
335 741 383 707 383 639  curveto
383 498 lineto
383 478 390 469 403 469  curveto
406 469 410 469 415 470  curveto
415 409 lineto
394 404 376 401 360 401  curveto
322 401 296 414 282 439  curveto
276 439 lineto
closepath
281 497 moveto
281 552 lineto
259 552 lineto
214 552 192 537 192 507  curveto
192 482 204 469 229 469  curveto
246 469 264 479 281 497  curveto
closepath
fill
		} def

	/Lslash
		{
96 0 moveto
96 291 lineto
0 241 lineto
0 335 lineto
96 385 lineto
96 722 lineto
246 722 lineto
246 466 lineto
367 531 lineto
367 435 lineto
246 371 lineto
246 102 lineto
572 102 lineto
572 0 lineto
96 0 lineto
closepath
fill
		} def

	/Oslash
		{
411 -18 moveto
327 -18 254 2 190 43  curveto
138 -18 lineto
44 -18 lineto
136 91 lineto
75 161 44 251 44 362  curveto
44 477 77 569 143 638  curveto
209 706 298 740 410 740  curveto
494 740 568 720 630 679  curveto
683 740 lineto
777 740 lineto
685 631 lineto
746 562 777 471 777 360  curveto
777 244 744 152 677 84  curveto
611 16 522 -18 411 -18  curveto
closepath
233 207 moveto
548 581 lineto
513 621 467 641 410 641  curveto
348 641 298 616 260 565  curveto
222 514 204 446 204 361  curveto
204 308 213 256 233 207  curveto
closepath
272 141 moveto
308 101 354 81 411 81  curveto
473 81 523 107 561 157  curveto
598 208 617 277 617 362  curveto
617 416 607 467 588 516  curveto
272 141 lineto
closepath
fill
		} def

	/OE
		{
548 18 moveto
499 -6 451 -18 404 -18  curveto
296 -18 209 16 143 85  curveto
78 155 45 247 45 361  curveto
45 476 78 568 144 637  curveto
209 706 297 740 407 740  curveto
455 740 502 728 548 704  curveto
548 722 lineto
1000 722 lineto
1000 623 lineto
699 623 lineto
699 421 lineto
946 421 lineto
946 322 lineto
699 322 lineto
699 102 lineto
1023 102 lineto
1023 0 lineto
548 0 lineto
548 18 lineto
closepath
548 290 moveto
548 433 lineto
548 507 537 560 515 592  curveto
493 625 458 641 408 641  curveto
347 641 298 615 261 564  curveto
223 512 205 444 205 361  curveto
205 277 223 210 261 158  curveto
298 107 347 81 409 81  curveto
458 81 494 97 516 130  curveto
537 162 548 215 548 290  curveto
closepath
fill
		} def

	/ordmasculine
		{
238 401 moveto
185 401 142 417 111 447  curveto
79 477 63 519 63 571  curveto
63 624 79 665 111 695  curveto
142 725 186 740 241 740  curveto
295 740 339 725 370 695  curveto
402 665 417 624 417 571  curveto
417 518 402 476 370 446  curveto
339 416 295 401 238 401  curveto
closepath
240 464 moveto
281 464 302 500 302 572  curveto
302 643 282 678 241 678  curveto
199 678 179 642 179 571  curveto
179 500 199 464 240 464  curveto
closepath
fill
		} def

	/ae
		{
391 93 moveto
341 23 277 -12 201 -12  curveto
152 -12 114 1 84 30  curveto
54 58 40 95 40 142  curveto
40 201 63 246 111 277  curveto
158 309 226 325 314 325  curveto
353 325 lineto
353 375 lineto
353 431 321 459 257 459  curveto
201 459 144 443 86 411  curveto
86 511 lineto
152 535 216 548 278 548  curveto
334 548 388 528 440 489  curveto
490 528 543 548 602 548  curveto
678 548 734 523 770 473  curveto
806 423 824 345 824 239  curveto
491 239 lineto
501 137 558 85 660 85  curveto
708 85 763 97 824 119  curveto
824 18 lineto
755 -2 687 -12 619 -12  curveto
521 -12 445 23 391 93  curveto
closepath
353 135 moveto
353 244 lineto
318 244 lineto
275 244 241 236 216 220  curveto
191 204 178 183 178 156  curveto
178 136 185 119 198 106  curveto
212 92 229 85 249 85  curveto
282 85 317 102 353 135  curveto
closepath
490 320 moveto
682 320 lineto
682 413 652 459 594 459  curveto
534 459 499 413 490 320  curveto
closepath
fill
		} def

	/dotlessi
		{
90 0 moveto
90 536 lineto
234 536 lineto
234 0 lineto
90 0 lineto
closepath
fill
		} def

	/lslash
		{
108 0 moveto
108 308 lineto
5 253 lineto
5 350 lineto
108 405 lineto
108 771 lineto
252 771 lineto
252 483 lineto
355 537 lineto
355 442 lineto
252 387 lineto
252 0 lineto
108 0 lineto
closepath
fill
		} def

	/oslash
		{
42 -12 moveto
110 69 lineto
65 122 42 189 42 268  curveto
42 354 67 423 117 473  curveto
167 523 234 548 319 548  curveto
379 548 431 535 478 509  curveto
510 548 lineto
597 548 lineto
529 466 lineto
574 414 597 347 597 267  curveto
597 181 572 113 522 62  curveto
473 12 405 -12 320 -12  curveto
260 -12 207 0 162 27  curveto
129 -12 lineto
42 -12 lineto
closepath
237 117 moveto
258 91 286 78 320 78  curveto
358 78 388 95 410 128  curveto
432 162 443 208 443 267  curveto
443 295 439 323 433 352  curveto
237 117 lineto
closepath
402 418 moveto
381 444 354 458 319 458  curveto
281 458 251 441 229 407  curveto
207 373 196 327 196 268  curveto
196 240 200 212 207 184  curveto
402 418 lineto
closepath
fill
		} def

	/oe
		{
497 67 moveto
464 35 436 14 412 3  curveto
388 -6 355 -12 314 -12  curveto
232 -12 166 13 118 63  curveto
69 113 45 182 45 268  curveto
45 352 69 419 118 471  curveto
167 522 231 548 312 548  curveto
385 548 448 519 501 462  curveto
548 519 608 548 682 548  curveto
757 548 812 523 848 473  curveto
883 423 901 345 901 239  curveto
568 239 lineto
578 137 634 85 737 85  curveto
785 85 840 97 901 119  curveto
901 18 lineto
831 -2 763 -12 696 -12  curveto
619 -12 553 14 497 67  curveto
closepath
319 78 moveto
389 78 424 141 424 268  curveto
424 394 390 458 320 458  curveto
283 458 253 440 231 406  curveto
209 372 198 326 198 268  curveto
198 210 209 163 231 129  curveto
253 95 282 78 319 78  curveto
closepath
566 320 moveto
758 320 lineto
758 413 729 459 670 459  curveto
611 459 576 413 566 320  curveto
closepath
fill
		} def

	/germandbls
		{
90 0 moveto
90 552 lineto
90 706 163 783 308 783  curveto
371 783 421 771 458 748  curveto
495 725 514 694 514 655  curveto
514 624 503 593 482 563  curveto
452 521 lineto
429 490 418 467 418 453  curveto
418 432 435 408 469 379  curveto
536 325 lineto
605 268 640 210 640 153  curveto
640 102 623 62 590 32  curveto
556 2 511 -12 454 -12  curveto
408 -12 359 -3 306 14  curveto
306 114 lineto
357 90 400 78 437 78  curveto
486 78 511 98 511 138  curveto
511 159 491 186 451 219  curveto
379 279 lineto
326 322 300 364 300 404  curveto
300 428 306 451 319 474  curveto
342 514 lineto
366 556 lineto
380 580 387 604 387 626  curveto
387 671 361 694 311 694  curveto
260 694 234 659 234 590  curveto
234 0 lineto
90 0 lineto
closepath
fill
		} def

	/.notdef
		{
0 0 moveto
1000 0 lineto
1000 1000 lineto
0 1000 lineto
0 0 lineto
closepath
50 50 moveto
950 50 lineto
950 950 lineto
50 950 lineto
50 50 lineto
closepath
fill
		} def

	end				% close glyph dict. 
	currentdict			% actually put dict on the stack
	end			% close the dictionary now
	/LucidaSans-Bold exch definefont pop
/LucidaSans-Bold findfont 18.0 scalefont setfont
(0) show
Q
5.0 26.0 translate
Q
q
1 158 319 OPL
158 324
-5.0 -26.0 translate
135.0 370.0 moveto
q 1 -1 scale
/LucidaSans-Bold findfont 18.0 scalefont setfont
(1 000) show
Q
5.0 26.0 translate
Q
q
1 226 319 OPL
226 324
-5.0 -26.0 translate
203.0 370.0 moveto
q 1 -1 scale
/LucidaSans-Bold findfont 18.0 scalefont setfont
(2 000) show
Q
5.0 26.0 translate
Q
q
1 294 319 OPL
294 324
-5.0 -26.0 translate
271.0 370.0 moveto
q 1 -1 scale
/LucidaSans-Bold findfont 18.0 scalefont setfont
(3 000) show
Q
5.0 26.0 translate
Q
q
1 362 319 OPL
362 324
-5.0 -26.0 translate
339.0 370.0 moveto
q 1 -1 scale
/LucidaSans-Bold findfont 18.0 scalefont setfont
(4 000) show
Q
5.0 26.0 translate
Q
Q
q
1 90 42 OPL
87 42
1 90 103 OPL
87 103
1 90 165 OPL
87 165
1 90 227 OPL
87 227
1 90 288 OPL
87 288
1 90 319 OPL
90 11
Q
0.0 0.0 translate
q
[ 1.0 0.0 0.0 1.0 0.0 0.0 ] concat
q
1 155 21 21 rc
5.0 173.0 moveto
q 1 -1 scale
/LucidaSans findfont 18.0 scalefont setfont
(D) show
Q
Q
newpath
0.0 0.0 m
0.0 369.0 l
390.0 369.0 l
390.0 0.0 l
h
W
Q
[ 1.0 0.0 0.0 1.0 5.0 26.0 ] defaultmatrix matrix concatmatrix setmatrix
0.0 0.0 translate
q
q
1 90 319 OPL
84 319
-5.0 -26.0 translate
73.0 353.0 moveto
q 1 -1 scale
/LucidaSans-Bold findfont 18.0 scalefont setfont
(0) show
Q
5.0 26.0 translate
Q
q
1 90 257 OPL
84 257
-5.0 -26.0 translate
31.0 291.0 moveto
q 1 -1 scale
/LucidaSans-Bold findfont 18.0 scalefont setfont
(1 000) show
Q
5.0 26.0 translate
Q
q
1 90 196 OPL
84 196
-5.0 -26.0 translate
31.0 229.0 moveto
q 1 -1 scale
/LucidaSans-Bold findfont 18.0 scalefont setfont
(2 000) show
Q
5.0 26.0 translate
Q
q
1 90 134 OPL
84 134
-5.0 -26.0 translate
31.0 168.0 moveto
q 1 -1 scale
/LucidaSans-Bold findfont 18.0 scalefont setfont
(3 000) show
Q
5.0 26.0 translate
Q
q
1 90 73 OPL
84 73
-5.0 -26.0 translate
31.0 106.0 moveto
q 1 -1 scale
/LucidaSans-Bold findfont 18.0 scalefont setfont
(4 000) show
Q
5.0 26.0 translate
Q
q
1 90 11 OPL
84 11
-5.0 -26.0 translate
31.0 45.0 moveto
q 1 -1 scale
/LucidaSans-Bold findfont 18.0 scalefont setfont
(5 000) show
Q
5.0 26.0 translate
Q
Q
Q
Q
0 0 400 400 rc
0.0 0.0 translate
0.0 0.0 translate
q
5 5 391 22 rc
5.0 5.0 translate
q
[ 1.0 0.0 0.0 1.0 0.0 0.0 ] concat
q
0 0 392 21 rc
111.0 18.0 moveto
q 1 -1 scale
9 dict begin
/FontType 3 def
/FontMatrix [0.0010 0 0 0.0010 0 0]def
/FontBBox [0 -213 1138 950 ] def
	/Encoding 256 array def
			0 1 255 {Encoding exch /.notdef put}for
		Encoding 32 /space put
		Encoding 33 /exclam put
		Encoding 34 /quotedbl put
		Encoding 35 /numbersign put
		Encoding 36 /dollar put
		Encoding 37 /percent put
		Encoding 38 /ampersand put
		Encoding 39 /quoteright put
		Encoding 40 /parenleft put
		Encoding 41 /parenright put
		Encoding 42 /asterisk put
		Encoding 43 /plus put
		Encoding 44 /comma put
		Encoding 45 /hyphen put
		Encoding 46 /period put
		Encoding 47 /slash put
		Encoding 48 /zero put
		Encoding 49 /one put
		Encoding 50 /two put
		Encoding 51 /three put
		Encoding 52 /four put
		Encoding 53 /five put
		Encoding 54 /six put
		Encoding 55 /seven put
		Encoding 56 /eight put
		Encoding 57 /nine put
		Encoding 58 /colon put
		Encoding 59 /semicolon put
		Encoding 60 /less put
		Encoding 61 /equal put
		Encoding 62 /greater put
		Encoding 63 /question put
		Encoding 64 /at put
		Encoding 65 /A put
		Encoding 66 /B put
		Encoding 67 /C put
		Encoding 68 /D put
		Encoding 69 /E put
		Encoding 70 /F put
		Encoding 71 /G put
		Encoding 72 /H put
		Encoding 73 /I put
		Encoding 74 /J put
		Encoding 75 /K put
		Encoding 76 /L put
		Encoding 77 /M put
		Encoding 78 /N put
		Encoding 79 /O put
		Encoding 80 /P put
		Encoding 81 /Q put
		Encoding 82 /R put
		Encoding 83 /S put
		Encoding 84 /T put
		Encoding 85 /U put
		Encoding 86 /V put
		Encoding 87 /W put
		Encoding 88 /X put
		Encoding 89 /Y put
		Encoding 90 /Z put
		Encoding 91 /bracketleft put
		Encoding 92 /backslash put
		Encoding 93 /bracketright put
		Encoding 94 /asciicircum put
		Encoding 95 /underscore put
		Encoding 96 /quoteleft put
		Encoding 97 /a put
		Encoding 98 /b put
		Encoding 99 /c put
		Encoding 100 /d put
		Encoding 101 /e put
		Encoding 102 /f put
		Encoding 103 /g put
		Encoding 104 /h put
		Encoding 105 /i put
		Encoding 106 /j put
		Encoding 107 /k put
		Encoding 108 /l put
		Encoding 109 /m put
		Encoding 110 /n put
		Encoding 111 /o put
		Encoding 112 /p put
		Encoding 113 /q put
		Encoding 114 /r put
		Encoding 115 /s put
		Encoding 116 /t put
		Encoding 117 /u put
		Encoding 118 /v put
		Encoding 119 /w put
		Encoding 120 /x put
		Encoding 121 /y put
		Encoding 122 /z put
		Encoding 123 /braceleft put
		Encoding 124 /bar put
		Encoding 125 /braceright put
		Encoding 126 /asciitilde put
		Encoding 161 /exclamdown put
		Encoding 162 /cent put
		Encoding 163 /sterling put
		Encoding 164 /fraction put
		Encoding 165 /yen put
		Encoding 166 /florin put
		Encoding 167 /section put
		Encoding 168 /currency put
		Encoding 169 /quotesingle put
		Encoding 170 /quotedblleft put
		Encoding 171 /guillemotleft put
		Encoding 172 /guilsinglleft put
		Encoding 173 /guilsinglright put
		Encoding 174 /fi put
		Encoding 175 /fl put
		Encoding 177 /endash put
		Encoding 178 /dagger put
		Encoding 179 /daggerdbl put
		Encoding 180 /periodcentered put
		Encoding 182 /paragraph put
		Encoding 183 /bullet put
		Encoding 184 /quotesinglbase put
		Encoding 185 /quotedblbase put
		Encoding 186 /quotedblright put
		Encoding 187 /guillemotright put
		Encoding 188 /ellipsis put
		Encoding 189 /perthousand put
		Encoding 191 /questiondown put
		Encoding 193 /grave put
		Encoding 194 /acute put
		Encoding 195 /circumflex put
		Encoding 196 /tilde put
		Encoding 197 /macron put
		Encoding 198 /breve put
		Encoding 199 /dotaccent put
		Encoding 200 /dieresis put
		Encoding 202 /ring put
		Encoding 203 /cedilla put
		Encoding 205 /hungarumlaut put
		Encoding 206 /ogonek put
		Encoding 207 /caron put
		Encoding 208 /emdash put
		Encoding 225 /AE put
		Encoding 227 /ordfeminine put
		Encoding 232 /Lslash put
		Encoding 233 /Oslash put
		Encoding 234 /OE put
		Encoding 235 /ordmasculine put
		Encoding 241 /ae put
		Encoding 245 /dotlessi put
		Encoding 248 /lslash put
		Encoding 249 /oslash put
		Encoding 250 /oe put
		Encoding 251 /germandbls put
	/BuildGlyph
		{ 2 copy exch /Metrics get exch 
			2 copy known {get}{pop pop 1000.0} ifelse
			0
			0 -213 1138 950
			setcachedevice
			exch /CharProcs get exch
			2 copy known not
					{pop /.notdef}
				if
			get exec
		} bind def

	/BuildChar
		{ 1 index /Encoding get exch get
		  1 index /BuildGlyph get exec
	  } bind def
	/Metrics 150 dict def
		Metrics begin
		/.notdef 1000 def
		/space 311.5234375 def
		/exclam 265.13671875 def
		/quotedbl 461.42578125 def
		/numbersign 662.59765625 def
		/dollar 623.53515625 def
		/percent 758.7890625 def
		/ampersand 765.13671875 def
		/quoteright 252.9296875 def
		/parenleft 326.66015625 def
		/parenright 326.66015625 def
		/asterisk 433.59375 def
		/plus 795.41015625 def
		/comma 265.13671875 def
		/hyphen 578.61328125 def
		/period 265.13671875 def
		/slash 552.734375 def
		/zero 623.53515625 def
		/one 623.53515625 def
		/two 623.53515625 def
		/three 623.53515625 def
		/four 623.53515625 def
		/five 623.53515625 def
		/six 623.53515625 def
		/seven 623.53515625 def
		/eight 623.53515625 def
		/nine 623.53515625 def
		/colon 265.13671875 def
		/semicolon 265.13671875 def
		/less 795.41015625 def
		/equal 794.921875 def
		/greater 795.41015625 def
		/question 505.37109375 def
		/at 860.83984375 def
		/A 795.41015625 def
		/B 638.671875 def
		/C 710.9375 def
		/D 793.45703125 def
		/E 601.07421875 def
		/F 584.47265625 def
		/G 752.9296875 def
		/H 798.33984375 def
		/I 349.609375 def
		/J 451.66015625 def
		/K 747.0703125 def
		/L 584.47265625 def
		/M 903.80859375 def
		/N 787.59765625 def
		/O 810.05859375 def
		/P 614.2578125 def
		/Q 810.05859375 def
		/R 719.7265625 def
		/S 555.6640625 def
		/T 713.8671875 def
		/U 747.0703125 def
		/V 752.9296875 def
		/W 954.58984375 def
		/X 701.66015625 def
		/Y 716.796875 def
		/Z 638.671875 def
		/bracketleft 326.66015625 def
		/backslash 552.734375 def
		/bracketright 326.66015625 def
		/asciicircum 623.53515625 def
		/underscore 500.0 def
		/quoteleft 617.67578125 def
		/a 556.15234375 def
		/b 640.13671875 def
		/c 540.52734375 def
		/d 651.85546875 def
		/e 561.5234375 def
		/f 415.52734375 def
		/g 598.6328125 def
		/h 653.80859375 def
		/i 325.1953125 def
		/j 355.46875 def
		/k 654.296875 def
		/l 325.1953125 def
		/m 966.796875 def
		/n 653.80859375 def
		/o 617.67578125 def
		/p 651.85546875 def
		/q 640.13671875 def
		/r 462.40234375 def
		/s 524.4140625 def
		/t 388.671875 def
		/u 653.80859375 def
		/v 656.73828125 def
		/w 879.39453125 def
		/x 608.3984375 def
		/y 653.80859375 def
		/z 584.47265625 def
		/braceleft 366.2109375 def
		/bar 373.53515625 def
		/braceright 366.2109375 def
		/asciitilde 794.921875 def
		/exclamdown 265.13671875 def
		/cent 623.53515625 def
		/sterling 623.53515625 def
		/fraction 36.1328125 def
		/yen 623.53515625 def
		/florin 623.53515625 def
		/section 623.53515625 def
		/currency 608.3984375 def
		/quotesingle 252.9296875 def
		/quotedblleft 469.7265625 def
		/guillemotleft 566.40625 def
		/guilsinglleft 337.40234375 def
		/guilsinglright 337.40234375 def
		/fi 750.0 def
		/fl 750.0 def
		/endash 578.61328125 def
		/dagger 623.53515625 def
		/daggerdbl 623.53515625 def
		/periodcentered 623.53515625 def
		/paragraph 623.53515625 def
		/bullet 623.53515625 def
		/quotesinglbase 265.13671875 def
		/quotedblbase 469.7265625 def
		/quotedblright 469.7265625 def
		/guillemotright 566.40625 def
		/ellipsis 1000.0 def
		/perthousand 1138.671875 def
		/questiondown 505.37109375 def
		/grave 617.67578125 def
		/acute 617.67578125 def
		/circumflex 617.67578125 def
		/tilde 617.67578125 def
		/macron 500.0 def
		/breve 617.67578125 def
		/dotaccent 617.67578125 def
		/dieresis 617.67578125 def
		/ring 617.67578125 def
		/cedilla 617.67578125 def
		/hungarumlaut 750.0 def
		/ogonek 617.67578125 def
		/caron 617.67578125 def
		/emdash 578.61328125 def
		/AE 958.984375 def
		/ordfeminine 487.79296875 def
		/Lslash 584.47265625 def
		/Oslash 810.05859375 def
		/OE 1043.45703125 def
		/ordmasculine 487.79296875 def
		/ae 852.05078125 def
		/dotlessi 325.1953125 def
		/lslash 388.671875 def
		/oslash 617.67578125 def
		/oe 937.01171875 def
		/germandbls 699.70703125 def
	end
	/CharProcs 150 dict def
	CharProcs begin
			%define Glyph dictionary and start filling
	/space
		{
fill
		} def

	/exclam
		{
60 0 moveto
60 120 lineto
204 120 lineto
204 0 lineto
60 0 lineto
closepath
109 204 moveto
60 578 lineto
60 722 lineto
204 722 lineto
204 578 lineto
154 204 lineto
109 204 lineto
closepath
fill
		} def

	/quotedbl
		{
98 481 moveto
49 771 lineto
194 771 lineto
146 481 lineto
98 481 lineto
closepath
314 481 moveto
266 771 lineto
411 771 lineto
363 481 lineto
314 481 lineto
closepath
fill
		} def

	/numbersign
		{
106 0 moveto
161 210 lineto
19 210 lineto
31 271 lineto
176 271 lineto
220 451 lineto
65 451 lineto
79 512 lineto
235 512 lineto
289 722 lineto
352 722 lineto
297 512 lineto
438 512 lineto
492 722 lineto
554 722 lineto
500 512 lineto
642 512 lineto
630 451 lineto
485 451 lineto
441 271 lineto
595 271 lineto
583 210 lineto
427 210 lineto
373 0 lineto
310 0 lineto
364 210 lineto
224 210 lineto
169 0 lineto
106 0 lineto
closepath
238 271 moveto
379 271 lineto
424 451 lineto
283 451 lineto
238 271 lineto
closepath
fill
		} def

	/dollar
		{
289 -78 moveto
289 0 lineto
198 7 130 19 84 36  curveto
84 174 lineto
150 174 lineto
151 165 lineto
152 152 152 142 152 135  curveto
152 85 198 57 289 50  curveto
289 316 lineto
263 334 lineto
199 381 156 418 135 446  curveto
114 473 104 506 104 545  curveto
104 596 122 638 158 670  curveto
195 703 243 722 304 726  curveto
304 801 lineto
349 801 lineto
349 722 lineto
423 715 479 704 517 689  curveto
517 554 lineto
451 554 lineto
450 563 lineto
448 597 lineto
446 645 413 672 349 679  curveto
349 428 lineto
404 392 lineto
456 357 492 326 511 299  curveto
530 272 540 239 540 200  curveto
540 143 521 97 484 60  curveto
446 24 396 4 334 0  curveto
334 -78 lineto
289 -78 lineto
closepath
334 53 moveto
389 68 417 107 417 167  curveto
417 193 412 212 402 227  curveto
392 242 369 263 334 289  curveto
334 53 lineto
closepath
301 456 moveto
301 675 lineto
251 654 226 618 226 567  curveto
226 533 251 495 301 456  curveto
closepath
fill
		} def

	/percent
		{
21 -18 moveto
641 740 lineto
737 740 lineto
112 -18 lineto
21 -18 lineto
closepath
187 359 moveto
73 359 17 419 17 539  curveto
17 661 74 722 189 722  curveto
305 722 362 662 362 542  curveto
362 420 304 359 187 359  curveto
closepath
188 406 moveto
231 406 253 451 253 542  curveto
253 631 232 676 189 676  curveto
147 676 125 631 125 541  curveto
125 451 146 406 188 406  curveto
closepath
567 0 moveto
453 0 396 59 396 179  curveto
396 301 454 362 569 362  curveto
685 362 742 302 742 181  curveto
742 60 684 0 567 0  curveto
closepath
568 46 moveto
611 46 633 91 633 182  curveto
633 271 612 316 569 316  curveto
527 316 505 271 505 181  curveto
505 91 526 46 568 46  curveto
closepath
fill
		} def

	/ampersand
		{
521 0 moveto
483 41 lineto
428 1 366 -18 299 -18  curveto
222 -18 158 4 106 49  curveto
54 93 28 148 28 214  curveto
28 314 90 388 214 433  curveto
176 494 157 544 157 583  curveto
157 629 175 666 212 696  curveto
248 725 294 740 350 740  curveto
409 740 456 727 491 699  curveto
526 672 544 636 544 591  curveto
544 513 488 455 377 417  curveto
440 314 499 229 552 165  curveto
575 204 587 249 587 298  curveto
587 320 584 335 579 343  curveto
573 351 563 355 546 356  curveto
526 357 lineto
517 358 lineto
517 403 lineto
751 403 lineto
751 358 lineto
743 357 lineto
721 356 lineto
706 356 695 353 690 346  curveto
685 340 681 325 679 302  curveto
673 250 641 193 583 129  curveto
611 94 lineto
628 74 642 61 653 56  curveto
664 51 687 48 722 45  curveto
730 45 lineto
730 0 lineto
521 0 lineto
closepath
456 77 moveto
383 159 311 265 238 394  curveto
190 355 166 305 166 244  curveto
166 187 183 140 219 103  curveto
254 65 299 47 354 47  curveto
388 47 423 57 456 77  curveto
closepath
354 456 moveto
401 497 424 544 424 597  curveto
424 663 403 695 362 695  curveto
317 695 294 667 294 611  curveto
294 571 314 519 354 456  curveto
closepath
fill
		} def

	/quoteright
		{
102 469 moveto
48 771 lineto
205 771 lineto
150 469 lineto
102 469 lineto
closepath
fill
		} def

	/parenleft
		{
291 -105 moveto
291 -150 lineto
211 -107 148 -44 101 40  curveto
53 124 30 215 30 313  curveto
30 410 54 501 102 586  curveto
149 671 212 734 291 776  curveto
291 731 lineto
249 694 219 643 201 577  curveto
183 512 174 424 174 312  curveto
174 202 183 114 201 48  curveto
219 -16 249 -68 291 -105  curveto
closepath
fill
		} def

	/parenright
		{
36 731 moveto
36 776 lineto
114 734 178 670 225 586  curveto
273 501 296 410 296 312  curveto
296 216 272 125 225 40  curveto
177 -44 114 -108 36 -150  curveto
36 -105 lineto
77 -68 106 -16 124 48  curveto
142 114 151 202 151 312  curveto
151 424 142 512 124 577  curveto
106 643 77 694 36 731  curveto
closepath
fill
		} def

	/asterisk
		{
250 571 moveto
375 646 lineto
408 542 lineto
264 528 lineto
264 532 265 534 265 537  curveto
265 548 260 559 250 571  curveto
closepath
260 513 moveto
367 417 lineto
281 355 lineto
224 487 lineto
237 491 249 499 260 513  curveto
closepath
208 487 moveto
150 355 lineto
64 418 lineto
172 514 lineto
182 499 194 490 208 487  curveto
closepath
168 529 moveto
24 543 lineto
59 647 lineto
182 572 lineto
172 561 167 549 167 537  curveto
167 535 167 533 168 529  curveto
closepath
194 581 moveto
163 722 lineto
271 722 lineto
239 581 lineto
231 584 224 585 217 585  curveto
210 585 203 584 194 581  curveto
closepath
fill
		} def

	/plus
		{
361 0 moveto
361 252 lineto
108 252 lineto
108 325 lineto
361 325 lineto
361 578 lineto
433 578 lineto
433 325 lineto
686 325 lineto
686 252 lineto
433 252 lineto
433 0 lineto
361 0 lineto
closepath
fill
		} def

	/comma
		{
54 -144 moveto
54 -99 lineto
94 -99 114 -71 114 -16  curveto
114 0 lineto
54 0 lineto
54 156 lineto
210 156 lineto
210 35 lineto
210 -75 158 -135 54 -144  curveto
closepath
fill
		} def

	/hyphen
		{
72 252 moveto
72 325 lineto
505 325 lineto
505 252 lineto
72 252 lineto
closepath
fill
		} def

	/period
		{
54 0 moveto
54 156 lineto
210 156 lineto
210 0 lineto
54 0 lineto
closepath
fill
		} def

	/slash
		{
108 -144 moveto
368 722 lineto
444 722 lineto
184 -144 lineto
108 -144 lineto
closepath
fill
		} def

	/zero
		{
308 -18 moveto
226 -18 160 17 108 87  curveto
57 158 31 249 31 360  curveto
31 474 57 565 109 635  curveto
160 705 228 740 312 740  curveto
395 740 462 705 514 635  curveto
566 566 591 474 591 362  curveto
591 247 565 155 514 85  curveto
462 16 393 -18 308 -18  curveto
closepath
309 27 moveto
395 22 438 134 438 363  curveto
438 585 396 695 312 695  curveto
227 695 185 584 185 361  curveto
185 142 226 31 309 27  curveto
closepath
fill
		} def

	/one
		{
390 729 moveto
390 141 lineto
390 100 393 75 400 65  curveto
406 56 425 51 455 49  curveto
508 45 lineto
517 45 lineto
517 0 lineto
119 0 lineto
119 45 lineto
128 45 lineto
184 50 lineto
207 52 222 54 228 58  curveto
233 61 237 70 240 85  curveto
244 105 246 124 246 141  curveto
246 544 lineto
243 594 lineto
243 617 236 629 222 629  curveto
213 629 190 626 155 619  curveto
119 612 lineto
119 661 lineto
390 729 lineto
closepath
fill
		} def

	/two
		{
55 0 moveto
55 48 lineto
81 120 136 193 221 269  curveto
250 295 lineto
342 376 388 457 388 538  curveto
388 585 375 623 350 651  curveto
325 678 291 692 249 692  curveto
217 692 192 685 172 671  curveto
152 657 142 638 142 615  curveto
141 575 lineto
141 566 lineto
74 566 lineto
74 701 lineto
147 727 217 741 284 741  curveto
362 741 424 723 470 687  curveto
517 652 540 604 540 545  curveto
540 468 489 397 388 332  curveto
353 310 330 294 319 285  curveto
278 253 lineto
227 212 199 167 195 120  curveto
538 120 lineto
538 0 lineto
55 0 lineto
closepath
fill
		} def

	/three
		{
79 8 moveto
79 144 lineto
146 144 lineto
146 135 lineto
147 116 148 106 148 104  curveto
148 52 185 26 260 26  curveto
302 26 336 41 363 71  curveto
389 100 402 138 402 186  curveto
402 302 333 360 195 360  curveto
146 360 lineto
146 405 lineto
187 405 lineto
317 405 382 455 382 553  curveto
382 596 370 630 348 656  curveto
325 682 295 695 258 695  curveto
193 695 158 673 156 628  curveto
154 584 lineto
153 575 lineto
84 575 lineto
84 708 lineto
148 730 215 740 284 740  curveto
446 740 527 684 527 570  curveto
527 481 473 420 365 389  curveto
489 363 551 297 551 191  curveto
551 127 527 75 477 38  curveto
428 0 361 -18 276 -18  curveto
198 -18 132 -9 79 8  curveto
closepath
fill
		} def

	/four
		{
368 195 moveto
25 195 lineto
25 277 lineto
382 731 lineto
489 731 lineto
489 298 lineto
573 298 lineto
573 195 lineto
489 195 lineto
489 141 lineto
491 93 lineto
491 73 495 60 501 55  curveto
508 51 527 47 558 45  curveto
567 45 lineto
567 0 lineto
290 0 lineto
290 45 lineto
299 45 lineto
330 47 349 51 356 55  curveto
362 60 366 73 366 93  curveto
368 141 lineto
368 195 lineto
closepath
98 298 moveto
368 298 lineto
368 639 lineto
98 298 lineto
closepath
fill
		} def

	/five
		{
104 4 moveto
104 138 lineto
170 138 lineto
170 129 lineto
172 99 lineto
176 51 205 26 260 26  curveto
300 26 332 41 355 72  curveto
378 102 390 143 390 195  curveto
390 323 316 386 169 386  curveto
154 386 137 385 117 383  curveto
117 722 lineto
530 722 lineto
530 611 lineto
176 611 lineto
163 433 lineto
209 434 lineto
432 434 543 357 543 204  curveto
543 135 518 81 468 41  curveto
417 1 348 -18 260 -18  curveto
217 -18 165 -10 104 4  curveto
closepath
fill
		} def

	/six
		{
188 382 moveto
230 437 288 465 361 465  curveto
425 465 479 444 521 401  curveto
563 358 584 304 584 239  curveto
584 165 559 104 510 55  curveto
460 6 398 -18 323 -18  curveto
233 -18 162 13 112 77  curveto
62 141 37 230 37 345  curveto
37 466 65 562 122 633  curveto
179 705 255 740 351 740  curveto
418 740 483 731 546 711  curveto
546 581 lineto
479 581 lineto
479 590 lineto
478 606 478 618 478 624  curveto
478 671 441 695 368 695  curveto
311 695 267 670 235 619  curveto
203 568 187 497 187 407  curveto
188 382 lineto
closepath
192 256 moveto
192 187 205 131 230 89  curveto
255 47 288 26 330 26  curveto
403 26 439 88 439 212  curveto
439 340 398 404 316 404  curveto
234 404 192 355 192 256  curveto
closepath
fill
		} def

	/seven
		{
131 0 moveto
140 69 159 128 188 177  curveto
218 226 299 335 431 503  curveto
509 602 lineto
100 602 lineto
100 722 lineto
594 722 lineto
594 630 lineto
399 393 297 183 288 0  curveto
131 0 lineto
closepath
fill
		} def

	/eight
		{
192 385 moveto
121 435 86 491 86 554  curveto
86 609 108 654 152 688  curveto
196 723 253 741 323 741  curveto
390 741 443 726 484 697  curveto
525 667 545 628 545 581  curveto
545 516 498 458 404 409  curveto
520 349 579 277 579 194  curveto
579 131 554 80 504 41  curveto
454 1 389 -18 309 -18  curveto
229 -18 166 0 118 35  curveto
71 70 47 118 47 177  curveto
47 258 98 326 201 380  curveto
192 385 lineto
closepath
361 432 moveto
401 474 421 520 421 570  curveto
421 654 386 695 316 695  curveto
285 695 259 685 238 664  curveto
217 644 207 618 207 588  curveto
207 541 244 497 319 456  curveto
361 432 lineto
closepath
233 354 moveto
199 300 183 246 183 193  curveto
183 142 195 101 219 72  curveto
243 42 276 27 318 27  curveto
356 27 387 39 411 64  curveto
436 89 448 120 448 158  curveto
448 191 439 218 421 237  curveto
403 256 362 283 298 319  curveto
233 354 lineto
closepath
fill
		} def

	/nine
		{
435 340 moveto
392 284 335 257 262 257  curveto
197 257 144 278 102 321  curveto
60 363 39 417 39 482  curveto
39 557 63 619 113 667  curveto
162 716 224 740 300 740  curveto
390 740 460 708 510 645  curveto
560 581 585 492 585 377  curveto
585 256 557 160 500 89  curveto
444 17 368 -18 272 -18  curveto
204 -18 139 -8 77 10  curveto
77 141 lineto
143 141 lineto
144 132 lineto
145 115 145 103 145 98  curveto
145 51 181 27 254 27  curveto
311 27 355 52 387 103  curveto
419 154 435 225 435 314  curveto
435 340 lineto
closepath
430 465 moveto
430 535 418 591 393 633  curveto
368 674 334 695 293 695  curveto
220 695 183 633 183 510  curveto
183 382 224 318 306 318  curveto
389 318 430 367 430 465  curveto
closepath
fill
		} def

	/colon
		{
60 0 moveto
60 144 lineto
204 144 lineto
204 0 lineto
60 0 lineto
closepath
60 391 moveto
60 536 lineto
204 536 lineto
204 391 lineto
60 391 lineto
closepath
fill
		} def

	/semicolon
		{
60 -144 moveto
60 -99 lineto
97 -94 115 -67 115 -18  curveto
115 -14 115 -8 114 0  curveto
60 0 lineto
60 144 lineto
204 144 lineto
204 38 lineto
204 -70 156 -131 60 -144  curveto
closepath
60 391 moveto
60 536 lineto
204 536 lineto
204 391 lineto
60 391 lineto
closepath
fill
		} def

	/less
		{
686 0 moveto
108 289 lineto
686 578 lineto
686 497 lineto
271 289 lineto
271 288 lineto
686 81 lineto
686 0 lineto
closepath
fill
		} def

	/equal
		{
108 162 moveto
108 234 lineto
686 234 lineto
686 162 lineto
108 162 lineto
closepath
108 343 moveto
108 415 lineto
686 415 lineto
686 343 lineto
108 343 lineto
closepath
fill
		} def

	/greater
		{
108 0 moveto
108 81 lineto
523 288 lineto
523 289 lineto
108 497 lineto
108 578 lineto
686 289 lineto
108 0 lineto
closepath
fill
		} def

	/question
		{
138 0 moveto
138 120 lineto
282 120 lineto
282 0 lineto
138 0 lineto
closepath
138 204 moveto
138 212 lineto
138 266 163 314 212 357  curveto
243 384 lineto
295 429 320 483 320 545  curveto
320 591 309 627 287 654  curveto
264 682 234 695 197 695  curveto
168 695 144 689 127 675  curveto
109 662 100 644 100 622  curveto
100 584 lineto
99 575 lineto
33 575 lineto
33 709 lineto
92 730 157 741 228 741  curveto
302 741 361 726 405 696  curveto
450 667 472 627 472 579  curveto
472 531 447 489 396 452  curveto
374 436 359 424 351 418  curveto
329 399 lineto
299 373 284 330 284 271  curveto
282 214 lineto
282 204 lineto
138 204 lineto
closepath
fill
		} def

	/at
		{
537 22 moveto
475 -4 417 -18 364 -18  curveto
272 -18 196 10 135 67  curveto
74 124 44 196 44 282  curveto
44 402 90 509 183 602  curveto
276 694 383 740 504 740  curveto
595 740 672 711 734 653  curveto
796 594 827 522 827 436  curveto
827 355 802 286 751 229  curveto
701 172 639 144 566 144  curveto
514 144 487 162 487 198  curveto
487 219 496 255 514 307  curveto
496 307 lineto
426 198 363 144 306 144  curveto
248 144 220 181 220 255  curveto
220 335 246 408 300 474  curveto
354 539 413 572 478 572  curveto
497 572 522 567 552 557  curveto
555 556 560 554 566 552  curveto
628 552 lineto
578 298 lineto
573 277 571 258 571 242  curveto
571 214 584 200 611 200  curveto
653 200 692 225 728 275  curveto
764 325 782 380 782 438  curveto
782 511 755 572 700 621  curveto
646 671 580 695 501 695  curveto
392 695 296 653 213 569  curveto
131 485 89 387 89 276  curveto
89 205 115 146 166 98  curveto
216 51 280 27 356 27  curveto
406 27 462 39 521 64  curveto
537 22 lineto
closepath
509 385 moveto
532 499 lineto
506 519 477 528 444 528  curveto
408 528 375 504 348 454  curveto
320 405 306 347 306 282  curveto
306 238 320 216 349 216  curveto
392 216 445 273 509 385  curveto
closepath
fill
		} def

	/A
		{
197 219 moveto
161 142 lineto
143 104 134 77 134 63  curveto
134 52 144 46 165 46  curveto
167 46 174 46 183 45  curveto
192 45 lineto
192 0 lineto
0 0 lineto
0 45 lineto
9 45 lineto
32 47 47 50 54 55  curveto
62 60 70 73 79 94  curveto
102 142 lineto
371 729 lineto
421 729 lineto
692 141 lineto
720 87 lineto
732 62 747 48 762 47  curveto
789 45 lineto
795 45 lineto
795 0 lineto
494 0 lineto
494 45 lineto
503 45 lineto
528 47 lineto
553 47 565 53 565 65  curveto
565 76 556 101 538 142  curveto
502 219 lineto
197 219 lineto
closepath
220 268 moveto
479 268 lineto
347 548 lineto
220 268 lineto
closepath
fill
		} def

	/B
		{
396 375 moveto
530 347 598 283 598 180  curveto
598 60 518 0 359 0  curveto
21 0 lineto
21 45 lineto
30 45 lineto
61 47 79 51 86 55  curveto
93 60 96 73 96 93  curveto
99 141 lineto
99 581 lineto
96 629 lineto
96 649 93 662 87 666  curveto
81 671 62 674 30 677  curveto
21 677 lineto
21 722 lineto
357 722 lineto
497 722 567 669 567 562  curveto
567 478 510 416 396 375  curveto
closepath
243 346 moveto
243 141 lineto
243 104 248 80 256 70  curveto
265 59 285 54 315 54  curveto
354 54 385 66 408 91  curveto
432 116 443 148 443 189  curveto
443 236 428 274 396 302  curveto
365 331 324 346 273 346  curveto
243 346 lineto
closepath
243 394 moveto
273 394 lineto
370 394 418 442 418 539  curveto
418 629 370 674 273 674  curveto
243 674 lineto
243 394 lineto
closepath
fill
		} def

	/C
		{
666 27 moveto
591 -2 511 -18 424 -18  curveto
303 -18 208 15 140 82  curveto
72 149 38 242 38 361  curveto
38 482 71 575 138 641  curveto
204 707 298 740 418 740  curveto
492 740 570 730 653 708  curveto
653 560 lineto
580 560 lineto
580 569 lineto
579 597 lineto
575 661 523 692 421 692  curveto
350 692 295 664 256 606  curveto
218 549 198 468 198 362  curveto
198 149 285 42 458 42  curveto
518 42 587 60 666 96  curveto
666 27 lineto
closepath
fill
		} def

	/D
		{
21 0 moveto
21 45 lineto
30 45 lineto
61 47 79 51 86 55  curveto
93 60 96 73 96 93  curveto
99 141 lineto
99 581 lineto
96 629 lineto
96 649 93 662 87 666  curveto
81 671 62 674 30 677  curveto
21 677 lineto
21 722 lineto
257 722 lineto
362 724 lineto
401 724 lineto
514 724 602 694 663 634  curveto
724 574 754 488 754 376  curveto
754 261 723 170 661 102  curveto
599 34 516 0 412 0  curveto
21 0 lineto
closepath
249 674 moveto
249 141 lineto
249 101 255 76 267 66  curveto
279 56 309 51 356 51  curveto
515 51 595 159 595 375  curveto
595 484 573 561 529 606  curveto
484 652 410 674 304 674  curveto
249 674 lineto
closepath
fill
		} def

	/E
		{
572 0 moveto
21 0 lineto
21 45 lineto
30 45 lineto
61 47 79 51 86 55  curveto
93 60 96 73 96 93  curveto
99 141 lineto
99 581 lineto
96 629 lineto
96 649 93 662 87 666  curveto
81 671 62 674 30 677  curveto
21 677 lineto
21 722 lineto
551 722 lineto
551 593 lineto
479 593 lineto
478 602 lineto
477 619 476 628 476 631  curveto
476 648 474 659 470 664  curveto
465 669 455 671 438 672  curveto
405 674 lineto
250 674 lineto
250 400 lineto
350 400 lineto
398 401 lineto
416 401 425 409 425 425  curveto
425 427 426 435 426 448  curveto
427 458 lineto
479 458 lineto
479 301 lineto
427 301 lineto
426 310 lineto
426 320 425 326 425 329  curveto
425 347 416 356 396 356  curveto
351 358 lineto
247 358 lineto
247 141 lineto
249 99 lineto
250 78 253 65 259 60  curveto
264 54 278 52 300 52  curveto
343 51 lineto
404 51 lineto
459 52 lineto
482 52 495 61 497 80  curveto
499 126 lineto
500 135 lineto
572 135 lineto
572 0 lineto
closepath
fill
		} def

	/F
		{
250 340 moveto
250 141 lineto
252 93 lineto
254 74 257 62 262 57  curveto
267 52 279 49 298 48  curveto
331 45 lineto
340 45 lineto
340 0 lineto
21 0 lineto
21 45 lineto
30 45 lineto
61 47 79 51 86 55  curveto
93 60 96 73 96 93  curveto
99 141 lineto
99 581 lineto
96 629 lineto
96 649 93 662 87 666  curveto
81 671 62 674 30 677  curveto
21 677 lineto
21 722 lineto
548 722 lineto
548 587 lineto
476 587 lineto
475 596 lineto
474 611 474 622 474 628  curveto
474 648 469 660 461 666  curveto
452 672 433 674 402 674  curveto
250 674 lineto
250 382 lineto
350 382 lineto
398 383 lineto
416 383 425 391 425 407  curveto
425 409 426 417 426 430  curveto
427 439 lineto
479 439 lineto
479 283 lineto
427 283 lineto
426 292 lineto
426 302 425 308 425 311  curveto
425 329 416 338 396 338  curveto
351 340 lineto
250 340 lineto
closepath
fill
		} def

	/G
		{
658 14 moveto
559 -7 477 -18 414 -18  curveto
298 -18 207 15 139 83  curveto
72 152 38 244 38 361  curveto
38 482 71 575 138 641  curveto
204 707 299 740 421 740  curveto
497 740 576 730 658 708  curveto
658 566 lineto
585 566 lineto
585 575 lineto
585 615 580 640 569 650  curveto
538 678 488 692 420 692  curveto
272 692 198 582 198 361  curveto
198 141 277 30 436 30  curveto
459 30 483 34 508 42  curveto
508 176 lineto
505 225 lineto
505 245 502 257 495 262  curveto
489 267 470 270 438 272  curveto
430 273 lineto
430 318 lineto
737 318 lineto
737 273 lineto
728 272 lineto
696 270 677 267 671 262  curveto
664 257 661 245 661 225  curveto
658 176 lineto
658 14 lineto
closepath
fill
		} def

	/H
		{
250 354 moveto
250 141 lineto
252 93 lineto
252 73 255 60 262 55  curveto
269 51 288 47 319 45  curveto
328 45 lineto
328 0 lineto
21 0 lineto
21 45 lineto
30 45 lineto
61 47 79 51 86 55  curveto
93 60 96 73 96 93  curveto
99 141 lineto
99 581 lineto
96 629 lineto
96 649 93 662 87 666  curveto
81 671 62 674 30 677  curveto
21 677 lineto
21 722 lineto
328 722 lineto
328 677 lineto
319 677 lineto
287 674 267 671 261 666  curveto
255 662 252 649 252 629  curveto
250 581 lineto
250 405 lineto
548 405 lineto
548 581 lineto
545 629 lineto
545 649 542 662 536 666  curveto
530 671 511 674 479 677  curveto
470 677 lineto
470 722 lineto
777 722 lineto
777 677 lineto
768 677 lineto
736 674 717 671 710 666  curveto
704 662 701 649 701 629  curveto
699 581 lineto
699 141 lineto
701 93 lineto
701 73 704 60 711 55  curveto
718 51 737 47 768 45  curveto
777 45 lineto
777 0 lineto
470 0 lineto
470 45 lineto
479 45 lineto
510 47 529 51 535 55  curveto
542 60 545 73 545 93  curveto
548 141 lineto
548 354 lineto
250 354 lineto
closepath
fill
		} def

	/I
		{
328 0 moveto
21 0 lineto
21 45 lineto
30 45 lineto
61 47 79 51 86 55  curveto
93 60 96 73 96 93  curveto
99 141 lineto
99 581 lineto
96 629 lineto
96 649 93 662 87 666  curveto
81 671 62 674 30 677  curveto
21 677 lineto
21 722 lineto
328 722 lineto
328 677 lineto
319 677 lineto
287 674 267 671 261 666  curveto
255 662 252 649 252 629  curveto
250 581 lineto
250 141 lineto
252 93 lineto
252 73 255 60 262 55  curveto
269 51 288 47 319 45  curveto
328 45 lineto
328 0 lineto
closepath
fill
		} def

	/J
		{
-5 -129 moveto
-5 0 lineto
66 0 lineto
66 -9 lineto
67 -19 68 -28 68 -36  curveto
70 -76 88 -96 121 -96  curveto
152 -96 173 -85 185 -62  curveto
196 -40 202 1 202 62  curveto
202 581 lineto
199 629 lineto
199 649 196 662 190 666  curveto
184 671 165 674 133 677  curveto
124 677 lineto
124 722 lineto
431 722 lineto
431 677 lineto
422 677 lineto
390 674 370 671 364 666  curveto
358 662 355 649 355 629  curveto
353 581 lineto
353 112 lineto
353 20 334 -46 297 -85  curveto
261 -124 199 -144 112 -144  curveto
78 -144 39 -139 -5 -129  curveto
closepath
fill
		} def

	/K
		{
243 347 moveto
243 141 lineto
246 93 lineto
246 76 250 64 257 57  curveto
264 51 279 47 301 45  curveto
310 45 lineto
310 0 lineto
21 0 lineto
21 45 lineto
30 45 lineto
61 47 79 51 86 55  curveto
93 60 96 73 96 93  curveto
99 141 lineto
99 581 lineto
96 629 lineto
96 649 93 662 87 666  curveto
81 671 62 674 30 677  curveto
21 677 lineto
21 722 lineto
310 722 lineto
310 677 lineto
301 677 lineto
275 675 260 671 254 666  curveto
248 662 246 649 246 629  curveto
243 581 lineto
243 389 lineto
454 581 lineto
478 603 493 618 501 627  curveto
528 659 lineto
531 662 532 665 532 666  curveto
532 673 523 676 505 676  curveto
483 677 lineto
475 677 lineto
475 722 lineto
694 722 lineto
694 677 lineto
686 677 lineto
661 675 lineto
641 674 621 663 599 643  curveto
528 579 lineto
359 423 lineto
604 140 lineto
660 81 lineto
680 58 700 47 719 46  curveto
740 45 lineto
749 45 lineto
749 0 lineto
399 0 lineto
399 45 lineto
408 45 lineto
431 45 lineto
456 45 469 50 469 60  curveto
469 67 450 94 412 141  curveto
243 347 lineto
closepath
fill
		} def

	/L
		{
21 0 moveto
21 45 lineto
30 45 lineto
61 47 79 51 86 55  curveto
93 60 96 73 96 93  curveto
99 141 lineto
99 581 lineto
96 629 lineto
96 649 93 662 87 666  curveto
81 671 62 674 30 677  curveto
21 677 lineto
21 722 lineto
328 722 lineto
328 677 lineto
319 677 lineto
287 674 267 671 261 666  curveto
255 662 252 649 252 629  curveto
250 581 lineto
250 141 lineto
251 99 lineto
253 78 256 65 262 60  curveto
267 54 281 52 303 52  curveto
346 51 lineto
407 51 lineto
449 53 lineto
473 53 487 55 493 60  curveto
498 65 500 78 500 101  curveto
502 159 lineto
502 168 lineto
575 168 lineto
575 0 lineto
21 0 lineto
closepath
fill
		} def

	/M
		{
21 722 moveto
261 722 lineto
461 254 lineto
666 722 lineto
883 722 lineto
883 677 lineto
874 677 lineto
841 674 822 671 816 666  curveto
810 662 807 649 807 629  curveto
804 581 lineto
804 141 lineto
807 93 lineto
807 73 810 60 817 55  curveto
823 51 842 47 873 45  curveto
882 45 lineto
882 0 lineto
599 0 lineto
599 45 lineto
608 45 lineto
633 47 649 50 655 55  curveto
661 60 664 73 664 93  curveto
666 141 lineto
666 570 lineto
440 80 lineto
392 80 lineto
171 600 lineto
171 141 lineto
173 93 lineto
173 73 176 60 182 55  curveto
188 50 203 47 229 45  curveto
237 45 lineto
237 0 lineto
21 0 lineto
21 45 lineto
30 45 lineto
61 47 79 51 86 55  curveto
93 60 96 73 96 93  curveto
99 141 lineto
99 581 lineto
96 629 lineto
96 649 93 662 87 666  curveto
81 671 62 674 30 677  curveto
21 677 lineto
21 722 lineto
closepath
fill
		} def

	/N
		{
573 -10 moveto
171 537 lineto
171 141 lineto
173 93 lineto
173 73 177 60 183 55  curveto
190 51 209 47 240 45  curveto
249 45 lineto
249 0 lineto
21 0 lineto
21 45 lineto
30 45 lineto
61 47 80 51 87 55  curveto
93 60 97 73 97 93  curveto
99 141 lineto
99 581 lineto
97 629 lineto
97 649 94 662 87 666  curveto
81 671 62 674 30 677  curveto
21 677 lineto
21 722 lineto
203 722 lineto
602 176 lineto
602 581 lineto
599 629 lineto
599 649 596 662 589 666  curveto
583 671 564 674 532 677  curveto
523 677 lineto
523 722 lineto
750 722 lineto
750 677 lineto
742 677 lineto
710 674 691 671 685 666  curveto
679 662 676 649 676 629  curveto
673 581 lineto
673 -10 lineto
573 -10 lineto
closepath
fill
		} def

	/O
		{
399 -18 moveto
289 -18 201 16 136 84  curveto
71 152 38 245 38 361  curveto
38 478 71 571 136 639  curveto
202 706 291 740 405 740  curveto
518 740 607 706 673 639  curveto
738 571 771 479 771 362  curveto
771 243 738 150 672 83  curveto
607 15 516 -18 399 -18  curveto
closepath
401 30 moveto
541 30 611 141 611 365  curveto
611 583 542 692 405 692  curveto
267 692 198 583 198 363  curveto
198 141 266 30 401 30  curveto
closepath
fill
		} def

	/P
		{
243 295 moveto
243 141 lineto
243 103 246 78 252 67  curveto
258 55 271 49 292 48  curveto
325 45 lineto
334 45 lineto
334 0 lineto
21 0 lineto
21 45 lineto
30 45 lineto
61 47 79 51 86 55  curveto
93 60 96 73 96 93  curveto
99 141 lineto
99 581 lineto
96 629 lineto
96 649 93 662 87 666  curveto
81 671 62 674 30 677  curveto
21 677 lineto
21 722 lineto
243 722 lineto
288 723 lineto
336 725 lineto
376 726 lineto
519 726 591 662 591 534  curveto
591 375 490 295 288 295  curveto
243 295 lineto
closepath
243 344 moveto
272 344 lineto
383 344 438 403 438 523  curveto
438 624 391 674 296 674  curveto
243 674 lineto
243 344 lineto
closepath
fill
		} def

	/Q
		{
482 -10 moveto
456 -15 431 -18 406 -18  curveto
292 -18 202 15 136 83  curveto
71 151 38 243 38 361  curveto
38 478 71 571 136 639  curveto
202 706 291 740 405 740  curveto
518 740 607 706 673 639  curveto
738 571 771 478 771 361  curveto
771 184 698 65 552 6  curveto
635 -28 750 -49 895 -59  curveto
774 -148 lineto
677 -123 580 -77 482 -10  curveto
closepath
611 356 moveto
611 580 542 692 404 692  curveto
267 692 198 583 198 363  curveto
198 141 267 30 405 30  curveto
542 30 611 139 611 356  curveto
closepath
fill
		} def

	/R
		{
243 316 moveto
243 141 lineto
246 93 lineto
246 73 249 60 254 55  curveto
260 50 276 47 301 45  curveto
310 45 lineto
310 0 lineto
21 0 lineto
21 45 lineto
30 45 lineto
61 47 79 51 86 55  curveto
93 60 96 73 96 93  curveto
99 141 lineto
99 581 lineto
96 629 lineto
96 649 93 662 87 666  curveto
81 671 62 674 30 677  curveto
21 677 lineto
21 722 lineto
231 722 lineto
276 723 lineto
320 725 lineto
364 726 lineto
514 726 588 665 588 542  curveto
588 443 542 374 449 336  curveto
590 140 lineto
629 90 lineto
649 63 669 48 688 47  curveto
711 45 lineto
721 45 lineto
721 0 lineto
505 0 lineto
305 316 lineto
243 316 lineto
closepath
243 364 moveto
270 364 lineto
321 364 362 379 392 410  curveto
422 440 437 482 437 534  curveto
437 627 390 674 298 674  curveto
243 674 lineto
243 364 lineto
closepath
fill
		} def

	/S
		{
48 8 moveto
48 159 lineto
121 159 lineto
121 147 lineto
123 116 lineto
124 91 137 70 161 54  curveto
185 38 215 30 251 30  curveto
290 30 321 42 345 65  curveto
369 89 381 121 381 160  curveto
381 189 374 213 360 232  curveto
345 250 319 270 279 292  curveto
230 319 lineto
110 386 49 458 49 537  curveto
49 598 71 648 115 685  curveto
158 722 216 741 288 741  curveto
345 741 410 730 483 708  curveto
483 563 lineto
411 563 lineto
410 572 lineto
408 604 lineto
407 631 396 652 376 668  curveto
355 684 330 692 299 692  curveto
268 692 242 681 220 659  curveto
199 637 188 609 188 577  curveto
188 552 195 531 209 514  curveto
223 497 250 477 290 454  curveto
339 426 lineto
410 385 458 348 485 316  curveto
511 284 524 245 524 199  curveto
524 133 500 80 451 41  curveto
402 1 336 -18 254 -18  curveto
194 -18 125 -9 48 8  curveto
closepath
fill
		} def

	/T
		{
281 674 moveto
164 674 lineto
133 674 114 672 106 667  curveto
98 662 94 650 94 632  curveto
94 614 93 597 92 581  curveto
91 572 lineto
19 572 lineto
19 722 lineto
694 722 lineto
694 572 lineto
622 572 lineto
621 587 lineto
619 631 lineto
619 650 615 662 607 667  curveto
599 672 580 674 549 674  curveto
432 674 lineto
432 141 lineto
435 93 lineto
436 74 439 62 444 57  curveto
449 52 461 49 480 48  curveto
513 45 lineto
522 45 lineto
522 0 lineto
191 0 lineto
191 45 lineto
200 45 lineto
233 48 lineto
252 49 264 52 269 57  curveto
274 62 277 74 278 93  curveto
281 141 lineto
281 674 lineto
closepath
fill
		} def

	/U
		{
9 722 moveto
316 722 lineto
316 677 lineto
307 677 lineto
276 674 257 671 250 666  curveto
244 662 241 649 241 629  curveto
238 581 lineto
238 269 lineto
238 182 251 120 276 83  curveto
301 47 344 29 404 29  curveto
468 29 515 48 544 87  curveto
573 125 588 187 588 272  curveto
588 581 lineto
585 629 lineto
585 649 582 662 576 666  curveto
570 671 550 674 519 677  curveto
510 677 lineto
510 722 lineto
737 722 lineto
737 677 lineto
728 677 lineto
697 674 678 671 672 666  curveto
666 662 663 649 663 629  curveto
660 581 lineto
660 284 lineto
660 180 638 104 593 55  curveto
548 6 478 -18 382 -18  curveto
185 -18 87 79 87 274  curveto
87 578 lineto
84 626 lineto
84 646 81 659 74 663  curveto
68 668 49 671 18 673  curveto
9 674 lineto
9 722 lineto
closepath
fill
		} def

	/V
		{
356 -9 moveto
101 582 lineto
78 633 lineto
71 651 64 662 59 667  curveto
53 671 44 674 30 675  curveto
9 677 lineto
0 677 lineto
0 722 lineto
313 722 lineto
313 677 lineto
304 677 lineto
291 676 283 675 278 675  curveto
257 675 247 669 247 656  curveto
247 646 255 621 272 582  curveto
434 201 lineto
590 582 lineto
593 589 597 601 602 616  curveto
607 632 611 643 613 650  curveto
614 654 614 657 614 659  curveto
614 671 604 676 584 676  curveto
564 676 lineto
561 676 559 676 557 677  curveto
548 677 lineto
548 722 lineto
752 722 lineto
752 677 lineto
744 677 lineto
735 676 728 676 723 675  curveto
708 675 699 673 694 669  curveto
689 665 683 656 677 642  curveto
650 582 lineto
405 -9 lineto
356 -9 lineto
closepath
fill
		} def

	/W
		{
255 -9 moveto
88 580 lineto
70 636 lineto
65 654 59 664 54 668  curveto
48 672 33 675 9 677  curveto
0 677 lineto
0 722 lineto
283 722 lineto
283 677 lineto
273 677 lineto
248 677 lineto
226 677 215 671 215 660  curveto
215 645 220 618 231 580  curveto
326 246 lineto
476 713 lineto
531 713 lineto
690 217 lineto
804 578 lineto
817 620 824 647 824 659  curveto
824 671 806 677 771 677  curveto
762 677 lineto
762 722 lineto
954 722 lineto
954 677 lineto
945 677 lineto
935 676 927 675 923 675  curveto
909 675 900 673 895 669  curveto
890 665 885 655 881 639  curveto
861 578 lineto
673 -9 lineto
626 -9 lineto
464 492 lineto
305 -9 lineto
255 -9 lineto
closepath
fill
		} def

	/X
		{
268 360 moveto
136 579 lineto
105 627 lineto
93 648 83 662 75 667  curveto
67 672 52 675 30 677  curveto
21 677 lineto
21 722 lineto
331 722 lineto
331 677 lineto
322 677 lineto
297 677 lineto
276 677 266 672 266 662  curveto
266 651 279 623 306 579  curveto
396 428 lineto
507 579 lineto
539 623 555 651 555 662  curveto
555 672 546 677 529 677  curveto
508 677 lineto
500 677 lineto
500 722 lineto
701 722 lineto
701 677 lineto
697 677 694 677 692 677  curveto
668 675 654 673 647 670  curveto
641 667 633 659 624 646  curveto
574 579 lineto
436 384 lineto
582 142 lineto
624 80 lineto
637 59 652 48 668 46  curveto
689 45 lineto
698 45 lineto
698 0 lineto
388 0 lineto
388 45 lineto
397 45 lineto
423 45 lineto
444 45 455 50 455 61  curveto
455 69 441 97 414 142  curveto
309 318 lineto
190 142 lineto
160 99 146 72 146 61  curveto
146 50 155 45 173 45  curveto
195 45 lineto
204 45 lineto
204 0 lineto
0 0 lineto
0 45 lineto
9 45 lineto
33 47 48 50 56 54  curveto
63 58 73 70 85 89  curveto
122 142 lineto
268 360 lineto
closepath
fill
		} def

	/Y
		{
280 312 moveto
116 577 lineto
96 610 84 628 82 633  curveto
68 660 51 673 33 675  curveto
7 677 lineto
-1 677 lineto
-1 722 lineto
311 722 lineto
311 677 lineto
303 677 lineto
279 677 lineto
257 677 246 671 246 660  curveto
246 649 259 621 287 576  curveto
410 375 lineto
535 576 lineto
563 621 577 648 577 659  curveto
577 671 561 677 529 677  curveto
519 677 lineto
519 722 lineto
717 722 lineto
717 677 lineto
708 677 lineto
687 675 lineto
668 673 653 662 641 643  curveto
599 577 lineto
431 313 lineto
431 141 lineto
434 93 lineto
434 73 437 60 443 55  curveto
450 51 469 47 500 45  curveto
509 45 lineto
509 0 lineto
202 0 lineto
202 45 lineto
211 45 lineto
242 47 261 51 268 55  curveto
274 60 278 73 278 93  curveto
280 141 lineto
280 312 lineto
closepath
fill
		} def

	/Z
		{
43 0 moveto
43 54 lineto
413 668 lineto
212 668 lineto
182 668 164 666 156 661  curveto
148 656 144 645 144 627  curveto
144 602 144 586 144 579  curveto
143 572 lineto
71 572 lineto
71 722 lineto
578 722 lineto
578 668 lineto
211 54 lineto
413 54 lineto
457 54 483 56 492 60  curveto
500 63 504 76 504 96  curveto
507 137 lineto
507 147 lineto
580 147 lineto
580 0 lineto
43 0 lineto
closepath
fill
		} def

	/bracketleft
		{
66 -144 moveto
66 771 lineto
292 771 lineto
292 726 lineto
189 726 lineto
189 -99 lineto
292 -99 lineto
292 -144 lineto
66 -144 lineto
closepath
fill
		} def

	/backslash
		{
444 -144 moveto
368 -144 lineto
108 722 lineto
184 722 lineto
444 -144 lineto
closepath
fill
		} def

	/bracketright
		{
260 771 moveto
260 -144 lineto
34 -144 lineto
34 -99 lineto
137 -99 lineto
137 726 lineto
34 726 lineto
34 771 lineto
260 771 lineto
closepath
fill
		} def

	/asciicircum
		{
312 561 moveto
127 192 lineto
46 192 lineto
312 722 lineto
577 192 lineto
496 192 lineto
312 561 lineto
closepath
fill
		} def

	/underscore
		{
42 -72 moveto
42 0 lineto
457 0 lineto
457 -72 lineto
42 -72 lineto
closepath
fill
		} def

	/quoteleft
		{
396 626 moveto
331 626 lineto
132 783 lineto
278 783 lineto
396 626 lineto
closepath
fill
		} def

	/a
		{
352 62 moveto
300 12 246 -12 190 -12  curveto
143 -12 104 2 72 31  curveto
41 61 25 98 25 143  curveto
25 260 119 319 307 319  curveto
332 319 lineto
332 384 lineto
332 430 326 461 314 478  curveto
303 494 281 502 250 502  curveto
185 502 152 481 152 437  curveto
151 406 lineto
151 397 lineto
72 397 lineto
72 505 lineto
134 534 199 548 266 548  curveto
406 548 476 494 476 385  curveto
476 150 lineto
476 108 479 80 485 65  curveto
491 50 502 42 519 42  curveto
524 42 530 43 536 45  curveto
542 0 lineto
517 -8 493 -12 469 -12  curveto
416 -12 377 12 352 62  curveto
closepath
332 97 moveto
332 275 lineto
312 275 lineto
216 275 167 236 167 159  curveto
167 96 196 64 253 64  curveto
282 64 308 75 332 97  curveto
closepath
fill
		} def

	/b
		{
78 0 moveto
78 629 lineto
75 677 lineto
75 697 72 710 65 715  curveto
59 719 40 723 9 725  curveto
0 726 lineto
0 771 lineto
222 771 lineto
222 435 lineto
263 510 324 548 404 548  curveto
466 548 515 524 552 476  curveto
588 427 606 362 606 281  curveto
606 192 586 120 544 67  curveto
503 14 448 -12 379 -12  curveto
320 -12 267 9 222 54  curveto
201 0 lineto
78 0 lineto
closepath
222 108 moveto
261 73 297 56 331 56  curveto
412 56 453 126 453 266  curveto
453 392 417 455 346 455  curveto
302 455 261 431 222 384  curveto
222 108 lineto
closepath
fill
		} def

	/c
		{
491 12 moveto
435 -3 381 -12 329 -12  curveto
236 -12 163 13 110 64  curveto
56 115 30 185 30 274  curveto
30 359 55 426 106 475  curveto
156 524 226 548 315 548  curveto
372 548 430 540 489 523  curveto
489 385 lineto
419 385 lineto
419 394 lineto
417 430 lineto
413 478 381 502 320 502  curveto
229 502 183 428 183 280  curveto
183 128 244 52 365 52  curveto
403 52 444 61 491 79  curveto
491 12 lineto
closepath
fill
		} def

	/d
		{
417 0 moveto
417 101 lineto
376 25 316 -12 235 -12  curveto
173 -12 124 11 88 60  curveto
51 108 33 173 33 254  curveto
33 344 53 415 95 468  curveto
136 521 191 548 261 548  curveto
320 548 372 526 417 481  curveto
417 629 lineto
414 677 lineto
414 697 411 710 404 715  curveto
398 719 379 723 348 725  curveto
338 726 lineto
338 771 lineto
562 771 lineto
562 141 lineto
564 93 lineto
564 73 567 60 574 55  curveto
581 51 599 47 630 45  curveto
640 45 lineto
640 0 lineto
417 0 lineto
closepath
417 427 moveto
378 462 342 479 309 479  curveto
227 479 187 409 187 270  curveto
187 144 222 81 293 81  curveto
337 81 378 104 417 151  curveto
417 427 lineto
closepath
fill
		} def

	/e
		{
513 21 moveto
449 -1 387 -12 326 -12  curveto
235 -12 163 13 110 65  curveto
56 116 30 186 30 274  curveto
30 356 54 422 102 472  curveto
150 523 213 548 290 548  curveto
439 548 513 456 513 273  curveto
513 263 lineto
178 263 lineto
178 127 241 60 368 60  curveto
411 60 459 71 513 95  curveto
513 21 lineto
closepath
182 308 moveto
371 308 lineto
371 325 lineto
371 390 364 436 351 462  curveto
338 489 316 502 284 502  curveto
216 502 182 438 182 308  curveto
closepath
fill
		} def

	/f
		{
102 487 moveto
26 487 lineto
26 536 lineto
102 536 lineto
102 557 lineto
102 708 166 783 295 783  curveto
345 783 391 772 434 752  curveto
434 638 lineto
368 638 lineto
367 647 lineto
365 677 lineto
362 716 345 736 315 736  curveto
289 736 271 727 261 708  curveto
251 689 246 655 246 605  curveto
246 536 lineto
382 536 lineto
382 487 lineto
246 487 lineto
246 141 lineto
249 93 lineto
249 73 252 60 259 55  curveto
266 51 284 47 315 45  curveto
325 45 lineto
325 0 lineto
23 0 lineto
23 45 lineto
33 45 lineto
64 47 82 51 89 55  curveto
96 60 99 73 99 93  curveto
102 141 lineto
102 487 lineto
closepath
fill
		} def

	/g
		{
135 19 moveto
98 38 79 62 79 89  curveto
79 124 113 158 182 189  curveto
102 219 62 276 62 359  curveto
62 417 81 462 121 497  curveto
160 531 213 548 279 548  curveto
321 548 358 541 390 528  curveto
590 545 lineto
560 468 lineto
454 482 lineto
485 446 500 406 500 362  curveto
500 309 481 264 442 227  curveto
403 191 355 173 298 173  curveto
286 173 270 174 250 175  curveto
222 180 lineto
200 163 188 146 188 130  curveto
188 109 215 99 268 99  curveto
350 99 lineto
426 99 480 89 512 70  curveto
545 51 561 18 561 -27  curveto
561 -80 535 -123 484 -156  curveto
432 -188 365 -205 280 -205  curveto
204 -205 142 -194 94 -172  curveto
46 -150 22 -123 22 -89  curveto
22 -41 60 -5 135 19  curveto
closepath
197 359 moveto
197 263 225 214 281 214  curveto
336 214 364 262 364 357  curveto
364 453 336 500 281 500  curveto
225 500 197 453 197 359  curveto
closepath
182 5 moveto
169 -23 162 -46 162 -62  curveto
162 -89 175 -112 200 -131  curveto
225 -150 256 -159 292 -159  curveto
330 -159 362 -149 388 -129  curveto
414 -109 427 -84 427 -54  curveto
427 -14 390 5 317 5  curveto
182 5 lineto
closepath
fill
		} def

	/h
		{
237 435 moveto
282 510 343 548 421 548  curveto
469 548 507 533 534 503  curveto
561 473 575 432 575 379  curveto
575 141 lineto
578 93 lineto
578 73 581 60 587 55  curveto
594 51 613 47 644 45  curveto
653 45 lineto
653 0 lineto
352 0 lineto
352 45 lineto
361 45 lineto
392 47 411 51 418 55  curveto
424 60 428 73 428 93  curveto
430 141 lineto
430 362 lineto
430 400 426 426 417 440  curveto
408 453 391 460 365 460  curveto
322 460 279 433 237 380  curveto
237 141 lineto
240 93 lineto
240 73 244 60 250 55  curveto
257 51 276 47 307 45  curveto
316 45 lineto
316 0 lineto
15 0 lineto
15 45 lineto
24 45 lineto
55 47 74 51 80 55  curveto
87 60 90 73 90 93  curveto
93 141 lineto
93 629 lineto
90 677 lineto
90 697 87 710 80 715  curveto
74 719 55 723 24 725  curveto
15 726 lineto
15 771 lineto
237 771 lineto
237 435 lineto
closepath
fill
		} def

	/i
		{
237 536 moveto
237 141 lineto
240 93 lineto
240 73 244 60 250 55  curveto
257 51 276 47 307 45  curveto
316 45 lineto
316 0 lineto
15 0 lineto
15 45 lineto
24 45 lineto
55 47 74 51 80 55  curveto
87 60 90 73 90 93  curveto
93 141 lineto
93 394 lineto
90 442 lineto
90 463 87 475 80 480  curveto
74 484 55 488 24 490  curveto
15 490 lineto
15 536 lineto
237 536 lineto
closepath
93 626 moveto
93 771 lineto
237 771 lineto
237 626 lineto
93 626 lineto
closepath
fill
		} def

	/j
		{
273 536 moveto
273 10 lineto
273 -133 203 -205 62 -205  curveto
29 -205 -9 -198 -55 -185  curveto
-55 -54 lineto
10 -54 lineto
11 -63 lineto
12 -97 lineto
14 -139 33 -160 69 -160  curveto
94 -160 110 -151 118 -135  curveto
125 -118 129 -81 129 -25  curveto
129 394 lineto
126 442 lineto
126 463 123 475 117 480  curveto
110 484 91 488 60 490  curveto
51 490 lineto
51 536 lineto
273 536 lineto
closepath
129 626 moveto
129 771 lineto
273 771 lineto
273 626 lineto
129 626 lineto
closepath
fill
		} def

	/k
		{
237 258 moveto
237 141 lineto
240 93 lineto
240 73 243 60 249 55  curveto
254 50 270 47 295 45  curveto
304 45 lineto
304 0 lineto
15 0 lineto
15 45 lineto
24 45 lineto
55 47 74 51 80 55  curveto
87 60 90 73 90 93  curveto
93 141 lineto
93 629 lineto
90 677 lineto
90 697 87 710 80 715  curveto
74 719 55 723 24 725  curveto
15 726 lineto
15 771 lineto
237 771 lineto
237 289 lineto
262 289 lineto
380 399 lineto
424 440 446 467 446 479  curveto
446 486 438 490 424 490  curveto
403 490 lineto
394 490 lineto
394 536 lineto
605 536 lineto
605 490 lineto
596 490 lineto
569 488 552 486 544 482  curveto
535 479 522 469 503 452  curveto
438 394 lineto
367 326 lineto
516 140 lineto
562 87 lineto
577 70 589 59 598 54  curveto
606 50 622 47 644 45  curveto
653 45 lineto
653 0 lineto
439 0 lineto
260 258 lineto
237 258 lineto
closepath
fill
		} def

	/l
		{
237 771 moveto
237 141 lineto
240 93 lineto
240 73 244 60 250 55  curveto
257 51 276 47 307 45  curveto
316 45 lineto
316 0 lineto
15 0 lineto
15 45 lineto
24 45 lineto
55 47 74 51 80 55  curveto
87 60 90 73 90 93  curveto
93 141 lineto
93 629 lineto
90 677 lineto
90 697 87 710 80 715  curveto
74 719 55 723 24 725  curveto
15 726 lineto
15 771 lineto
237 771 lineto
closepath
fill
		} def

	/m
		{
231 435 moveto
284 510 345 548 416 548  curveto
494 548 540 510 554 435  curveto
618 510 682 548 747 548  curveto
841 548 888 497 888 394  curveto
888 141 lineto
891 93 lineto
891 73 894 60 901 55  curveto
907 51 926 47 958 45  curveto
966 45 lineto
966 0 lineto
683 0 lineto
683 45 lineto
692 45 lineto
717 47 733 50 739 55  curveto
745 60 748 73 748 93  curveto
750 141 lineto
750 361 lineto
750 427 729 459 687 459  curveto
640 459 597 431 560 375  curveto
560 141 lineto
562 93 lineto
562 73 565 60 571 55  curveto
577 50 592 47 617 45  curveto
626 45 lineto
626 0 lineto
355 0 lineto
355 45 lineto
364 45 lineto
389 47 404 50 410 55  curveto
416 60 419 73 419 93  curveto
421 141 lineto
421 361 lineto
421 427 400 460 358 460  curveto
310 460 268 432 231 376  curveto
231 141 lineto
234 93 lineto
234 73 237 60 243 55  curveto
249 50 264 47 289 45  curveto
298 45 lineto
298 0 lineto
15 0 lineto
15 45 lineto
24 45 lineto
55 47 74 51 80 55  curveto
87 60 90 73 90 93  curveto
93 141 lineto
93 394 lineto
90 442 lineto
90 463 87 475 80 480  curveto
74 484 55 488 24 490  curveto
15 490 lineto
15 536 lineto
231 536 lineto
231 435 lineto
closepath
fill
		} def

	/n
		{
237 435 moveto
282 510 343 548 421 548  curveto
469 548 507 533 534 503  curveto
561 473 575 432 575 379  curveto
575 141 lineto
578 93 lineto
578 73 581 60 587 55  curveto
594 51 613 47 644 45  curveto
653 45 lineto
653 0 lineto
352 0 lineto
352 45 lineto
361 45 lineto
392 47 411 51 418 55  curveto
424 60 428 73 428 93  curveto
430 141 lineto
430 362 lineto
430 400 426 426 417 440  curveto
408 453 391 460 365 460  curveto
322 460 279 433 237 380  curveto
237 141 lineto
240 93 lineto
240 73 244 60 250 55  curveto
257 51 276 47 307 45  curveto
316 45 lineto
316 0 lineto
15 0 lineto
15 45 lineto
24 45 lineto
55 47 74 51 80 55  curveto
87 60 90 73 90 93  curveto
93 141 lineto
93 394 lineto
90 442 lineto
90 463 87 475 80 480  curveto
74 484 55 488 24 490  curveto
15 490 lineto
15 536 lineto
237 536 lineto
237 435 lineto
closepath
fill
		} def

	/o
		{
305 -12 moveto
220 -12 153 13 104 63  curveto
55 113 30 182 30 268  curveto
30 354 55 423 104 473  curveto
154 523 222 548 309 548  curveto
395 548 462 523 512 473  curveto
562 423 587 355 587 269  curveto
587 180 562 111 512 62  curveto
462 12 393 -12 305 -12  curveto
closepath
307 39 moveto
387 39 427 116 427 270  curveto
427 421 388 497 309 497  curveto
229 497 189 420 189 268  curveto
189 115 229 39 307 39  curveto
closepath
fill
		} def

	/p
		{
234 54 moveto
234 -51 lineto
237 -99 lineto
237 -119 241 -131 247 -136  curveto
254 -141 273 -145 304 -146  curveto
313 -147 lineto
313 -192 lineto
12 -192 lineto
12 -147 lineto
21 -146 lineto
52 -145 71 -141 77 -136  curveto
84 -132 87 -119 87 -99  curveto
90 -51 lineto
90 394 lineto
87 442 lineto
87 463 84 475 77 480  curveto
71 484 52 488 21 490  curveto
12 490 lineto
12 536 lineto
234 536 lineto
234 435 lineto
275 510 336 548 417 548  curveto
478 548 527 524 564 476  curveto
600 427 619 362 619 281  curveto
619 192 598 120 557 67  curveto
515 14 460 -12 391 -12  curveto
332 -12 280 9 234 54  curveto
closepath
234 108 moveto
273 73 310 56 343 56  curveto
424 56 465 126 465 266  curveto
465 392 429 455 358 455  curveto
315 455 273 431 234 384  curveto
234 108 lineto
closepath
fill
		} def

	/q
		{
417 101 moveto
376 25 316 -12 235 -12  curveto
173 -12 124 11 88 60  curveto
51 108 33 173 33 254  curveto
33 344 53 415 95 468  curveto
136 521 191 548 261 548  curveto
320 548 372 526 417 481  curveto
417 536 lineto
562 536 lineto
562 -51 lineto
564 -99 lineto
564 -119 567 -132 574 -136  curveto
581 -141 599 -145 630 -146  curveto
640 -147 lineto
640 -192 lineto
338 -192 lineto
338 -147 lineto
348 -146 lineto
379 -145 398 -141 404 -136  curveto
411 -132 414 -119 414 -99  curveto
417 -51 lineto
417 101 lineto
closepath
417 424 moveto
378 458 342 476 309 476  curveto
227 476 187 406 187 267  curveto
187 141 222 78 293 78  curveto
337 78 378 101 417 148  curveto
417 424 lineto
closepath
fill
		} def

	/r
		{
237 383 moveto
237 141 lineto
237 103 240 78 246 67  curveto
252 55 265 49 286 48  curveto
319 45 lineto
328 45 lineto
328 0 lineto
15 0 lineto
15 45 lineto
24 45 lineto
55 47 74 51 80 55  curveto
87 60 90 73 90 93  curveto
93 141 lineto
93 394 lineto
90 442 lineto
90 463 87 475 80 480  curveto
74 484 55 488 24 490  curveto
15 490 lineto
15 536 lineto
237 536 lineto
237 435 lineto
281 510 338 548 408 548  curveto
416 548 425 547 437 544  curveto
437 373 lineto
370 373 lineto
370 382 lineto
368 405 lineto
366 427 364 440 362 444  curveto
359 448 351 450 338 450  curveto
297 450 263 428 237 383  curveto
closepath
fill
		} def

	/s
		{
54 24 moveto
54 162 lineto
120 162 lineto
121 153 lineto
121 128 lineto
121 101 134 78 160 60  curveto
185 42 217 33 255 33  curveto
280 33 301 41 318 57  curveto
335 73 343 92 343 116  curveto
343 152 313 182 252 206  curveto
208 224 lineto
105 264 54 319 54 388  curveto
54 437 73 476 113 505  curveto
153 533 206 548 273 548  curveto
327 548 382 539 440 522  curveto
440 394 lineto
375 394 lineto
374 403 lineto
373 411 373 419 373 427  curveto
373 477 343 502 284 502  curveto
258 502 237 494 219 478  curveto
201 461 192 441 192 417  curveto
192 396 198 380 212 369  curveto
225 357 252 344 293 328  curveto
337 311 lineto
437 273 487 221 487 157  curveto
487 108 466 67 423 35  curveto
381 3 327 -12 262 -12  curveto
181 -12 112 0 54 24  curveto
closepath
fill
		} def

	/t
		{
363 4 moveto
333 -6 303 -12 274 -12  curveto
153 -12 93 47 93 166  curveto
93 487 lineto
27 487 lineto
27 536 lineto
93 536 lineto
93 626 lineto
238 651 lineto
238 536 lineto
356 536 lineto
356 487 lineto
238 487 lineto
238 163 lineto
238 121 lineto
238 70 262 45 311 45  curveto
327 45 344 49 363 56  curveto
363 4 lineto
closepath
fill
		} def

	/u
		{
415 0 moveto
415 101 lineto
371 25 310 -12 231 -12  curveto
184 -12 146 2 119 32  curveto
91 62 78 104 78 156  curveto
78 394 lineto
75 442 lineto
75 463 72 475 65 480  curveto
59 484 40 488 9 490  curveto
0 490 lineto
0 536 lineto
222 536 lineto
222 173 lineto
222 107 244 74 289 74  curveto
335 74 377 101 415 154  curveto
415 394 lineto
413 442 lineto
413 463 409 475 403 480  curveto
396 484 377 488 346 490  curveto
337 490 lineto
337 536 lineto
560 536 lineto
560 141 lineto
562 93 lineto
562 73 566 60 572 55  curveto
579 51 598 47 629 45  curveto
638 45 lineto
638 0 lineto
415 0 lineto
closepath
fill
		} def

	/v
		{
302 -5 moveto
110 392 lineto
84 438 lineto
73 459 63 473 55 479  curveto
46 485 31 488 9 490  curveto
0 490 lineto
0 536 lineto
301 536 lineto
301 490 lineto
292 490 lineto
272 488 lineto
250 487 238 481 238 470  curveto
238 467 239 464 241 459  curveto
254 424 lineto
255 422 260 412 270 392  curveto
376 170 lineto
486 392 lineto
508 436 519 463 519 473  curveto
519 483 510 488 493 488  curveto
466 490 lineto
458 490 lineto
458 536 lineto
656 536 lineto
656 490 lineto
647 490 lineto
625 488 611 486 603 482  curveto
596 478 588 468 580 453  curveto
546 394 lineto
347 -5 lineto
302 -5 lineto
closepath
fill
		} def

	/w
		{
236 -5 moveto
96 394 lineto
76 441 lineto
68 461 60 474 52 480  curveto
45 485 31 488 9 490  curveto
0 490 lineto
0 536 lineto
280 536 lineto
280 490 lineto
271 490 lineto
244 490 lineto
223 490 213 484 213 471  curveto
213 467 214 462 215 456  curveto
221 432 lineto
222 425 226 413 232 396  curveto
307 178 lineto
452 533 lineto
504 533 lineto
644 178 lineto
723 392 lineto
724 395 728 404 733 419  curveto
743 443 748 460 748 468  curveto
748 483 738 490 718 490  curveto
692 490 lineto
683 490 lineto
683 536 lineto
879 536 lineto
879 490 lineto
870 490 lineto
843 488 825 483 816 473  curveto
807 464 795 438 779 395  curveto
631 -5 lineto
586 -5 lineto
440 371 lineto
283 -5 lineto
236 -5 lineto
closepath
fill
		} def

	/x
		{
237 257 moveto
136 396 lineto
95 447 lineto
80 465 69 477 62 481  curveto
54 486 39 488 18 490  curveto
9 490 lineto
9 536 lineto
310 536 lineto
310 490 lineto
301 490 lineto
277 490 lineto
257 490 248 485 248 476  curveto
248 473 249 470 251 465  curveto
270 434 lineto
280 416 288 404 292 398  curveto
338 333 lineto
393 398 lineto
429 441 446 467 446 477  curveto
446 486 432 490 403 490  curveto
394 490 lineto
394 536 lineto
599 536 lineto
599 490 lineto
590 490 lineto
569 490 lineto
551 490 533 480 515 459  curveto
461 398 lineto
370 289 lineto
476 140 lineto
520 86 lineto
533 69 544 58 553 54  curveto
561 50 577 47 599 45  curveto
608 45 lineto
608 0 lineto
310 0 lineto
310 45 lineto
319 45 lineto
344 45 lineto
362 45 371 50 371 59  curveto
371 65 363 80 347 104  curveto
322 141 lineto
271 210 lineto
209 141 lineto
172 98 153 71 153 59  curveto
153 50 161 45 177 45  curveto
192 45 lineto
201 45 lineto
201 0 lineto
0 0 lineto
0 45 lineto
5 45 lineto
29 46 lineto
48 47 70 63 96 92  curveto
140 141 lineto
237 257 lineto
closepath
fill
		} def

	/y
		{
101 -192 moveto
284 5 lineto
104 396 lineto
76 449 lineto
67 467 59 478 53 482  curveto
47 485 32 488 9 490  curveto
0 490 lineto
0 536 lineto
304 536 lineto
304 490 lineto
295 490 lineto
269 490 lineto
247 490 236 484 236 472  curveto
236 466 240 453 250 433  curveto
267 395 lineto
367 173 lineto
484 395 lineto
493 412 500 426 504 437  curveto
517 468 lineto
518 472 519 474 519 476  curveto
519 485 502 490 469 490  curveto
460 490 lineto
460 536 lineto
653 536 lineto
653 490 lineto
644 490 lineto
616 488 598 483 591 477  curveto
584 470 567 443 542 395  curveto
229 -192 lineto
101 -192 lineto
closepath
fill
		} def

	/z
		{
49 0 moveto
49 51 lineto
361 490 lineto
211 490 lineto
180 490 160 488 151 484  curveto
141 480 136 470 136 456  curveto
134 415 lineto
133 406 lineto
67 406 lineto
67 536 lineto
521 536 lineto
521 490 lineto
210 51 lineto
383 51 lineto
416 51 438 53 447 57  curveto
456 61 461 71 462 87  curveto
463 99 463 110 464 120  curveto
464 129 lineto
531 129 lineto
531 0 lineto
49 0 lineto
closepath
fill
		} def

	/braceleft
		{
58 335 moveto
76 335 lineto
122 335 146 359 146 405  curveto
146 413 144 424 141 437  curveto
132 474 lineto
121 526 lineto
111 566 107 597 107 619  curveto
107 662 123 698 156 727  curveto
188 756 229 771 276 771  curveto
313 771 lineto
313 726 lineto
266 719 242 693 242 647  curveto
242 637 243 625 246 614  curveto
250 593 lineto
256 559 lineto
262 525 265 495 265 470  curveto
265 394 229 342 157 313  curveto
229 282 264 230 264 156  curveto
264 127 261 96 254 62  curveto
248 27 lineto
245 7 lineto
242 -8 240 -20 240 -27  curveto
240 -67 265 -91 313 -99  curveto
313 -144 lineto
275 -144 lineto
226 -144 186 -130 154 -102  curveto
121 -74 105 -40 105 1  curveto
105 24 110 56 119 96  curveto
131 147 lineto
140 184 lineto
143 197 144 210 144 224  curveto
144 268 121 290 76 290  curveto
58 290 lineto
58 335 lineto
closepath
fill
		} def

	/bar
		{
150 -144 moveto
150 771 lineto
222 771 lineto
222 -144 lineto
150 -144 lineto
closepath
fill
		} def

	/braceright
		{
308 290 moveto
290 290 lineto
243 290 220 267 220 220  curveto
220 212 221 201 225 188  curveto
233 151 lineto
245 100 lineto
254 59 259 28 259 6  curveto
259 -35 242 -71 210 -100  curveto
177 -129 137 -144 89 -144  curveto
52 -144 lineto
52 -99 lineto
99 -92 123 -66 123 -21  curveto
123 -10 122 0 120 12  curveto
116 32 lineto
109 67 lineto
103 101 100 130 100 155  curveto
100 231 136 283 208 313  curveto
137 343 102 396 102 471  curveto
102 499 105 530 111 564  curveto
117 599 lineto
121 619 lineto
124 635 125 646 125 653  curveto
125 694 101 718 52 726  curveto
52 771 lineto
90 771 lineto
139 771 180 757 212 729  curveto
244 701 260 666 260 624  curveto
260 601 256 570 246 530  curveto
234 479 lineto
226 442 lineto
223 429 222 415 222 401  curveto
222 357 244 335 290 335  curveto
308 335 lineto
308 290 lineto
closepath
fill
		} def

	/asciitilde
		{
108 216 moveto
108 321 152 373 241 373  curveto
274 373 313 364 358 346  curveto
396 330 lineto
441 312 lineto
487 295 lineto
523 281 549 273 567 273  curveto
614 273 638 301 638 356  curveto
638 361 lineto
686 361 lineto
686 256 642 204 553 204  curveto
520 204 480 213 436 231  curveto
398 247 lineto
353 265 lineto
307 283 lineto
271 297 245 304 227 304  curveto
180 304 156 276 156 221  curveto
156 216 lineto
108 216 lineto
closepath
fill
		} def

	/exclamdown
		{
204 536 moveto
204 415 lineto
60 415 lineto
60 536 lineto
204 536 lineto
closepath
154 331 moveto
204 -42 lineto
204 -186 lineto
60 -186 lineto
60 -42 lineto
109 331 lineto
154 331 lineto
closepath
fill
		} def

	/cent
		{
322 0 moveto
322 77 lineto
235 84 168 112 121 161  curveto
74 211 50 278 50 362  curveto
50 446 74 511 120 558  curveto
167 605 234 632 322 639  curveto
322 722 lineto
368 722 lineto
368 638 lineto
421 635 475 628 531 615  curveto
531 472 lineto
464 472 lineto
464 481 lineto
461 511 lineto
460 540 453 559 440 570  curveto
427 581 403 588 368 592  curveto
368 140 lineto
422 140 477 149 533 167  curveto
533 101 lineto
469 84 414 76 368 76  curveto
368 0 lineto
322 0 lineto
closepath
322 149 moveto
322 590 lineto
244 571 205 497 205 366  curveto
205 245 244 173 322 149  curveto
closepath
fill
		} def

	/sterling
		{
109 0 moveto
109 114 lineto
173 119 205 169 205 264  curveto
205 352 lineto
127 352 lineto
127 403 lineto
205 403 lineto
205 482 lineto
205 566 223 630 258 674  curveto
293 718 344 740 410 740  curveto
449 740 499 731 561 711  curveto
561 584 lineto
495 584 lineto
494 593 lineto
492 633 486 659 476 672  curveto
467 685 448 691 421 691  curveto
394 691 375 682 365 663  curveto
355 644 350 607 350 554  curveto
350 403 lineto
464 403 lineto
464 358 lineto
350 358 lineto
350 300 lineto
350 217 301 155 204 114  curveto
563 114 lineto
563 0 lineto
109 0 lineto
closepath
fill
		} def

	/fraction
		{
-282 -18 moveto
258 740 lineto
318 740 lineto
-222 -18 lineto
-282 -18 lineto
closepath
fill
		} def

	/yen
		{
254 186 moveto
127 186 lineto
127 231 lineto
254 231 lineto
254 316 lineto
127 316 lineto
127 361 lineto
254 361 lineto
111 583 lineto
75 636 lineto
59 662 42 675 25 677  curveto
16 677 lineto
16 723 lineto
299 722 lineto
299 677 lineto
290 677 lineto
271 677 lineto
248 677 237 672 237 662  curveto
237 658 239 652 242 646  curveto
247 638 252 628 258 616  curveto
266 600 273 589 277 582  curveto
382 416 lineto
492 583 lineto
520 624 534 651 534 662  curveto
534 672 523 677 503 677  curveto
479 677 lineto
470 677 lineto
470 722 lineto
648 722 lineto
648 677 lineto
639 677 lineto
617 675 599 663 586 642  curveto
575 623 562 603 548 582  curveto
398 361 lineto
525 361 lineto
525 316 lineto
398 316 lineto
398 231 lineto
525 231 lineto
525 186 lineto
398 186 lineto
398 141 lineto
401 93 lineto
401 73 404 60 411 55  curveto
418 51 437 47 468 45  curveto
477 45 lineto
477 0 lineto
175 0 lineto
175 45 lineto
185 45 lineto
216 47 235 51 241 55  curveto
248 60 251 73 251 93  curveto
254 141 lineto
254 186 lineto
closepath
fill
		} def

	/florin
		{
94 -144 moveto
198 358 lineto
91 358 lineto
91 403 lineto
207 403 lineto
218 459 lineto
235 547 269 616 320 666  curveto
371 715 433 740 506 740  curveto
541 740 576 734 611 723  curveto
611 590 lineto
533 590 lineto
532 599 lineto
530 638 lineto
527 673 511 691 481 691  curveto
436 691 405 652 389 574  curveto
375 503 lineto
355 403 lineto
482 403 lineto
482 358 lineto
346 358 lineto
245 -144 lineto
94 -144 lineto
closepath
fill
		} def

	/section
		{
86 -127 moveto
86 9 lineto
153 9 lineto
153 0 lineto
154 -15 155 -25 155 -29  curveto
155 -55 164 -73 183 -83  curveto
220 -101 262 -111 311 -111  curveto
386 -111 424 -78 424 -12  curveto
424 7 418 22 405 33  curveto
392 44 365 59 323 76  curveto
259 104 lineto
144 153 86 213 86 284  curveto
86 334 116 382 174 430  curveto
114 461 83 505 83 563  curveto
83 619 105 663 147 694  curveto
190 725 249 740 326 740  curveto
392 740 457 731 519 714  curveto
519 572 lineto
453 572 lineto
452 581 lineto
451 598 451 610 451 617  curveto
451 669 409 695 325 695  curveto
293 695 267 685 245 665  curveto
223 645 212 621 212 591  curveto
212 560 241 533 297 509  curveto
357 484 lineto
477 435 537 373 537 298  curveto
537 253 512 203 461 149  curveto
521 116 551 69 551 9  curveto
551 -42 529 -83 485 -112  curveto
441 -142 380 -156 301 -156  curveto
231 -156 159 -146 86 -127  curveto
closepath
422 174 moveto
433 195 439 219 439 244  curveto
439 281 419 309 378 329  curveto
296 366 lineto
214 406 lineto
201 387 194 365 194 341  curveto
194 314 203 293 220 276  curveto
238 260 273 240 327 216  curveto
422 174 lineto
closepath
fill
		} def

	/currency
		{
168 197 moveto
74 103 lineto
42 134 lineto
136 229 lineto
106 271 90 315 90 361  curveto
90 409 106 454 138 495  curveto
42 591 lineto
74 623 lineto
170 527 lineto
211 558 256 574 304 574  curveto
352 574 397 558 438 527  curveto
534 623 lineto
566 591 lineto
470 495 lineto
501 454 517 409 517 361  curveto
517 315 502 271 472 229  curveto
566 134 lineto
534 103 lineto
440 197 lineto
398 164 353 147 304 147  curveto
255 147 210 164 168 197  curveto
closepath
302 220 moveto
342 220 376 233 403 261  curveto
431 288 445 321 445 361  curveto
445 400 431 433 404 460  curveto
376 488 343 501 304 501  curveto
265 501 232 488 204 460  curveto
177 433 163 400 163 361  curveto
163 322 177 289 204 261  curveto
231 234 264 220 302 220  curveto
closepath
fill
		} def

	/quotesingle
		{
102 469 moveto
48 771 lineto
205 771 lineto
150 469 lineto
102 469 lineto
closepath
fill
		} def

	/quotedblleft
		{
415 771 moveto
415 726 lineto
378 720 359 693 359 644  curveto
359 640 360 634 361 626  curveto
415 626 lineto
415 481 lineto
271 481 lineto
271 588 lineto
271 697 319 758 415 771  curveto
closepath
198 771 moveto
198 726 lineto
161 720 143 693 143 644  curveto
143 640 143 634 144 626  curveto
198 626 lineto
198 481 lineto
54 481 lineto
54 588 lineto
54 697 102 758 198 771  curveto
closepath
fill
		} def

	/guillemotleft
		{
284 451 moveto
177 268 lineto
284 84 lineto
247 54 lineto
30 268 lineto
247 481 lineto
284 451 lineto
closepath
513 451 moveto
405 268 lineto
512 85 lineto
475 59 lineto
258 268 lineto
476 479 lineto
513 451 lineto
closepath
fill
		} def

	/guilsinglleft
		{
284 451 moveto
177 268 lineto
284 84 lineto
247 54 lineto
30 268 lineto
247 481 lineto
284 451 lineto
closepath
fill
		} def

	/guilsinglright
		{
52 84 moveto
160 268 lineto
53 451 lineto
90 481 lineto
307 268 lineto
89 54 lineto
52 84 lineto
closepath
fill
		} def

	/fi
		{
125 0 moveto
125 625 lineto
625 625 lineto
625 0 lineto
125 0 lineto
closepath
156 31 moveto
593 31 lineto
593 593 lineto
156 593 lineto
156 31 lineto
closepath
fill
		} def

	/fl
		{
125 0 moveto
125 625 lineto
625 625 lineto
625 0 lineto
125 0 lineto
closepath
156 31 moveto
593 31 lineto
593 593 lineto
156 593 lineto
156 31 lineto
closepath
fill
		} def

	/endash
		{
72 252 moveto
72 325 lineto
505 325 lineto
505 252 lineto
72 252 lineto
closepath
fill
		} def

	/dagger
		{
239 -144 moveto
251 406 lineto
76 379 lineto
76 487 lineto
251 451 lineto
239 722 lineto
383 722 lineto
372 451 lineto
546 487 lineto
546 379 lineto
372 406 lineto
383 -144 lineto
239 -144 lineto
closepath
fill
		} def

	/daggerdbl
		{
239 -144 moveto
251 120 lineto
76 90 lineto
76 198 lineto
251 165 lineto
251 406 lineto
76 379 lineto
76 487 lineto
251 451 lineto
239 722 lineto
383 722 lineto
372 451 lineto
546 487 lineto
546 379 lineto
372 406 lineto
372 165 lineto
546 198 lineto
546 90 lineto
372 120 lineto
383 -144 lineto
239 -144 lineto
closepath
fill
		} def

	/periodcentered
		{
239 229 moveto
239 373 lineto
383 373 lineto
383 229 lineto
239 229 lineto
closepath
fill
		} def

	/paragraph
		{
267 -144 moveto
267 361 lineto
204 366 156 387 120 422  curveto
84 458 66 505 66 563  curveto
66 672 120 726 227 726  curveto
267 725 lineto
362 722 lineto
472 722 lineto
472 -144 lineto
426 -144 lineto
426 662 lineto
309 662 lineto
309 -144 lineto
267 -144 lineto
closepath
fill
		} def

	/bullet
		{
307 72 moveto
243 72 187 96 140 143  curveto
94 191 70 247 70 312  curveto
70 379 94 436 141 483  curveto
188 530 245 554 311 554  curveto
378 554 435 530 482 483  curveto
529 436 552 378 552 311  curveto
552 245 528 188 481 142  curveto
433 95 375 72 307 72  curveto
closepath
fill
		} def

	/quotesinglbase
		{
54 -144 moveto
54 -99 lineto
94 -94 114 -66 114 -16  curveto
114 0 lineto
54 0 lineto
54 156 lineto
210 156 lineto
210 35 lineto
210 -75 158 -135 54 -144  curveto
closepath
fill
		} def

	/quotedblbase
		{
271 -144 moveto
271 -99 lineto
308 -94 326 -67 326 -18  curveto
326 -14 326 -8 325 0  curveto
271 0 lineto
271 144 lineto
415 144 lineto
415 38 lineto
415 -70 367 -131 271 -144  curveto
closepath
54 -144 moveto
54 -99 lineto
91 -94 109 -67 109 -18  curveto
109 -14 109 -8 108 0  curveto
54 0 lineto
54 144 lineto
198 144 lineto
198 38 lineto
198 -70 150 -131 54 -144  curveto
closepath
fill
		} def

	/quotedblright
		{
271 481 moveto
271 527 lineto
308 532 326 559 326 607  curveto
326 611 326 618 325 626  curveto
271 626 lineto
271 771 lineto
415 771 lineto
415 664 lineto
415 555 367 494 271 481  curveto
closepath
54 481 moveto
54 527 lineto
91 532 109 559 109 607  curveto
109 611 109 618 108 626  curveto
54 626 lineto
54 771 lineto
198 771 lineto
198 664 lineto
198 555 150 494 54 481  curveto
closepath
fill
		} def

	/guillemotright
		{
281 84 moveto
389 268 lineto
282 451 lineto
318 481 lineto
536 268 lineto
318 54 lineto
281 84 lineto
closepath
53 84 moveto
161 268 lineto
53 450 lineto
90 477 lineto
307 268 lineto
90 56 lineto
53 84 lineto
closepath
fill
		} def

	/ellipsis
		{
112 0 moveto
112 108 lineto
220 108 lineto
220 0 lineto
112 0 lineto
closepath
445 0 moveto
445 108 lineto
554 108 lineto
554 0 lineto
445 0 lineto
closepath
778 0 moveto
778 108 lineto
887 108 lineto
887 0 lineto
778 0 lineto
closepath
fill
		} def

	/perthousand
		{
21 -18 moveto
641 740 lineto
737 740 lineto
112 -18 lineto
21 -18 lineto
closepath
187 359 moveto
73 359 17 419 17 539  curveto
17 661 74 722 189 722  curveto
305 722 362 662 362 542  curveto
362 420 304 359 187 359  curveto
closepath
188 406 moveto
231 406 253 451 253 542  curveto
253 631 232 676 189 676  curveto
147 676 125 631 125 541  curveto
125 451 146 406 188 406  curveto
closepath
567 0 moveto
453 0 396 59 396 179  curveto
396 301 454 362 569 362  curveto
685 362 742 302 742 181  curveto
742 60 684 0 567 0  curveto
closepath
568 46 moveto
611 46 633 91 633 182  curveto
633 271 612 316 569 316  curveto
527 316 505 271 505 181  curveto
505 91 526 46 568 46  curveto
closepath
946 0 moveto
833 0 776 59 776 179  curveto
776 301 834 362 949 362  curveto
1064 362 1122 302 1122 181  curveto
1122 60 1063 0 946 0  curveto
closepath
948 46 moveto
991 46 1013 91 1013 182  curveto
1013 271 992 316 949 316  curveto
907 316 885 271 885 181  curveto
885 91 906 46 948 46  curveto
closepath
fill
		} def

	/questiondown
		{
366 536 moveto
366 415 lineto
222 415 lineto
222 536 lineto
366 536 lineto
closepath
366 331 moveto
366 323 lineto
366 269 341 221 292 178  curveto
261 151 lineto
209 106 184 53 184 -9  curveto
184 -54 195 -91 217 -118  curveto
240 -146 270 -159 307 -159  curveto
336 -159 359 -152 377 -139  curveto
395 -125 404 -108 404 -86  curveto
404 -48 lineto
405 -39 lineto
471 -39 lineto
471 -173 lineto
412 -194 347 -205 275 -205  curveto
202 -205 143 -190 99 -160  curveto
54 -130 32 -91 32 -42  curveto
32 4 57 46 108 83  curveto
131 100 145 111 153 117  curveto
175 136 lineto
205 162 220 205 220 265  curveto
222 321 lineto
222 331 lineto
366 331 lineto
closepath
fill
		} def

	/grave
		{
396 626 moveto
331 626 lineto
132 783 lineto
278 783 lineto
396 626 lineto
closepath
fill
		} def

	/acute
		{
221 626 moveto
338 783 lineto
484 783 lineto
285 626 lineto
221 626 lineto
closepath
fill
		} def

	/circumflex
		{
130 626 moveto
248 783 lineto
368 783 lineto
485 626 lineto
428 626 lineto
308 721 lineto
187 626 lineto
130 626 lineto
closepath
fill
		} def

	/tilde
		{
138 626 moveto
138 713 170 756 234 756  curveto
256 756 278 750 301 739  curveto
337 722 lineto
361 710 379 705 391 705  curveto
419 705 434 722 434 756  curveto
479 756 lineto
479 669 447 626 383 626  curveto
361 626 339 631 316 642  curveto
280 660 lineto
256 671 238 677 226 677  curveto
198 677 184 660 184 626  curveto
138 626 lineto
closepath
fill
		} def

	/macron
		{
42 710 moveto
42 783 lineto
457 783 lineto
457 710 lineto
42 710 lineto
closepath
fill
		} def

	/breve
		{
137 783 moveto
182 783 lineto
204 735 246 710 309 710  curveto
370 710 412 735 435 783  curveto
480 783 lineto
473 735 454 697 423 668  curveto
392 640 354 626 309 626  curveto
263 626 225 640 194 668  curveto
163 697 144 735 137 783  curveto
closepath
fill
		} def

	/dotaccent
		{
236 626 moveto
236 771 lineto
380 771 lineto
380 626 lineto
236 626 lineto
closepath
fill
		} def

	/dieresis
		{
158 626 moveto
158 729 lineto
260 729 lineto
260 626 lineto
158 626 lineto
closepath
356 626 moveto
356 729 lineto
459 729 lineto
459 626 lineto
356 626 lineto
closepath
fill
		} def

	/ring
		{
307 626 moveto
277 626 251 637 230 658  curveto
208 680 198 706 198 737  curveto
198 767 208 794 230 815  curveto
251 837 278 848 309 848  curveto
339 848 365 837 387 815  curveto
409 794 419 768 419 737  curveto
419 706 409 679 387 658  curveto
365 637 339 626 307 626  curveto
closepath
308 662 moveto
329 662 347 669 361 684  curveto
376 698 383 716 383 737  curveto
383 758 376 775 361 790  curveto
347 804 329 812 309 812  curveto
288 812 270 804 256 790  curveto
241 775 234 758 234 737  curveto
234 716 241 699 256 684  curveto
270 669 287 662 308 662  curveto
closepath
fill
		} def

	/cedilla
		{
209 -198 moveto
209 -157 lineto
233 -164 252 -167 266 -167  curveto
296 -167 311 -156 311 -133  curveto
311 -105 281 -91 223 -91  curveto
268 0 lineto
321 0 lineto
294 -55 lineto
369 -59 407 -85 407 -134  curveto
407 -185 368 -210 291 -210  curveto
265 -210 238 -206 209 -198  curveto
closepath
fill
		} def

	/hungarumlaut
		{
125 0 moveto
125 625 lineto
625 625 lineto
625 0 lineto
125 0 lineto
closepath
156 31 moveto
593 31 lineto
593 593 lineto
156 593 lineto
156 31 lineto
closepath
fill
		} def

	/ogonek
		{
412 -122 moveto
412 -164 lineto
385 -175 356 -180 324 -180  curveto
244 -180 204 -155 204 -105  curveto
204 -68 234 -33 292 0  curveto
342 0 lineto
313 -25 298 -52 298 -81  curveto
298 -115 317 -132 355 -132  curveto
373 -132 392 -129 412 -122  curveto
closepath
fill
		} def

	/caron
		{
486 783 moveto
368 626 lineto
248 626 lineto
130 783 lineto
187 783 lineto
308 688 lineto
428 783 lineto
486 783 lineto
closepath
fill
		} def

	/emdash
		{
72 252 moveto
72 325 lineto
505 325 lineto
505 252 lineto
72 252 lineto
closepath
fill
		} def

	/AE
		{
930 0 moveto
381 0 lineto
381 45 lineto
390 45 lineto
421 47 440 51 447 55  curveto
453 60 457 73 457 93  curveto
459 141 lineto
459 213 lineto
203 213 lineto
157 139 lineto
130 96 117 70 117 62  curveto
117 52 127 46 148 46  curveto
169 45 lineto
179 45 lineto
179 0 lineto
4 0 lineto
4 45 lineto
13 45 lineto
35 47 54 61 70 89  curveto
100 139 lineto
459 722 lineto
909 722 lineto
909 593 lineto
836 593 lineto
836 602 lineto
835 619 834 628 834 631  curveto
834 648 832 659 828 664  curveto
823 669 813 671 796 672  curveto
763 674 lineto
608 674 lineto
608 400 lineto
714 400 lineto
763 401 lineto
781 401 790 409 790 425  curveto
790 427 790 435 791 448  curveto
792 458 lineto
858 458 lineto
858 301 lineto
792 301 lineto
791 310 lineto
790 320 790 327 790 329  curveto
790 347 780 356 761 356  curveto
715 358 lineto
605 358 lineto
605 141 lineto
607 99 lineto
608 78 612 65 617 60  curveto
623 54 636 52 658 52  curveto
701 51 lineto
762 51 lineto
818 52 lineto
840 52 853 61 854 80  curveto
857 117 lineto
858 126 lineto
930 126 lineto
930 0 lineto
closepath
235 258 moveto
459 258 lineto
459 622 lineto
235 258 lineto
closepath
fill
		} def

	/ordfeminine
		{
295 402 moveto
257 367 218 349 179 349  curveto
145 349 117 359 94 379  curveto
71 399 60 425 60 455  curveto
60 537 129 578 268 578  curveto
295 578 lineto
295 603 lineto
295 662 270 692 219 692  curveto
198 692 181 688 166 680  curveto
152 671 145 661 145 649  curveto
145 635 lineto
144 626 lineto
78 626 lineto
78 706 lineto
137 729 189 740 234 740  curveto
300 740 348 729 378 708  curveto
407 686 422 650 422 601  curveto
422 481 lineto
422 431 433 405 457 405  curveto
460 405 465 406 470 406  curveto
470 361 lineto
445 353 422 349 398 349  curveto
346 349 311 367 295 402  curveto
closepath
295 457 moveto
295 530 lineto
272 530 lineto
216 530 188 509 188 467  curveto
188 438 201 423 228 423  curveto
248 423 270 435 295 457  curveto
closepath
fill
		} def

	/Lslash
		{
502 168 moveto
575 168 lineto
575 0 lineto
21 0 lineto
21 45 lineto
30 45 lineto
61 47 79 51 86 55  curveto
93 60 96 73 96 93  curveto
99 141 lineto
99 323 lineto
21 277 lineto
21 333 lineto
99 378 lineto
99 581 lineto
96 629 lineto
96 649 93 662 87 666  curveto
81 671 62 674 30 677  curveto
21 677 lineto
21 722 lineto
328 722 lineto
328 677 lineto
319 677 lineto
287 674 267 671 261 666  curveto
255 662 252 649 252 629  curveto
250 581 lineto
250 465 lineto
382 542 lineto
382 486 lineto
250 410 lineto
250 141 lineto
251 99 lineto
253 78 256 65 262 60  curveto
267 54 281 52 303 52  curveto
346 51 lineto
407 51 lineto
449 53 lineto
473 53 487 55 493 60  curveto
498 65 500 78 500 101  curveto
502 159 lineto
502 168 lineto
closepath
fill
		} def

	/Oslash
		{
96 -18 moveto
35 -18 lineto
131 88 lineto
69 162 39 254 39 364  curveto
39 479 71 571 137 638  curveto
203 706 292 740 403 740  curveto
497 740 577 715 643 665  curveto
709 740 lineto
773 740 lineto
679 632 lineto
742 559 774 468 774 360  curveto
774 243 741 151 675 83  curveto
610 15 520 -18 407 -18  curveto
314 -18 234 7 165 57  curveto
96 -18 lineto
closepath
219 187 moveto
572 585 lineto
536 657 481 692 406 692  curveto
267 692 198 583 198 366  curveto
198 300 205 240 219 187  curveto
closepath
592 535 moveto
238 138 lineto
275 66 332 30 407 30  curveto
545 30 614 137 614 350  curveto
614 421 607 483 592 535  curveto
closepath
fill
		} def

	/OE
		{
542 21 moveto
491 -4 442 -18 393 -18  curveto
286 -18 200 16 135 85  curveto
70 155 38 247 38 361  curveto
38 475 70 567 135 636  curveto
200 706 286 740 393 740  curveto
442 740 491 727 542 701  curveto
542 722 lineto
993 722 lineto
993 593 lineto
921 593 lineto
920 602 lineto
919 619 918 628 918 631  curveto
918 648 916 659 912 664  curveto
908 669 897 671 881 672  curveto
848 674 lineto
692 674 lineto
692 400 lineto
799 400 lineto
847 401 lineto
865 401 874 409 874 425  curveto
874 428 874 436 875 448  curveto
876 458 lineto
942 458 lineto
942 301 lineto
876 301 lineto
875 310 lineto
874 320 874 326 874 329  curveto
874 347 864 356 845 356  curveto
799 358 lineto
689 358 lineto
689 141 lineto
691 99 lineto
693 78 696 65 702 60  curveto
707 54 721 52 743 52  curveto
786 51 lineto
847 51 lineto
902 52 lineto
925 52 937 61 939 80  curveto
941 117 lineto
942 126 lineto
1014 126 lineto
1014 0 lineto
542 0 lineto
542 21 lineto
closepath
542 281 moveto
542 438 lineto
542 540 531 606 510 635  curveto
482 673 442 692 389 692  curveto
331 692 285 663 250 603  curveto
216 543 198 464 198 365  curveto
198 261 215 179 250 119  curveto
284 60 332 30 392 30  curveto
442 30 482 49 510 87  curveto
531 115 542 180 542 281  curveto
closepath
fill
		} def

	/ordmasculine
		{
241 349 moveto
175 349 123 366 86 401  curveto
48 435 30 483 30 545  curveto
30 607 48 655 86 689  curveto
123 723 176 740 244 740  curveto
311 740 364 723 401 689  curveto
439 655 458 607 458 545  curveto
458 415 385 349 241 349  curveto
closepath
242 394 moveto
299 394 328 444 328 545  curveto
328 645 300 695 244 695  curveto
187 695 159 645 159 545  curveto
159 444 187 394 242 394  curveto
closepath
fill
		} def

	/ae
		{
373 90 moveto
320 21 260 -12 192 -12  curveto
143 -12 102 2 70 32  curveto
37 63 21 100 21 145  curveto
21 205 44 248 90 277  curveto
136 305 208 319 306 319  curveto
332 319 lineto
332 384 lineto
332 430 326 461 314 478  curveto
303 494 281 502 250 502  curveto
222 502 199 496 180 484  curveto
162 471 152 455 152 437  curveto
151 406 lineto
151 397 lineto
72 397 lineto
72 505 lineto
134 534 198 548 264 548  curveto
332 548 387 527 429 485  curveto
472 527 524 548 587 548  curveto
731 548 803 456 803 273  curveto
803 263 lineto
468 263 lineto
468 127 531 60 658 60  curveto
701 60 749 71 803 95  curveto
803 21 lineto
736 -1 672 -12 614 -12  curveto
555 -12 509 -4 476 9  curveto
442 24 408 50 373 90  curveto
closepath
332 94 moveto
332 271 lineto
313 271 lineto
215 271 166 233 166 158  curveto
166 92 193 60 248 60  curveto
278 60 306 71 332 94  curveto
closepath
472 308 moveto
661 308 lineto
661 325 lineto
661 390 655 436 642 462  curveto
629 489 606 502 574 502  curveto
506 502 472 438 472 308  curveto
closepath
fill
		} def

	/dotlessi
		{
237 536 moveto
237 141 lineto
240 93 lineto
240 73 244 60 250 55  curveto
257 51 276 47 307 45  curveto
316 45 lineto
316 0 lineto
15 0 lineto
15 45 lineto
24 45 lineto
55 47 74 51 80 55  curveto
87 60 90 73 90 93  curveto
93 141 lineto
93 394 lineto
90 442 lineto
90 463 87 475 80 480  curveto
74 484 55 488 24 490  curveto
15 490 lineto
15 536 lineto
237 536 lineto
closepath
fill
		} def

	/lslash
		{
48 0 moveto
48 45 lineto
57 45 lineto
88 47 107 51 114 55  curveto
120 60 124 73 124 93  curveto
126 141 lineto
126 340 lineto
18 278 lineto
18 333 lineto
126 396 lineto
126 629 lineto
124 677 lineto
124 697 120 710 114 715  curveto
107 719 88 723 57 725  curveto
48 726 lineto
48 771 lineto
271 771 lineto
271 479 lineto
379 542 lineto
379 486 lineto
271 423 lineto
271 141 lineto
273 93 lineto
273 73 277 60 283 55  curveto
290 51 309 47 340 45  curveto
349 45 lineto
349 0 lineto
48 0 lineto
closepath
fill
		} def

	/oslash
		{
63 -12 moveto
0 -12 lineto
91 79 lineto
48 129 27 193 27 271  curveto
27 355 53 423 103 473  curveto
153 523 222 548 308 548  curveto
383 548 446 528 498 488  curveto
556 548 lineto
619 548 lineto
529 457 lineto
572 405 593 342 593 265  curveto
593 181 568 113 517 63  curveto
466 13 398 -12 313 -12  curveto
240 -12 177 7 123 47  curveto
63 -12 lineto
closepath
190 177 moveto
418 408 lineto
397 471 360 502 308 502  curveto
223 502 181 426 181 273  curveto
181 243 184 211 190 177  curveto
closepath
430 356 moveto
201 126 lineto
224 60 260 27 311 27  curveto
350 27 382 47 405 87  curveto
428 128 440 182 440 251  curveto
440 288 437 323 430 356  curveto
closepath
fill
		} def

	/oe
		{
486 69 moveto
437 15 376 -12 302 -12  curveto
219 -12 153 13 104 63  curveto
54 114 30 182 30 268  curveto
30 353 54 421 104 472  curveto
153 522 219 548 302 548  curveto
383 548 445 518 490 459  curveto
540 518 602 548 675 548  curveto
744 548 797 524 833 477  curveto
870 430 888 362 888 273  curveto
888 263 lineto
553 263 lineto
553 127 617 60 743 60  curveto
786 60 834 71 888 95  curveto
888 21 lineto
820 -1 759 -12 704 -12  curveto
612 -12 539 15 486 69  curveto
closepath
304 33 moveto
343 33 371 51 387 88  curveto
403 124 411 187 411 277  curveto
411 358 403 416 386 450  curveto
370 485 343 502 305 502  curveto
223 502 182 425 182 270  curveto
182 112 223 33 304 33  curveto
closepath
557 308 moveto
746 308 lineto
746 325 lineto
746 390 740 436 727 462  curveto
714 489 691 502 659 502  curveto
591 502 557 438 557 308  curveto
closepath
fill
		} def

	/germandbls
		{
356 9 moveto
356 126 lineto
417 126 lineto
417 117 lineto
419 87 lineto
421 50 438 32 470 32  curveto
490 32 508 41 522 58  curveto
536 75 543 95 543 118  curveto
543 143 523 174 482 209  curveto
419 263 lineto
357 316 326 360 326 396  curveto
326 423 342 461 373 509  curveto
382 523 lineto
401 552 411 587 411 629  curveto
411 701 387 737 339 737  curveto
285 737 257 686 257 583  curveto
257 141 lineto
259 93 lineto
259 73 262 61 268 55  curveto
273 50 287 47 309 45  curveto
318 45 lineto
318 0 lineto
35 0 lineto
35 45 lineto
44 45 lineto
75 47 94 51 100 55  curveto
107 60 110 73 110 93  curveto
113 141 lineto
113 543 lineto
113 627 130 688 165 726  curveto
200 764 256 783 333 783  curveto
396 783 447 771 484 748  curveto
521 725 540 694 540 654  curveto
540 621 518 587 473 551  curveto
454 536 lineto
425 513 411 490 411 467  curveto
411 449 422 431 443 414  curveto
478 387 lineto
546 331 lineto
596 289 629 258 643 236  curveto
657 214 665 186 665 151  curveto
665 105 647 67 613 35  curveto
579 3 537 -12 488 -12  curveto
432 -12 388 -5 356 9  curveto
closepath
fill
		} def

	/.notdef
		{
0 0 moveto
1000 0 lineto
1000 1000 lineto
0 1000 lineto
0 0 lineto
closepath
50 50 moveto
950 50 lineto
950 950 lineto
50 950 lineto
50 50 lineto
closepath
fill
		} def

	end				% close glyph dict. 
	currentdict			% actually put dict on the stack
	end			% close the dictionary now
	/LucidaBright-Bold exch definefont pop
/LucidaBright-Bold findfont 18.0 scalefont setfont
(D en fonction de x) show
Q
Q
newpath
0.0 0.0 m
0.0 22.0 l
391.0 22.0 l
391.0 0.0 l
h
W
Q
[ 1.0 0.0 0.0 1.0 5.0 5.0 ] defaultmatrix matrix concatmatrix setmatrix
-5.0 -5.0 translate
Q
2 J
0 j
end end restore showpage

%%Trailer
%%EOF
