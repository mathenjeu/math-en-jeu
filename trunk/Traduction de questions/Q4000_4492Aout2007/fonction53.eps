%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 20 118 575 673
%%Creator: FreeHEP Graphics2D Driver
%%Producer: com.maplesoft.mathdoc.view.plot.paint.PlotPSGraphics2D Revision: 1.20 
%%For: 
%%Title: 
%%CreationDate: Monday, May 21, 2007 10:02:10 AM EDT
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Draw a line. (x0 y0 x1 y1 line)
/L {bias n m l S unbias} def

% Polyline primitive.
/polyline  {n m 1 exch 1 exch
           {pop currentfile token pop currentfile token pop l} for
           } def

% Draw a polyline (n x0 y0 OPL x1 y1 x2 y2 ... ... xn yn)
/OPL {bias polyline S unbias} def

% Draw a closed polyline (n x0 y0 CPL x1 y1 x2 y2 ... ... xn yn)
/CPL {bias polyline s unbias} def

% Draw a filled polyline (n x0 y0 FPL x1 y1 x2 y2 ... ... xn yn)
/FPL {polyline h f*} def

% Draw an oval. (x y w h OVL)
/OVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width currentlinewidth sub 2 div
      height currentlinewidth sub 2 div neg
      scale n 0 0 1 5 -2 roll arc
      smatrix setmatrix S} def

% Draw a filled oval. (x y w h FOVL)
/FOVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width 2 div
      height 2 div neg
      scale n 0 0 m 0 0 1 5 -2 roll arc
      h smatrix setmatrix f} def

% Draw a rounded rectangle. (x y w h arcwidth archeight RREC)
/RREC {matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      s} def

% Draw a filled rounded rectangle. (x y w h arcwidth archeight FRREC)
/FRREC{matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      h f} def

% Draw a string.  (string x y STR)
/STR {q m 1 -1 scale recshow Q} def

% Define basic plot symbols.
/xys   {/siz exch def /yv exch def /xv exch def} def
/hline {xys n xv siz 2. div sub yv m siz 0 rlineto S} def
/vline {xys n xv yv siz 2. div sub m 0 siz rlineto S} def
/plus  {xys n xv yv siz 2. div sub m 0 siz rlineto
                    xv siz 2. div sub yv m siz 0 rlineto S} def
/dot   {n 2. div 0 360 arc s} def
/fdot  {n 2. div 0 360 arc h f} def
/box   {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                    siz 2 sqrt div dup rs} def
/fbox  {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                       siz 2 sqrt div dup rf} def
/tridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto s} def
/ftridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto h f} def

% Symbols defined in terms of the others.
/star     {3 copy cross plus} def
/cross    {xys q xv yv translate 45 rotate 0 0 siz plus Q} def
/diamond  {xys q xv yv translate 45 rotate 0 0 siz box Q} def
/fdiamond {xys q xv yv translate 45 rotate 0 0 siz fbox Q} def
/triup    {xys q xv yv translate 180 rotate 0 0 siz tridn Q} def
/ftriup   {xys q xv yv translate 180 rotate 0 0 siz ftridn Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Helvetica 16#00 vg&newcompositefont
/DialogInput-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
595 791 setpagesize
20 20 20 20 setmargins
0 0 setorigin
400 400 setsize
fittopage
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0.0 0.0 0.0 RG
[ 1.0 0.0 0.0 1.0 0.0 0.0 ] defaultmatrix matrix concatmatrix setmatrix
1.0 w
2 J
0 j
10.0 M
[ ] 0.0 d
1.0 1.0 1.0 RG
0.0 0.0 400.0 400.0 rf
0.0 0.0 0.0 RG
2.0 w
0 J
1 j
0.0 0.0 translate
0.0 0.0 translate
q
5.0 5.0 translate
0 0 390 390 rc
1.0 w
q
0.647059 0.647059 0.647059 RG
1 46 340 OPL
46 11
1 129 340 OPL
129 11
1 211 340 OPL
211 11
1 294 340 OPL
294 11
1 377 340 OPL
377 11
0.913725 0.913725 0.913725 RG
1 63 340 OPL
63 11
1 79 340 OPL
79 11
1 96 340 OPL
96 11
1 112 340 OPL
112 11
1 145 340 OPL
145 11
1 162 340 OPL
162 11
1 178 340 OPL
178 11
1 195 340 OPL
195 11
1 228 340 OPL
228 11
1 245 340 OPL
245 11
1 261 340 OPL
261 11
1 278 340 OPL
278 11
1 311 340 OPL
311 11
1 327 340 OPL
327 11
1 344 340 OPL
344 11
1 360 340 OPL
360 11
0.647059 0.647059 0.647059 RG
Q
q
0.647059 0.647059 0.647059 RG
1 46 340 OPL
377 340
1 46 274 OPL
377 274
1 46 208 OPL
377 208
1 46 143 OPL
377 143
1 46 77 OPL
377 77
1 46 11 OPL
377 11
0.913725 0.913725 0.913725 RG
1 46 307 OPL
377 307
1 46 241 OPL
377 241
1 46 176 OPL
377 176
1 46 110 OPL
377 110
1 46 44 OPL
377 44
0.647059 0.647059 0.647059 RG
Q
2.0 w
q
q
44.0 8.026548 335.971191 333.97345 rc
48 46 195 OPL
47 192
49 190
50 187
52 184
53 181
54 179
56 176
57 173
58 171
60 168
61 165
63 162
64 159
65 157
67 154
68 151
69 149
71 146
72 143
74 140
75 138
76 135
78 132
79 130
81 127
82 124
83 121
85 119
86 116
87 113
89 110
90 108
92 105
93 102
94 99
96 97
97 94
98 91
100 88
101 86
103 83
104 80
105 77
107 75
108 72
109 69
111 67
112 64
newpath
0.0 0.0 m
0.0 390.0 l
390.0 390.0 l
390.0 0.0 l
h
W
Q
q
0.0 0.0 1.0 RG
44.0 8.026548 335.971191 333.97345 rc
48 96 241 OPL
98 241
100 241
102 241
104 241
106 241
108 241
110 241
112 241
114 241
116 241
118 241
120 241
123 241
125 241
127 241
129 241
131 241
133 241
135 241
137 241
139 241
141 241
143 241
145 241
147 241
149 241
151 241
154 241
156 241
158 241
160 241
162 241
164 241
166 241
168 241
170 241
172 241
174 241
176 241
178 241
181 241
183 241
185 241
187 241
189 241
191 241
193 241
195 241
newpath
0.0 0.0 m
0.0 390.0 l
390.0 390.0 l
390.0 0.0 l
h
W
Q
q
44.0 8.026548 335.971191 333.97345 rc
52 228 64 OPL
229 73
230 77
230 80
231 83
233 87
234 90
237 96
240 102
244 106
247 110
250 114
253 117
256 121
259 124
262 127
265 129
269 132
272 135
274 137
278 140
281 142
284 144
287 146
290 149
293 151
296 153
299 155
302 157
306 159
309 160
312 162
315 164
318 166
321 168
324 169
327 171
331 173
333 174
337 176
340 178
343 179
346 181
349 182
352 184
355 185
358 187
361 188
365 190
368 191
371 192
374 194
377 195
newpath
0.0 0.0 m
0.0 390.0 l
390.0 390.0 l
390.0 0.0 l
h
W
Q
q
0.0 0.0 1.0 RG
44.0 8.026548 335.971191 333.97345 rc
1 46 340 OPL
46 195
newpath
0.0 0.0 m
0.0 390.0 l
390.0 390.0 l
390.0 0.0 l
h
W
Q
q
0.0 0.0 1.0 RG
44.0 8.026548 335.971191 333.97345 rc
1 377 340 OPL
377 195
newpath
0.0 0.0 m
0.0 390.0 l
390.0 390.0 l
390.0 0.0 l
h
W
Q
q
0.0 0.0 1.0 RG
44.0 8.026548 335.971191 333.97345 rc
1 245 340 OPL
245 241
newpath
0.0 0.0 m
0.0 390.0 l
390.0 390.0 l
390.0 0.0 l
h
W
Q
q
0.0 0.0 1.0 RG
44.0 8.026548 335.971191 333.97345 rc
1 311 340 OPL
311 241
newpath
0.0 0.0 m
0.0 390.0 l
390.0 390.0 l
390.0 0.0 l
h
W
Q
q
0.0 0.0 1.0 RG
44.0 8.026548 335.971191 333.97345 rc
1 195 307 OPL
195 241
newpath
0.0 0.0 m
0.0 390.0 l
390.0 390.0 l
390.0 0.0 l
h
W
Q
q
0.0 0.0 1.0 RG
44.0 8.026548 335.971191 333.97345 rc
1 96 307 OPL
96 241
newpath
0.0 0.0 m
0.0 390.0 l
390.0 390.0 l
390.0 0.0 l
h
W
Q
q
0.0 0.0 1.0 RG
44.0 8.026548 335.971191 333.97345 rc
48 245 241 OPL
246 241
247 241
249 241
250 241
252 241
253 241
254 241
256 241
257 241
258 241
260 241
261 241
263 241
264 241
265 241
267 241
268 241
269 241
271 241
272 241
274 241
275 241
276 241
278 241
279 241
280 241
282 241
283 241
285 241
286 241
287 241
289 241
290 241
291 241
293 241
294 241
296 241
297 241
298 241
300 241
301 241
303 241
304 241
305 241
307 241
308 241
309 241
311 241
newpath
0.0 0.0 m
0.0 390.0 l
390.0 390.0 l
390.0 0.0 l
h
W
Q
q
0.0 0.0 1.0 RG
44.0 8.026548 335.971191 333.97345 rc
48 46 340 OPL
53 340
59 340
67 340
74 340
81 340
87 340
94 340
101 340
108 340
115 340
122 340
129 340
136 340
143 340
149 340
157 340
163 340
170 340
177 340
184 340
191 340
198 340
204 340
211 340
219 340
225 340
232 340
239 340
246 340
253 340
260 340
267 340
274 340
280 340
287 340
294 340
301 340
308 340
315 340
322 340
329 340
336 340
342 340
350 340
356 340
363 340
370 340
377 340
newpath
0.0 0.0 m
0.0 390.0 l
390.0 390.0 l
390.0 0.0 l
h
W
Q
q
44.0 8.026548 335.971191 333.97345 rc
48 46 195 OPL
53 195
59 195
67 195
74 195
81 195
87 195
94 195
101 195
108 195
115 195
122 195
129 195
136 195
143 195
149 195
157 195
163 195
170 195
177 195
184 195
191 195
198 195
204 195
211 195
219 195
225 195
232 195
239 195
246 195
253 195
260 195
267 195
274 195
280 195
287 195
294 195
301 195
308 195
315 195
322 195
329 195
336 195
342 195
350 195
356 195
363 195
370 195
377 195
newpath
0.0 0.0 m
0.0 390.0 l
390.0 390.0 l
390.0 0.0 l
h
W
Q
q
0.0 0.0 1.0 RG
44.0 8.026548 335.971191 333.97345 rc
48 96 307 OPL
98 307
100 307
102 307
104 307
106 307
108 307
110 307
112 307
114 307
116 307
118 307
120 307
123 307
125 307
127 307
129 307
131 307
133 307
135 307
137 307
139 307
141 307
143 307
145 307
147 307
149 307
151 307
154 307
156 307
158 307
160 307
162 307
164 307
166 307
168 307
170 307
172 307
174 307
176 307
178 307
181 307
183 307
185 307
187 307
189 307
191 307
193 307
195 307
newpath
0.0 0.0 m
0.0 390.0 l
390.0 390.0 l
390.0 0.0 l
h
W
Q
q
44.0 8.026548 335.971191 333.97345 rc
48 112 64 OPL
115 64
117 64
119 64
122 64
124 64
127 64
129 64
131 64
134 64
136 64
139 64
141 64
144 64
146 64
148 64
151 64
153 64
156 64
158 64
160 64
163 64
165 64
168 64
170 64
173 64
175 64
177 64
180 64
182 64
184 64
187 64
189 64
192 64
194 64
197 64
199 64
201 64
204 64
206 64
209 64
211 64
214 64
216 64
218 64
221 64
223 64
226 64
228 64
newpath
0.0 0.0 m
0.0 390.0 l
390.0 390.0 l
390.0 0.0 l
h
W
Q
Q
q
1.0 w
q
1 311 340 OPL
311 342
1 327 340 OPL
327 342
1 344 340 OPL
344 342
1 360 340 OPL
360 342
1 195 340 OPL
195 342
1 228 340 OPL
228 342
1 245 340 OPL
245 342
1 261 340 OPL
261 342
1 278 340 OPL
278 342
1 112 340 OPL
112 342
1 145 340 OPL
145 342
1 162 340 OPL
162 342
1 178 340 OPL
178 342
1 63 340 OPL
63 342
1 79 340 OPL
79 342
1 96 340 OPL
96 342
1 46 340 OPL
377 340
Q
0.0 0.0 translate
q
[ 1.0 0.0 0.0 1.0 0.0 0.0 ] concat
q
202 369 18 21 rc
206.0 387.0 moveto
q 1 -1 scale
9 dict begin
/FontType 3 def
/FontMatrix [0.0010 0 0 0.0010 0 0]def
/FontBBox [0 -213 1065 950 ] def
	/Encoding 256 array def
			0 1 255 {Encoding exch /.notdef put}for
		Encoding 32 /space put
		Encoding 33 /exclam put
		Encoding 34 /quotedbl put
		Encoding 35 /numbersign put
		Encoding 36 /dollar put
		Encoding 37 /percent put
		Encoding 38 /ampersand put
		Encoding 39 /quoteright put
		Encoding 40 /parenleft put
		Encoding 41 /parenright put
		Encoding 42 /asterisk put
		Encoding 43 /plus put
		Encoding 44 /comma put
		Encoding 45 /hyphen put
		Encoding 46 /period put
		Encoding 47 /slash put
		Encoding 48 /zero put
		Encoding 49 /one put
		Encoding 50 /two put
		Encoding 51 /three put
		Encoding 52 /four put
		Encoding 53 /five put
		Encoding 54 /six put
		Encoding 55 /seven put
		Encoding 56 /eight put
		Encoding 57 /nine put
		Encoding 58 /colon put
		Encoding 59 /semicolon put
		Encoding 60 /less put
		Encoding 61 /equal put
		Encoding 62 /greater put
		Encoding 63 /question put
		Encoding 64 /at put
		Encoding 65 /A put
		Encoding 66 /B put
		Encoding 67 /C put
		Encoding 68 /D put
		Encoding 69 /E put
		Encoding 70 /F put
		Encoding 71 /G put
		Encoding 72 /H put
		Encoding 73 /I put
		Encoding 74 /J put
		Encoding 75 /K put
		Encoding 76 /L put
		Encoding 77 /M put
		Encoding 78 /N put
		Encoding 79 /O put
		Encoding 80 /P put
		Encoding 81 /Q put
		Encoding 82 /R put
		Encoding 83 /S put
		Encoding 84 /T put
		Encoding 85 /U put
		Encoding 86 /V put
		Encoding 87 /W put
		Encoding 88 /X put
		Encoding 89 /Y put
		Encoding 90 /Z put
		Encoding 91 /bracketleft put
		Encoding 92 /backslash put
		Encoding 93 /bracketright put
		Encoding 94 /asciicircum put
		Encoding 95 /underscore put
		Encoding 96 /quoteleft put
		Encoding 97 /a put
		Encoding 98 /b put
		Encoding 99 /c put
		Encoding 100 /d put
		Encoding 101 /e put
		Encoding 102 /f put
		Encoding 103 /g put
		Encoding 104 /h put
		Encoding 105 /i put
		Encoding 106 /j put
		Encoding 107 /k put
		Encoding 108 /l put
		Encoding 109 /m put
		Encoding 110 /n put
		Encoding 111 /o put
		Encoding 112 /p put
		Encoding 113 /q put
		Encoding 114 /r put
		Encoding 115 /s put
		Encoding 116 /t put
		Encoding 117 /u put
		Encoding 118 /v put
		Encoding 119 /w put
		Encoding 120 /x put
		Encoding 121 /y put
		Encoding 122 /z put
		Encoding 123 /braceleft put
		Encoding 124 /bar put
		Encoding 125 /braceright put
		Encoding 126 /asciitilde put
		Encoding 161 /exclamdown put
		Encoding 162 /cent put
		Encoding 163 /sterling put
		Encoding 164 /fraction put
		Encoding 165 /yen put
		Encoding 166 /florin put
		Encoding 167 /section put
		Encoding 168 /currency put
		Encoding 169 /quotesingle put
		Encoding 170 /quotedblleft put
		Encoding 171 /guillemotleft put
		Encoding 172 /guilsinglleft put
		Encoding 173 /guilsinglright put
		Encoding 174 /fi put
		Encoding 175 /fl put
		Encoding 177 /endash put
		Encoding 178 /dagger put
		Encoding 179 /daggerdbl put
		Encoding 180 /periodcentered put
		Encoding 182 /paragraph put
		Encoding 183 /bullet put
		Encoding 184 /quotesinglbase put
		Encoding 185 /quotedblbase put
		Encoding 186 /quotedblright put
		Encoding 187 /guillemotright put
		Encoding 188 /ellipsis put
		Encoding 189 /perthousand put
		Encoding 191 /questiondown put
		Encoding 193 /grave put
		Encoding 194 /acute put
		Encoding 195 /circumflex put
		Encoding 196 /tilde put
		Encoding 197 /macron put
		Encoding 198 /breve put
		Encoding 199 /dotaccent put
		Encoding 200 /dieresis put
		Encoding 202 /ring put
		Encoding 203 /cedilla put
		Encoding 205 /hungarumlaut put
		Encoding 206 /ogonek put
		Encoding 207 /caron put
		Encoding 208 /emdash put
		Encoding 225 /AE put
		Encoding 227 /ordfeminine put
		Encoding 232 /Lslash put
		Encoding 233 /Oslash put
		Encoding 234 /OE put
		Encoding 235 /ordmasculine put
		Encoding 241 /ae put
		Encoding 245 /dotlessi put
		Encoding 248 /lslash put
		Encoding 249 /oslash put
		Encoding 250 /oe put
		Encoding 251 /germandbls put
	/BuildGlyph
		{ 2 copy exch /Metrics get exch 
			2 copy known {get}{pop pop 1000.0} ifelse
			0
			0 -213 1065 950
			setcachedevice
			exch /CharProcs get exch
			2 copy known not
					{pop /.notdef}
				if
			get exec
		} bind def

	/BuildChar
		{ 1 index /Encoding get exch get
		  1 index /BuildGlyph get exec
	  } bind def
	/Metrics 150 dict def
		Metrics begin
		/.notdef 1000 def
		/space 304.19921875 def
		/exclam 265.13671875 def
		/quotedbl 385.7421875 def
		/numbersign 608.3984375 def
		/dollar 608.3984375 def
		/percent 758.7890625 def
		/ampersand 727.5390625 def
		/quoteright 241.2109375 def
		/parenleft 310.05859375 def
		/parenright 310.05859375 def
		/asterisk 458.0078125 def
		/plus 794.921875 def
		/comma 265.13671875 def
		/hyphen 578.61328125 def
		/period 265.13671875 def
		/slash 524.4140625 def
		/zero 608.3984375 def
		/one 608.3984375 def
		/two 608.3984375 def
		/three 608.3984375 def
		/four 608.3984375 def
		/five 608.3984375 def
		/six 608.3984375 def
		/seven 608.3984375 def
		/eight 608.3984375 def
		/nine 608.3984375 def
		/colon 265.13671875 def
		/semicolon 265.13671875 def
		/less 794.921875 def
		/equal 794.921875 def
		/greater 794.921875 def
		/question 471.19140625 def
		/at 861.328125 def
		/A 747.0703125 def
		/B 605.95703125 def
		/C 714.35546875 def
		/D 770.01953125 def
		/E 568.359375 def
		/F 550.29296875 def
		/G 756.34765625 def
		/H 775.87890625 def
		/I 325.1953125 def
		/J 421.38671875 def
		/K 698.2421875 def
		/L 571.77734375 def
		/M 864.74609375 def
		/N 761.71875 def
		/O 783.203125 def
		/P 578.61328125 def
		/Q 787.59765625 def
		/R 686.03515625 def
		/S 549.31640625 def
		/T 662.59765625 def
		/U 727.05078125 def
		/V 656.25 def
		/W 877.9296875 def
		/X 624.0234375 def
		/Y 662.59765625 def
		/Z 632.32421875 def
		/bracketleft 310.05859375 def
		/backslash 524.4140625 def
		/bracketright 310.05859375 def
		/asciicircum 608.3984375 def
		/underscore 500.0 def
		/quoteleft 602.5390625 def
		/a 608.3984375 def
		/b 596.19140625 def
		/c 487.3046875 def
		/d 608.3984375 def
		/e 518.06640625 def
		/f 379.39453125 def
		/g 602.05078125 def
		/h 630.859375 def
		/i 289.0625 def
		/j 343.26171875 def
		/k 560.05859375 def
		/l 289.0625 def
		/m 944.3359375 def
		/n 630.859375 def
		/o 560.05859375 def
		/p 608.3984375 def
		/q 599.609375 def
		/r 469.7265625 def
		/s 439.94140625 def
		/t 355.46875 def
		/u 629.39453125 def
		/v 558.10546875 def
		/w 805.17578125 def
		/x 510.25390625 def
		/y 558.10546875 def
		/z 536.1328125 def
		/braceleft 337.40234375 def
		/bar 373.53515625 def
		/braceright 337.40234375 def
		/asciitilde 794.921875 def
		/exclamdown 265.13671875 def
		/cent 608.3984375 def
		/sterling 608.3984375 def
		/fraction 421.875 def
		/yen 608.3984375 def
		/florin 608.3984375 def
		/section 608.3984375 def
		/currency 608.3984375 def
		/quotesingle 241.2109375 def
		/quotedblleft 457.51953125 def
		/guillemotleft 524.90234375 def
		/guilsinglleft 330.078125 def
		/guilsinglright 330.078125 def
		/fi 750.0 def
		/fl 750.0 def
		/endash 578.61328125 def
		/dagger 608.3984375 def
		/daggerdbl 608.3984375 def
		/periodcentered 265.13671875 def
		/paragraph 608.3984375 def
		/bullet 608.3984375 def
		/quotesinglbase 265.13671875 def
		/quotedblbase 457.51953125 def
		/quotedblright 457.51953125 def
		/guillemotright 524.90234375 def
		/ellipsis 1000.0 def
		/perthousand 1065.4296875 def
		/questiondown 471.19140625 def
		/grave 602.5390625 def
		/acute 602.5390625 def
		/circumflex 602.5390625 def
		/tilde 602.5390625 def
		/macron 500.0 def
		/breve 602.5390625 def
		/dotaccent 602.5390625 def
		/dieresis 560.05859375 def
		/ring 602.5390625 def
		/cedilla 602.5390625 def
		/hungarumlaut 750.0 def
		/ogonek 602.5390625 def
		/caron 602.5390625 def
		/emdash 578.61328125 def
		/AE 906.73828125 def
		/ordfeminine 458.0078125 def
		/Lslash 571.77734375 def
		/Oslash 783.203125 def
		/OE 1005.37109375 def
		/ordmasculine 458.0078125 def
		/ae 881.34765625 def
		/dotlessi 289.0625 def
		/lslash 337.40234375 def
		/oslash 560.05859375 def
		/oe 892.08984375 def
		/germandbls 603.02734375 def
	end
	/CharProcs 150 dict def
	CharProcs begin
			%define Glyph dictionary and start filling
	/space
		{
fill
		} def

	/exclam
		{
84 0 moveto
103 96 lineto
200 96 lineto
180 0 lineto
84 0 lineto
closepath
156 192 moveto
199 578 lineto
228 722 lineto
324 722 lineto
295 578 lineto
186 192 lineto
156 192 lineto
closepath
fill
		} def

	/quotedbl
		{
197 530 moveto
197 771 lineto
293 771 lineto
227 530 lineto
197 530 lineto
closepath
360 530 moveto
360 771 lineto
456 771 lineto
390 530 lineto
360 530 lineto
closepath
fill
		} def

	/numbersign
		{
83 0 moveto
188 222 lineto
70 222 lineto
76 271 lineto
210 271 lineto
296 451 lineto
115 451 lineto
122 500 lineto
318 500 lineto
423 722 lineto
478 722 lineto
373 500 lineto
509 500 lineto
614 722 lineto
669 722 lineto
564 500 lineto
682 500 lineto
676 451 lineto
541 451 lineto
456 271 lineto
636 271 lineto
630 222 lineto
434 222 lineto
328 0 lineto
274 0 lineto
379 222 lineto
242 222 lineto
137 0 lineto
83 0 lineto
closepath
265 271 moveto
401 271 lineto
487 451 lineto
350 451 lineto
265 271 lineto
closepath
fill
		} def

	/dollar
		{
281 -60 moveto
293 0 lineto
233 3 181 13 139 27  curveto
164 150 lineto
212 150 lineto
211 141 lineto
208 114 lineto
206 101 205 92 205 87  curveto
205 56 237 38 300 33  curveto
361 339 lineto
340 354 lineto
296 386 266 414 250 437  curveto
234 461 226 490 226 524  curveto
226 578 247 625 289 666  curveto
331 706 381 726 437 726  curveto
449 783 lineto
479 783 lineto
467 722 lineto
524 719 580 708 635 688  curveto
612 572 lineto
563 572 lineto
565 581 lineto
567 597 568 606 568 607  curveto
570 618 571 628 571 635  curveto
571 651 560 664 540 675  curveto
519 685 493 690 462 690  curveto
405 409 lineto
445 378 lineto
488 346 517 318 532 295  curveto
548 272 555 245 555 214  curveto
555 158 533 109 489 69  curveto
446 28 390 5 323 0  curveto
312 -60 lineto
281 -60 lineto
closepath
330 33 moveto
423 48 470 101 470 193  curveto
470 234 442 276 387 319  curveto
330 33 lineto
closepath
379 431 moveto
431 689 lineto
394 683 364 667 341 640  curveto
319 614 307 582 307 545  curveto
307 508 331 470 379 431  curveto
closepath
fill
		} def

	/percent
		{
262 361 moveto
225 361 195 372 172 396  curveto
150 419 139 450 139 489  curveto
139 554 157 609 194 654  curveto
231 699 275 722 327 722  curveto
365 722 396 711 418 688  curveto
441 665 452 634 452 595  curveto
452 530 434 474 397 429  curveto
360 384 315 361 262 361  curveto
closepath
210 484 moveto
210 422 230 391 269 391  curveto
299 391 326 412 350 455  curveto
374 497 386 544 386 597  curveto
386 661 367 693 328 693  curveto
297 693 270 672 246 630  curveto
222 587 210 539 210 484  curveto
closepath
578 0 moveto
540 0 510 11 487 34  curveto
465 58 454 89 454 128  curveto
454 192 472 247 509 292  curveto
546 338 590 361 642 361  curveto
680 361 711 349 733 326  curveto
756 303 767 272 767 233  curveto
767 168 749 113 712 68  curveto
675 22 630 0 578 0  curveto
closepath
525 123 moveto
525 60 545 29 584 29  curveto
614 29 641 51 665 93  curveto
689 135 701 183 701 236  curveto
701 300 682 332 643 332  curveto
612 332 585 310 561 268  curveto
537 226 525 178 525 123  curveto
closepath
88 -18 moveto
753 740 lineto
817 740 lineto
152 -18 lineto
88 -18 lineto
closepath
fill
		} def

	/ampersand
		{
522 0 moveto
515 7 508 16 502 26  curveto
494 38 488 47 484 53  curveto
411 5 343 -19 280 -19  curveto
223 -19 175 0 136 38  curveto
97 77 78 124 78 181  curveto
78 298 154 383 308 436  curveto
293 480 286 517 286 545  curveto
286 599 306 645 346 683  curveto
386 721 434 740 490 740  curveto
530 740 562 729 587 707  curveto
611 684 624 654 624 618  curveto
624 530 553 463 411 415  curveto
442 328 487 236 545 139  curveto
597 192 624 255 624 328  curveto
624 338 620 345 613 348  curveto
606 350 585 353 550 354  curveto
540 355 lineto
545 385 lineto
792 385 lineto
787 355 lineto
777 354 lineto
759 353 748 353 744 353  curveto
728 353 717 350 710 344  curveto
704 337 696 322 687 297  curveto
683 285 lineto
659 221 620 163 564 111  curveto
574 95 lineto
601 55 629 34 660 32  curveto
697 30 lineto
704 30 lineto
698 0 lineto
522 0 lineto
closepath
469 82 moveto
404 187 353 295 316 406  curveto
225 364 180 298 180 209  curveto
180 159 194 119 222 87  curveto
250 56 287 41 332 41  curveto
381 41 427 54 469 82  curveto
closepath
401 442 moveto
493 487 539 550 539 630  curveto
539 682 518 708 476 708  curveto
447 708 423 696 405 670  curveto
386 644 377 611 377 570  curveto
377 536 385 493 401 442  curveto
closepath
fill
		} def

	/quoteright
		{
213 505 moveto
213 771 lineto
334 771 lineto
244 505 lineto
213 505 lineto
closepath
fill
		} def

	/parenleft
		{
239 -144 moveto
142 -70 93 42 93 197  curveto
93 310 122 417 180 518  curveto
238 619 318 703 421 771  curveto
415 740 lineto
364 697 324 651 297 604  curveto
269 557 244 494 223 415  curveto
190 295 174 189 174 97  curveto
174 4 196 -65 242 -114  curveto
239 -144 lineto
closepath
fill
		} def

	/parenright
		{
195 771 moveto
293 697 341 583 341 429  curveto
341 315 312 208 255 107  curveto
197 6 116 -77 13 -144  curveto
20 -114 lineto
91 -52 145 22 180 111  curveto
202 168 221 237 237 319  curveto
253 400 261 470 261 527  curveto
261 621 238 692 193 740  curveto
195 771 lineto
closepath
fill
		} def

	/asterisk
		{
167 413 moveto
298 525 lineto
302 516 309 509 319 504  curveto
224 361 lineto
167 413 lineto
closepath
187 624 moveto
309 568 lineto
300 560 295 549 295 533  curveto
151 553 lineto
187 624 lineto
closepath
401 722 moveto
353 572 lineto
344 575 338 577 333 577  curveto
330 577 324 575 317 572  curveto
328 722 lineto
401 722 lineto
closepath
522 548 moveto
369 530 lineto
370 534 370 538 370 542  curveto
370 548 367 556 360 564  curveto
510 619 lineto
522 548 lineto
closepath
363 363 moveto
331 502 lineto
344 502 355 507 363 517  curveto
435 404 lineto
363 363 lineto
closepath
fill
		} def

	/plus
		{
373 0 moveto
426 265 lineto
161 265 lineto
170 313 lineto
436 313 lineto
488 578 lineto
536 578 lineto
483 313 lineto
749 313 lineto
739 265 lineto
474 265 lineto
421 0 lineto
373 0 lineto
closepath
fill
		} def

	/comma
		{
117 0 moveto
71 0 lineto
97 120 lineto
217 120 lineto
195 11 lineto
173 -100 121 -156 39 -156  curveto
46 -126 lineto
80 -126 102 -96 111 -35  curveto
117 0 lineto
closepath
fill
		} def

	/hyphen
		{
125 265 moveto
137 325 lineto
570 325 lineto
558 265 lineto
125 265 lineto
closepath
fill
		} def

	/period
		{
72 0 moveto
96 120 lineto
216 120 lineto
192 0 lineto
72 0 lineto
closepath
fill
		} def

	/slash
		{
79 -144 moveto
509 723 lineto
560 723 lineto
130 -144 lineto
79 -144 lineto
closepath
fill
		} def

	/zero
		{
308 -18 moveto
248 -18 200 4 163 48  curveto
126 92 108 150 108 223  curveto
108 361 141 482 208 586  curveto
276 689 354 741 444 741  curveto
504 741 552 719 589 674  curveto
626 630 644 572 644 500  curveto
644 361 611 239 544 136  curveto
477 33 398 -18 308 -18  curveto
closepath
207 206 moveto
207 76 243 12 315 12  curveto
376 12 429 63 476 167  curveto
522 270 545 390 545 526  curveto
545 649 510 710 439 710  curveto
378 710 324 660 277 558  curveto
230 456 207 339 207 206  curveto
closepath
fill
		} def

	/one
		{
497 729 moveto
377 126 lineto
372 99 369 76 369 56  curveto
369 42 382 34 407 33  curveto
439 30 lineto
497 30 lineto
491 0 lineto
117 0 lineto
123 30 lineto
181 30 lineto
212 30 233 33 244 39  curveto
255 45 263 58 269 78  curveto
281 126 lineto
370 574 lineto
377 624 lineto
380 641 lineto
378 652 369 657 351 657  curveto
345 657 326 654 294 648  curveto
245 640 lineto
250 670 lineto
497 729 lineto
closepath
fill
		} def

	/two
		{
86 0 moveto
97 54 lineto
132 127 203 205 309 288  curveto
359 326 lineto
478 419 538 504 538 580  curveto
538 666 497 709 415 709  curveto
335 709 289 684 275 633  curveto
265 593 lineto
263 584 lineto
214 584 lineto
236 693 lineto
302 725 370 741 441 741  curveto
503 741 552 727 587 699  curveto
622 671 640 632 640 583  curveto
640 536 626 495 599 459  curveto
572 423 523 384 454 340  curveto
379 292 lineto
262 219 203 150 203 84  curveto
540 84 lineto
517 0 lineto
86 0 lineto
closepath
fill
		} def

	/three
		{
105 2 moveto
130 126 lineto
178 126 lineto
177 117 lineto
176 109 174 96 171 78  curveto
170 72 170 67 170 63  curveto
170 48 180 36 200 26  curveto
220 16 245 11 275 11  curveto
328 11 373 33 410 77  curveto
448 121 466 173 466 235  curveto
466 331 402 379 274 379  curveto
243 379 lineto
249 409 lineto
293 409 lineto
364 409 420 426 460 459  curveto
501 492 521 537 521 595  curveto
521 630 510 658 488 679  curveto
466 700 437 710 400 710  curveto
339 710 304 690 295 649  curveto
290 629 287 617 286 612  curveto
284 603 lineto
236 603 lineto
259 719 lineto
312 733 363 740 410 740  curveto
548 740 617 693 617 598  curveto
617 552 598 511 561 473  curveto
524 436 474 409 411 392  curveto
516 376 568 326 568 241  curveto
568 166 540 104 483 55  curveto
427 6 355 -18 267 -18  curveto
215 -18 161 -11 105 2  curveto
closepath
fill
		} def

	/four
		{
392 201 moveto
67 201 lineto
78 255 lineto
534 731 lineto
582 731 lineto
491 273 lineto
593 273 lineto
573 201 lineto
477 201 lineto
461 126 lineto
456 99 454 76 454 57  curveto
454 42 466 34 491 33  curveto
524 30 lineto
533 30 lineto
527 0 lineto
255 0 lineto
262 30 lineto
277 30 lineto
310 33 lineto
331 34 346 40 354 52  curveto
362 63 369 88 377 126  curveto
392 201 lineto
closepath
138 273 moveto
407 273 lineto
477 629 lineto
138 273 lineto
closepath
fill
		} def

	/five
		{
117 2 moveto
142 126 lineto
190 126 lineto
189 117 lineto
185 88 lineto
183 77 183 69 183 63  curveto
183 50 192 38 212 28  curveto
231 18 254 13 281 13  curveto
334 13 379 36 416 83  curveto
454 129 472 185 472 251  curveto
472 361 412 417 291 417  curveto
268 417 241 414 209 410  curveto
272 722 lineto
655 722 lineto
638 638 lineto
285 638 lineto
247 445 lineto
273 447 295 449 312 449  curveto
393 449 458 431 504 397  curveto
551 362 575 315 575 255  curveto
575 174 546 108 488 57  curveto
430 7 355 -18 263 -18  curveto
215 -18 166 -11 117 2  curveto
closepath
fill
		} def

	/six
		{
249 400 moveto
309 446 368 469 425 469  curveto
479 469 523 453 556 421  curveto
590 388 607 346 607 294  curveto
607 212 578 139 520 76  curveto
462 13 395 -18 320 -18  curveto
256 -18 207 3 170 47  curveto
134 91 116 152 116 229  curveto
116 298 129 369 154 441  curveto
178 513 211 573 252 623  curveto
318 701 396 740 488 740  curveto
544 740 601 728 656 703  curveto
633 587 lineto
585 587 lineto
587 599 lineto
591 636 lineto
593 645 593 651 593 655  curveto
593 669 582 681 558 693  curveto
535 704 509 710 481 710  curveto
429 710 382 683 341 628  curveto
299 573 269 497 249 400  curveto
closepath
212 200 moveto
212 76 252 14 332 14  curveto
379 14 421 42 457 98  curveto
493 155 511 219 511 293  curveto
511 384 473 430 397 430  curveto
341 430 296 409 262 368  curveto
229 326 212 271 212 200  curveto
closepath
fill
		} def

	/seven
		{
152 0 moveto
165 80 209 163 285 249  curveto
400 378 lineto
628 632 lineto
231 632 lineto
249 722 lineto
707 722 lineto
693 653 lineto
567 527 467 406 392 291  curveto
317 176 275 79 266 0  curveto
152 0 lineto
closepath
fill
		} def

	/eight
		{
301 387 moveto
248 424 221 469 221 524  curveto
221 584 245 635 292 677  curveto
339 720 396 741 462 741  curveto
518 741 562 729 596 704  curveto
629 680 646 647 646 607  curveto
646 528 585 459 464 398  curveto
555 343 601 280 601 208  curveto
601 146 574 92 520 48  curveto
466 4 401 -18 325 -18  curveto
259 -18 208 -3 171 26  curveto
134 55 116 96 116 149  curveto
116 239 177 319 301 387  curveto
closepath
340 359 moveto
325 367 lineto
248 315 209 245 209 157  curveto
209 60 250 12 333 12  curveto
379 12 418 28 450 61  curveto
482 93 499 132 499 179  curveto
499 212 487 242 464 268  curveto
441 294 400 324 340 359  curveto
closepath
436 417 moveto
520 456 562 515 562 594  curveto
562 672 525 710 451 710  curveto
413 710 380 696 354 668  curveto
328 640 314 605 314 564  curveto
314 514 355 465 436 417  curveto
closepath
fill
		} def

	/nine
		{
513 321 moveto
452 275 394 252 336 252  curveto
282 252 238 269 205 301  curveto
171 334 154 376 154 428  curveto
154 510 183 583 241 646  curveto
299 709 365 740 441 740  curveto
505 740 555 718 591 675  curveto
627 631 645 570 645 492  curveto
645 424 632 354 607 281  curveto
582 209 549 148 509 99  curveto
443 21 365 -18 273 -18  curveto
216 -18 160 -5 104 19  curveto
127 135 lineto
176 135 lineto
174 123 lineto
169 86 lineto
168 77 167 71 167 67  curveto
167 54 179 42 203 30  curveto
227 18 251 12 277 12  curveto
331 12 378 39 420 94  curveto
461 148 492 224 513 321  curveto
closepath
548 522 moveto
548 646 508 708 429 708  curveto
382 708 340 680 304 624  curveto
268 568 250 503 250 429  curveto
250 337 288 292 363 292  curveto
420 292 465 312 498 354  curveto
532 395 548 451 548 522  curveto
closepath
fill
		} def

	/colon
		{
72 0 moveto
96 120 lineto
216 120 lineto
192 0 lineto
72 0 lineto
closepath
153 409 moveto
177 530 lineto
298 530 lineto
274 409 lineto
153 409 lineto
closepath
fill
		} def

	/semicolon
		{
117 0 moveto
72 0 lineto
96 120 lineto
216 120 lineto
194 11 lineto
172 -100 121 -156 41 -156  curveto
46 -126 lineto
79 -126 98 -105 106 -62  curveto
110 -35 lineto
117 0 lineto
closepath
153 409 moveto
177 530 lineto
297 530 lineto
273 409 lineto
153 409 lineto
closepath
fill
		} def

	/less
		{
686 0 moveto
166 289 lineto
801 578 lineto
791 524 lineto
274 289 lineto
274 288 lineto
697 53 lineto
686 0 lineto
closepath
fill
		} def

	/equal
		{
143 174 moveto
152 222 lineto
730 222 lineto
721 174 lineto
143 174 lineto
closepath
179 355 moveto
188 403 lineto
767 403 lineto
757 355 lineto
179 355 lineto
closepath
fill
		} def

	/greater
		{
108 0 moveto
119 53 lineto
635 288 lineto
635 289 lineto
212 524 lineto
223 578 lineto
744 289 lineto
108 0 lineto
closepath
fill
		} def

	/question
		{
147 0 moveto
167 96 lineto
263 96 lineto
244 0 lineto
147 0 lineto
closepath
186 192 moveto
188 201 lineto
194 233 204 259 215 278  curveto
227 296 249 322 283 355  curveto
324 396 lineto
401 473 440 542 440 604  curveto
440 635 430 661 410 680  curveto
390 700 364 709 332 709  curveto
267 709 230 687 219 642  curveto
215 622 211 605 208 593  curveto
205 584 lineto
157 584 lineto
182 707 lineto
248 729 309 740 362 740  curveto
415 740 459 728 492 703  curveto
526 678 542 646 542 606  curveto
542 574 534 546 517 522  curveto
501 499 468 470 418 434  curveto
384 409 lineto
324 365 289 293 279 192  curveto
186 192 lineto
closepath
fill
		} def

	/at
		{
609 21 moveto
552 -4 496 -18 441 -18  curveto
347 -18 269 10 208 66  curveto
146 123 116 194 116 281  curveto
116 390 156 490 236 583  curveto
327 688 441 740 577 740  curveto
669 740 746 711 808 653  curveto
870 594 900 521 900 434  curveto
900 356 876 288 827 230  curveto
779 173 722 144 656 144  curveto
600 144 571 166 571 210  curveto
571 222 573 235 576 247  curveto
587 289 lineto
592 310 lineto
582 310 lineto
517 199 454 144 392 144  curveto
333 144 303 182 303 257  curveto
303 335 330 407 384 473  curveto
438 539 497 572 561 572  curveto
575 572 588 570 601 567  curveto
640 556 lineto
642 555 646 554 653 553  curveto
699 553 lineto
643 273 lineto
639 254 638 239 638 226  curveto
638 195 654 180 687 180  curveto
733 180 774 207 813 262  curveto
851 316 870 375 870 439  curveto
870 516 841 580 784 632  curveto
727 684 656 710 572 710  curveto
463 710 365 667 277 580  curveto
190 493 146 396 146 287  curveto
146 207 174 141 229 89  curveto
284 38 355 12 440 12  curveto
492 12 544 24 599 48  curveto
609 21 lineto
closepath
596 399 moveto
617 502 lineto
590 516 561 523 528 523  curveto
484 523 448 500 418 454  curveto
389 408 374 350 374 281  curveto
374 230 389 204 419 204  curveto
467 204 526 269 596 399  curveto
closepath
fill
		} def

	/A
		{
0 0 moveto
5 30 lineto
15 30 lineto
39 31 lineto
60 32 79 47 97 75  curveto
129 124 lineto
507 734 lineto
542 734 lineto
658 133 lineto
666 89 675 61 683 49  curveto
692 38 709 32 734 30  curveto
747 30 lineto
740 0 lineto
469 0 lineto
476 30 lineto
491 30 lineto
538 30 562 38 562 53  curveto
562 70 559 93 553 123  curveto
535 222 lineto
234 222 lineto
173 125 lineto
169 119 165 111 159 100  curveto
141 66 lineto
137 59 135 53 135 48  curveto
135 36 147 30 170 30  curveto
195 30 lineto
208 30 lineto
201 0 lineto
0 0 lineto
closepath
253 265 moveto
525 265 lineto
463 604 lineto
253 265 lineto
closepath
fill
		} def

	/B
		{
426 370 moveto
541 347 599 292 599 205  curveto
599 143 575 93 527 56  curveto
479 18 417 0 338 0  curveto
23 0 lineto
29 30 lineto
38 30 lineto
72 33 lineto
93 34 107 40 115 52  curveto
123 63 131 88 139 126  curveto
232 596 lineto
237 622 240 646 240 666  curveto
240 680 227 688 202 689  curveto
170 691 lineto
161 692 lineto
167 722 lineto
397 722 lineto
482 722 544 712 581 690  curveto
619 669 638 635 638 587  curveto
638 537 619 492 580 453  curveto
542 413 491 386 426 370  curveto
closepath
287 358 moveto
238 129 lineto
231 86 lineto
227 68 lineto
229 46 252 35 295 35  curveto
352 35 400 52 437 86  curveto
475 121 494 164 494 215  curveto
494 259 478 294 445 320  curveto
413 345 369 358 313 358  curveto
287 358 lineto
closepath
292 391 moveto
319 391 lineto
386 391 439 408 478 442  curveto
517 476 536 522 536 582  curveto
536 621 524 649 499 665  curveto
474 681 432 689 372 689  curveto
352 689 lineto
292 391 lineto
closepath
fill
		} def

	/C
		{
647 43 moveto
548 2 455 -18 370 -18  curveto
290 -18 227 6 180 55  curveto
134 104 111 172 111 257  curveto
111 393 155 507 244 601  curveto
333 694 443 740 573 740  curveto
637 740 704 732 776 716  curveto
747 572 lineto
687 572 lineto
688 582 lineto
690 592 691 602 693 611  curveto
695 621 696 630 696 636  curveto
696 657 684 674 659 687  curveto
634 701 603 708 566 708  curveto
483 708 414 677 357 615  curveto
265 516 219 397 219 257  curveto
219 189 238 135 275 96  curveto
313 57 364 37 429 37  curveto
485 37 561 53 656 85  curveto
647 43 lineto
closepath
fill
		} def

	/D
		{
23 0 moveto
29 30 lineto
38 30 lineto
72 33 lineto
93 34 107 40 115 52  curveto
123 63 131 88 139 126  curveto
232 596 lineto
237 622 240 646 240 666  curveto
240 680 227 688 202 689  curveto
170 691 lineto
161 692 lineto
167 722 lineto
391 722 lineto
454 723 lineto
503 724 lineto
522 724 lineto
708 724 800 639 800 471  curveto
800 334 759 222 676 133  curveto
594 44 489 0 362 0  curveto
23 0 lineto
closepath
353 689 moveto
241 126 lineto
235 88 lineto
232 71 lineto
235 45 263 32 316 32  curveto
450 32 549 84 614 187  curveto
667 270 693 364 693 470  curveto
693 551 672 608 630 641  curveto
587 673 513 689 408 689  curveto
353 689 lineto
closepath
fill
		} def

	/E
		{
544 0 moveto
23 0 lineto
29 30 lineto
38 30 lineto
72 33 lineto
93 34 107 40 115 52  curveto
123 63 131 88 139 126  curveto
232 596 lineto
237 622 240 646 240 666  curveto
240 680 227 688 202 689  curveto
170 691 lineto
161 692 lineto
167 722 lineto
661 722 lineto
636 596 lineto
581 596 lineto
583 605 lineto
588 646 lineto
592 664 lineto
589 677 562 683 510 683  curveto
352 683 lineto
294 394 lineto
427 394 lineto
458 396 lineto
479 396 492 405 497 423  curveto
498 429 500 437 502 445  curveto
505 454 lineto
544 454 lineto
512 295 lineto
473 295 lineto
475 304 lineto
477 319 478 330 478 336  curveto
478 346 470 352 454 353  curveto
419 355 lineto
287 355 lineto
241 126 lineto
237 108 235 90 235 73  curveto
235 60 240 51 249 47  curveto
257 43 277 42 307 42  curveto
384 42 lineto
431 42 462 44 476 48  curveto
490 52 499 63 503 79  curveto
514 123 lineto
516 132 lineto
570 132 lineto
544 0 lineto
closepath
fill
		} def

	/F
		{
286 350 moveto
241 126 lineto
236 104 234 83 234 63  curveto
234 50 237 42 242 38  curveto
248 35 260 33 278 33  curveto
279 33 291 32 315 30  curveto
324 30 lineto
318 0 lineto
23 0 lineto
29 30 lineto
38 30 lineto
72 33 lineto
93 34 107 40 115 52  curveto
123 63 131 88 139 126  curveto
232 596 lineto
237 622 240 646 240 666  curveto
240 680 227 688 202 689  curveto
170 691 lineto
161 692 lineto
167 722 lineto
661 722 lineto
636 596 lineto
581 596 lineto
583 605 lineto
588 646 lineto
592 664 lineto
589 677 562 683 510 683  curveto
352 683 lineto
293 389 lineto
426 389 lineto
457 390 lineto
471 390 481 392 485 395  curveto
489 398 493 406 496 418  curveto
496 420 498 428 501 440  curveto
504 449 lineto
543 449 lineto
511 290 lineto
472 290 lineto
474 299 lineto
476 314 477 325 477 331  curveto
477 341 469 347 453 348  curveto
418 350 lineto
286 350 lineto
closepath
fill
		} def

	/G
		{
646 32 moveto
540 -1 453 -18 382 -18  curveto
296 -18 230 5 182 53  curveto
135 101 111 169 111 256  curveto
111 393 155 508 244 601  curveto
332 694 441 741 571 741  curveto
639 741 708 732 776 716  curveto
743 584 lineto
689 584 lineto
690 594 lineto
695 623 lineto
697 634 698 643 698 651  curveto
698 688 654 707 566 707  curveto
470 707 388 662 321 572  curveto
253 483 219 374 219 247  curveto
219 177 237 122 274 83  curveto
310 45 361 25 427 25  curveto
463 25 503 33 546 48  curveto
573 184 lineto
578 211 581 234 581 253  curveto
581 268 569 276 543 277  curveto
511 279 lineto
502 280 lineto
508 310 lineto
788 310 lineto
782 280 lineto
773 279 lineto
726 276 701 269 695 257  curveto
684 229 676 205 672 184  curveto
646 32 lineto
closepath
fill
		} def

	/H
		{
286 354 moveto
241 126 lineto
236 99 233 76 233 57  curveto
233 42 245 34 271 33  curveto
303 30 lineto
312 30 lineto
306 0 lineto
23 0 lineto
29 30 lineto
38 30 lineto
72 33 lineto
93 34 107 40 115 52  curveto
123 63 131 88 139 126  curveto
232 596 lineto
237 623 240 646 240 666  curveto
240 680 228 688 203 689  curveto
170 691 lineto
161 692 lineto
167 722 lineto
450 722 lineto
444 692 lineto
435 691 lineto
401 689 lineto
380 688 366 681 358 670  curveto
350 659 342 634 334 596  curveto
294 393 lineto
638 393 lineto
678 596 lineto
683 623 686 646 686 666  curveto
686 680 673 688 648 689  curveto
616 691 lineto
607 692 lineto
613 722 lineto
896 722 lineto
890 692 lineto
881 691 lineto
848 689 lineto
826 688 812 681 804 670  curveto
796 659 788 634 781 596  curveto
687 126 lineto
682 99 679 76 679 57  curveto
679 42 692 34 717 33  curveto
750 30 lineto
758 30 lineto
752 0 lineto
469 0 lineto
475 30 lineto
484 30 lineto
518 33 lineto
539 34 553 40 561 52  curveto
569 63 577 88 585 126  curveto
630 354 lineto
286 354 lineto
closepath
fill
		} def

	/I
		{
310 30 moveto
304 0 lineto
21 0 lineto
26 30 lineto
36 30 lineto
69 33 lineto
90 34 105 40 113 52  curveto
121 63 128 88 136 126  curveto
229 596 lineto
235 622 237 646 237 666  curveto
237 680 225 688 200 689  curveto
167 691 lineto
158 692 lineto
165 722 lineto
447 722 lineto
441 692 lineto
432 691 lineto
399 689 lineto
378 688 363 681 355 670  curveto
347 659 340 634 332 596  curveto
238 126 lineto
233 99 230 76 230 57  curveto
230 42 243 34 268 33  curveto
301 30 lineto
310 30 lineto
closepath
fill
		} def

	/J
		{
-21 -134 moveto
0 -22 lineto
58 -22 lineto
56 -34 lineto
54 -53 52 -67 52 -76  curveto
52 -97 70 -107 104 -107  curveto
159 -107 195 -70 211 3  curveto
225 72 lineto
329 596 lineto
334 623 337 646 337 666  curveto
337 680 324 688 299 689  curveto
267 691 lineto
258 692 lineto
264 722 lineto
547 722 lineto
541 692 lineto
532 691 lineto
498 689 lineto
477 688 463 681 455 670  curveto
447 659 439 634 432 596  curveto
339 131 lineto
319 30 288 -40 246 -82  curveto
203 -123 141 -144 60 -144  curveto
34 -144 7 -141 -21 -134  curveto
closepath
fill
		} def

	/K
		{
289 365 moveto
241 126 lineto
236 99 233 76 233 56  curveto
233 42 244 34 268 33  curveto
297 30 lineto
306 30 lineto
300 0 lineto
23 0 lineto
29 30 lineto
38 30 lineto
72 33 lineto
93 34 107 40 115 52  curveto
123 63 131 88 139 126  curveto
232 596 lineto
237 622 240 646 240 666  curveto
240 680 227 688 202 689  curveto
170 691 lineto
161 692 lineto
167 722 lineto
450 722 lineto
444 692 lineto
435 691 lineto
401 689 lineto
380 688 366 681 358 670  curveto
350 659 342 634 334 596  curveto
289 368 lineto
553 596 lineto
571 611 585 625 597 638  curveto
616 660 628 673 633 677  curveto
637 680 639 682 639 684  curveto
639 689 631 692 615 692  curveto
576 692 lineto
564 692 lineto
570 722 lineto
780 722 lineto
773 692 lineto
765 691 lineto
744 691 lineto
723 691 704 683 685 667  curveto
602 592 lineto
380 404 lineto
572 124 lineto
608 69 lineto
624 45 649 33 684 30  curveto
693 30 lineto
687 0 lineto
421 0 lineto
427 30 lineto
437 30 lineto
466 30 lineto
485 30 495 35 495 44  curveto
495 48 488 61 475 83  curveto
449 127 lineto
289 365 lineto
closepath
fill
		} def

	/L
		{
553 0 moveto
23 0 lineto
29 30 lineto
38 30 lineto
72 33 lineto
93 34 107 40 115 52  curveto
123 63 131 88 139 126  curveto
232 596 lineto
237 622 240 646 240 666  curveto
240 680 227 688 202 689  curveto
170 691 lineto
161 692 lineto
167 722 lineto
450 722 lineto
444 692 lineto
435 691 lineto
401 689 lineto
380 688 366 681 358 670  curveto
350 659 342 634 334 596  curveto
241 126 lineto
235 97 232 77 232 65  curveto
232 55 236 48 245 45  curveto
253 43 274 42 308 42  curveto
394 42 lineto
440 42 471 44 487 50  curveto
502 55 513 67 517 85  curveto
528 134 lineto
531 144 lineto
582 144 lineto
553 0 lineto
closepath
fill
		} def

	/M
		{
783 645 moveto
444 83 lineto
409 83 lineto
285 593 lineto
192 126 lineto
187 99 184 76 184 57  curveto
184 42 197 34 222 33  curveto
254 30 lineto
263 30 lineto
257 0 lineto
23 0 lineto
29 30 lineto
38 30 lineto
72 33 lineto
91 34 103 37 109 42  curveto
116 47 121 59 126 78  curveto
139 126 lineto
234 596 lineto
240 622 242 645 242 666  curveto
242 680 230 688 205 689  curveto
172 691 lineto
163 692 lineto
169 722 lineto
353 722 lineto
478 206 lineto
793 722 lineto
984 722 lineto
978 692 lineto
969 691 lineto
936 689 lineto
914 688 900 681 892 670  curveto
884 659 876 634 869 596  curveto
775 126 lineto
770 99 767 76 767 57  curveto
767 42 780 34 805 33  curveto
837 30 lineto
846 30 lineto
840 0 lineto
565 0 lineto
571 30 lineto
580 30 lineto
614 33 lineto
635 34 649 40 657 52  curveto
665 63 673 88 681 126  curveto
783 645 lineto
closepath
fill
		} def

	/N
		{
651 -8 moveto
613 -8 lineto
277 593 lineto
184 126 lineto
179 99 176 76 176 57  curveto
176 42 188 34 213 33  curveto
246 30 lineto
255 30 lineto
249 0 lineto
22 0 lineto
28 30 lineto
38 30 lineto
71 33 lineto
92 34 107 40 114 52  curveto
122 63 130 88 138 126  curveto
231 596 lineto
236 623 239 646 239 666  curveto
239 680 227 688 202 689  curveto
169 691 lineto
160 692 lineto
166 722 lineto
318 722 lineto
638 146 lineto
727 596 lineto
732 623 735 646 735 666  curveto
735 680 722 688 697 689  curveto
665 691 lineto
656 692 lineto
662 722 lineto
887 722 lineto
881 692 lineto
872 691 lineto
838 689 lineto
817 688 803 681 795 670  curveto
787 659 779 634 771 596  curveto
651 -8 lineto
closepath
fill
		} def

	/O
		{
374 -18 moveto
293 -18 229 5 182 54  curveto
134 103 111 169 111 252  curveto
111 384 154 499 241 595  curveto
328 692 431 740 549 740  curveto
632 740 697 716 745 668  curveto
792 620 816 554 816 470  curveto
816 336 772 221 685 125  curveto
598 29 494 -18 374 -18  curveto
closepath
220 244 moveto
220 173 236 118 267 78  curveto
299 38 343 18 398 18  curveto
479 18 550 63 614 155  curveto
678 247 709 351 709 466  curveto
709 540 693 598 661 641  curveto
629 685 586 707 532 707  curveto
449 707 376 660 314 567  curveto
251 475 220 367 220 244  curveto
closepath
fill
		} def

	/P
		{
167 722 moveto
327 722 lineto
442 725 lineto
491 726 lineto
606 726 663 677 663 580  curveto
663 498 632 431 569 378  curveto
507 326 427 300 330 300  curveto
274 300 lineto
240 126 lineto
235 99 232 76 232 57  curveto
232 42 245 34 270 33  curveto
302 30 lineto
323 30 lineto
317 0 lineto
23 0 lineto
29 30 lineto
38 30 lineto
72 33 lineto
93 34 107 40 115 52  curveto
123 63 131 88 139 126  curveto
232 596 lineto
237 622 240 646 240 666  curveto
240 680 227 688 202 689  curveto
170 691 lineto
161 692 lineto
167 722 lineto
closepath
281 334 moveto
323 334 lineto
390 334 446 357 489 402  curveto
533 447 555 505 555 576  curveto
555 652 509 689 417 689  curveto
352 689 lineto
281 334 lineto
closepath
fill
		} def

	/Q
		{
920 -95 moveto
840 -184 lineto
824 -188 810 -190 799 -190  curveto
736 -190 672 -173 605 -140  curveto
539 -107 485 -65 443 -12  curveto
426 -15 408 -17 391 -17  curveto
302 -17 234 6 187 52  curveto
139 98 116 164 116 250  curveto
116 382 159 497 246 594  curveto
333 692 435 740 553 740  curveto
636 740 700 716 747 669  curveto
793 621 816 554 816 469  curveto
816 358 784 257 721 168  curveto
657 78 577 21 481 -3  curveto
566 -76 670 -112 792 -112  curveto
836 -112 879 -106 920 -95  curveto
closepath
222 244 moveto
222 174 238 118 270 78  curveto
301 38 345 18 401 18  curveto
480 18 552 63 616 155  curveto
680 247 712 349 712 463  curveto
712 538 696 597 664 641  curveto
632 685 589 707 535 707  curveto
452 707 379 660 316 567  curveto
253 475 222 367 222 244  curveto
closepath
fill
		} def

	/R
		{
520 0 moveto
364 340 lineto
283 340 lineto
240 126 lineto
235 99 232 76 232 57  curveto
232 42 245 34 270 33  curveto
303 30 lineto
312 30 lineto
306 0 lineto
22 0 lineto
28 30 lineto
38 30 lineto
71 33 lineto
92 34 107 40 114 52  curveto
122 63 130 88 138 126  curveto
231 596 lineto
237 622 239 646 239 666  curveto
239 680 227 688 202 689  curveto
169 691 lineto
160 692 lineto
167 722 lineto
337 722 lineto
403 723 lineto
478 726 lineto
601 726 663 678 663 583  curveto
663 533 645 488 609 446  curveto
573 405 525 373 463 351  curveto
574 124 lineto
609 63 lineto
620 44 636 33 656 32  curveto
677 30 lineto
686 30 lineto
680 0 lineto
520 0 lineto
closepath
289 372 moveto
330 372 lineto
398 372 453 390 493 428  curveto
534 466 555 516 555 578  curveto
555 652 508 689 415 689  curveto
353 689 lineto
289 372 lineto
closepath
fill
		} def

	/S
		{
59 17 moveto
87 156 lineto
141 156 lineto
140 147 lineto
136 121 134 105 132 99  curveto
130 90 129 85 129 83  curveto
129 64 144 48 172 35  curveto
201 22 236 15 277 15  curveto
318 15 354 31 384 62  curveto
414 93 429 130 429 172  curveto
429 221 400 269 341 316  curveto
295 353 lineto
219 415 181 475 181 534  curveto
181 593 204 643 252 682  curveto
299 721 359 740 430 740  curveto
486 740 551 728 626 705  curveto
597 560 lineto
543 560 lineto
545 574 lineto
551 629 lineto
553 647 lineto
552 664 539 679 513 691  curveto
488 703 458 708 422 708  curveto
382 708 348 695 321 668  curveto
293 641 279 607 279 568  curveto
279 520 311 470 374 419  curveto
423 380 lineto
497 320 534 259 534 197  curveto
534 133 508 81 457 41  curveto
405 1 338 -18 255 -18  curveto
204 -18 145 -8 77 11  curveto
59 17 lineto
closepath
fill
		} def

	/T
		{
416 683 moveto
300 683 lineto
250 681 lineto
232 681 221 678 215 674  curveto
209 669 205 659 202 643  curveto
198 625 195 610 192 600  curveto
189 590 lineto
138 590 lineto
164 722 lineto
785 722 lineto
759 590 lineto
708 590 lineto
709 600 lineto
711 611 713 625 716 643  curveto
718 650 718 657 718 665  curveto
718 675 707 681 684 681  curveto
634 683 lineto
518 683 lineto
407 126 lineto
402 99 399 76 399 57  curveto
399 42 412 34 437 33  curveto
470 30 lineto
491 30 lineto
485 0 lineto
177 0 lineto
184 30 lineto
205 30 lineto
230 30 252 33 269 38  curveto
282 42 294 71 305 126  curveto
416 683 lineto
closepath
fill
		} def

	/U
		{
151 692 moveto
157 722 lineto
440 722 lineto
435 692 lineto
425 691 lineto
392 689 lineto
371 688 356 681 348 670  curveto
340 659 333 634 325 596  curveto
253 235 lineto
248 210 246 186 246 163  curveto
246 117 259 81 285 55  curveto
311 29 347 16 393 16  curveto
514 16 591 103 626 277  curveto
689 596 lineto
695 622 698 646 698 666  curveto
698 680 685 688 660 689  curveto
627 691 lineto
619 692 lineto
625 722 lineto
856 722 lineto
850 692 lineto
841 691 lineto
807 689 lineto
786 688 772 681 764 670  curveto
756 659 748 634 740 596  curveto
675 266 lineto
638 76 539 -18 380 -18  curveto
308 -18 251 -1 209 32  curveto
168 66 147 113 147 172  curveto
147 201 151 233 158 270  curveto
223 596 lineto
228 623 230 646 230 666  curveto
230 680 218 688 193 689  curveto
160 691 lineto
151 692 lineto
closepath
fill
		} def

	/V
		{
307 -9 moveto
190 595 lineto
178 643 lineto
173 664 168 677 162 682  curveto
156 687 143 690 124 691  curveto
115 692 lineto
121 722 lineto
371 722 lineto
365 692 lineto
356 692 lineto
328 691 lineto
300 691 287 680 287 658  curveto
287 656 287 653 288 650  curveto
292 622 lineto
297 588 lineto
386 117 lineto
669 593 lineto
673 599 677 608 683 620  curveto
691 636 698 648 702 657  curveto
706 664 708 669 708 674  curveto
708 686 697 692 675 692  curveto
648 692 lineto
639 692 lineto
646 722 lineto
826 722 lineto
820 692 lineto
811 691 lineto
789 690 775 688 769 684  curveto
762 681 755 671 745 655  curveto
700 579 lineto
350 -9 lineto
307 -9 lineto
closepath
fill
		} def

	/W
		{
221 -9 moveto
189 595 lineto
186 647 lineto
184 673 175 687 159 690  curveto
128 691 lineto
120 692 lineto
125 722 lineto
378 722 lineto
373 692 lineto
364 692 lineto
327 692 304 689 295 684  curveto
287 678 282 662 282 638  curveto
285 593 lineto
308 167 lineto
581 716 lineto
627 716 lineto
667 165 lineto
878 590 lineto
887 609 893 621 895 625  curveto
909 659 lineto
911 665 912 669 912 672  curveto
912 685 899 691 874 691  curveto
845 692 lineto
836 692 lineto
842 722 lineto
1042 722 lineto
1035 692 lineto
1026 691 lineto
998 690 lineto
983 689 972 687 967 682  curveto
961 678 954 666 946 649  curveto
916 590 lineto
617 -9 lineto
583 -9 lineto
544 565 lineto
259 -9 lineto
221 -9 lineto
closepath
fill
		} def

	/X
		{
-23 0 moveto
-17 30 lineto
-8 30 lineto
18 32 35 34 42 38  curveto
50 42 62 52 80 70  curveto
132 123 lineto
342 356 lineto
246 597 lineto
221 653 lineto
211 677 196 689 177 690  curveto
150 691 lineto
141 692 lineto
147 722 lineto
409 722 lineto
403 692 lineto
394 692 lineto
371 691 lineto
344 691 331 682 331 663  curveto
331 654 334 642 341 627  curveto
347 615 351 604 355 595  curveto
423 428 lineto
574 598 lineto
582 606 591 618 602 634  curveto
614 651 624 664 629 670  curveto
633 675 635 678 635 680  curveto
635 687 625 691 606 691  curveto
587 692 lineto
578 692 lineto
584 722 lineto
771 722 lineto
765 692 lineto
755 691 lineto
732 690 lineto
710 689 674 659 622 600  curveto
442 398 lineto
556 124 lineto
574 79 587 53 594 45  curveto
602 37 618 32 642 30  curveto
651 30 lineto
645 0 lineto
380 0 lineto
386 30 lineto
395 30 lineto
423 30 lineto
453 30 467 38 467 54  curveto
467 61 463 74 456 93  curveto
443 125 lineto
363 323 lineto
186 126 lineto
146 82 126 55 126 46  curveto
126 35 137 30 160 30  curveto
181 30 lineto
190 30 lineto
184 0 lineto
-23 0 lineto
closepath
fill
		} def

	/Y
		{
340 325 moveto
234 590 lineto
230 600 223 618 213 646  curveto
207 665 200 677 192 682  curveto
185 687 170 690 146 691  curveto
137 692 lineto
143 722 lineto
405 722 lineto
399 692 lineto
384 691 lineto
360 690 lineto
335 689 323 680 323 665  curveto
323 653 330 628 345 590  curveto
431 366 lineto
613 589 lineto
645 628 lineto
663 652 672 667 672 675  curveto
672 686 661 691 640 691  curveto
634 691 628 691 622 691  curveto
613 692 lineto
619 722 lineto
802 722 lineto
796 692 lineto
787 691 lineto
761 690 lineto
745 689 728 678 712 658  curveto
654 587 lineto
442 326 lineto
403 126 lineto
398 98 395 75 395 57  curveto
395 42 408 34 433 33  curveto
465 30 lineto
474 30 lineto
468 0 lineto
185 0 lineto
191 30 lineto
200 30 lineto
234 33 lineto
256 34 271 41 279 53  curveto
286 65 295 95 304 144  curveto
340 325 lineto
closepath
fill
		} def

	/Z
		{
55 0 moveto
63 39 lineto
579 683 lineto
359 683 lineto
305 681 lineto
288 681 276 679 271 675  curveto
265 671 260 661 257 645  curveto
251 619 247 601 244 590  curveto
241 578 lineto
187 578 lineto
216 722 lineto
702 722 lineto
695 689 lineto
181 45 lineto
412 45 lineto
493 48 lineto
514 48 527 59 532 80  curveto
544 129 lineto
546 138 lineto
601 138 lineto
573 0 lineto
55 0 lineto
closepath
fill
		} def

	/bracketleft
		{
46 -144 moveto
229 771 lineto
421 771 lineto
416 740 lineto
307 740 lineto
137 -114 lineto
245 -114 lineto
239 -144 lineto
46 -144 lineto
closepath
fill
		} def

	/backslash
		{
387 -144 moveto
336 -144 lineto
252 723 lineto
302 723 lineto
387 -144 lineto
closepath
fill
		} def

	/bracketright
		{
388 771 moveto
206 -144 lineto
13 -144 lineto
19 -114 lineto
127 -114 lineto
298 740 lineto
189 740 lineto
195 771 lineto
388 771 lineto
closepath
fill
		} def

	/asciicircum
		{
77 192 moveto
448 722 lineto
607 192 lineto
550 192 lineto
429 600 lineto
142 192 lineto
77 192 lineto
closepath
fill
		} def

	/underscore
		{
35 -63 moveto
48 0 lineto
452 0 lineto
439 -63 lineto
35 -63 lineto
closepath
fill
		} def

	/quoteleft
		{
513 626 moveto
467 626 lineto
311 783 lineto
434 783 lineto
513 626 lineto
closepath
fill
		} def

	/a
		{
413 0 moveto
457 222 lineto
417 151 371 94 322 51  curveto
272 9 225 -12 182 -12  curveto
151 -12 125 -1 106 21  curveto
88 43 78 72 78 109  curveto
78 215 115 314 190 405  curveto
264 496 345 542 432 542  curveto
449 542 473 539 503 533  curveto
518 530 lineto
614 530 lineto
534 126 lineto
529 99 526 76 526 57  curveto
526 42 538 34 563 33  curveto
596 30 lineto
605 30 lineto
599 0 lineto
413 0 lineto
closepath
472 295 moveto
506 465 lineto
469 485 429 495 386 495  curveto
338 495 298 472 268 428  curveto
244 393 223 346 206 287  curveto
189 229 180 176 180 129  curveto
180 82 195 59 226 59  curveto
289 59 371 138 472 295  curveto
closepath
fill
		} def

	/b
		{
87 -12 moveto
218 644 lineto
223 671 226 694 226 713  curveto
226 728 214 736 188 737  curveto
156 740 lineto
147 740 lineto
153 771 lineto
339 771 lineto
247 307 lineto
287 378 332 435 382 478  curveto
432 521 479 542 522 542  curveto
554 542 579 531 598 509  curveto
617 487 626 457 626 419  curveto
626 314 589 216 514 124  curveto
440 33 360 -12 274 -12  curveto
232 -12 193 -4 158 12  curveto
87 -12 lineto
closepath
232 233 moveto
198 64 lineto
237 44 278 35 319 35  curveto
367 35 406 57 437 102  curveto
460 136 481 183 498 242  curveto
515 301 523 354 523 401  curveto
523 447 508 470 479 470  curveto
415 470 333 391 232 233  curveto
closepath
fill
		} def

	/c
		{
455 46 moveto
384 7 314 -12 246 -12  curveto
196 -12 156 4 127 36  curveto
98 69 84 114 84 172  curveto
84 268 118 354 185 429  curveto
252 504 329 542 416 542  curveto
455 542 496 534 538 519  curveto
511 385 lineto
463 385 lineto
464 394 lineto
465 401 467 412 470 426  curveto
471 433 471 438 471 443  curveto
471 481 438 500 372 500  curveto
319 500 275 471 239 412  curveto
204 353 186 279 186 191  curveto
186 92 227 42 310 42  curveto
345 42 396 57 463 87  curveto
455 46 lineto
closepath
fill
		} def

	/d
		{
413 0 moveto
457 222 lineto
417 151 371 94 322 51  curveto
272 9 225 -12 182 -12  curveto
151 -12 125 -1 106 21  curveto
88 43 78 72 78 109  curveto
78 215 115 314 190 405  curveto
264 496 345 542 432 542  curveto
449 542 473 539 503 533  curveto
518 530 lineto
541 644 lineto
546 671 549 694 549 714  curveto
549 728 536 736 511 737  curveto
479 740 lineto
470 740 lineto
476 771 lineto
662 771 lineto
534 126 lineto
529 99 526 76 526 57  curveto
526 42 538 34 563 33  curveto
596 30 lineto
605 30 lineto
599 0 lineto
413 0 lineto
closepath
472 295 moveto
507 467 lineto
469 486 429 496 387 496  curveto
339 496 300 474 269 429  curveto
245 393 224 346 206 288  curveto
189 229 180 176 180 129  curveto
180 82 195 59 226 59  curveto
289 59 371 138 472 295  curveto
closepath
fill
		} def

	/e
		{
504 84 moveto
407 20 321 -12 247 -12  curveto
197 -12 158 4 128 38  curveto
99 71 84 116 84 173  curveto
84 268 117 353 183 428  curveto
250 504 324 542 408 542  curveto
440 542 466 532 487 513  curveto
507 494 518 470 518 441  curveto
518 375 487 321 427 279  curveto
367 237 286 213 185 208  curveto
184 184 lineto
184 90 223 43 302 43  curveto
367 43 437 71 513 127  curveto
504 84 lineto
closepath
187 237 moveto
261 242 319 261 361 294  curveto
403 327 424 369 424 421  curveto
424 473 403 499 360 499  curveto
317 499 279 474 247 425  curveto
214 376 194 313 187 237  curveto
closepath
fill
		} def

	/f
		{
70 -192 moveto
206 490 lineto
134 490 lineto
142 530 lineto
214 530 lineto
222 556 lineto
271 707 349 783 458 783  curveto
497 783 531 777 562 766  curveto
537 638 lineto
489 638 lineto
490 647 lineto
492 664 494 677 496 687  curveto
497 695 498 703 498 709  curveto
498 736 476 750 431 750  curveto
400 750 377 737 362 711  curveto
346 685 331 635 316 561  curveto
310 530 lineto
460 530 lineto
453 490 lineto
302 490 lineto
167 -192 lineto
70 -192 lineto
closepath
fill
		} def

	/g
		{
81 -178 moveto
45 -41 lineto
134 -120 218 -160 297 -160  curveto
331 -160 356 -146 374 -117  curveto
391 -89 408 -34 424 47  curveto
464 250 lineto
424 180 379 124 328 81  curveto
277 38 231 17 188 17  curveto
158 17 133 27 114 49  curveto
95 71 85 98 85 132  curveto
85 181 98 234 123 291  curveto
149 349 182 398 222 440  curveto
287 508 357 542 434 542  curveto
451 542 475 539 505 533  curveto
520 530 lineto
617 530 lineto
542 161 lineto
531 105 lineto
507 -7 472 -87 423 -134  curveto
375 -181 305 -205 213 -205  curveto
176 -205 132 -196 81 -178  curveto
closepath
481 328 moveto
508 466 lineto
471 484 433 494 393 494  curveto
343 494 304 474 274 434  curveto
217 356 188 263 188 154  curveto
188 110 203 88 233 88  curveto
294 88 371 160 465 303  curveto
481 328 lineto
closepath
fill
		} def

	/h
		{
102 0 moveto
230 644 lineto
236 671 238 694 238 714  curveto
238 728 226 736 201 737  curveto
168 740 lineto
159 740 lineto
165 771 lineto
352 771 lineto
261 313 lineto
303 383 348 439 398 480  curveto
447 521 493 542 536 542  curveto
593 542 621 511 621 450  curveto
621 435 618 412 612 381  curveto
561 126 lineto
556 99 553 76 553 57  curveto
553 42 566 34 591 33  curveto
624 30 lineto
632 30 lineto
626 0 lineto
439 0 lineto
518 395 lineto
521 412 523 425 523 436  curveto
523 458 511 469 488 469  curveto
436 469 361 400 261 260  curveto
247 240 lineto
198 0 lineto
102 0 lineto
closepath
fill
		} def

	/i
		{
102 0 moveto
183 403 lineto
188 430 190 453 190 473  curveto
190 487 178 495 153 497  curveto
120 499 lineto
111 500 lineto
117 530 lineto
304 530 lineto
224 126 lineto
218 99 216 76 216 57  curveto
216 42 228 34 253 33  curveto
286 30 lineto
295 30 lineto
289 0 lineto
102 0 lineto
closepath
227 626 moveto
246 722 lineto
342 722 lineto
323 626 lineto
227 626 lineto
closepath
fill
		} def

	/j
		{
-79 -186 moveto
-53 -57 lineto
-4 -57 lineto
-6 -66 lineto
-10 -100 lineto
-12 -112 -13 -121 -13 -127  curveto
-13 -154 8 -168 52 -168  curveto
87 -168 112 -157 126 -135  curveto
140 -114 155 -65 170 9  curveto
249 403 lineto
254 430 257 453 257 473  curveto
257 487 244 495 219 497  curveto
187 499 lineto
178 500 lineto
184 530 lineto
370 530 lineto
279 69 lineto
242 -113 156 -205 20 -205  curveto
-9 -205 -42 -198 -79 -186  curveto
closepath
293 626 moveto
312 722 lineto
409 722 lineto
390 626 lineto
293 626 lineto
closepath
fill
		} def

	/k
		{
90 0 moveto
218 644 lineto
223 671 226 694 226 714  curveto
226 728 214 736 188 737  curveto
156 740 lineto
147 740 lineto
153 771 lineto
340 771 lineto
245 295 lineto
252 295 lineto
411 376 491 445 491 500  curveto
491 512 486 522 476 530  curveto
573 536 lineto
578 527 580 519 580 512  curveto
580 463 498 396 333 309  curveto
398 201 457 118 509 60  curveto
524 42 549 32 583 31  curveto
594 30 lineto
588 0 lineto
427 0 lineto
362 78 303 169 248 273  curveto
241 273 lineto
186 0 lineto
90 0 lineto
closepath
fill
		} def

	/l
		{
90 0 moveto
218 644 lineto
223 671 226 694 226 714  curveto
226 728 214 736 188 737  curveto
156 740 lineto
147 740 lineto
153 771 lineto
340 771 lineto
211 126 lineto
206 99 204 76 204 57  curveto
204 42 216 34 241 33  curveto
274 30 lineto
283 30 lineto
277 0 lineto
90 0 lineto
closepath
fill
		} def

	/m
		{
102 0 moveto
183 403 lineto
188 430 190 453 190 473  curveto
190 487 178 495 153 497  curveto
120 499 lineto
111 500 lineto
117 530 lineto
304 530 lineto
261 313 lineto
358 465 447 542 528 542  curveto
581 542 608 511 608 451  curveto
608 439 606 426 604 413  curveto
597 380 lineto
583 313 lineto
686 466 776 542 854 542  curveto
906 542 933 509 933 444  curveto
933 429 930 406 924 377  curveto
874 126 lineto
869 99 866 76 866 57  curveto
866 42 879 34 904 33  curveto
936 30 lineto
945 30 lineto
939 0 lineto
752 0 lineto
833 406 lineto
836 417 837 427 837 433  curveto
837 458 828 470 811 470  curveto
784 470 747 447 698 401  curveto
650 355 608 303 574 246  curveto
524 0 lineto
427 0 lineto
508 406 lineto
511 418 512 427 512 433  curveto
512 458 503 470 485 470  curveto
459 470 421 447 373 401  curveto
325 355 283 303 247 243  curveto
198 0 lineto
102 0 lineto
closepath
fill
		} def

	/n
		{
102 0 moveto
183 403 lineto
188 430 190 453 190 473  curveto
190 487 178 495 153 497  curveto
120 499 lineto
111 500 lineto
117 530 lineto
304 530 lineto
261 313 lineto
303 383 348 439 398 480  curveto
447 521 493 542 536 542  curveto
593 542 621 511 621 450  curveto
621 435 618 412 612 381  curveto
561 126 lineto
556 99 553 76 553 57  curveto
553 42 566 34 591 33  curveto
624 30 lineto
632 30 lineto
626 0 lineto
439 0 lineto
518 395 lineto
521 412 523 425 523 436  curveto
523 458 511 469 488 469  curveto
436 469 361 400 261 260  curveto
247 240 lineto
198 0 lineto
102 0 lineto
closepath
fill
		} def

	/o
		{
256 -12 moveto
143 -12 86 48 86 170  curveto
86 268 119 355 184 429  curveto
249 504 325 542 410 542  curveto
524 542 582 481 582 359  curveto
582 261 549 174 483 100  curveto
418 25 342 -12 256 -12  curveto
closepath
283 24 moveto
333 24 378 59 417 129  curveto
456 199 475 280 475 372  curveto
475 460 445 504 386 504  curveto
335 504 290 469 250 399  curveto
211 329 192 249 192 157  curveto
192 69 222 24 283 24  curveto
closepath
fill
		} def

	/p
		{
63 -192 moveto
182 403 lineto
187 430 190 453 190 473  curveto
190 487 177 495 152 497  curveto
120 499 lineto
111 500 lineto
117 530 lineto
304 530 lineto
259 307 lineto
299 378 344 435 394 478  curveto
444 521 491 542 534 542  curveto
566 542 591 531 610 509  curveto
629 487 638 457 638 420  curveto
638 313 601 215 526 124  curveto
451 33 371 -12 284 -12  curveto
267 -12 243 -9 213 -2  curveto
198 0 lineto
160 -192 lineto
63 -192 lineto
closepath
245 233 moveto
210 64 lineto
250 44 290 35 332 35  curveto
379 35 418 57 449 102  curveto
472 136 493 183 510 242  curveto
527 301 536 354 536 400  curveto
536 447 521 470 491 470  curveto
427 470 345 391 245 233  curveto
closepath
fill
		} def

	/q
		{
374 -192 moveto
457 222 lineto
417 151 371 94 322 51  curveto
272 9 225 -12 182 -12  curveto
151 -12 125 -1 106 21  curveto
88 43 78 72 78 109  curveto
78 215 115 314 190 405  curveto
264 496 345 542 432 542  curveto
449 542 473 539 503 533  curveto
518 530 lineto
614 530 lineto
471 -192 lineto
374 -192 lineto
closepath
472 295 moveto
507 467 lineto
469 486 429 496 387 496  curveto
339 496 300 474 269 429  curveto
245 393 224 346 206 288  curveto
189 229 180 176 180 129  curveto
180 82 195 59 226 59  curveto
289 59 371 138 472 295  curveto
closepath
fill
		} def

	/r
		{
102 0 moveto
183 403 lineto
188 430 190 453 190 473  curveto
190 487 178 495 153 497  curveto
120 499 lineto
111 500 lineto
117 530 lineto
304 530 lineto
261 313 lineto
355 466 445 542 532 542  curveto
540 542 548 541 556 538  curveto
515 427 lineto
500 434 485 437 471 437  curveto
409 437 334 374 248 247  curveto
198 0 lineto
102 0 lineto
closepath
fill
		} def

	/s
		{
48 29 moveto
72 150 lineto
121 150 lineto
120 141 lineto
116 111 lineto
114 100 113 91 113 85  curveto
113 68 125 53 149 39  curveto
173 25 199 18 229 18  curveto
257 18 281 26 300 44  curveto
319 62 328 84 328 110  curveto
328 136 315 164 288 192  curveto
237 246 lineto
178 308 148 359 148 398  curveto
148 440 165 474 198 501  curveto
232 528 275 542 328 542  curveto
379 542 428 530 475 506  curveto
451 388 lineto
403 388 lineto
404 397 lineto
406 413 408 424 409 432  curveto
411 442 412 450 412 457  curveto
412 493 382 512 321 512  curveto
297 512 277 503 261 486  curveto
244 469 236 447 236 421  curveto
236 396 252 367 284 335  curveto
335 285 lineto
391 230 418 179 418 134  curveto
418 90 401 54 366 28  curveto
331 1 284 -12 226 -12  curveto
169 -12 110 1 48 29  curveto
closepath
fill
		} def

	/t
		{
317 5 moveto
290 -6 264 -12 240 -12  curveto
204 -12 174 -1 152 20  curveto
129 41 118 70 118 104  curveto
118 118 120 135 124 155  curveto
191 490 lineto
109 490 lineto
117 530 lineto
198 530 lineto
218 626 lineto
319 653 lineto
295 530 lineto
430 530 lineto
422 490 lineto
287 490 lineto
217 141 lineto
214 123 212 106 212 90  curveto
212 52 230 32 267 32  curveto
283 32 303 37 325 46  curveto
317 5 lineto
closepath
fill
		} def

	/u
		{
430 0 moveto
474 216 lineto
382 64 290 -12 198 -12  curveto
142 -12 113 18 113 79  curveto
113 94 116 117 123 148  curveto
173 403 lineto
179 430 181 453 181 473  curveto
181 487 169 495 144 497  curveto
111 499 lineto
102 500 lineto
108 530 lineto
295 530 lineto
217 141 lineto
214 116 lineto
213 107 212 102 212 99  curveto
212 77 224 66 247 66  curveto
295 66 370 135 474 273  curveto
488 292 lineto
511 403 lineto
516 430 519 453 519 473  curveto
519 487 506 495 481 497  curveto
448 499 lineto
439 500 lineto
445 530 lineto
632 530 lineto
552 126 lineto
547 99 544 76 544 57  curveto
544 42 556 34 582 33  curveto
614 30 lineto
623 30 lineto
617 0 lineto
430 0 lineto
closepath
fill
		} def

	/v
		{
237 -5 moveto
237 61 231 134 219 211  curveto
208 288 194 346 178 384  curveto
149 452 lineto
141 472 132 484 123 489  curveto
114 493 92 497 59 499  curveto
50 500 lineto
56 530 lineto
232 530 lineto
284 410 314 269 324 107  curveto
414 212 lineto
490 302 528 380 528 446  curveto
528 476 516 504 491 530  curveto
609 530 lineto
616 514 620 497 620 479  curveto
620 445 604 406 572 360  curveto
541 314 470 229 361 103  curveto
267 -5 lineto
237 -5 lineto
closepath
fill
		} def

	/w
		{
221 -5 moveto
223 32 225 60 225 78  curveto
225 125 220 183 210 250  curveto
201 317 191 366 179 396  curveto
158 455 lineto
152 472 143 484 133 490  curveto
122 496 105 499 81 499  curveto
72 500 lineto
78 530 lineto
236 530 lineto
278 405 303 276 313 143  curveto
410 306 468 434 489 527  curveto
520 527 lineto
570 402 600 270 610 132  curveto
657 202 lineto
732 310 770 392 770 447  curveto
770 479 759 507 738 530  curveto
856 530 lineto
858 520 859 512 859 504  curveto
859 462 826 392 759 295  curveto
646 130 575 29 548 -5  curveto
515 -5 lineto
518 26 520 49 520 62  curveto
520 171 503 274 469 370  curveto
419 264 377 185 343 133  curveto
268 18 lineto
266 16 262 8 253 -5  curveto
221 -5 lineto
closepath
fill
		} def

	/x
		{
259 269 moveto
199 403 lineto
175 453 lineto
166 472 159 483 153 488  curveto
147 493 137 496 121 497  curveto
92 499 lineto
83 500 lineto
88 530 lineto
247 530 lineto
344 322 lineto
366 339 lineto
429 391 461 434 461 468  curveto
461 486 454 507 440 530  curveto
536 530 lineto
539 518 541 508 541 500  curveto
541 472 531 446 511 423  curveto
492 401 448 363 379 312  curveto
355 294 lineto
436 125 lineto
465 71 lineto
478 47 494 33 515 32  curveto
546 30 lineto
555 30 lineto
549 0 lineto
389 0 lineto
275 241 lineto
233 204 lineto
166 144 133 93 133 49  curveto
133 32 138 15 150 0  curveto
46 0 lineto
44 9 43 15 43 20  curveto
43 62 74 109 135 163  curveto
210 227 lineto
259 269 lineto
closepath
fill
		} def

	/y
		{
-2 -192 moveto
57 -151 132 -88 222 -5  curveto
241 12 lineto
237 88 228 167 212 251  curveto
197 335 180 396 164 433  curveto
149 464 138 482 129 488  curveto
121 493 98 497 62 499  curveto
50 500 lineto
56 530 lineto
233 530 lineto
284 410 313 270 321 109  curveto
381 187 lineto
440 262 480 317 499 352  curveto
519 387 529 420 529 449  curveto
529 480 516 507 490 530  curveto
611 530 lineto
618 515 622 501 622 488  curveto
622 460 613 431 594 401  curveto
576 371 539 322 481 253  curveto
296 31 lineto
222 -56 167 -131 131 -192  curveto
-2 -192 lineto
closepath
fill
		} def

	/z
		{
50 0 moveto
57 36 lineto
455 494 lineto
303 494 lineto
254 492 lineto
238 492 227 489 221 485  curveto
216 480 211 469 207 453  curveto
205 444 202 432 198 417  curveto
195 409 lineto
144 409 lineto
168 530 lineto
574 530 lineto
567 497 lineto
163 36 lineto
347 36 lineto
395 36 424 38 434 41  curveto
443 45 450 58 456 79  curveto
456 82 459 93 464 111  curveto
466 120 lineto
514 120 lineto
490 0 lineto
50 0 lineto
closepath
fill
		} def

	/braceleft
		{
430 771 moveto
424 740 lineto
381 735 352 722 337 701  curveto
322 680 314 643 314 588  curveto
313 550 lineto
313 483 300 429 273 386  curveto
246 343 210 318 163 310  curveto
185 294 lineto
222 268 241 235 241 194  curveto
241 164 229 119 204 59  curveto
180 2 lineto
171 -19 167 -37 167 -51  curveto
167 -69 174 -83 189 -96  curveto
204 -108 222 -114 243 -114  curveto
246 -114 250 -114 253 -114  curveto
248 -144 lineto
143 -144 90 -105 90 -28  curveto
90 0 100 37 120 83  curveto
140 131 lineto
159 176 168 212 168 237  curveto
168 276 148 295 109 295  curveto
85 295 lineto
91 325 lineto
113 325 lineto
153 325 181 338 199 365  curveto
216 391 225 435 225 496  curveto
224 527 lineto
224 689 293 771 430 771  curveto
closepath
fill
		} def

	/bar
		{
133 -144 moveto
315 771 lineto
364 771 lineto
182 -144 lineto
133 -144 lineto
closepath
fill
		} def

	/braceright
		{
85 -144 moveto
91 -114 lineto
134 -109 163 -96 178 -75  curveto
193 -54 200 -16 200 38  curveto
201 76 lineto
201 142 215 197 241 239  curveto
268 282 305 308 352 316  curveto
330 331 lineto
292 357 273 391 273 432  curveto
273 461 286 506 311 566  curveto
334 623 lineto
344 646 348 664 348 678  curveto
348 695 341 710 326 722  curveto
311 735 293 741 272 741  curveto
268 741 265 741 261 740  curveto
267 771 lineto
372 771 424 732 424 655  curveto
424 626 415 589 395 542  curveto
375 495 lineto
356 449 347 414 347 388  curveto
347 350 366 331 405 331  curveto
430 331 lineto
424 301 lineto
401 301 lineto
362 301 333 287 316 261  curveto
298 234 290 190 290 129  curveto
291 99 lineto
291 -63 222 -144 85 -144  curveto
closepath
fill
		} def

	/asciitilde
		{
181 216 moveto
151 216 lineto
177 320 230 372 312 372  curveto
344 372 394 355 462 321  curveto
501 302 lineto
564 271 605 255 625 255  curveto
672 255 706 291 728 361  curveto
758 361 lineto
731 257 677 205 598 205  curveto
571 205 531 219 476 246  curveto
450 259 lineto
409 278 lineto
351 308 309 322 285 322  curveto
233 322 198 287 181 216  curveto
closepath
fill
		} def

	/exclamdown
		{
286 530 moveto
267 433 lineto
170 433 lineto
189 530 lineto
286 530 lineto
closepath
214 337 moveto
170 -48 lineto
142 -192 lineto
45 -192 lineto
74 -48 lineto
184 337 lineto
214 337 lineto
closepath
fill
		} def

	/cent
		{
314 0 moveto
333 92 lineto
272 92 227 107 197 137  curveto
167 168 152 213 152 273  curveto
152 363 178 442 230 509  curveto
283 576 353 622 442 646  curveto
458 722 lineto
488 722 lineto
473 648 lineto
489 648 lineto
528 648 570 642 615 628  curveto
592 512 lineto
544 512 lineto
545 521 lineto
548 542 lineto
550 559 551 569 551 573  curveto
551 597 525 610 471 610  curveto
466 610 lineto
372 141 lineto
429 141 486 156 542 187  curveto
535 150 lineto
478 123 421 104 363 94  curveto
344 0 lineto
314 0 lineto
closepath
343 146 moveto
435 608 lineto
377 590 331 554 298 501  curveto
264 448 248 384 248 311  curveto
248 262 256 225 271 197  curveto
287 170 311 153 343 146  curveto
closepath
fill
		} def

	/sterling
		{
110 0 moveto
125 72 lineto
160 79 187 94 205 117  curveto
222 140 236 179 248 234  curveto
274 370 lineto
184 370 lineto
190 400 lineto
280 400 lineto
290 445 lineto
309 544 340 617 383 666  curveto
425 716 480 740 546 740  curveto
581 740 622 730 668 708  curveto
645 593 lineto
603 593 lineto
604 602 lineto
607 622 608 638 608 650  curveto
608 686 580 704 525 704  curveto
494 704 469 690 449 662  curveto
430 634 414 589 402 527  curveto
377 400 lineto
500 400 lineto
494 370 lineto
371 370 lineto
355 292 lineto
342 227 327 182 309 157  curveto
291 133 253 104 196 72  curveto
538 72 lineto
523 0 lineto
110 0 lineto
closepath
fill
		} def

	/fraction
		{
-84 -18 moveto
597 740 lineto
645 740 lineto
-36 -18 lineto
-84 -18 lineto
closepath
fill
		} def

	/yen
		{
291 192 moveto
146 192 lineto
152 222 lineto
297 222 lineto
317 325 lineto
172 325 lineto
179 355 lineto
323 355 lineto
216 595 lineto
187 652 lineto
174 677 153 690 125 691  curveto
116 692 lineto
122 722 lineto
369 722 lineto
363 692 lineto
354 692 lineto
334 692 lineto
308 692 295 685 295 672  curveto
295 660 305 634 325 591  curveto
416 393 lineto
590 591 lineto
633 640 655 669 655 677  curveto
655 687 644 691 622 691  curveto
601 692 lineto
592 692 lineto
598 722 lineto
779 722 lineto
773 692 lineto
764 691 lineto
741 690 lineto
724 689 707 678 690 659  curveto
630 592 lineto
419 355 lineto
564 355 lineto
558 325 lineto
414 325 lineto
393 222 lineto
538 222 lineto
532 192 lineto
387 192 lineto
374 126 lineto
369 99 366 76 366 57  curveto
366 42 379 34 403 33  curveto
436 30 lineto
445 30 lineto
439 0 lineto
162 0 lineto
168 30 lineto
177 30 lineto
211 33 lineto
232 34 246 40 254 52  curveto
262 63 270 88 277 126  curveto
291 192 lineto
closepath
fill
		} def

	/florin
		{
182 -144 moveto
284 361 lineto
182 361 lineto
188 391 lineto
290 391 lineto
308 480 lineto
323 559 353 622 398 669  curveto
442 717 493 740 551 740  curveto
589 740 623 735 654 724  curveto
628 596 lineto
580 596 lineto
581 605 lineto
584 625 586 639 587 645  curveto
589 653 589 661 589 667  curveto
589 692 571 705 535 705  curveto
501 705 476 691 458 664  curveto
441 637 425 586 410 509  curveto
386 391 lineto
517 391 lineto
511 361 lineto
380 361 lineto
280 -144 lineto
182 -144 lineto
closepath
fill
		} def

	/section
		{
81 -127 moveto
103 -16 lineto
145 -16 lineto
143 -31 lineto
140 -49 lineto
139 -53 139 -58 139 -63  curveto
139 -83 153 -99 181 -112  curveto
209 -125 243 -132 284 -132  curveto
329 -132 367 -118 397 -91  curveto
428 -64 444 -31 444 7  curveto
444 42 417 72 363 97  curveto
306 124 lineto
248 150 209 174 188 195  curveto
168 216 158 242 158 275  curveto
158 330 194 386 265 442  curveto
228 475 209 511 209 549  curveto
209 605 234 652 283 687  curveto
332 723 396 741 474 741  curveto
527 741 579 732 630 715  curveto
607 602 lineto
565 602 lineto
567 611 lineto
570 628 572 643 572 656  curveto
572 669 560 681 536 690  curveto
512 699 482 704 446 704  curveto
401 704 364 692 336 668  curveto
308 644 293 612 293 574  curveto
293 538 321 507 375 479  curveto
435 449 lineto
489 421 525 398 543 378  curveto
561 358 570 332 570 298  curveto
570 249 536 194 469 136  curveto
510 105 531 69 531 27  curveto
531 -27 507 -73 457 -108  curveto
408 -144 346 -162 270 -162  curveto
210 -162 147 -151 81 -127  curveto
closepath
444 156 moveto
476 193 491 229 491 264  curveto
491 298 463 330 407 359  curveto
346 391 lineto
331 398 312 409 289 423  curveto
256 387 240 350 240 312  curveto
240 276 266 246 318 220  curveto
379 190 lineto
415 171 lineto
421 168 431 163 444 156  curveto
closepath
fill
		} def

	/currency
		{
506 218 moveto
581 125 lineto
555 104 lineto
480 197 lineto
428 162 377 145 326 145  curveto
276 145 233 162 195 197  curveto
83 104 lineto
65 125 lineto
178 218 lineto
159 252 149 285 149 318  curveto
149 383 178 444 235 503  curveto
160 598 lineto
186 619 lineto
260 525 lineto
312 560 363 578 415 578  curveto
464 578 508 560 546 525  curveto
658 619 lineto
675 598 lineto
562 503 lineto
582 470 592 436 592 404  curveto
592 340 563 278 506 218  curveto
closepath
539 394 moveto
539 433 526 465 501 489  curveto
475 514 443 526 403 526  curveto
351 526 304 506 263 466  curveto
222 425 202 380 202 329  curveto
202 290 214 258 240 233  curveto
265 208 297 195 336 195  curveto
389 195 436 215 477 256  curveto
518 296 539 342 539 394  curveto
closepath
fill
		} def

	/quotesingle
		{
213 505 moveto
213 771 lineto
334 771 lineto
244 505 lineto
213 505 lineto
closepath
fill
		} def

	/quotedblleft
		{
269 614 moveto
314 614 lineto
291 494 lineto
170 494 lineto
191 603 lineto
214 715 265 771 346 771  curveto
339 740 lineto
321 740 308 734 300 722  curveto
291 710 284 686 276 650  curveto
269 614 lineto
closepath
461 614 moveto
507 614 lineto
483 494 lineto
362 494 lineto
384 603 lineto
406 715 458 771 538 771  curveto
532 740 lineto
514 740 501 734 492 722  curveto
484 710 476 686 469 650  curveto
461 614 lineto
closepath
fill
		} def

	/guillemotleft
		{
351 454 moveto
182 265 lineto
268 72 lineto
243 54 lineto
83 265 lineto
330 476 lineto
351 454 lineto
closepath
547 454 moveto
378 265 lineto
464 72 lineto
439 54 lineto
280 265 lineto
526 476 lineto
547 454 lineto
closepath
fill
		} def

	/guilsinglleft
		{
352 454 moveto
183 265 lineto
269 72 lineto
244 54 lineto
84 265 lineto
331 476 lineto
352 454 lineto
closepath
fill
		} def

	/guilsinglright
		{
82 76 moveto
250 265 lineto
165 458 lineto
190 476 lineto
349 265 lineto
103 54 lineto
82 76 lineto
closepath
fill
		} def

	/fi
		{
125 0 moveto
125 625 lineto
625 625 lineto
625 0 lineto
125 0 lineto
closepath
156 31 moveto
593 31 lineto
593 593 lineto
156 593 lineto
156 31 lineto
closepath
fill
		} def

	/fl
		{
125 0 moveto
125 625 lineto
625 625 lineto
625 0 lineto
125 0 lineto
closepath
156 31 moveto
593 31 lineto
593 593 lineto
156 593 lineto
156 31 lineto
closepath
fill
		} def

	/endash
		{
125 265 moveto
137 325 lineto
570 325 lineto
558 265 lineto
125 265 lineto
closepath
fill
		} def

	/dagger
		{
227 -144 moveto
363 418 lineto
166 397 lineto
180 469 lineto
369 448 lineto
399 722 lineto
496 722 lineto
417 448 lineto
614 469 lineto
600 397 lineto
411 418 lineto
323 -144 lineto
227 -144 lineto
closepath
fill
		} def

	/daggerdbl
		{
227 -144 moveto
305 126 lineto
108 105 lineto
122 177 lineto
311 156 lineto
363 418 lineto
166 397 lineto
180 469 lineto
369 448 lineto
399 722 lineto
496 722 lineto
417 448 lineto
614 469 lineto
600 397 lineto
411 418 lineto
359 156 lineto
556 177 lineto
542 105 lineto
353 126 lineto
323 -144 lineto
227 -144 lineto
closepath
fill
		} def

	/periodcentered
		{
120 239 moveto
144 360 lineto
264 360 lineto
240 239 lineto
120 239 lineto
closepath
fill
		} def

	/paragraph
		{
239 -144 moveto
338 355 lineto
283 365 239 388 207 424  curveto
174 460 157 504 157 555  curveto
157 612 172 654 201 683  curveto
230 711 273 726 331 726  curveto
379 724 lineto
452 722 lineto
580 722 lineto
408 -144 lineto
372 -144 lineto
534 674 lineto
438 674 lineto
275 -144 lineto
239 -144 lineto
closepath
fill
		} def

	/bullet
		{
369 108 moveto
311 108 261 129 219 172  curveto
177 215 156 266 156 325  curveto
156 385 177 436 219 478  curveto
262 520 313 542 373 542  curveto
433 542 484 520 526 478  curveto
568 435 589 384 589 323  curveto
589 263 568 212 525 171  curveto
482 129 430 108 369 108  curveto
closepath
fill
		} def

	/quotesinglbase
		{
117 0 moveto
71 0 lineto
97 120 lineto
217 120 lineto
195 11 lineto
173 -100 121 -156 39 -156  curveto
46 -126 lineto
80 -126 102 -96 111 -35  curveto
117 0 lineto
closepath
fill
		} def

	/quotedblbase
		{
309 0 moveto
264 0 lineto
288 120 lineto
409 120 lineto
387 11 lineto
365 -100 313 -156 233 -156  curveto
239 -126 lineto
257 -126 270 -120 279 -108  curveto
287 -95 295 -71 302 -35  curveto
309 0 lineto
closepath
117 0 moveto
72 0 lineto
96 120 lineto
216 120 lineto
194 11 lineto
172 -100 121 -156 41 -156  curveto
46 -126 lineto
64 -126 78 -120 86 -108  curveto
95 -95 103 -71 110 -35  curveto
117 0 lineto
closepath
fill
		} def

	/quotedblright
		{
438 650 moveto
394 650 lineto
417 771 lineto
538 771 lineto
516 662 lineto
494 550 443 494 362 494  curveto
368 523 lineto
386 523 399 530 408 542  curveto
417 554 424 578 432 614  curveto
438 650 lineto
closepath
246 650 moveto
201 650 lineto
225 771 lineto
346 771 lineto
324 662 lineto
302 550 250 494 170 494  curveto
176 523 lineto
194 523 207 530 216 542  curveto
224 554 232 578 239 614  curveto
246 650 lineto
closepath
fill
		} def

	/guillemotright
		{
279 76 moveto
448 265 lineto
362 458 lineto
387 476 lineto
546 265 lineto
300 54 lineto
279 76 lineto
closepath
83 76 moveto
251 265 lineto
166 458 lineto
191 476 lineto
350 265 lineto
104 54 lineto
83 76 lineto
closepath
fill
		} def

	/ellipsis
		{
120 0 moveto
139 96 lineto
236 96 lineto
216 0 lineto
120 0 lineto
closepath
454 0 moveto
473 96 lineto
569 96 lineto
550 0 lineto
454 0 lineto
closepath
787 0 moveto
806 96 lineto
902 96 lineto
883 0 lineto
787 0 lineto
closepath
fill
		} def

	/perthousand
		{
262 361 moveto
225 361 195 372 172 396  curveto
150 419 139 450 139 489  curveto
139 554 157 609 194 654  curveto
231 699 275 722 327 722  curveto
365 722 396 711 418 688  curveto
441 665 452 634 452 595  curveto
452 530 434 474 397 429  curveto
360 384 315 361 262 361  curveto
closepath
210 484 moveto
210 422 230 391 269 391  curveto
299 391 326 412 350 455  curveto
374 497 386 544 386 597  curveto
386 661 367 693 328 693  curveto
297 693 270 672 246 630  curveto
222 587 210 539 210 484  curveto
closepath
578 0 moveto
540 0 510 11 487 34  curveto
465 58 454 89 454 128  curveto
454 192 472 247 509 292  curveto
546 338 590 361 642 361  curveto
680 361 711 349 733 326  curveto
756 303 767 272 767 233  curveto
767 168 749 113 712 68  curveto
675 22 630 0 578 0  curveto
closepath
525 123 moveto
525 60 545 29 584 29  curveto
614 29 641 51 665 93  curveto
689 135 701 183 701 236  curveto
701 300 682 332 643 332  curveto
612 332 585 310 561 268  curveto
537 226 525 178 525 123  curveto
closepath
88 -18 moveto
753 740 lineto
817 740 lineto
152 -18 lineto
88 -18 lineto
closepath
934 0 moveto
896 0 866 11 844 34  curveto
821 58 810 89 810 128  curveto
810 192 828 247 865 292  curveto
902 338 946 361 999 361  curveto
1037 361 1067 349 1090 326  curveto
1112 303 1124 272 1124 233  curveto
1124 168 1105 113 1068 68  curveto
1032 22 987 0 934 0  curveto
closepath
882 123 moveto
882 61 902 29 941 29  curveto
971 29 997 51 1021 93  curveto
1046 135 1058 183 1058 235  curveto
1058 299 1038 332 1000 332  curveto
969 332 941 310 917 268  curveto
894 226 882 178 882 123  curveto
closepath
fill
		} def

	/questiondown
		{
430 530 moveto
411 433 lineto
314 433 lineto
334 530 lineto
430 530 lineto
closepath
392 337 moveto
390 328 lineto
384 297 375 272 363 252  curveto
351 233 328 207 295 173  curveto
254 133 lineto
215 94 186 58 167 24  curveto
148 -10 138 -42 138 -73  curveto
138 -105 148 -130 168 -150  curveto
188 -170 214 -180 247 -180  curveto
311 -180 348 -157 358 -112  curveto
363 -91 367 -75 370 -63  curveto
373 -54 lineto
421 -54 lineto
396 -177 lineto
329 -199 269 -210 215 -210  curveto
163 -210 119 -198 86 -173  curveto
52 -148 36 -116 36 -76  curveto
36 -44 44 -16 61 7  curveto
78 30 111 60 159 95  curveto
194 121 lineto
224 142 247 171 265 207  curveto
282 243 294 286 299 337  curveto
392 337 lineto
closepath
fill
		} def

	/grave
		{
513 626 moveto
467 626 lineto
311 783 lineto
434 783 lineto
513 626 lineto
closepath
fill
		} def

	/acute
		{
338 626 moveto
495 783 lineto
618 783 lineto
383 626 lineto
338 626 lineto
closepath
fill
		} def

	/circumflex
		{
253 626 moveto
410 783 lineto
519 783 lineto
597 626 lineto
555 626 lineto
451 729 lineto
296 626 lineto
253 626 lineto
closepath
fill
		} def

	/tilde
		{
266 626 moveto
280 664 298 693 320 712  curveto
343 731 369 741 400 741  curveto
420 741 438 735 454 722  curveto
468 710 lineto
483 698 499 692 516 692  curveto
532 692 546 696 557 704  curveto
569 712 577 724 584 740  curveto
614 740 lineto
599 702 581 674 559 655  curveto
536 635 510 626 479 626  curveto
459 626 442 632 426 645  curveto
412 656 lineto
396 669 380 675 364 675  curveto
349 675 336 671 324 663  curveto
313 654 303 642 296 626  curveto
266 626 lineto
closepath
fill
		} def

	/macron
		{
191 722 moveto
203 783 lineto
607 783 lineto
595 722 lineto
191 722 lineto
closepath
fill
		} def

	/breve
		{
293 783 moveto
325 783 lineto
326 753 337 732 356 717  curveto
375 703 403 695 439 695  curveto
475 695 505 703 530 717  curveto
555 732 574 753 587 783  curveto
619 783 lineto
603 734 577 696 542 668  curveto
507 640 468 626 423 626  curveto
386 626 355 638 330 663  curveto
305 688 292 719 292 756  curveto
292 763 293 772 293 783  curveto
closepath
fill
		} def

	/dotaccent
		{
377 626 moveto
396 722 lineto
493 722 lineto
474 626 lineto
377 626 lineto
closepath
fill
		} def

	/dieresis
		{
283 626 moveto
299 710 lineto
384 710 lineto
367 626 lineto
283 626 lineto
closepath
476 626 moveto
492 710 lineto
577 710 lineto
560 626 lineto
476 626 lineto
closepath
fill
		} def

	/ring
		{
430 626 moveto
399 626 374 637 352 658  curveto
331 680 320 706 320 737  curveto
320 767 331 794 353 815  curveto
374 837 400 848 431 848  curveto
462 848 488 837 510 815  curveto
531 794 542 768 542 737  curveto
542 706 531 679 510 658  curveto
488 637 461 626 430 626  curveto
closepath
430 659 moveto
452 659 471 667 486 682  curveto
501 697 509 715 509 737  curveto
509 759 501 777 486 792  curveto
471 807 453 814 431 814  curveto
410 814 391 807 376 792  curveto
361 777 354 758 354 737  curveto
354 716 361 697 376 682  curveto
391 667 409 659 430 659  curveto
closepath
fill
		} def

	/cedilla
		{
176 -200 moveto
183 -167 lineto
201 -172 216 -175 229 -175  curveto
271 -175 292 -158 292 -125  curveto
292 -98 264 -85 209 -85  curveto
273 0 lineto
312 0 lineto
268 -58 lineto
330 -62 361 -82 361 -118  curveto
361 -142 349 -164 326 -182  curveto
303 -201 276 -210 246 -210  curveto
222 -210 199 -207 176 -200  curveto
closepath
fill
		} def

	/hungarumlaut
		{
125 0 moveto
125 625 lineto
625 625 lineto
625 0 lineto
125 0 lineto
closepath
156 31 moveto
593 31 lineto
593 593 lineto
156 593 lineto
156 31 lineto
closepath
fill
		} def

	/ogonek
		{
365 -133 moveto
358 -166 lineto
334 -175 310 -180 284 -180  curveto
253 -180 229 -175 213 -165  curveto
197 -154 189 -139 189 -118  curveto
189 -94 198 -73 214 -53  curveto
231 -33 255 -15 289 0  curveto
341 0 lineto
313 -14 293 -29 280 -46  curveto
266 -63 259 -81 259 -101  curveto
259 -114 264 -124 273 -131  curveto
282 -137 296 -141 314 -141  curveto
332 -141 349 -138 365 -133  curveto
closepath
fill
		} def

	/caron
		{
628 783 moveto
479 626 lineto
371 626 lineto
285 783 lineto
327 783 lineto
435 674 lineto
586 783 lineto
628 783 lineto
closepath
fill
		} def

	/emdash
		{
125 265 moveto
137 325 lineto
570 325 lineto
558 265 lineto
125 265 lineto
closepath
fill
		} def

	/AE
		{
882 0 moveto
361 0 lineto
367 30 lineto
376 30 lineto
409 33 lineto
430 34 445 40 453 52  curveto
461 63 469 88 476 126  curveto
496 226 lineto
250 226 lineto
173 125 lineto
156 103 146 89 143 84  curveto
126 57 lineto
123 52 122 48 122 45  curveto
122 36 132 31 152 31  curveto
176 30 lineto
191 30 lineto
185 0 lineto
1 0 lineto
7 30 lineto
17 30 lineto
39 32 62 47 85 75  curveto
129 127 lineto
585 722 lineto
999 722 lineto
974 596 lineto
919 596 lineto
920 605 lineto
926 646 lineto
930 664 lineto
927 677 899 683 847 683  curveto
689 683 lineto
632 394 lineto
771 394 lineto
802 396 lineto
823 396 836 405 841 423  curveto
841 426 843 433 847 445  curveto
849 454 lineto
894 454 lineto
862 295 lineto
817 295 lineto
818 304 lineto
820 319 821 330 821 335  curveto
821 346 813 352 798 353  curveto
763 355 lineto
624 355 lineto
579 126 lineto
575 108 573 90 573 73  curveto
573 60 578 51 586 47  curveto
595 43 615 42 645 42  curveto
722 42 lineto
769 42 800 44 814 48  curveto
828 52 837 63 841 79  curveto
850 114 lineto
852 123 lineto
906 123 lineto
882 0 lineto
closepath
279 265 moveto
504 265 lineto
582 656 lineto
279 265 lineto
closepath
fill
		} def

	/ordfeminine
		{
364 355 moveto
399 502 lineto
388 502 lineto
350 451 316 413 285 387  curveto
254 361 227 349 202 349  curveto
160 349 139 377 139 435  curveto
139 511 162 578 209 638  curveto
255 698 308 729 367 729  curveto
376 729 392 727 415 725  curveto
421 724 430 723 442 722  curveto
523 722 lineto
475 480 lineto
467 433 lineto
464 420 462 413 462 413  curveto
463 397 479 388 511 386  curveto
520 385 lineto
514 355 lineto
364 355 lineto
closepath
406 566 moveto
426 667 lineto
401 678 376 684 353 684  curveto
318 684 287 661 261 614  curveto
235 568 222 514 222 451  curveto
222 428 230 417 245 417  curveto
260 417 281 429 308 454  curveto
335 479 368 516 406 566  curveto
closepath
fill
		} def

	/Lslash
		{
23 0 moveto
29 30 lineto
38 30 lineto
72 33 lineto
93 34 107 40 115 52  curveto
123 63 131 88 139 126  curveto
186 365 lineto
85 312 lineto
93 354 lineto
194 406 lineto
232 596 lineto
237 623 240 646 240 666  curveto
240 680 227 688 202 689  curveto
169 691 lineto
161 692 lineto
167 722 lineto
450 722 lineto
444 692 lineto
435 691 lineto
401 689 lineto
380 688 366 681 358 670  curveto
350 659 342 634 334 596  curveto
308 465 lineto
456 542 lineto
448 500 lineto
300 424 lineto
241 126 lineto
235 97 232 77 232 65  curveto
232 55 236 48 245 45  curveto
253 43 274 42 308 42  curveto
394 42 lineto
440 42 471 44 487 50  curveto
502 55 513 67 517 85  curveto
528 134 lineto
531 144 lineto
582 144 lineto
553 0 lineto
23 0 lineto
closepath
fill
		} def

	/Oslash
		{
104 -18 moveto
50 -18 lineto
157 85 lineto
126 127 110 185 110 260  curveto
110 387 154 499 243 596  curveto
331 692 434 740 552 740  curveto
630 740 696 715 750 664  curveto
830 740 lineto
882 740 lineto
775 636 lineto
805 584 820 527 820 465  curveto
820 336 776 223 688 126  curveto
600 30 497 -18 380 -18  curveto
298 -18 232 7 181 57  curveto
104 -18 lineto
closepath
230 156 moveto
688 602 lineto
656 672 605 707 534 707  curveto
451 707 378 660 315 567  curveto
252 474 220 367 220 246  curveto
220 208 223 178 230 156  curveto
closepath
701 563 moveto
245 119 lineto
280 52 332 19 399 19  curveto
479 19 551 64 616 156  curveto
681 248 713 351 713 464  curveto
713 494 709 527 701 563  curveto
closepath
fill
		} def

	/OE
		{
981 0 moveto
547 0 lineto
556 42 lineto
502 1 440 -18 372 -18  curveto
292 -18 228 5 181 54  curveto
134 103 111 169 111 252  curveto
111 385 154 499 240 596  curveto
327 692 429 741 547 741  curveto
600 741 646 724 687 691  curveto
692 722 lineto
1098 722 lineto
1072 596 lineto
1018 596 lineto
1020 605 lineto
1025 646 lineto
1029 664 lineto
1026 677 998 683 946 683  curveto
789 683 lineto
731 394 lineto
870 394 lineto
900 396 lineto
922 396 935 405 939 423  curveto
941 429 943 437 945 445  curveto
948 454 lineto
993 454 lineto
961 295 lineto
916 295 lineto
917 304 lineto
919 319 920 330 920 336  curveto
920 346 913 352 897 353  curveto
862 355 lineto
723 355 lineto
678 126 lineto
674 108 672 90 672 73  curveto
672 60 677 51 686 47  curveto
694 43 714 42 744 42  curveto
821 42 lineto
868 42 899 44 913 48  curveto
927 52 936 63 940 79  curveto
949 114 lineto
951 123 lineto
1005 123 lineto
981 0 lineto
closepath
602 263 moveto
657 548 lineto
660 562 661 576 661 589  curveto
661 624 650 652 627 673  curveto
604 694 574 705 536 705  curveto
450 705 375 658 313 565  curveto
250 472 219 362 219 234  curveto
219 169 235 116 269 76  curveto
302 36 346 16 399 16  curveto
455 16 499 34 529 72  curveto
560 109 584 173 602 263  curveto
closepath
fill
		} def

	/ordmasculine
		{
265 349 moveto
225 349 195 359 175 377  curveto
155 396 146 425 146 462  curveto
146 533 173 597 227 654  curveto
282 712 343 740 411 740  curveto
451 740 481 731 501 712  curveto
521 693 531 665 531 627  curveto
531 556 504 492 449 435  curveto
395 378 333 349 265 349  curveto
closepath
308 386 moveto
343 386 375 408 404 452  curveto
434 496 448 544 448 597  curveto
448 632 442 658 429 675  curveto
416 693 397 702 371 702  curveto
336 702 303 680 274 637  curveto
245 593 230 545 230 493  curveto
230 457 236 431 249 413  curveto
262 395 282 386 308 386  curveto
closepath
fill
		} def

	/ae
		{
869 82 moveto
773 19 687 -12 610 -12  curveto
559 -12 520 3 495 33  curveto
470 63 457 109 457 170  curveto
458 220 lineto
412 142 365 83 318 44  curveto
270 5 222 -14 174 -14  curveto
147 -14 124 -2 105 20  curveto
87 44 78 73 78 107  curveto
78 214 115 313 190 404  curveto
264 495 345 540 433 540  curveto
458 540 487 537 520 530  curveto
609 530 lineto
599 472 lineto
662 519 720 542 772 542  curveto
804 542 830 532 850 513  curveto
871 494 881 470 881 441  curveto
881 375 851 321 791 279  curveto
730 237 650 213 548 208  curveto
548 184 lineto
548 137 558 102 577 78  curveto
597 55 626 43 665 43  curveto
730 43 801 71 876 127  curveto
869 82 lineto
closepath
473 295 moveto
507 465 lineto
469 484 429 494 387 494  curveto
339 494 299 472 269 427  curveto
245 392 224 345 207 287  curveto
190 228 181 175 181 128  curveto
181 81 196 58 227 58  curveto
258 58 294 78 335 117  curveto
376 157 422 216 473 295  curveto
closepath
550 233 moveto
624 239 682 258 724 291  curveto
767 323 788 366 788 417  curveto
788 443 782 463 771 476  curveto
761 489 745 495 723 495  curveto
680 495 642 470 610 421  curveto
577 372 557 309 550 233  curveto
closepath
fill
		} def

	/dotlessi
		{
102 0 moveto
183 403 lineto
188 430 190 453 190 473  curveto
190 487 178 495 153 497  curveto
120 499 lineto
111 500 lineto
117 530 lineto
304 530 lineto
224 126 lineto
218 99 216 76 216 57  curveto
216 42 228 34 253 33  curveto
286 30 lineto
295 30 lineto
289 0 lineto
102 0 lineto
closepath
fill
		} def

	/lslash
		{
207 423 moveto
251 644 lineto
256 671 259 694 259 714  curveto
259 728 246 736 221 737  curveto
189 740 lineto
180 740 lineto
186 771 lineto
373 771 lineto
314 479 lineto
436 542 lineto
427 500 lineto
306 437 lineto
245 126 lineto
239 99 236 76 236 57  curveto
236 42 249 34 274 33  curveto
307 30 lineto
315 30 lineto
310 0 lineto
123 0 lineto
199 382 lineto
78 319 lineto
86 361 lineto
207 423 lineto
closepath
fill
		} def

	/oslash
		{
94 -12 moveto
42 -12 lineto
114 59 lineto
95 95 86 132 86 169  curveto
86 266 120 353 187 428  curveto
255 504 333 542 419 542  curveto
462 542 500 527 533 497  curveto
574 542 lineto
625 542 lineto
557 467 lineto
574 432 582 396 582 360  curveto
582 262 548 176 481 100  curveto
414 25 337 -12 250 -12  curveto
207 -12 169 1 136 29  curveto
94 -12 lineto
closepath
191 139 moveto
471 432 lineto
452 480 423 504 382 504  curveto
332 504 287 470 248 403  curveto
209 335 189 258 189 172  curveto
189 164 190 153 191 139  curveto
closepath
479 386 moveto
199 95 lineto
217 46 247 21 289 21  curveto
339 21 383 56 422 124  curveto
461 192 480 270 480 358  curveto
480 364 480 373 479 386  curveto
closepath
fill
		} def

	/oe
		{
879 82 moveto
786 19 699 -12 620 -12  curveto
547 -12 498 22 474 91  curveto
404 22 329 -12 250 -12  curveto
201 -12 161 4 131 36  curveto
101 69 86 112 86 166  curveto
86 265 120 353 187 428  curveto
254 504 332 542 419 542  curveto
493 542 542 507 568 438  curveto
638 507 709 542 782 542  curveto
814 542 840 532 861 513  curveto
882 494 892 470 892 441  curveto
892 375 862 321 802 279  curveto
741 237 660 213 559 208  curveto
559 184 lineto
559 90 598 43 676 43  curveto
741 43 811 71 887 127  curveto
879 82 lineto
closepath
188 172 moveto
188 73 221 23 287 23  curveto
337 23 382 57 420 125  curveto
459 193 479 271 479 360  curveto
479 457 446 505 382 505  curveto
331 505 286 471 247 404  curveto
208 336 188 259 188 172  curveto
closepath
562 235 moveto
635 240 693 260 736 292  curveto
778 325 799 367 799 419  curveto
799 471 777 497 734 497  curveto
691 497 654 472 621 423  curveto
589 374 569 311 562 235  curveto
closepath
fill
		} def

	/germandbls
		{
64 -192 moveto
213 555 lineto
228 631 255 687 293 726  curveto
331 764 381 783 442 783  curveto
483 783 517 772 543 750  curveto
569 729 582 701 582 668  curveto
582 634 564 601 527 570  curveto
483 534 lineto
459 514 lineto
427 486 410 461 410 438  curveto
410 419 425 395 454 368  curveto
532 293 lineto
579 249 602 205 602 162  curveto
602 114 583 73 545 39  curveto
506 4 461 -12 408 -12  curveto
372 -12 331 -3 285 13  curveto
306 120 lineto
354 120 lineto
353 111 lineto
350 85 lineto
348 69 347 59 347 55  curveto
347 29 368 16 412 16  curveto
441 16 467 27 488 49  curveto
509 72 520 98 520 129  curveto
520 159 503 190 470 221  curveto
389 297 lineto
349 334 330 367 330 396  curveto
330 425 349 457 387 491  curveto
409 510 lineto
436 534 456 558 469 583  curveto
483 608 490 633 490 660  curveto
490 689 484 710 473 725  curveto
461 739 444 746 421 746  curveto
393 746 371 734 356 711  curveto
341 688 327 644 314 579  curveto
161 -192 lineto
64 -192 lineto
closepath
fill
		} def

	/.notdef
		{
0 0 moveto
1000 0 lineto
1000 1000 lineto
0 1000 lineto
0 0 lineto
closepath
50 50 moveto
950 50 lineto
950 950 lineto
50 950 lineto
50 50 lineto
closepath
fill
		} def

	end				% close glyph dict. 
	currentdict			% actually put dict on the stack
	end			% close the dictionary now
	/LucidaBright-Italic exch definefont pop
/LucidaBright-Italic findfont 18.0 scalefont setfont
(x) show
Q
Q
newpath
0.0 0.0 m
0.0 390.0 l
390.0 390.0 l
390.0 0.0 l
h
W
Q
[ 1.0 0.0 0.0 1.0 5.0 5.0 ] defaultmatrix matrix concatmatrix setmatrix
0.0 0.0 translate
q
q
1 46 340 OPL
46 345
-5.0 -5.0 translate
45.0 370.0 moveto
q 1 -1 scale
9 dict begin
/FontType 3 def
/FontMatrix [0.0010 0 0 0.0010 0 0]def
/FontBBox [0 -210 1652 952 ] def
	/Encoding 256 array def
			0 1 255 {Encoding exch /.notdef put}for
		Encoding 32 /space put
		Encoding 33 /exclam put
		Encoding 34 /quotedbl put
		Encoding 35 /numbersign put
		Encoding 36 /dollar put
		Encoding 37 /percent put
		Encoding 38 /ampersand put
		Encoding 39 /quoteright put
		Encoding 40 /parenleft put
		Encoding 41 /parenright put
		Encoding 42 /asterisk put
		Encoding 43 /plus put
		Encoding 44 /comma put
		Encoding 45 /hyphen put
		Encoding 46 /period put
		Encoding 47 /slash put
		Encoding 48 /zero put
		Encoding 49 /one put
		Encoding 50 /two put
		Encoding 51 /three put
		Encoding 52 /four put
		Encoding 53 /five put
		Encoding 54 /six put
		Encoding 55 /seven put
		Encoding 56 /eight put
		Encoding 57 /nine put
		Encoding 58 /colon put
		Encoding 59 /semicolon put
		Encoding 60 /less put
		Encoding 61 /equal put
		Encoding 62 /greater put
		Encoding 63 /question put
		Encoding 64 /at put
		Encoding 65 /A put
		Encoding 66 /B put
		Encoding 67 /C put
		Encoding 68 /D put
		Encoding 69 /E put
		Encoding 70 /F put
		Encoding 71 /G put
		Encoding 72 /H put
		Encoding 73 /I put
		Encoding 74 /J put
		Encoding 75 /K put
		Encoding 76 /L put
		Encoding 77 /M put
		Encoding 78 /N put
		Encoding 79 /O put
		Encoding 80 /P put
		Encoding 81 /Q put
		Encoding 82 /R put
		Encoding 83 /S put
		Encoding 84 /T put
		Encoding 85 /U put
		Encoding 86 /V put
		Encoding 87 /W put
		Encoding 88 /X put
		Encoding 89 /Y put
		Encoding 90 /Z put
		Encoding 91 /bracketleft put
		Encoding 92 /backslash put
		Encoding 93 /bracketright put
		Encoding 94 /asciicircum put
		Encoding 95 /underscore put
		Encoding 96 /quoteleft put
		Encoding 97 /a put
		Encoding 98 /b put
		Encoding 99 /c put
		Encoding 100 /d put
		Encoding 101 /e put
		Encoding 102 /f put
		Encoding 103 /g put
		Encoding 104 /h put
		Encoding 105 /i put
		Encoding 106 /j put
		Encoding 107 /k put
		Encoding 108 /l put
		Encoding 109 /m put
		Encoding 110 /n put
		Encoding 111 /o put
		Encoding 112 /p put
		Encoding 113 /q put
		Encoding 114 /r put
		Encoding 115 /s put
		Encoding 116 /t put
		Encoding 117 /u put
		Encoding 118 /v put
		Encoding 119 /w put
		Encoding 120 /x put
		Encoding 121 /y put
		Encoding 122 /z put
		Encoding 123 /braceleft put
		Encoding 124 /bar put
		Encoding 125 /braceright put
		Encoding 126 /asciitilde put
		Encoding 161 /exclamdown put
		Encoding 162 /cent put
		Encoding 163 /sterling put
		Encoding 164 /fraction put
		Encoding 165 /yen put
		Encoding 166 /florin put
		Encoding 167 /section put
		Encoding 168 /currency put
		Encoding 169 /quotesingle put
		Encoding 170 /quotedblleft put
		Encoding 171 /guillemotleft put
		Encoding 172 /guilsinglleft put
		Encoding 173 /guilsinglright put
		Encoding 174 /fi put
		Encoding 175 /fl put
		Encoding 177 /endash put
		Encoding 178 /dagger put
		Encoding 179 /daggerdbl put
		Encoding 180 /periodcentered put
		Encoding 182 /paragraph put
		Encoding 183 /bullet put
		Encoding 184 /quotesinglbase put
		Encoding 185 /quotedblbase put
		Encoding 186 /quotedblright put
		Encoding 187 /guillemotright put
		Encoding 188 /ellipsis put
		Encoding 189 /perthousand put
		Encoding 191 /questiondown put
		Encoding 193 /grave put
		Encoding 194 /acute put
		Encoding 195 /circumflex put
		Encoding 196 /tilde put
		Encoding 197 /macron put
		Encoding 198 /breve put
		Encoding 199 /dotaccent put
		Encoding 200 /dieresis put
		Encoding 202 /ring put
		Encoding 203 /cedilla put
		Encoding 205 /hungarumlaut put
		Encoding 206 /ogonek put
		Encoding 207 /caron put
		Encoding 208 /emdash put
		Encoding 225 /AE put
		Encoding 227 /ordfeminine put
		Encoding 232 /Lslash put
		Encoding 233 /Oslash put
		Encoding 234 /OE put
		Encoding 235 /ordmasculine put
		Encoding 241 /ae put
		Encoding 245 /dotlessi put
		Encoding 248 /lslash put
		Encoding 249 /oslash put
		Encoding 250 /oe put
		Encoding 251 /germandbls put
	/BuildGlyph
		{ 2 copy exch /Metrics get exch 
			2 copy known {get}{pop pop 1000.0} ifelse
			0
			0 -210 1652 952
			setcachedevice
			exch /CharProcs get exch
			2 copy known not
					{pop /.notdef}
				if
			get exec
		} bind def

	/BuildChar
		{ 1 index /Encoding get exch get
		  1 index /BuildGlyph get exec
	  } bind def
	/Metrics 150 dict def
		Metrics begin
		/.notdef 1000 def
		/space 329.58984375 def
		/exclam 313.4765625 def
		/quotedbl 451.66015625 def
		/numbersign 659.66796875 def
		/dollar 659.66796875 def
		/percent 783.203125 def
		/ampersand 744.62890625 def
		/quoteright 247.0703125 def
		/parenleft 370.60546875 def
		/parenright 370.60546875 def
		/asterisk 466.30859375 def
		/plus 795.41015625 def
		/comma 247.0703125 def
		/hyphen 638.671875 def
		/period 247.0703125 def
		/slash 565.4296875 def
		/zero 659.66796875 def
		/one 659.66796875 def
		/two 659.66796875 def
		/three 659.66796875 def
		/four 659.66796875 def
		/five 659.66796875 def
		/six 659.66796875 def
		/seven 659.66796875 def
		/eight 659.66796875 def
		/nine 659.66796875 def
		/colon 247.0703125 def
		/semicolon 247.0703125 def
		/less 795.41015625 def
		/equal 795.41015625 def
		/greater 795.41015625 def
		/question 497.0703125 def
		/at 844.23828125 def
		/A 736.328125 def
		/B 629.8828125 def
		/C 712.40234375 def
		/D 792.96875 def
		/E 600.5859375 def
		/F 574.21875 def
		/G 745.60546875 def
		/H 780.2734375 def
		/I 331.54296875 def
		/J 418.45703125 def
		/K 709.9609375 def
		/L 581.54296875 def
		/M 907.71484375 def
		/N 768.5546875 def
		/O 823.2421875 def
		/P 613.28125 def
		/Q 823.73046875 def
		/R 689.94140625 def
		/S 571.2890625 def
		/T 689.94140625 def
		/U 736.328125 def
		/V 698.73046875 def
		/W 903.80859375 def
		/X 666.9921875 def
		/Y 686.5234375 def
		/Z 644.53125 def
		/bracketleft 370.60546875 def
		/backslash 565.4296875 def
		/bracketright 370.60546875 def
		/asciicircum 659.66796875 def
		/underscore 500.0 def
		/quoteleft 638.671875 def
		/a 587.890625 def
		/b 662.59765625 def
		/c 532.2265625 def
		/d 662.59765625 def
		/e 585.9375 def
		/f 414.55078125 def
		/g 659.66796875 def
		/h 656.73828125 def
		/i 325.1953125 def
		/j 333.0078125 def
		/k 632.8125 def
		/l 325.1953125 def
		/m 969.7265625 def
		/n 656.73828125 def
		/o 638.671875 def
		/p 662.59765625 def
		/q 662.59765625 def
		/r 454.58984375 def
		/s 565.4296875 def
		/t 405.2734375 def
		/u 656.73828125 def
		/v 593.26171875 def
		/w 862.79296875 def
		/x 590.8203125 def
		/y 583.0078125 def
		/z 590.8203125 def
		/braceleft 370.60546875 def
		/bar 385.7421875 def
		/braceright 370.60546875 def
		/asciitilde 794.921875 def
		/exclamdown 313.4765625 def
		/cent 659.66796875 def
		/sterling 659.66796875 def
		/fraction 0.0 def
		/yen 659.66796875 def
		/florin 659.66796875 def
		/section 659.66796875 def
		/currency 659.66796875 def
		/quotesingle 247.0703125 def
		/quotedblleft 451.66015625 def
		/guillemotleft 569.3359375 def
		/guilsinglleft 346.19140625 def
		/guilsinglright 346.19140625 def
		/fi 677.734375 def
		/fl 677.734375 def
		/endash 638.671875 def
		/dagger 659.66796875 def
		/daggerdbl 659.66796875 def
		/periodcentered 638.671875 def
		/paragraph 659.66796875 def
		/bullet 623.53515625 def
		/quotesinglbase 247.0703125 def
		/quotedblbase 451.66015625 def
		/quotedblright 451.66015625 def
		/guillemotright 569.3359375 def
		/ellipsis 1000.0 def
		/perthousand 1162.59765625 def
		/questiondown 497.0703125 def
		/grave 638.671875 def
		/acute 638.671875 def
		/circumflex 638.671875 def
		/tilde 638.671875 def
		/macron 500.0 def
		/breve 638.671875 def
		/dotaccent 638.671875 def
		/dieresis 638.671875 def
		/ring 638.671875 def
		/cedilla 638.671875 def
		/hungarumlaut 750.0 def
		/ogonek 638.671875 def
		/caron 638.671875 def
		/emdash 638.671875 def
		/AE 957.51953125 def
		/ordfeminine 481.93359375 def
		/Lslash 587.40234375 def
		/Oslash 823.2421875 def
		/OE 1059.08203125 def
		/ordmasculine 481.93359375 def
		/ae 882.8125 def
		/dotlessi 325.1953125 def
		/lslash 355.46875 def
		/oslash 638.671875 def
		/oe 959.9609375 def
		/germandbls 661.1328125 def
	end
	/CharProcs 150 dict def
	CharProcs begin
			%define Glyph dictionary and start filling
	/space
		{
fill
		} def

	/exclam
		{
84 0 moveto
84 120 lineto
229 120 lineto
229 0 lineto
84 0 lineto
closepath
108 204 moveto
84 578 lineto
84 722 lineto
229 722 lineto
229 578 lineto
205 204 lineto
108 204 lineto
closepath
fill
		} def

	/quotedbl
		{
72 481 moveto
48 771 lineto
192 771 lineto
162 481 lineto
72 481 lineto
closepath
289 481 moveto
265 771 lineto
409 771 lineto
379 481 lineto
289 481 lineto
closepath
fill
		} def

	/numbersign
		{
100 0 moveto
152 208 lineto
19 208 lineto
33 280 lineto
170 280 lineto
211 442 lineto
65 442 lineto
80 515 lineto
229 515 lineto
281 722 lineto
355 722 lineto
304 515 lineto
432 515 lineto
483 722 lineto
558 722 lineto
506 515 lineto
640 515 lineto
625 442 lineto
488 442 lineto
447 280 lineto
593 280 lineto
579 208 lineto
429 208 lineto
377 0 lineto
303 0 lineto
355 208 lineto
227 208 lineto
175 0 lineto
100 0 lineto
closepath
245 280 moveto
373 280 lineto
414 442 lineto
286 442 lineto
245 280 lineto
closepath
fill
		} def

	/dollar
		{
296 -78 moveto
296 1 lineto
242 1 176 14 99 38  curveto
99 144 lineto
171 111 237 93 296 90  curveto
296 322 lineto
271 339 lineto
212 379 171 413 150 441  curveto
130 469 119 503 119 542  curveto
119 591 135 631 167 664  curveto
198 696 242 715 296 722  curveto
296 801 lineto
375 801 lineto
375 722 lineto
426 719 478 709 530 691  curveto
530 593 lineto
477 618 425 633 375 637  curveto
375 418 lineto
397 404 lineto
458 364 500 331 522 303  curveto
543 275 554 241 554 200  curveto
554 147 538 103 506 68  curveto
474 32 430 10 375 1  curveto
375 -78 lineto
296 -78 lineto
closepath
360 96 moveto
406 110 430 139 430 182  curveto
430 214 406 247 360 280  curveto
360 96 lineto
closepath
312 459 moveto
312 633 lineto
267 618 244 592 244 553  curveto
244 519 267 488 312 459  curveto
closepath
fill
		} def

	/percent
		{
58 -18 moveto
626 740 lineto
724 740 lineto
156 -18 lineto
58 -18 lineto
closepath
182 361 moveto
129 361 88 377 57 409  curveto
27 442 12 486 12 542  curveto
12 598 27 642 58 674  curveto
88 706 130 722 184 722  curveto
237 722 278 706 309 674  curveto
340 642 355 598 355 542  curveto
355 485 340 441 309 409  curveto
278 377 236 361 182 361  curveto
closepath
183 433 moveto
225 433 247 469 247 542  curveto
247 614 226 650 184 650  curveto
141 650 120 614 120 542  curveto
120 469 141 433 183 433  curveto
closepath
597 0 moveto
545 0 503 16 473 48  curveto
442 80 427 125 427 180  curveto
427 236 443 281 473 313  curveto
504 345 546 361 599 361  curveto
652 361 694 345 725 313  curveto
755 281 771 237 771 181  curveto
771 124 755 79 725 47  curveto
694 15 652 0 597 0  curveto
closepath
598 72 moveto
641 72 662 108 662 181  curveto
662 253 641 289 599 289  curveto
557 289 536 252 536 180  curveto
536 108 556 72 598 72  curveto
closepath
fill
		} def

	/ampersand
		{
691 0 moveto
521 0 lineto
489 38 lineto
432 0 370 -18 301 -18  curveto
223 -18 159 3 109 47  curveto
58 90 33 146 33 213  curveto
33 312 93 387 213 437  curveto
178 497 161 547 161 585  curveto
161 629 180 666 219 696  curveto
257 726 304 741 361 741  curveto
415 741 460 726 495 698  curveto
530 669 548 632 548 587  curveto
548 518 495 459 388 409  curveto
430 333 478 260 535 192  curveto
568 240 584 306 584 391  curveto
584 402 lineto
706 402 lineto
706 296 667 201 590 119  curveto
622 78 656 38 691 0  curveto
closepath
262 362 moveto
203 335 173 294 173 239  curveto
173 193 188 154 218 123  curveto
247 91 284 75 327 75  curveto
364 75 399 86 432 109  curveto
378 177 327 251 280 332  curveto
262 362 lineto
closepath
343 477 moveto
399 506 427 542 427 584  curveto
427 628 406 650 363 650  curveto
320 650 298 629 298 587  curveto
298 559 313 522 343 477  curveto
closepath
fill
		} def

	/quoteright
		{
78 469 moveto
48 771 lineto
205 771 lineto
168 469 lineto
78 469 lineto
closepath
fill
		} def

	/parenleft
		{
322 776 moveto
322 683 lineto
235 596 192 472 192 313  curveto
192 153 235 30 322 -57  curveto
322 -150 lineto
243 -107 179 -44 131 40  curveto
83 125 60 216 60 313  curveto
60 410 83 501 130 584  curveto
177 667 241 731 322 776  curveto
closepath
fill
		} def

	/parenright
		{
48 776 moveto
48 683 lineto
135 596 178 472 178 313  curveto
178 153 135 30 48 -57  curveto
48 -150 lineto
127 -107 191 -44 239 40  curveto
287 125 310 216 310 313  curveto
310 410 287 501 240 584  curveto
193 667 129 731 48 776  curveto
closepath
fill
		} def

	/asterisk
		{
266 576 moveto
391 646 lineto
423 545 lineto
281 528 lineto
282 532 282 535 282 538  curveto
282 552 277 564 266 576  curveto
closepath
279 519 moveto
383 421 lineto
298 359 lineto
237 489 lineto
256 492 269 502 279 519  curveto
closepath
228 489 moveto
167 359 lineto
82 421 lineto
187 519 lineto
196 502 209 492 228 489  curveto
closepath
184 528 moveto
42 545 lineto
74 646 lineto
199 576 lineto
188 564 183 552 183 538  curveto
183 535 183 532 184 528  curveto
closepath
180 722 moveto
285 722 lineto
258 582 lineto
250 586 241 588 232 588  curveto
224 588 215 586 207 582  curveto
180 722 lineto
closepath
fill
		} def

	/plus
		{
355 0 moveto
355 247 lineto
108 247 lineto
108 331 lineto
355 331 lineto
355 578 lineto
439 578 lineto
439 331 lineto
686 331 lineto
686 247 lineto
439 247 lineto
439 0 lineto
355 0 lineto
closepath
fill
		} def

	/comma
		{
105 0 moveto
45 0 lineto
45 156 lineto
202 156 lineto
202 35 lineto
202 -92 149 -156 45 -156  curveto
45 -102 lineto
85 -102 105 -73 105 -15  curveto
105 0 lineto
closepath
fill
		} def

	/hyphen
		{
96 265 moveto
96 355 lineto
542 355 lineto
542 265 lineto
96 265 lineto
closepath
fill
		} def

	/period
		{
45 0 moveto
45 156 lineto
202 156 lineto
202 0 lineto
45 0 lineto
closepath
fill
		} def

	/slash
		{
108 -144 moveto
368 722 lineto
456 722 lineto
196 -144 lineto
108 -144 lineto
closepath
fill
		} def

	/zero
		{
326 -18 moveto
244 -18 177 17 126 87  curveto
75 157 49 249 49 361  curveto
49 474 75 566 126 636  curveto
178 705 246 740 330 740  curveto
413 740 480 705 532 636  curveto
584 566 609 475 609 363  curveto
609 247 584 155 532 85  curveto
480 16 412 -18 326 -18  curveto
closepath
328 72 moveto
413 72 456 168 456 361  curveto
456 554 414 650 330 650  curveto
245 650 203 554 203 361  curveto
203 168 245 72 328 72  curveto
closepath
fill
		} def

	/one
		{
140 0 moveto
140 84 lineto
285 84 lineto
285 617 lineto
140 581 lineto
140 668 lineto
430 740 lineto
430 84 lineto
574 84 lineto
574 0 lineto
140 0 lineto
closepath
fill
		} def

	/two
		{
71 0 moveto
71 114 lineto
79 125 lineto
118 176 158 220 198 255  curveto
257 308 lineto
355 394 403 469 403 534  curveto
403 609 360 647 274 647  curveto
221 647 160 629 90 593  curveto
90 699 lineto
163 727 235 740 303 740  curveto
380 740 442 722 488 686  curveto
534 649 557 601 557 540  curveto
557 498 546 460 523 425  curveto
501 391 461 351 405 305  curveto
356 266 lineto
288 211 248 161 235 114  curveto
554 114 lineto
554 0 lineto
71 0 lineto
closepath
fill
		} def

	/three
		{
98 5 moveto
98 113 lineto
170 86 229 72 275 72  curveto
319 72 353 83 380 105  curveto
406 127 419 157 419 193  curveto
419 289 349 336 209 336  curveto
165 336 lineto
165 423 lineto
203 423 lineto
333 423 399 466 399 552  curveto
399 617 359 650 278 650  curveto
225 650 168 636 108 609  curveto
108 708 lineto
171 730 238 741 309 741  curveto
383 741 441 725 484 695  curveto
526 664 547 622 547 568  curveto
547 483 494 422 387 387  curveto
509 359 570 294 570 192  curveto
570 127 545 76 497 38  curveto
448 0 381 -18 297 -18  curveto
226 -18 160 -10 98 5  curveto
closepath
fill
		} def

	/four
		{
384 0 moveto
384 192 lineto
46 192 lineto
46 301 lineto
378 722 lineto
510 722 lineto
510 301 lineto
595 301 lineto
595 192 lineto
510 192 lineto
510 0 lineto
384 0 lineto
closepath
162 301 moveto
387 301 lineto
387 584 lineto
162 301 lineto
closepath
fill
		} def

	/five
		{
124 2 moveto
124 107 lineto
185 84 236 72 277 72  curveto
319 72 351 84 376 109  curveto
400 133 412 166 412 208  curveto
412 312 338 364 189 364  curveto
171 364 154 362 136 359  curveto
136 722 lineto
551 722 lineto
551 608 lineto
242 608 lineto
234 452 lineto
339 452 420 431 478 388  curveto
537 346 566 286 566 209  curveto
566 139 540 83 489 42  curveto
438 2 368 -18 279 -18  curveto
242 -18 190 -11 124 2  curveto
closepath
fill
		} def

	/six
		{
200 383 moveto
245 437 303 465 374 465  curveto
438 465 492 444 534 401  curveto
576 359 598 305 598 240  curveto
598 164 573 102 524 54  curveto
476 6 413 -18 336 -18  curveto
246 -18 176 13 125 77  curveto
75 141 50 230 50 344  curveto
50 470 79 567 136 636  curveto
193 706 274 741 378 741  curveto
427 741 487 732 560 714  curveto
560 609 lineto
494 637 435 650 383 650  curveto
325 650 280 627 248 580  curveto
216 533 200 467 200 383  curveto
closepath
453 216 moveto
453 265 442 304 421 333  curveto
399 362 370 376 333 376  curveto
297 376 267 363 243 337  curveto
219 311 207 279 207 240  curveto
207 190 218 149 242 118  curveto
266 87 297 72 335 72  curveto
371 72 400 85 421 111  curveto
442 137 453 172 453 216  curveto
closepath
fill
		} def

	/seven
		{
149 0 moveto
156 54 170 102 190 143  curveto
210 184 255 255 325 357  curveto
495 605 lineto
119 605 lineto
119 722 lineto
613 722 lineto
613 605 lineto
518 486 444 372 390 265  curveto
336 158 310 69 310 0  curveto
149 0 lineto
closepath
fill
		} def

	/eight
		{
213 387 moveto
144 433 109 488 109 553  curveto
109 609 131 654 175 689  curveto
219 723 276 741 348 741  curveto
415 741 468 726 509 696  curveto
549 667 569 627 569 578  curveto
569 514 528 453 447 396  curveto
550 343 601 275 601 194  curveto
601 130 576 79 526 40  curveto
476 1 410 -18 329 -18  curveto
251 -18 188 0 140 35  curveto
93 71 69 118 69 177  curveto
69 262 117 332 213 387  curveto
closepath
372 437 moveto
420 475 444 515 444 558  curveto
444 586 434 608 414 625  curveto
394 642 368 650 335 650  curveto
305 650 281 643 262 628  curveto
243 613 234 594 234 570  curveto
234 547 243 526 262 509  curveto
280 491 317 467 372 437  curveto
closepath
285 338 moveto
232 295 206 249 206 200  curveto
206 162 219 131 245 107  curveto
272 83 305 70 345 70  curveto
381 70 410 80 434 99  curveto
458 118 470 142 470 171  curveto
470 196 462 217 446 234  curveto
430 252 399 274 352 300  curveto
285 338 lineto
closepath
fill
		} def

	/nine
		{
101 5 moveto
101 109 lineto
163 84 220 72 273 72  curveto
330 72 375 95 408 143  curveto
441 190 458 255 458 336  curveto
412 281 355 254 288 254  curveto
225 254 171 276 128 320  curveto
85 364 63 418 63 482  curveto
63 558 87 619 136 668  curveto
185 716 248 740 324 740  curveto
413 740 483 708 534 645  curveto
585 582 610 494 610 382  curveto
610 257 580 159 521 88  curveto
461 17 379 -18 274 -18  curveto
229 -18 172 -10 101 5  curveto
closepath
208 505 moveto
208 455 218 415 240 386  curveto
262 357 291 343 328 343  curveto
363 343 393 356 417 382  curveto
441 409 453 441 453 479  curveto
453 531 441 572 418 603  curveto
394 634 363 650 325 650  curveto
289 650 260 637 239 611  curveto
218 585 208 549 208 505  curveto
closepath
fill
		} def

	/colon
		{
51 0 moveto
51 144 lineto
195 144 lineto
195 0 lineto
51 0 lineto
closepath
51 391 moveto
51 536 lineto
195 536 lineto
195 391 lineto
51 391 lineto
closepath
fill
		} def

	/semicolon
		{
105 0 moveto
51 0 lineto
51 144 lineto
195 144 lineto
195 35 lineto
195 -84 147 -148 51 -156  curveto
51 -102 lineto
87 -92 105 -62 105 -15  curveto
105 0 lineto
closepath
51 391 moveto
51 536 lineto
195 536 lineto
195 391 lineto
51 391 lineto
closepath
fill
		} def

	/less
		{
686 0 moveto
108 289 lineto
686 578 lineto
686 483 lineto
297 289 lineto
297 288 lineto
686 94 lineto
686 0 lineto
closepath
fill
		} def

	/equal
		{
108 150 moveto
108 234 lineto
686 234 lineto
686 150 lineto
108 150 lineto
closepath
108 343 moveto
108 427 lineto
686 427 lineto
686 343 lineto
108 343 lineto
closepath
fill
		} def

	/greater
		{
108 0 moveto
686 289 lineto
108 578 lineto
108 483 lineto
497 289 lineto
497 288 lineto
108 94 lineto
108 0 lineto
closepath
fill
		} def

	/question
		{
136 0 moveto
136 120 lineto
281 120 lineto
281 0 lineto
136 0 lineto
closepath
281 204 moveto
136 204 lineto
136 218 lineto
136 270 160 323 208 376  curveto
243 415 lineto
290 466 313 513 313 553  curveto
313 614 275 644 199 644  curveto
150 644 93 630 30 601  curveto
30 711 lineto
95 730 158 740 220 740  curveto
297 740 358 725 403 696  curveto
447 666 470 626 470 575  curveto
470 528 443 479 389 428  curveto
356 397 lineto
326 368 306 343 296 323  curveto
286 303 281 278 281 246  curveto
281 204 lineto
closepath
fill
		} def

	/at
		{
518 21 moveto
461 -4 404 -18 347 -18  curveto
254 -18 178 10 118 66  curveto
59 123 29 194 29 282  curveto
29 391 69 492 148 583  curveto
239 688 351 740 485 740  curveto
576 740 653 711 714 653  curveto
775 595 806 522 806 435  curveto
806 353 781 284 731 228  curveto
681 172 620 144 547 144  curveto
494 144 467 162 467 197  curveto
467 213 476 250 495 310  curveto
484 310 lineto
459 261 428 221 392 190  curveto
355 159 321 144 289 144  curveto
230 144 201 182 201 257  curveto
201 334 227 406 280 472  curveto
333 539 389 572 451 572  curveto
458 572 469 571 482 569  curveto
502 566 523 565 546 565  curveto
612 565 lineto
558 292 lineto
554 276 552 260 552 245  curveto
552 223 565 212 590 212  curveto
629 212 664 234 695 280  curveto
727 325 743 375 743 430  curveto
743 500 718 559 668 606  curveto
619 654 557 677 484 677  curveto
372 677 276 633 198 545  curveto
127 466 92 378 92 283  curveto
92 214 116 156 163 112  curveto
211 67 272 44 346 44  curveto
396 44 446 56 497 80  curveto
518 21 lineto
closepath
493 402 moveto
512 493 lineto
486 505 463 511 442 511  curveto
400 511 364 488 334 442  curveto
304 397 289 342 289 279  curveto
289 239 300 219 323 219  curveto
340 219 366 237 400 274  curveto
434 310 465 353 493 402  curveto
closepath
fill
		} def

	/A
		{
11 0 moveto
292 722 lineto
442 722 lineto
724 0 lineto
569 0 lineto
494 192 lineto
195 192 lineto
120 0 lineto
11 0 lineto
closepath
232 289 moveto
457 289 lineto
345 577 lineto
232 289 lineto
closepath
fill
		} def

	/B
		{
90 0 moveto
90 722 lineto
335 722 lineto
408 722 463 708 501 681  curveto
539 654 558 614 558 562  curveto
558 475 500 413 385 377  curveto
520 344 587 278 587 178  curveto
587 121 568 76 528 46  curveto
489 15 432 0 358 0  curveto
90 0 lineto
closepath
231 421 moveto
267 421 lineto
309 421 343 432 368 453  curveto
393 473 405 502 405 538  curveto
405 571 395 593 375 605  curveto
355 617 317 623 262 623  curveto
231 623 lineto
231 421 lineto
closepath
231 102 moveto
264 102 lineto
327 102 370 109 394 122  curveto
418 136 430 160 430 196  curveto
430 233 414 264 382 288  curveto
350 312 310 325 261 325  curveto
231 325 lineto
231 102 lineto
closepath
fill
		} def

	/C
		{
671 28 moveto
601 -2 518 -18 421 -18  curveto
302 -18 210 15 144 82  curveto
78 148 45 241 45 361  curveto
45 483 78 576 145 642  curveto
211 707 306 740 430 740  curveto
508 740 587 731 665 712  curveto
665 595 lineto
576 626 502 641 443 641  curveto
367 641 308 617 267 569  curveto
225 520 205 452 205 363  curveto
205 276 227 208 271 159  curveto
316 110 377 85 457 85  curveto
528 85 599 103 671 139  curveto
671 28 lineto
closepath
fill
		} def

	/D
		{
90 0 moveto
90 722 lineto
401 722 lineto
513 722 599 692 658 633  curveto
718 574 748 488 748 376  curveto
748 257 716 164 653 98  curveto
590 32 501 0 388 0  curveto
90 0 lineto
closepath
240 102 moveto
353 102 lineto
432 102 491 124 530 168  curveto
568 212 588 278 588 367  curveto
588 436 572 494 541 540  curveto
520 571 494 593 463 605  curveto
433 617 389 623 331 623  curveto
240 623 lineto
240 102 lineto
closepath
fill
		} def

	/E
		{
90 0 moveto
90 722 lineto
542 722 lineto
542 623 lineto
240 623 lineto
240 421 lineto
487 421 lineto
487 325 lineto
240 325 lineto
240 102 lineto
564 102 lineto
564 0 lineto
90 0 lineto
closepath
fill
		} def

	/F
		{
90 0 moveto
90 722 lineto
544 722 lineto
544 623 lineto
240 623 lineto
240 403 lineto
490 403 lineto
490 304 lineto
240 304 lineto
240 0 lineto
90 0 lineto
closepath
fill
		} def

	/G
		{
667 17 moveto
576 -6 498 -18 433 -18  curveto
308 -18 212 14 145 80  curveto
78 145 45 239 45 362  curveto
45 483 78 577 145 642  curveto
212 708 307 740 431 740  curveto
510 740 589 731 667 712  curveto
667 595 lineto
576 626 502 641 444 641  curveto
368 641 309 617 267 568  curveto
225 519 205 450 205 360  curveto
205 274 227 206 271 156  curveto
316 107 378 83 456 83  curveto
473 83 493 85 517 90  curveto
517 328 lineto
667 328 lineto
667 17 lineto
closepath
fill
		} def

	/H
		{
90 0 moveto
90 722 lineto
240 722 lineto
240 429 lineto
539 429 lineto
539 722 lineto
689 722 lineto
689 0 lineto
539 0 lineto
539 329 lineto
240 329 lineto
240 0 lineto
90 0 lineto
closepath
fill
		} def

	/I
		{
90 0 moveto
90 722 lineto
240 722 lineto
240 0 lineto
90 0 lineto
closepath
fill
		} def

	/J
		{
-33 -126 moveto
-34 -19 lineto
4 -34 45 -42 86 -42  curveto
120 -42 144 -32 157 -13  curveto
170 5 177 40 177 89  curveto
177 722 lineto
328 722 lineto
328 105 lineto
328 17 310 -46 273 -85  curveto
237 -125 178 -144 96 -144  curveto
55 -144 12 -138 -33 -126  curveto
closepath
fill
		} def

	/K
		{
90 0 moveto
90 722 lineto
234 722 lineto
234 372 lineto
511 722 lineto
636 722 lineto
385 398 lineto
696 0 lineto
508 0 lineto
234 355 lineto
234 0 lineto
90 0 lineto
closepath
fill
		} def

	/L
		{
90 0 moveto
90 722 lineto
240 722 lineto
240 102 lineto
566 102 lineto
566 0 lineto
90 0 lineto
closepath
fill
		} def

	/M
		{
90 0 moveto
90 722 lineto
289 722 lineto
463 214 lineto
642 722 lineto
817 722 lineto
817 0 lineto
678 0 lineto
678 545 lineto
502 48 lineto
381 48 lineto
208 552 lineto
208 0 lineto
90 0 lineto
closepath
fill
		} def

	/N
		{
90 0 moveto
90 722 lineto
222 722 lineto
557 229 lineto
557 722 lineto
678 722 lineto
678 0 lineto
543 0 lineto
210 493 lineto
210 0 lineto
90 0 lineto
closepath
fill
		} def

	/O
		{
407 -18 moveto
297 -18 209 16 144 85  curveto
78 154 45 246 45 361  curveto
45 477 78 569 144 638  curveto
210 706 299 740 412 740  curveto
523 740 612 706 678 638  curveto
745 569 778 478 778 362  curveto
778 244 745 152 678 83  curveto
612 15 522 -18 407 -18  curveto
closepath
409 81 moveto
473 81 524 106 562 157  curveto
599 208 618 276 618 363  curveto
618 447 599 514 562 565  curveto
524 616 474 641 412 641  curveto
349 641 299 616 261 565  curveto
223 514 205 446 205 361  curveto
205 277 223 209 261 158  curveto
298 107 347 81 409 81  curveto
closepath
fill
		} def

	/P
		{
90 0 moveto
90 722 lineto
342 722 lineto
430 722 492 707 530 678  curveto
568 649 586 599 586 530  curveto
586 452 561 391 511 348  curveto
461 304 390 283 300 283  curveto
237 283 lineto
237 0 lineto
90 0 lineto
closepath
237 382 moveto
267 382 lineto
318 382 359 394 388 418  curveto
418 442 433 474 433 515  curveto
433 587 387 623 296 623  curveto
237 623 lineto
237 382 lineto
closepath
fill
		} def

	/Q
		{
775 -144 moveto
646 -110 540 -67 459 -15  curveto
435 -17 418 -18 406 -18  curveto
297 -18 209 16 144 85  curveto
78 154 45 246 45 361  curveto
45 477 78 569 144 638  curveto
210 706 299 740 412 740  curveto
524 740 613 706 679 637  curveto
745 569 778 476 778 359  curveto
778 195 714 81 585 16  curveto
680 -15 776 -37 873 -47  curveto
775 -144 lineto
closepath
409 81 moveto
473 81 524 106 562 157  curveto
599 207 618 276 618 362  curveto
618 447 599 514 562 565  curveto
524 616 474 641 412 641  curveto
349 641 299 616 261 565  curveto
223 514 205 446 205 361  curveto
205 277 223 209 261 158  curveto
298 107 348 81 409 81  curveto
closepath
fill
		} def

	/R
		{
90 0 moveto
90 722 lineto
360 722 lineto
507 722 581 662 581 543  curveto
581 498 568 458 543 421  curveto
518 385 484 356 440 337  curveto
677 0 lineto
494 0 lineto
314 295 lineto
231 295 lineto
231 0 lineto
90 0 lineto
closepath
231 394 moveto
266 394 lineto
375 394 430 438 430 526  curveto
430 591 381 623 284 623  curveto
231 623 lineto
231 394 lineto
closepath
fill
		} def

	/S
		{
49 6 moveto
49 130 lineto
127 97 194 81 249 81  curveto
288 81 318 90 341 107  curveto
363 124 374 148 374 177  curveto
374 201 367 220 353 237  curveto
339 253 312 272 273 294  curveto
225 321 lineto
160 357 115 392 88 426  curveto
61 459 48 498 48 542  curveto
48 602 70 650 114 686  curveto
157 722 215 740 287 740  curveto
345 740 410 732 482 715  curveto
482 600 lineto
408 627 350 641 307 641  curveto
273 641 247 634 227 619  curveto
207 604 197 585 197 561  curveto
197 541 204 523 218 508  curveto
232 493 258 475 297 453  curveto
349 424 lineto
418 385 466 349 493 316  curveto
519 284 532 243 532 196  curveto
532 129 507 77 458 39  curveto
408 0 339 -18 251 -18  curveto
194 -18 126 -9 49 6  curveto
closepath
fill
		} def

	/T
		{
269 0 moveto
269 623 lineto
10 623 lineto
10 722 lineto
679 722 lineto
679 623 lineto
420 623 lineto
420 0 lineto
269 0 lineto
closepath
fill
		} def

	/U
		{
84 722 moveto
234 722 lineto
234 279 lineto
234 209 246 159 269 128  curveto
292 97 329 81 381 81  curveto
430 81 466 96 488 125  curveto
510 155 521 203 521 269  curveto
521 722 lineto
651 722 lineto
651 278 lineto
651 212 645 161 632 126  curveto
620 91 597 60 563 35  curveto
517 0 455 -18 378 -18  curveto
295 -18 228 0 178 38  curveto
143 64 119 95 105 131  curveto
91 166 84 216 84 280  curveto
84 722 lineto
closepath
fill
		} def

	/V
		{
279 0 moveto
12 722 lineto
172 722 lineto
379 163 lineto
580 722 lineto
688 722 lineto
430 0 lineto
279 0 lineto
closepath
fill
		} def

	/W
		{
190 0 moveto
10 722 lineto
152 722 lineto
284 193 lineto
408 722 lineto
534 722 lineto
652 196 lineto
791 722 lineto
895 722 lineto
705 0 lineto
562 0 lineto
450 495 lineto
333 0 lineto
190 0 lineto
closepath
fill
		} def

	/X
		{
23 0 moveto
255 355 lineto
34 722 lineto
209 722 lineto
356 479 lineto
515 722 lineto
637 722 lineto
415 381 lineto
645 0 lineto
470 0 lineto
313 258 lineto
145 0 lineto
23 0 lineto
closepath
fill
		} def

	/Y
		{
262 0 moveto
262 302 lineto
19 722 lineto
185 722 lineto
361 417 lineto
545 722 lineto
665 722 lineto
412 303 lineto
412 0 lineto
262 0 lineto
closepath
fill
		} def

	/Z
		{
51 0 moveto
51 102 lineto
411 623 lineto
72 623 lineto
72 722 lineto
585 722 lineto
585 623 lineto
226 102 lineto
585 102 lineto
585 0 lineto
51 0 lineto
closepath
fill
		} def

	/bracketleft
		{
96 -144 moveto
96 771 lineto
322 771 lineto
322 686 lineto
216 686 lineto
216 -60 lineto
322 -60 lineto
322 -144 lineto
96 -144 lineto
closepath
fill
		} def

	/backslash
		{
456 -144 moveto
196 722 lineto
108 722 lineto
368 -144 lineto
456 -144 lineto
closepath
fill
		} def

	/bracketright
		{
274 -144 moveto
274 771 lineto
48 771 lineto
48 686 lineto
154 686 lineto
154 -60 lineto
48 -60 lineto
48 -144 lineto
274 -144 lineto
closepath
fill
		} def

	/asciicircum
		{
618 192 moveto
524 192 lineto
330 581 lineto
329 581 lineto
134 192 lineto
40 192 lineto
329 771 lineto
618 192 lineto
closepath
fill
		} def

	/underscore
		{
42 -78 moveto
42 0 lineto
457 0 lineto
457 -78 lineto
42 -78 lineto
closepath
fill
		} def

	/quoteleft
		{
423 626 moveto
330 626 lineto
173 783 lineto
305 783 lineto
423 626 lineto
closepath
fill
		} def

	/a
		{
353 57 moveto
304 11 253 -12 198 -12  curveto
151 -12 113 2 83 30  curveto
54 59 40 96 40 142  curveto
40 201 63 246 111 279  curveto
158 311 226 327 314 327  curveto
353 327 lineto
353 375 lineto
353 431 321 459 257 459  curveto
201 459 144 443 86 411  curveto
86 511 lineto
152 535 217 548 281 548  curveto
421 548 491 492 491 380  curveto
491 143 lineto
491 101 505 80 532 80  curveto
537 80 543 81 551 82  curveto
554 1 lineto
524 -7 497 -12 473 -12  curveto
414 -12 376 11 359 57  curveto
353 57 lineto
closepath
353 135 moveto
353 244 lineto
318 244 lineto
225 244 178 214 178 156  curveto
178 136 185 119 198 106  curveto
212 92 229 85 249 85  curveto
282 85 317 102 353 135  curveto
closepath
fill
		} def

	/b
		{
90 0 moveto
90 771 lineto
234 771 lineto
234 435 lineto
271 510 330 548 410 548  curveto
474 548 525 524 562 477  curveto
599 430 617 365 617 282  curveto
617 193 596 121 555 68  curveto
513 14 457 -12 388 -12  curveto
328 -12 277 9 234 54  curveto
208 0 lineto
90 0 lineto
closepath
234 140 moveto
270 101 307 81 347 81  curveto
382 81 410 98 432 133  curveto
453 167 463 213 463 270  curveto
463 380 428 435 357 435  curveto
315 435 274 407 234 352  curveto
234 140 lineto
closepath
fill
		} def

	/c
		{
485 11 moveto
425 -4 370 -12 319 -12  curveto
233 -12 166 12 116 63  curveto
66 113 42 181 42 268  curveto
42 356 67 424 118 474  curveto
169 523 240 548 330 548  curveto
374 548 424 541 481 527  curveto
481 422 lineto
422 442 374 451 339 451  curveto
296 451 261 435 234 401  curveto
208 368 195 324 195 269  curveto
195 213 209 168 238 134  curveto
266 100 304 83 352 83  curveto
395 83 439 92 485 111  curveto
485 11 lineto
closepath
fill
		} def

	/d
		{
427 0 moveto
427 101 lineto
390 25 332 -12 252 -12  curveto
187 -12 137 11 100 58  curveto
63 105 45 170 45 253  curveto
45 343 66 414 107 468  curveto
149 521 204 548 274 548  curveto
330 548 381 526 427 481  curveto
427 771 lineto
572 771 lineto
572 0 lineto
427 0 lineto
closepath
427 396 moveto
392 435 355 454 315 454  curveto
280 454 252 437 230 403  curveto
209 369 199 323 199 265  curveto
199 155 234 101 304 101  curveto
347 101 388 128 427 183  curveto
427 396 lineto
closepath
fill
		} def

	/e
		{
526 18 moveto
458 -2 393 -12 331 -12  curveto
242 -12 171 13 119 63  curveto
67 114 42 184 42 271  curveto
42 354 65 421 113 472  curveto
160 523 222 548 300 548  curveto
379 548 436 523 472 474  curveto
508 424 526 346 526 239  curveto
194 239 lineto
204 137 260 85 362 85  curveto
411 85 465 97 526 119  curveto
526 18 lineto
closepath
192 320 moveto
384 320 lineto
384 412 355 458 296 458  curveto
236 458 201 412 192 320  curveto
closepath
fill
		} def

	/f
		{
105 0 moveto
105 445 lineto
31 445 lineto
31 536 lineto
105 536 lineto
105 574 lineto
105 713 171 783 303 783  curveto
345 783 389 777 435 764  curveto
435 667 lineto
394 684 357 692 324 692  curveto
274 692 250 655 250 580  curveto
250 536 lineto
385 536 lineto
385 445 lineto
250 445 lineto
250 0 lineto
105 0 lineto
closepath
fill
		} def

	/g
		{
94 -166 moveto
105 -61 lineto
165 -88 222 -102 276 -102  curveto
329 -102 368 -91 392 -68  curveto
415 -45 427 -8 427 42  curveto
427 115 lineto
392 38 334 0 253 0  curveto
189 0 139 23 101 71  curveto
64 119 45 183 45 265  curveto
45 350 66 419 108 470  curveto
150 522 206 548 275 548  curveto
330 548 381 526 427 481  curveto
442 536 lineto
572 536 lineto
572 126 lineto
572 45 567 -13 557 -49  curveto
547 -85 528 -116 500 -142  curveto
451 -183 383 -204 296 -204  curveto
234 -204 166 -191 94 -166  curveto
closepath
427 199 moveto
427 397 lineto
392 436 356 456 318 456  curveto
281 456 252 439 231 406  curveto
209 373 199 328 199 272  curveto
199 168 232 115 300 115  curveto
346 115 389 143 427 199  curveto
closepath
fill
		} def

	/h
		{
90 0 moveto
90 771 lineto
234 771 lineto
234 435 lineto
282 510 342 548 417 548  curveto
465 548 503 533 530 502  curveto
558 472 572 431 572 378  curveto
572 0 lineto
427 0 lineto
427 343 lineto
427 404 407 434 367 434  curveto
321 434 277 402 234 337  curveto
234 0 lineto
90 0 lineto
closepath
fill
		} def

	/i
		{
90 0 moveto
90 536 lineto
234 536 lineto
234 0 lineto
90 0 lineto
closepath
90 626 moveto
90 747 lineto
234 747 lineto
234 626 lineto
90 626 lineto
closepath
fill
		} def

	/j
		{
-87 -182 moveto
-87 -85 lineto
-45 -104 -9 -114 20 -114  curveto
48 -114 68 -105 80 -88  curveto
92 -70 98 -41 98 0  curveto
98 536 lineto
242 536 lineto
242 9 lineto
242 -65 225 -119 192 -153  curveto
159 -187 105 -205 32 -205  curveto
0 -205 -39 -197 -87 -182  curveto
closepath
98 626 moveto
98 747 lineto
242 747 lineto
242 626 lineto
98 626 lineto
closepath
fill
		} def

	/k
		{
90 0 moveto
90 771 lineto
234 771 lineto
234 286 lineto
244 286 lineto
435 536 lineto
555 536 lineto
378 306 lineto
610 0 lineto
434 0 lineto
244 268 lineto
234 268 lineto
234 0 lineto
90 0 lineto
closepath
fill
		} def

	/l
		{
90 0 moveto
90 771 lineto
234 771 lineto
234 0 lineto
90 0 lineto
closepath
fill
		} def

	/m
		{
90 0 moveto
90 536 lineto
229 536 lineto
229 435 lineto
271 510 331 548 409 548  curveto
450 548 483 538 509 518  curveto
535 498 551 470 557 435  curveto
607 510 667 548 738 548  curveto
836 548 885 494 885 386  curveto
885 0 lineto
747 0 lineto
747 338 lineto
747 402 725 434 683 434  curveto
640 434 598 402 557 340  curveto
557 0 lineto
418 0 lineto
418 338 lineto
418 402 397 434 354 434  curveto
311 434 270 403 229 340  curveto
229 0 lineto
90 0 lineto
closepath
fill
		} def

	/n
		{
90 0 moveto
90 536 lineto
234 536 lineto
234 435 lineto
282 510 342 548 417 548  curveto
465 548 503 533 530 502  curveto
558 472 572 431 572 378  curveto
572 0 lineto
427 0 lineto
427 343 lineto
427 404 407 434 367 434  curveto
321 434 277 402 234 337  curveto
234 0 lineto
90 0 lineto
closepath
fill
		} def

	/o
		{
315 -12 moveto
231 -12 165 13 115 63  curveto
66 114 42 182 42 268  curveto
42 354 66 423 116 473  curveto
166 523 233 548 318 548  curveto
404 548 472 523 521 473  curveto
571 423 596 354 596 269  curveto
596 181 571 112 521 62  curveto
471 12 403 -12 315 -12  curveto
closepath
317 78 moveto
400 78 442 141 442 269  curveto
442 327 431 373 409 407  curveto
387 441 357 458 318 458  curveto
280 458 250 441 228 407  curveto
206 373 195 326 195 268  curveto
195 209 206 163 228 129  curveto
250 95 280 78 317 78  curveto
closepath
fill
		} def

	/p
		{
90 -192 moveto
90 536 lineto
234 536 lineto
234 435 lineto
271 510 330 548 410 548  curveto
474 548 525 524 562 477  curveto
599 430 617 365 617 282  curveto
617 192 596 121 555 67  curveto
513 14 457 -12 387 -12  curveto
331 -12 280 9 234 54  curveto
234 -192 lineto
90 -192 lineto
closepath
234 140 moveto
270 101 307 81 347 81  curveto
382 81 410 98 432 133  curveto
453 167 463 213 463 270  curveto
463 380 428 435 357 435  curveto
315 435 274 407 234 352  curveto
234 140 lineto
closepath
fill
		} def

	/q
		{
427 -192 moveto
427 101 lineto
390 25 332 -12 252 -12  curveto
187 -12 137 11 100 58  curveto
63 105 45 170 45 253  curveto
45 343 66 414 107 468  curveto
149 521 204 548 274 548  curveto
330 548 381 526 427 481  curveto
445 536 lineto
572 536 lineto
572 -192 lineto
427 -192 lineto
closepath
427 396 moveto
392 435 355 454 315 454  curveto
280 454 252 437 230 403  curveto
209 369 199 323 199 265  curveto
199 155 234 101 304 101  curveto
347 101 388 128 427 183  curveto
427 396 lineto
closepath
fill
		} def

	/r
		{
90 0 moveto
90 536 lineto
234 536 lineto
234 435 lineto
272 510 329 548 405 548  curveto
414 548 423 547 432 545  curveto
432 416 lineto
412 423 393 427 375 427  curveto
317 427 270 398 234 340  curveto
234 0 lineto
90 0 lineto
closepath
fill
		} def

	/s
		{
76 17 moveto
76 123 lineto
147 93 208 78 259 78  curveto
319 78 348 98 348 138  curveto
348 164 324 187 275 207  curveto
226 226 lineto
173 248 135 271 112 295  curveto
90 320 78 351 78 387  curveto
78 438 97 477 136 506  curveto
175 534 229 548 299 548  curveto
342 548 394 541 455 529  curveto
455 427 lineto
397 447 349 458 311 458  curveto
251 458 221 439 221 402  curveto
221 377 243 357 287 340  curveto
329 324 lineto
392 300 436 276 460 251  curveto
485 227 497 196 497 157  curveto
497 107 476 66 434 34  curveto
392 3 338 -12 271 -12  curveto
207 -12 141 -2 76 17  curveto
closepath
fill
		} def

	/t
		{
366 2 moveto
332 -7 305 -12 285 -12  curveto
159 -12 97 46 97 163  curveto
97 445 lineto
37 445 lineto
37 536 lineto
97 536 lineto
97 626 lineto
241 643 lineto
241 536 lineto
356 536 lineto
356 445 lineto
241 445 lineto
241 182 lineto
241 116 268 83 322 83  curveto
334 83 349 86 366 90  curveto
366 2 lineto
closepath
fill
		} def

	/u
		{
421 0 moveto
421 101 lineto
375 25 314 -12 239 -12  curveto
191 -12 153 2 125 33  curveto
98 63 84 104 84 157  curveto
84 536 lineto
229 536 lineto
229 192 lineto
229 132 249 101 290 101  curveto
335 101 379 133 421 198  curveto
421 536 lineto
566 536 lineto
566 0 lineto
421 0 lineto
closepath
fill
		} def

	/v
		{
222 0 moveto
18 536 lineto
170 536 lineto
320 149 lineto
469 536 lineto
573 536 lineto
367 0 lineto
222 0 lineto
closepath
fill
		} def

	/w
		{
185 0 moveto
36 536 lineto
170 536 lineto
275 160 lineto
388 536 lineto
513 536 lineto
614 158 lineto
728 536 lineto
828 536 lineto
669 0 lineto
530 0 lineto
433 367 lineto
323 0 lineto
185 0 lineto
closepath
fill
		} def

	/x
		{
33 0 moveto
217 269 lineto
41 536 lineto
205 536 lineto
320 366 lineto
431 536 lineto
548 536 lineto
380 272 lineto
560 0 lineto
396 0 lineto
275 177 lineto
152 0 lineto
33 0 lineto
closepath
fill
		} def

	/y
		{
92 -192 moveto
213 0 lineto
15 536 lineto
170 536 lineto
303 177 lineto
460 536 lineto
570 536 lineto
239 -192 lineto
92 -192 lineto
closepath
fill
		} def

	/z
		{
60 0 moveto
60 96 lineto
359 445 lineto
73 445 lineto
73 536 lineto
530 536 lineto
530 445 lineto
230 96 lineto
536 96 lineto
536 0 lineto
60 0 lineto
closepath
fill
		} def

	/braceleft
		{
48 361 moveto
72 361 lineto
117 361 139 382 139 424  curveto
139 447 136 470 130 494  curveto
119 539 lineto
111 568 108 596 108 622  curveto
108 668 126 705 162 731  curveto
197 757 247 771 310 771  curveto
310 686 lineto
256 683 229 662 229 624  curveto
229 614 231 599 234 580  curveto
241 538 lineto
245 516 247 493 247 469  curveto
247 402 215 350 150 313  curveto
215 275 247 223 247 157  curveto
247 133 245 110 241 87  curveto
234 46 lineto
231 26 229 11 229 2  curveto
229 -35 256 -56 310 -60  curveto
310 -144 lineto
247 -144 197 -131 162 -104  curveto
126 -78 108 -42 108 3  curveto
108 30 111 57 119 86  curveto
130 131 lineto
136 155 139 179 139 202  curveto
139 244 117 265 72 265  curveto
48 265 lineto
48 361 lineto
closepath
fill
		} def

	/bar
		{
150 -144 moveto
150 771 lineto
234 771 lineto
234 -144 lineto
150 -144 lineto
closepath
fill
		} def

	/braceright
		{
310 361 moveto
286 361 lineto
241 361 219 382 219 424  curveto
219 447 222 470 228 494  curveto
239 539 lineto
247 568 250 596 250 622  curveto
250 668 232 705 196 731  curveto
161 757 111 771 48 771  curveto
48 686 lineto
102 683 129 662 129 624  curveto
129 614 127 599 124 580  curveto
117 538 lineto
113 516 111 493 111 469  curveto
111 402 143 350 208 313  curveto
143 275 111 223 111 157  curveto
111 133 113 110 117 87  curveto
124 46 lineto
127 26 129 11 129 2  curveto
129 -35 102 -56 48 -60  curveto
48 -144 lineto
111 -144 161 -131 196 -104  curveto
232 -78 250 -42 250 3  curveto
250 30 247 57 239 86  curveto
228 131 lineto
222 155 219 179 219 202  curveto
219 244 241 265 286 265  curveto
310 265 lineto
310 361 lineto
closepath
fill
		} def

	/asciitilde
		{
163 216 moveto
108 216 lineto
108 329 154 386 248 386  curveto
284 386 334 372 397 344  curveto
440 325 lineto
498 299 538 286 560 286  curveto
608 286 631 310 631 356  curveto
631 361 lineto
686 361 lineto
686 248 639 191 546 191  curveto
510 191 460 205 397 233  curveto
354 253 lineto
296 278 256 291 234 291  curveto
187 291 163 268 163 221  curveto
163 216 lineto
closepath
fill
		} def

	/exclamdown
		{
229 536 moveto
229 415 lineto
84 415 lineto
84 536 lineto
229 536 lineto
closepath
205 331 moveto
229 -42 lineto
229 -186 lineto
84 -186 lineto
84 -42 lineto
108 331 lineto
205 331 lineto
closepath
fill
		} def

	/cent
		{
342 0 moveto
342 85 lineto
261 90 197 117 151 167  curveto
105 217 82 283 82 367  curveto
82 451 104 517 149 565  curveto
193 613 258 640 342 647  curveto
342 722 lineto
420 722 lineto
420 646 lineto
463 644 504 637 543 627  curveto
543 521 lineto
499 540 458 551 420 553  curveto
420 182 lineto
462 185 503 194 543 209  curveto
543 110 lineto
502 98 461 90 420 87  curveto
420 0 lineto
342 0 lineto
closepath
342 190 moveto
342 552 lineto
272 531 237 471 237 374  curveto
237 277 272 216 342 190  curveto
closepath
fill
		} def

	/sterling
		{
120 0 moveto
120 114 lineto
156 122 181 137 195 157  curveto
209 177 216 209 216 251  curveto
216 340 lineto
137 340 lineto
137 430 lineto
216 430 lineto
216 513 lineto
216 665 289 741 436 741  curveto
475 741 518 737 566 729  curveto
566 630 lineto
527 643 489 650 453 650  curveto
392 650 361 615 361 545  curveto
361 430 lineto
456 430 lineto
456 340 lineto
361 340 lineto
361 276 354 229 341 201  curveto
327 172 299 143 255 114  curveto
573 114 lineto
573 0 lineto
120 0 lineto
closepath
fill
		} def

	/fraction
		{
-304 -18 moveto
226 740 lineto
304 740 lineto
-226 -18 lineto
-304 -18 lineto
closepath
fill
		} def

	/yen
		{
253 0 moveto
253 147 lineto
126 147 lineto
126 219 lineto
253 219 lineto
253 292 lineto
126 292 lineto
126 364 lineto
249 364 lineto
30 722 lineto
192 722 lineto
354 457 lineto
527 722 lineto
634 722 lineto
402 364 lineto
524 364 lineto
524 292 lineto
398 292 lineto
398 219 lineto
524 219 lineto
524 147 lineto
398 147 lineto
398 0 lineto
253 0 lineto
closepath
fill
		} def

	/florin
		{
115 -144 moveto
211 340 lineto
121 340 lineto
121 430 lineto
229 430 lineto
239 474 lineto
277 652 370 740 518 740  curveto
557 740 595 737 629 730  curveto
622 632 lineto
582 644 547 650 517 650  curveto
451 650 410 606 393 517  curveto
376 430 lineto
499 430 lineto
499 340 lineto
358 340 lineto
262 -144 lineto
115 -144 lineto
closepath
fill
		} def

	/section
		{
106 -135 moveto
106 -28 lineto
188 -57 257 -72 311 -72  curveto
392 -72 433 -49 433 -3  curveto
433 13 427 26 416 36  curveto
404 47 380 60 343 76  curveto
268 108 lineto
209 134 167 160 142 188  curveto
117 215 104 249 104 289  curveto
104 339 128 389 177 437  curveto
126 470 101 511 101 562  curveto
101 616 123 659 168 692  curveto
212 724 271 741 344 741  curveto
403 741 466 734 533 721  curveto
533 621 lineto
469 640 410 650 356 650  curveto
276 650 235 628 235 583  curveto
235 556 261 532 313 511  curveto
378 484 lineto
445 457 492 429 519 401  curveto
545 373 559 338 559 294  curveto
559 246 535 196 488 145  curveto
540 111 566 66 566 10  curveto
566 -45 543 -88 497 -118  curveto
450 -148 383 -163 296 -163  curveto
243 -163 179 -153 106 -135  curveto
closepath
420 183 moveto
439 208 449 232 449 254  curveto
449 275 442 292 428 306  curveto
415 319 389 334 350 352  curveto
245 399 lineto
226 375 217 352 217 331  curveto
217 292 251 258 319 228  curveto
420 183 lineto
closepath
fill
		} def

	/currency
		{
449 541 moveto
546 638 lineto
606 578 lineto
509 481 lineto
534 443 546 403 546 361  curveto
546 319 534 279 509 241  curveto
605 144 lineto
546 84 lineto
449 181 lineto
449 181 lineto
410 156 370 144 329 144  curveto
288 144 248 156 208 181  curveto
208 181 lineto
112 84 lineto
52 144 lineto
149 241 lineto
125 279 112 319 112 361  curveto
112 403 125 443 149 481  curveto
52 578 lineto
112 638 lineto
208 541 lineto
248 565 288 578 329 578  curveto
370 578 410 565 449 541  curveto
closepath
330 469 moveto
299 469 274 459 252 437  curveto
231 416 220 391 220 360  curveto
220 331 231 305 252 284  curveto
274 263 299 252 329 252  curveto
359 252 384 263 406 284  curveto
427 305 437 331 437 361  curveto
437 390 427 416 406 437  curveto
385 459 359 469 330 469  curveto
closepath
fill
		} def

	/quotesingle
		{
78 469 moveto
48 771 lineto
205 771 lineto
168 469 lineto
78 469 lineto
closepath
fill
		} def

	/quotedblleft
		{
135 614 moveto
189 614 lineto
189 469 lineto
45 469 lineto
45 579 lineto
45 698 93 762 189 771  curveto
189 716 lineto
153 706 135 677 135 629  curveto
135 614 lineto
closepath
352 614 moveto
406 614 lineto
406 469 lineto
262 469 lineto
262 579 lineto
262 698 310 762 406 771  curveto
406 716 lineto
370 706 352 677 352 629  curveto
352 614 lineto
closepath
fill
		} def

	/guillemotleft
		{
536 433 moveto
407 268 lineto
536 102 lineto
468 51 lineto
264 268 lineto
468 484 lineto
536 433 lineto
closepath
312 432 moveto
185 268 lineto
312 102 lineto
245 51 lineto
42 268 lineto
245 484 lineto
312 432 lineto
closepath
fill
		} def

	/guilsinglleft
		{
312 433 moveto
185 268 lineto
312 102 lineto
245 51 lineto
42 268 lineto
245 484 lineto
312 433 lineto
closepath
fill
		} def

	/guilsinglright
		{
33 433 moveto
160 268 lineto
33 102 lineto
100 51 lineto
304 268 lineto
100 484 lineto
33 433 lineto
closepath
fill
		} def

	/fi
		{
105 0 moveto
105 445 lineto
31 445 lineto
31 536 lineto
105 536 lineto
105 573 lineto
105 640 121 692 153 728  curveto
185 765 231 783 290 783  curveto
326 783 365 776 406 763  curveto
406 664 lineto
366 682 336 691 316 691  curveto
272 691 250 650 250 569  curveto
250 536 lineto
587 536 lineto
587 0 lineto
442 0 lineto
442 445 lineto
250 445 lineto
250 0 lineto
105 0 lineto
closepath
466 626 moveto
466 747 lineto
587 747 lineto
587 626 lineto
466 626 lineto
closepath
fill
		} def

	/fl
		{
373 445 moveto
250 445 lineto
250 0 lineto
105 0 lineto
105 445 lineto
31 445 lineto
31 536 lineto
105 536 lineto
105 569 lineto
105 712 173 783 309 783  curveto
344 783 387 779 438 771  curveto
587 771 lineto
587 0 lineto
442 0 lineto
442 677 lineto
414 688 387 693 359 693  curveto
286 693 250 656 250 581  curveto
250 536 lineto
373 536 lineto
373 445 lineto
closepath
fill
		} def

	/endash
		{
96 265 moveto
96 355 lineto
542 355 lineto
542 265 lineto
96 265 lineto
closepath
fill
		} def

	/dagger
		{
257 -144 moveto
269 391 lineto
97 379 lineto
97 487 lineto
269 476 lineto
257 722 lineto
401 722 lineto
389 476 lineto
561 487 lineto
561 379 lineto
389 391 lineto
401 -144 lineto
257 -144 lineto
closepath
fill
		} def

	/daggerdbl
		{
257 -144 moveto
269 102 lineto
97 90 lineto
97 198 lineto
269 186 lineto
269 391 lineto
97 379 lineto
97 487 lineto
269 476 lineto
257 722 lineto
401 722 lineto
389 476 lineto
561 487 lineto
561 379 lineto
389 391 lineto
389 186 lineto
561 198 lineto
561 90 lineto
389 102 lineto
401 -144 lineto
257 -144 lineto
closepath
fill
		} def

	/periodcentered
		{
241 229 moveto
241 385 lineto
397 385 lineto
397 229 lineto
241 229 lineto
closepath
fill
		} def

	/paragraph
		{
275 -144 moveto
275 361 lineto
147 378 83 445 83 561  curveto
83 619 98 660 129 685  curveto
161 710 212 722 284 722  curveto
504 722 lineto
504 -144 lineto
426 -144 lineto
426 656 lineto
354 656 lineto
354 -144 lineto
275 -144 lineto
closepath
fill
		} def

	/bullet
		{
307 72 moveto
243 72 187 96 140 143  curveto
94 191 70 247 70 312  curveto
70 379 94 436 141 483  curveto
188 530 245 554 311 554  curveto
378 554 435 530 482 483  curveto
529 436 552 378 552 311  curveto
552 245 528 188 481 142  curveto
433 95 375 72 307 72  curveto
closepath
fill
		} def

	/quotesinglbase
		{
105 0 moveto
45 0 lineto
45 156 lineto
202 156 lineto
202 35 lineto
202 -92 149 -156 45 -156  curveto
45 -102 lineto
85 -102 105 -73 105 -15  curveto
105 0 lineto
closepath
fill
		} def

	/quotedblbase
		{
99 0 moveto
45 0 lineto
45 144 lineto
189 144 lineto
189 35 lineto
189 -84 141 -148 45 -156  curveto
45 -102 lineto
81 -92 99 -62 99 -15  curveto
99 0 lineto
closepath
316 0 moveto
262 0 lineto
262 144 lineto
406 144 lineto
406 35 lineto
406 -84 358 -148 262 -156  curveto
262 -102 lineto
298 -92 316 -62 316 -15  curveto
316 0 lineto
closepath
fill
		} def

	/quotedblright
		{
99 626 moveto
45 626 lineto
45 771 lineto
189 771 lineto
189 662 lineto
189 542 141 478 45 469  curveto
45 523 lineto
81 534 99 563 99 611  curveto
99 626 lineto
closepath
316 626 moveto
262 626 lineto
262 771 lineto
406 771 lineto
406 662 lineto
406 542 358 478 262 469  curveto
262 523 lineto
298 534 316 563 316 611  curveto
316 626 lineto
closepath
fill
		} def

	/guillemotright
		{
32 433 moveto
161 268 lineto
32 102 lineto
100 51 lineto
304 268 lineto
100 484 lineto
32 433 lineto
closepath
256 432 moveto
383 268 lineto
256 102 lineto
323 51 lineto
527 268 lineto
323 484 lineto
256 432 lineto
closepath
fill
		} def

	/ellipsis
		{
112 0 moveto
112 108 lineto
220 108 lineto
220 0 lineto
112 0 lineto
closepath
445 0 moveto
445 108 lineto
554 108 lineto
554 0 lineto
445 0 lineto
closepath
778 0 moveto
778 108 lineto
887 108 lineto
887 0 lineto
778 0 lineto
closepath
fill
		} def

	/perthousand
		{
58 -18 moveto
626 740 lineto
724 740 lineto
156 -18 lineto
58 -18 lineto
closepath
182 361 moveto
129 361 88 377 57 409  curveto
27 442 12 486 12 542  curveto
12 598 27 642 58 674  curveto
88 706 130 722 184 722  curveto
237 722 278 706 309 674  curveto
340 642 355 598 355 542  curveto
355 485 340 441 309 409  curveto
278 377 236 361 182 361  curveto
closepath
183 433 moveto
225 433 247 469 247 542  curveto
247 614 226 650 184 650  curveto
141 650 120 614 120 542  curveto
120 469 141 433 183 433  curveto
closepath
597 0 moveto
545 0 503 16 473 48  curveto
442 80 427 125 427 180  curveto
427 236 443 281 473 313  curveto
504 345 546 361 599 361  curveto
652 361 694 345 725 313  curveto
755 281 771 237 771 181  curveto
771 124 755 79 725 47  curveto
694 15 652 0 597 0  curveto
closepath
598 72 moveto
641 72 662 108 662 181  curveto
662 253 641 289 599 289  curveto
557 289 536 252 536 180  curveto
536 108 556 72 598 72  curveto
closepath
977 0 moveto
924 0 883 16 853 48  curveto
822 80 807 125 807 180  curveto
807 236 822 281 853 313  curveto
883 345 925 361 979 361  curveto
1032 361 1074 345 1104 313  curveto
1135 281 1150 237 1150 181  curveto
1150 124 1135 79 1104 47  curveto
1073 15 1031 0 977 0  curveto
closepath
978 72 moveto
1021 72 1042 108 1042 181  curveto
1042 253 1021 289 979 289  curveto
937 289 916 252 916 180  curveto
916 108 936 72 978 72  curveto
closepath
fill
		} def

	/questiondown
		{
360 536 moveto
360 415 lineto
216 415 lineto
216 536 lineto
360 536 lineto
closepath
216 331 moveto
360 331 lineto
360 317 lineto
360 265 336 212 288 159  curveto
254 121 lineto
207 69 184 23 184 -17  curveto
184 -78 222 -108 298 -108  curveto
347 -108 403 -93 467 -64  curveto
467 -175 lineto
402 -194 338 -204 276 -204  curveto
199 -204 138 -189 94 -160  curveto
49 -130 27 -90 27 -39  curveto
27 7 54 56 107 107  curveto
140 138 lineto
170 167 191 192 201 212  curveto
211 232 216 258 216 290  curveto
216 331 lineto
closepath
fill
		} def

	/grave
		{
423 626 moveto
330 626 lineto
173 783 lineto
305 783 lineto
423 626 lineto
closepath
fill
		} def

	/acute
		{
226 626 moveto
343 783 lineto
476 783 lineto
319 626 lineto
226 626 lineto
closepath
fill
		} def

	/circumflex
		{
134 626 moveto
252 783 lineto
385 783 lineto
503 626 lineto
416 626 lineto
319 722 lineto
318 722 lineto
222 626 lineto
134 626 lineto
closepath
fill
		} def

	/tilde
		{
219 626 moveto
147 626 lineto
147 678 155 717 171 743  curveto
188 770 212 783 245 783  curveto
266 783 287 776 307 762  curveto
326 749 lineto
341 738 lineto
362 724 376 716 385 716  curveto
396 716 404 722 410 733  curveto
415 744 418 761 418 783  curveto
490 783 lineto
490 730 482 691 466 665  curveto
449 639 425 626 392 626  curveto
371 626 350 633 330 647  curveto
312 660 lineto
304 665 299 669 296 670  curveto
277 685 262 692 252 692  curveto
241 692 233 687 227 676  curveto
222 665 219 648 219 626  curveto
closepath
fill
		} def

	/macron
		{
42 704 moveto
42 783 lineto
457 783 lineto
457 704 lineto
42 704 lineto
closepath
fill
		} def

	/breve
		{
146 783 moveto
218 783 lineto
225 760 237 742 254 731  curveto
270 719 292 713 319 713  curveto
346 713 367 719 384 731  curveto
400 742 412 760 419 783  curveto
491 783 lineto
486 735 467 697 436 668  curveto
405 640 366 626 319 626  curveto
271 626 232 640 201 668  curveto
170 696 152 735 146 783  curveto
closepath
fill
		} def

	/dotaccent
		{
247 626 moveto
247 771 lineto
391 771 lineto
391 626 lineto
247 626 lineto
closepath
fill
		} def

	/dieresis
		{
162 626 moveto
162 734 lineto
271 734 lineto
271 626 lineto
162 626 lineto
closepath
367 626 moveto
367 734 lineto
475 734 lineto
475 626 lineto
367 626 lineto
closepath
fill
		} def

	/ring
		{
317 626 moveto
286 626 260 637 238 660  curveto
216 682 205 709 205 740  curveto
205 772 216 799 238 822  curveto
260 844 287 855 319 855  curveto
350 855 377 844 400 822  curveto
422 799 433 772 433 741  curveto
433 708 422 681 400 659  curveto
377 637 350 626 317 626  curveto
closepath
318 680 moveto
335 680 350 686 361 698  curveto
373 709 379 724 379 741  curveto
379 757 373 771 361 783  curveto
350 795 335 801 319 801  curveto
302 801 288 795 276 783  curveto
265 771 259 757 259 741  curveto
259 724 265 710 276 698  curveto
288 686 302 680 318 680  curveto
closepath
fill
		} def

	/cedilla
		{
303 0 moveto
369 0 lineto
332 -55 lineto
408 -63 445 -88 445 -131  curveto
445 -153 434 -172 410 -187  curveto
387 -203 358 -210 324 -210  curveto
297 -210 266 -206 232 -196  curveto
232 -151 lineto
255 -156 274 -159 289 -159  curveto
329 -159 349 -149 349 -129  curveto
349 -102 317 -88 253 -88  curveto
244 -88 lineto
303 0 lineto
closepath
fill
		} def

	/hungarumlaut
		{
125 0 moveto
125 625 lineto
625 625 lineto
625 0 lineto
125 0 lineto
closepath
156 31 moveto
593 31 lineto
593 593 lineto
156 593 lineto
156 31 lineto
closepath
fill
		} def

	/ogonek
		{
326 0 moveto
404 0 lineto
374 -14 351 -28 336 -42  curveto
321 -57 313 -72 313 -87  curveto
313 -103 320 -114 333 -122  curveto
346 -130 366 -134 392 -134  curveto
419 -134 441 -131 458 -126  curveto
458 -166 lineto
430 -175 397 -180 360 -180  curveto
312 -180 276 -174 252 -161  curveto
228 -148 216 -128 216 -103  curveto
216 -83 225 -65 244 -48  curveto
262 -31 289 -14 326 0  curveto
closepath
fill
		} def

	/caron
		{
503 783 moveto
385 626 lineto
252 626 lineto
134 783 lineto
222 783 lineto
318 686 lineto
319 686 lineto
416 783 lineto
503 783 lineto
closepath
fill
		} def

	/emdash
		{
96 265 moveto
96 355 lineto
542 355 lineto
542 265 lineto
96 265 lineto
closepath
fill
		} def

	/AE
		{
10 0 moveto
419 722 lineto
899 722 lineto
899 623 lineto
595 623 lineto
595 421 lineto
845 421 lineto
845 322 lineto
595 322 lineto
595 102 lineto
921 102 lineto
921 0 lineto
447 0 lineto
447 186 lineto
233 186 lineto
127 0 lineto
10 0 lineto
closepath
286 280 moveto
447 280 lineto
447 563 lineto
286 280 lineto
closepath
fill
		} def

	/ordfeminine
		{
276 439 moveto
251 414 223 401 191 401  curveto
162 401 137 410 118 429  curveto
99 447 90 470 90 499  curveto
90 573 146 611 258 611  curveto
281 611 lineto
281 634 lineto
281 664 262 680 224 680  curveto
187 680 152 670 119 650  curveto
119 719 lineto
158 734 198 741 240 741  curveto
335 741 383 707 383 639  curveto
383 498 lineto
383 478 390 469 403 469  curveto
406 469 410 469 415 470  curveto
415 409 lineto
394 404 376 401 360 401  curveto
322 401 296 414 282 439  curveto
276 439 lineto
closepath
281 497 moveto
281 552 lineto
259 552 lineto
214 552 192 537 192 507  curveto
192 482 204 469 229 469  curveto
246 469 264 479 281 497  curveto
closepath
fill
		} def

	/Lslash
		{
96 0 moveto
96 291 lineto
0 241 lineto
0 335 lineto
96 385 lineto
96 722 lineto
246 722 lineto
246 466 lineto
367 531 lineto
367 435 lineto
246 371 lineto
246 102 lineto
572 102 lineto
572 0 lineto
96 0 lineto
closepath
fill
		} def

	/Oslash
		{
411 -18 moveto
327 -18 254 2 190 43  curveto
138 -18 lineto
44 -18 lineto
136 91 lineto
75 161 44 251 44 362  curveto
44 477 77 569 143 638  curveto
209 706 298 740 410 740  curveto
494 740 568 720 630 679  curveto
683 740 lineto
777 740 lineto
685 631 lineto
746 562 777 471 777 360  curveto
777 244 744 152 677 84  curveto
611 16 522 -18 411 -18  curveto
closepath
233 207 moveto
548 581 lineto
513 621 467 641 410 641  curveto
348 641 298 616 260 565  curveto
222 514 204 446 204 361  curveto
204 308 213 256 233 207  curveto
closepath
272 141 moveto
308 101 354 81 411 81  curveto
473 81 523 107 561 157  curveto
598 208 617 277 617 362  curveto
617 416 607 467 588 516  curveto
272 141 lineto
closepath
fill
		} def

	/OE
		{
548 18 moveto
499 -6 451 -18 404 -18  curveto
296 -18 209 16 143 85  curveto
78 155 45 247 45 361  curveto
45 476 78 568 144 637  curveto
209 706 297 740 407 740  curveto
455 740 502 728 548 704  curveto
548 722 lineto
1000 722 lineto
1000 623 lineto
699 623 lineto
699 421 lineto
946 421 lineto
946 322 lineto
699 322 lineto
699 102 lineto
1023 102 lineto
1023 0 lineto
548 0 lineto
548 18 lineto
closepath
548 290 moveto
548 433 lineto
548 507 537 560 515 592  curveto
493 625 458 641 408 641  curveto
347 641 298 615 261 564  curveto
223 512 205 444 205 361  curveto
205 277 223 210 261 158  curveto
298 107 347 81 409 81  curveto
458 81 494 97 516 130  curveto
537 162 548 215 548 290  curveto
closepath
fill
		} def

	/ordmasculine
		{
238 401 moveto
185 401 142 417 111 447  curveto
79 477 63 519 63 571  curveto
63 624 79 665 111 695  curveto
142 725 186 740 241 740  curveto
295 740 339 725 370 695  curveto
402 665 417 624 417 571  curveto
417 518 402 476 370 446  curveto
339 416 295 401 238 401  curveto
closepath
240 464 moveto
281 464 302 500 302 572  curveto
302 643 282 678 241 678  curveto
199 678 179 642 179 571  curveto
179 500 199 464 240 464  curveto
closepath
fill
		} def

	/ae
		{
391 93 moveto
341 23 277 -12 201 -12  curveto
152 -12 114 1 84 30  curveto
54 58 40 95 40 142  curveto
40 201 63 246 111 277  curveto
158 309 226 325 314 325  curveto
353 325 lineto
353 375 lineto
353 431 321 459 257 459  curveto
201 459 144 443 86 411  curveto
86 511 lineto
152 535 216 548 278 548  curveto
334 548 388 528 440 489  curveto
490 528 543 548 602 548  curveto
678 548 734 523 770 473  curveto
806 423 824 345 824 239  curveto
491 239 lineto
501 137 558 85 660 85  curveto
708 85 763 97 824 119  curveto
824 18 lineto
755 -2 687 -12 619 -12  curveto
521 -12 445 23 391 93  curveto
closepath
353 135 moveto
353 244 lineto
318 244 lineto
275 244 241 236 216 220  curveto
191 204 178 183 178 156  curveto
178 136 185 119 198 106  curveto
212 92 229 85 249 85  curveto
282 85 317 102 353 135  curveto
closepath
490 320 moveto
682 320 lineto
682 413 652 459 594 459  curveto
534 459 499 413 490 320  curveto
closepath
fill
		} def

	/dotlessi
		{
90 0 moveto
90 536 lineto
234 536 lineto
234 0 lineto
90 0 lineto
closepath
fill
		} def

	/lslash
		{
108 0 moveto
108 308 lineto
5 253 lineto
5 350 lineto
108 405 lineto
108 771 lineto
252 771 lineto
252 483 lineto
355 537 lineto
355 442 lineto
252 387 lineto
252 0 lineto
108 0 lineto
closepath
fill
		} def

	/oslash
		{
42 -12 moveto
110 69 lineto
65 122 42 189 42 268  curveto
42 354 67 423 117 473  curveto
167 523 234 548 319 548  curveto
379 548 431 535 478 509  curveto
510 548 lineto
597 548 lineto
529 466 lineto
574 414 597 347 597 267  curveto
597 181 572 113 522 62  curveto
473 12 405 -12 320 -12  curveto
260 -12 207 0 162 27  curveto
129 -12 lineto
42 -12 lineto
closepath
237 117 moveto
258 91 286 78 320 78  curveto
358 78 388 95 410 128  curveto
432 162 443 208 443 267  curveto
443 295 439 323 433 352  curveto
237 117 lineto
closepath
402 418 moveto
381 444 354 458 319 458  curveto
281 458 251 441 229 407  curveto
207 373 196 327 196 268  curveto
196 240 200 212 207 184  curveto
402 418 lineto
closepath
fill
		} def

	/oe
		{
497 67 moveto
464 35 436 14 412 3  curveto
388 -6 355 -12 314 -12  curveto
232 -12 166 13 118 63  curveto
69 113 45 182 45 268  curveto
45 352 69 419 118 471  curveto
167 522 231 548 312 548  curveto
385 548 448 519 501 462  curveto
548 519 608 548 682 548  curveto
757 548 812 523 848 473  curveto
883 423 901 345 901 239  curveto
568 239 lineto
578 137 634 85 737 85  curveto
785 85 840 97 901 119  curveto
901 18 lineto
831 -2 763 -12 696 -12  curveto
619 -12 553 14 497 67  curveto
closepath
319 78 moveto
389 78 424 141 424 268  curveto
424 394 390 458 320 458  curveto
283 458 253 440 231 406  curveto
209 372 198 326 198 268  curveto
198 210 209 163 231 129  curveto
253 95 282 78 319 78  curveto
closepath
566 320 moveto
758 320 lineto
758 413 729 459 670 459  curveto
611 459 576 413 566 320  curveto
closepath
fill
		} def

	/germandbls
		{
90 0 moveto
90 552 lineto
90 706 163 783 308 783  curveto
371 783 421 771 458 748  curveto
495 725 514 694 514 655  curveto
514 624 503 593 482 563  curveto
452 521 lineto
429 490 418 467 418 453  curveto
418 432 435 408 469 379  curveto
536 325 lineto
605 268 640 210 640 153  curveto
640 102 623 62 590 32  curveto
556 2 511 -12 454 -12  curveto
408 -12 359 -3 306 14  curveto
306 114 lineto
357 90 400 78 437 78  curveto
486 78 511 98 511 138  curveto
511 159 491 186 451 219  curveto
379 279 lineto
326 322 300 364 300 404  curveto
300 428 306 451 319 474  curveto
342 514 lineto
366 556 lineto
380 580 387 604 387 626  curveto
387 671 361 694 311 694  curveto
260 694 234 659 234 590  curveto
234 0 lineto
90 0 lineto
closepath
fill
		} def

	/.notdef
		{
0 0 moveto
1000 0 lineto
1000 1000 lineto
0 1000 lineto
0 0 lineto
closepath
50 50 moveto
950 50 lineto
950 950 lineto
50 950 lineto
50 50 lineto
closepath
fill
		} def

	end				% close glyph dict. 
	currentdict			% actually put dict on the stack
	end			% close the dictionary now
	/LucidaSans-Bold exch definefont pop
/LucidaSans-Bold findfont 18.0 scalefont setfont
(0) show
Q
5.0 5.0 translate
Q
q
1 129 340 OPL
129 345
-5.0 -5.0 translate
127.0 370.0 moveto
q 1 -1 scale
/LucidaSans-Bold findfont 18.0 scalefont setfont
(5) show
Q
5.0 5.0 translate
Q
q
1 211 340 OPL
211 345
-5.0 -5.0 translate
204.0 370.0 moveto
q 1 -1 scale
/LucidaSans-Bold findfont 18.0 scalefont setfont
(10) show
Q
5.0 5.0 translate
Q
q
1 294 340 OPL
294 345
-5.0 -5.0 translate
287.0 370.0 moveto
q 1 -1 scale
/LucidaSans-Bold findfont 18.0 scalefont setfont
(15) show
Q
5.0 5.0 translate
Q
q
1 377 340 OPL
377 345
-5.0 -5.0 translate
369.0 370.0 moveto
q 1 -1 scale
/LucidaSans-Bold findfont 18.0 scalefont setfont
(20) show
Q
5.0 5.0 translate
Q
Q
q
1 46 44 OPL
43 44
1 46 110 OPL
43 110
1 46 176 OPL
43 176
1 46 241 OPL
43 241
1 46 307 OPL
43 307
1 46 340 OPL
46 11
Q
0.0 0.0 translate
q
[ 1.0 0.0 0.0 1.0 0.0 0.0 ] concat
q
1 165 19 21 rc
5.0 183.0 moveto
q 1 -1 scale
/LucidaBright-Italic findfont 18.0 scalefont setfont
(y) show
Q
Q
newpath
0.0 0.0 m
0.0 390.0 l
390.0 390.0 l
390.0 0.0 l
h
W
Q
[ 1.0 0.0 0.0 1.0 5.0 5.0 ] defaultmatrix matrix concatmatrix setmatrix
0.0 0.0 translate
q
q
1 46 340 OPL
40 340
-5.0 -5.0 translate
29.0 353.0 moveto
q 1 -1 scale
/LucidaSans-Bold findfont 18.0 scalefont setfont
(0) show
Q
5.0 5.0 translate
Q
q
1 46 274 OPL
40 274
-5.0 -5.0 translate
29.0 287.0 moveto
q 1 -1 scale
/LucidaSans-Bold findfont 18.0 scalefont setfont
(1) show
Q
5.0 5.0 translate
Q
q
1 46 208 OPL
40 208
-5.0 -5.0 translate
29.0 221.0 moveto
q 1 -1 scale
/LucidaSans-Bold findfont 18.0 scalefont setfont
(2) show
Q
5.0 5.0 translate
Q
q
1 46 143 OPL
40 143
-5.0 -5.0 translate
29.0 155.0 moveto
q 1 -1 scale
/LucidaSans-Bold findfont 18.0 scalefont setfont
(3) show
Q
5.0 5.0 translate
Q
q
1 46 77 OPL
40 77
-5.0 -5.0 translate
29.0 89.0 moveto
q 1 -1 scale
/LucidaSans-Bold findfont 18.0 scalefont setfont
(4) show
Q
5.0 5.0 translate
Q
q
1 46 11 OPL
40 11
-5.0 -5.0 translate
29.0 24.0 moveto
q 1 -1 scale
/LucidaSans-Bold findfont 18.0 scalefont setfont
(5) show
Q
5.0 5.0 translate
Q
Q
Q
Q
0 0 400 400 rc
0.0 0.0 translate
0.0 0.0 translate
1.0 w
2 J
0 j
end end restore showpage

%%Trailer
%%EOF
